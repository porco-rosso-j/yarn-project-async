import { ContractClassRegisteredEvent, PrivateKernelTailCircuitPublicInputs, Proof, PublicCallRequest, } from '@aztec/circuits.js';
import { arraySerializedSizeOfNonEmpty } from '@aztec/foundation/collection';
import { BufferReader, serializeToBuffer } from '@aztec/foundation/serialize';
import { EncryptedNoteTxL2Logs, EncryptedTxL2Logs, UnencryptedTxL2Logs } from '../logs/tx_l2_logs.js';
import { TxHash } from './tx_hash.js';
/**
 * The interface of an L2 transaction.
 */
export class Tx {
    constructor(
    /**
     * Output of the private kernel circuit for this tx.
     */
    data, 
    /**
     * Proof from the private kernel circuit.
     */
    proof, 
    /**
     * Encrypted note logs generated by the tx.
     */
    noteEncryptedLogs, 
    /**
     * Encrypted logs generated by the tx.
     */
    encryptedLogs, 
    /**
     * Unencrypted logs generated by the tx.
     */
    unencryptedLogs, 
    /**
     * Enqueued public functions from the private circuit to be run by the sequencer.
     * Preimages of the public call stack entries from the private kernel circuit output.
     */
    enqueuedPublicFunctionCalls, 
    /**
     * Public function call to be run by the sequencer as part of teardown.
     */
    publicTeardownFunctionCall) {
        this.data = data;
        this.proof = proof;
        this.noteEncryptedLogs = noteEncryptedLogs;
        this.encryptedLogs = encryptedLogs;
        this.unencryptedLogs = unencryptedLogs;
        this.enqueuedPublicFunctionCalls = enqueuedPublicFunctionCalls;
        this.publicTeardownFunctionCall = publicTeardownFunctionCall;
        const kernelPublicCallStackSize = data.numberOfPublicCallRequests();
        const totalPublicCalls = enqueuedPublicFunctionCalls.length + (publicTeardownFunctionCall.isEmpty() ? 0 : 1);
        if (kernelPublicCallStackSize !== totalPublicCalls) {
            throw new Error(`Mismatch number of enqueued public function calls in kernel circuit public inputs (expected
          ${kernelPublicCallStackSize}, got ${totalPublicCalls})`);
        }
    }
    hasPublicCalls() {
        return this.data.numberOfPublicCallRequests() > 0;
    }
    /**
     * Deserializes the Tx object from a Buffer.
     * @param buffer - Buffer or BufferReader object to deserialize.
     * @returns An instance of Tx.
     */
    static fromBuffer(buffer) {
        const reader = BufferReader.asReader(buffer);
        return new Tx(reader.readObject(PrivateKernelTailCircuitPublicInputs), reader.readObject(Proof), reader.readObject(EncryptedNoteTxL2Logs), reader.readObject(EncryptedTxL2Logs), reader.readObject(UnencryptedTxL2Logs), reader.readArray(reader.readNumber(), PublicCallRequest), reader.readObject(PublicCallRequest));
    }
    /**
     * Serializes the Tx object into a Buffer.
     * @returns Buffer representation of the Tx object.
     */
    toBuffer() {
        return serializeToBuffer([
            this.data,
            this.proof,
            this.noteEncryptedLogs,
            this.encryptedLogs,
            this.unencryptedLogs,
            this.enqueuedPublicFunctionCalls.length,
            this.enqueuedPublicFunctionCalls,
            this.publicTeardownFunctionCall,
        ]);
    }
    /**
     * Convert a Tx class object to a plain JSON object.
     * @returns A plain object with Tx properties.
     */
    toJSON() {
        return {
            data: this.data.toBuffer().toString('hex'),
            noteEncryptedLogs: this.noteEncryptedLogs.toBuffer().toString('hex'),
            encryptedLogs: this.encryptedLogs.toBuffer().toString('hex'),
            unencryptedLogs: this.unencryptedLogs.toBuffer().toString('hex'),
            proof: this.proof.toBuffer().toString('hex'),
            enqueuedPublicFunctions: this.enqueuedPublicFunctionCalls.map(f => f.toBuffer().toString('hex')) ?? [],
            publicTeardownFunctionCall: this.publicTeardownFunctionCall.toBuffer().toString('hex'),
        };
    }
    /**
     * Gets unencrypted logs emitted by this tx.
     * @param logsSource - An instance of `L2LogsSource` which can be used to obtain the logs.
     * @returns The requested logs.
     */
    getUnencryptedLogs(logsSource) {
        return logsSource.getUnencryptedLogs({ txHash: this.getTxHash() });
    }
    /**
     * Convert a plain JSON object to a Tx class object.
     * @param obj - A plain Tx JSON object.
     * @returns A Tx class object.
     */
    static fromJSON(obj) {
        const publicInputs = PrivateKernelTailCircuitPublicInputs.fromBuffer(Buffer.from(obj.data, 'hex'));
        const noteEncryptedLogs = EncryptedNoteTxL2Logs.fromBuffer(Buffer.from(obj.noteEncryptedLogs, 'hex'));
        const encryptedLogs = EncryptedTxL2Logs.fromBuffer(Buffer.from(obj.encryptedLogs, 'hex'));
        const unencryptedLogs = UnencryptedTxL2Logs.fromBuffer(Buffer.from(obj.unencryptedLogs, 'hex'));
        const proof = Buffer.from(obj.proof, 'hex');
        const enqueuedPublicFunctions = obj.enqueuedPublicFunctions
            ? obj.enqueuedPublicFunctions.map((x) => PublicCallRequest.fromBuffer(Buffer.from(x, 'hex')))
            : [];
        const publicTeardownFunctionCall = PublicCallRequest.fromBuffer(Buffer.from(obj.publicTeardownFunctionCall, 'hex'));
        return new Tx(publicInputs, Proof.fromBuffer(proof), noteEncryptedLogs, encryptedLogs, unencryptedLogs, enqueuedPublicFunctions, publicTeardownFunctionCall);
    }
    /**
     * Construct & return transaction hash.
     * @returns The transaction's hash.
     */
    getTxHash() {
        // Private kernel functions are executed client side and for this reason tx hash is already set as first nullifier
        const firstNullifier = this.data.getNonEmptyNullifiers()[0];
        if (!firstNullifier || firstNullifier.isZero()) {
            throw new Error(`Cannot get tx hash since first nullifier is missing`);
        }
        return new TxHash(firstNullifier.toBuffer());
    }
    /** Returns stats about this tx. */
    getStats() {
        return {
            txHash: this.getTxHash().toString(),
            noteEncryptedLogCount: this.noteEncryptedLogs.getTotalLogCount(),
            encryptedLogCount: this.encryptedLogs.getTotalLogCount(),
            unencryptedLogCount: this.unencryptedLogs.getTotalLogCount(),
            noteEncryptedLogSize: this.noteEncryptedLogs.getSerializedLength(),
            encryptedLogSize: this.encryptedLogs.getSerializedLength(),
            unencryptedLogSize: this.unencryptedLogs.getSerializedLength(),
            newCommitmentCount: this.data.getNonEmptyNoteHashes().length,
            newNullifierCount: this.data.getNonEmptyNullifiers().length,
            proofSize: this.proof.buffer.length,
            size: this.toBuffer().length,
            feePaymentMethod: 
            // needsTeardown? then we pay a fee
            this.data.forPublic?.needsTeardown
                ? // needsSetup? then we pay through a fee payment contract
                    this.data.forPublic?.needsSetup
                        ? // if the first call is to `approve_public_authwit`, then it's a public payment
                            this.enqueuedPublicFunctionCalls.at(-1).functionSelector.toField().toBigInt() === 0x43417bb1n
                                ? 'fpc_public'
                                : 'fpc_private'
                        : 'native'
                : 'none',
            classRegisteredCount: this.unencryptedLogs
                .unrollLogs()
                .filter(log => ContractClassRegisteredEvent.isContractClassRegisteredEvent(log.data)).length,
        };
    }
    getSize() {
        return (this.data.getSize() +
            this.proof.buffer.length +
            this.noteEncryptedLogs.getSerializedLength() +
            this.encryptedLogs.getSerializedLength() +
            this.unencryptedLogs.getSerializedLength() +
            arraySerializedSizeOfNonEmpty(this.enqueuedPublicFunctionCalls) +
            arraySerializedSizeOfNonEmpty([this.publicTeardownFunctionCall]));
    }
    /**
     * Convenience function to get a hash out of a tx or a tx-like.
     * @param tx - Tx-like object.
     * @returns - The hash.
     */
    static getHash(tx) {
        return hasHash(tx) ? tx.hash : tx.getTxHash();
    }
    /**
     * Convenience function to get array of hashes for an array of txs.
     * @param txs - The txs to get the hashes from.
     * @returns The corresponding array of hashes.
     */
    static getHashes(txs) {
        return txs.map(Tx.getHash);
    }
    /**
     * Clones a tx, making a deep copy of all fields.
     * @param tx - The transaction to be cloned.
     * @returns The cloned transaction.
     */
    static clone(tx) {
        const publicInputs = PrivateKernelTailCircuitPublicInputs.fromBuffer(tx.data.toBuffer());
        const proof = Proof.fromBuffer(tx.proof.toBuffer());
        const noteEncryptedLogs = EncryptedNoteTxL2Logs.fromBuffer(Buffer.from(tx.noteEncryptedLogs.toBuffer()));
        const encryptedLogs = EncryptedTxL2Logs.fromBuffer(tx.encryptedLogs.toBuffer());
        const unencryptedLogs = UnencryptedTxL2Logs.fromBuffer(tx.unencryptedLogs.toBuffer());
        const enqueuedPublicFunctions = tx.enqueuedPublicFunctionCalls.map(x => {
            return PublicCallRequest.fromBuffer(x.toBuffer());
        });
        const publicTeardownFunctionCall = PublicCallRequest.fromBuffer(tx.publicTeardownFunctionCall.toBuffer());
        return new Tx(publicInputs, proof, noteEncryptedLogs, encryptedLogs, unencryptedLogs, enqueuedPublicFunctions, publicTeardownFunctionCall);
    }
    /**
     * Filters out logs from functions that are not present in the provided kernel output.
     *
     * The purpose of this is to remove logs that got dropped due to a revert,
     * in which case, we only have the kernel's hashes to go on, as opposed to
     * this grouping by function maintained in this class.
     *
     * The logic therefore is to drop all FunctionLogs if any constituent hash
     * does not appear in the provided hashes: it is impossible for part of a
     * function to revert.
     *
     * @param logHashes the individual log hashes we want to keep
     * @param out the output to put passing logs in, to keep this function abstract
     */
    filterRevertedLogs(kernelOutput) {
        this.encryptedLogs = this.encryptedLogs.filter(kernelOutput.endNonRevertibleData.encryptedLogsHashes, EncryptedTxL2Logs.empty());
        this.unencryptedLogs = this.unencryptedLogs.filter(kernelOutput.endNonRevertibleData.unencryptedLogsHashes, UnencryptedTxL2Logs.empty());
        this.noteEncryptedLogs = this.noteEncryptedLogs.filter(kernelOutput.endNonRevertibleData.noteEncryptedLogsHashes, EncryptedNoteTxL2Logs.empty());
    }
}
function hasHash(tx) {
    return tx.hash !== undefined;
}
//# sourceMappingURL=data:application/json;base64,