import fs from "fs";
import path from "path";
import { MAX_KEY_VALIDATION_REQUESTS_PER_TX, MAX_NOTE_HASH_READ_REQUESTS_PER_TX, MAX_NULLIFIER_READ_REQUESTS_PER_TX, } from "../constants.gen.js";
const prelude = `
// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.
import {
  MAX_NOTE_HASH_READ_REQUESTS_PER_TX,
  MAX_KEY_VALIDATION_REQUESTS_PER_TX,
  MAX_NULLIFIER_READ_REQUESTS_PER_TX,
} from '../../constants.gen.js';
import type { PrivateKernelResetCircuitPrivateInputs } from './private_kernel_reset_circuit_private_inputs.js';
`;
function buildPrivateResetVariantsObject(variants) {
    let output = "export const PRIVATE_RESET_VARIANTS = {";
    for (const variant of variants) {
        output += `
    ${variant.tag}: {
      NOTE_HASH_PENDING_AMOUNT: ${variant.replacements.NOTE_HASH_PENDING_AMOUNT},
      NOTE_HASH_SETTLED_AMOUNT: ${variant.replacements.NOTE_HASH_SETTLED_AMOUNT},
      NULLIFIER_PENDING_AMOUNT: ${variant.replacements.NULLIFIER_PENDING_AMOUNT},
      NULLIFIER_SETTLED_AMOUNT: ${variant.replacements.NULLIFIER_SETTLED_AMOUNT},
      NULLIFIER_KEYS:  ${variant.replacements.NULLIFIER_KEYS},
    },`;
    }
    output += `
    full: {
      NOTE_HASH_PENDING_AMOUNT: MAX_NOTE_HASH_READ_REQUESTS_PER_TX,
      NOTE_HASH_SETTLED_AMOUNT: MAX_NOTE_HASH_READ_REQUESTS_PER_TX,
      NULLIFIER_PENDING_AMOUNT: MAX_NULLIFIER_READ_REQUESTS_PER_TX,
      NULLIFIER_SETTLED_AMOUNT: MAX_NULLIFIER_READ_REQUESTS_PER_TX,
      NULLIFIER_KEYS: MAX_KEY_VALIDATION_REQUESTS_PER_TX,
    },
  } as const;\n`;
    return output;
}
function buildPrivateResetVariantsType(variants) {
    let output = "export type PrivateKernelResetCircuitPrivateInputsVariants =\n";
    for (const variant of variants) {
        output += `
    | PrivateKernelResetCircuitPrivateInputs<
      ${variant.replacements.NOTE_HASH_PENDING_AMOUNT},
      ${variant.replacements.NOTE_HASH_SETTLED_AMOUNT},
      ${variant.replacements.NULLIFIER_PENDING_AMOUNT},
      ${variant.replacements.NULLIFIER_SETTLED_AMOUNT},
      ${variant.replacements.NULLIFIER_KEYS},
      '${variant.tag}'
    >
    `;
    }
    output += `
    | PrivateKernelResetCircuitPrivateInputs<
    typeof MAX_NOTE_HASH_READ_REQUESTS_PER_TX,
    typeof MAX_NOTE_HASH_READ_REQUESTS_PER_TX,
    typeof MAX_NULLIFIER_READ_REQUESTS_PER_TX,
    typeof MAX_NULLIFIER_READ_REQUESTS_PER_TX,
    typeof MAX_KEY_VALIDATION_REQUESTS_PER_TX,
    'full'
  >;`;
    return output;
}
function validateVariants(variants) {
    for (const variant of variants) {
        if (variant.replacements.NOTE_HASH_PENDING_AMOUNT >
            MAX_NOTE_HASH_READ_REQUESTS_PER_TX) {
            throw new Error(`NOTE_HASH_PENDING_AMOUNT must be less than ${MAX_NOTE_HASH_READ_REQUESTS_PER_TX}`);
        }
        if (variant.replacements.NOTE_HASH_SETTLED_AMOUNT >
            MAX_NOTE_HASH_READ_REQUESTS_PER_TX) {
            throw new Error(`NOTE_HASH_SETTLED_AMOUNT must be less than ${MAX_NOTE_HASH_READ_REQUESTS_PER_TX}`);
        }
        if (variant.replacements.NULLIFIER_PENDING_AMOUNT >
            MAX_NULLIFIER_READ_REQUESTS_PER_TX) {
            throw new Error(`NULLIFIER_PENDING_AMOUNT must be less than ${MAX_NULLIFIER_READ_REQUESTS_PER_TX}`);
        }
        if (variant.replacements.NULLIFIER_SETTLED_AMOUNT >
            MAX_NULLIFIER_READ_REQUESTS_PER_TX) {
            throw new Error(`NULLIFIER_SETTLED_AMOUNT must be less than ${MAX_NULLIFIER_READ_REQUESTS_PER_TX}`);
        }
        if (variant.replacements.NULLIFIER_KEYS > MAX_KEY_VALIDATION_REQUESTS_PER_TX) {
            throw new Error(`NULLIFIER_KEYS must be less than ${MAX_KEY_VALIDATION_REQUESTS_PER_TX}`);
        }
    }
}
const resetVariants = JSON.parse(
// fs.readFileSync(path.resolve('../../noir-projects/noir-protocol-circuits/reset_variants.json'), 'utf8'),
fs.readFileSync(path.resolve("../../../aztec-packages/noir-projects/noir-protocol-circuits/reset_variants.json"), "utf8"));
// Sort them by decreasing priority so that the bigger circuits are tried later
resetVariants.sort((a, b) => b.priority - a.priority);
validateVariants(resetVariants);
fs.writeFileSync(path.resolve("./src/structs/kernel/private_kernel_reset_circuit_private_inputs_variants.ts"), `
${prelude}

${buildPrivateResetVariantsObject(resetVariants)}

export type PrivateKernelResetTags = keyof typeof PRIVATE_RESET_VARIANTS;

${buildPrivateResetVariantsType(resetVariants)}`);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhdGVfcmVzZXRfdmFyaWFudHMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvc2NyaXB0cy9nZW5lcmF0ZV9yZXNldF92YXJpYW50cy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsTUFBTSxJQUFJLENBQUM7QUFDcEIsT0FBTyxJQUFJLE1BQU0sTUFBTSxDQUFDO0FBRXhCLE9BQU8sRUFDTixrQ0FBa0MsRUFDbEMsa0NBQWtDLEVBQ2xDLGtDQUFrQyxHQUNsQyxNQUFNLHFCQUFxQixDQUFDO0FBYzdCLE1BQU0sT0FBTyxHQUFHOzs7Ozs7OztDQVFmLENBQUM7QUFFRixTQUFTLCtCQUErQixDQUFDLFFBQXdCO0lBQ2hFLElBQUksTUFBTSxHQUFHLHlDQUF5QyxDQUFDO0lBRXZELEtBQUssTUFBTSxPQUFPLElBQUksUUFBUSxFQUFFLENBQUM7UUFDaEMsTUFBTSxJQUFJO01BQ04sT0FBTyxDQUFDLEdBQUc7a0NBQ2lCLE9BQU8sQ0FBQyxZQUFZLENBQUMsd0JBQXdCO2tDQUM3QyxPQUFPLENBQUMsWUFBWSxDQUFDLHdCQUF3QjtrQ0FDN0MsT0FBTyxDQUFDLFlBQVksQ0FBQyx3QkFBd0I7a0NBQzdDLE9BQU8sQ0FBQyxZQUFZLENBQUMsd0JBQXdCO3lCQUN0RCxPQUFPLENBQUMsWUFBWSxDQUFDLGNBQWM7T0FDckQsQ0FBQztJQUNQLENBQUM7SUFFRCxNQUFNLElBQUk7Ozs7Ozs7O2dCQVFLLENBQUM7SUFDaEIsT0FBTyxNQUFNLENBQUM7QUFDZixDQUFDO0FBRUQsU0FBUyw2QkFBNkIsQ0FBQyxRQUF3QjtJQUM5RCxJQUFJLE1BQU0sR0FBRyxnRUFBZ0UsQ0FBQztJQUU5RSxLQUFLLE1BQU0sT0FBTyxJQUFJLFFBQVEsRUFBRSxDQUFDO1FBQ2hDLE1BQU0sSUFBSTs7UUFFSixPQUFPLENBQUMsWUFBWSxDQUFDLHdCQUF3QjtRQUM3QyxPQUFPLENBQUMsWUFBWSxDQUFDLHdCQUF3QjtRQUM3QyxPQUFPLENBQUMsWUFBWSxDQUFDLHdCQUF3QjtRQUM3QyxPQUFPLENBQUMsWUFBWSxDQUFDLHdCQUF3QjtRQUM3QyxPQUFPLENBQUMsWUFBWSxDQUFDLGNBQWM7U0FDbEMsT0FBTyxDQUFDLEdBQUc7O0tBRWYsQ0FBQztJQUNMLENBQUM7SUFFRCxNQUFNLElBQUk7Ozs7Ozs7O0tBUU4sQ0FBQztJQUNMLE9BQU8sTUFBTSxDQUFDO0FBQ2YsQ0FBQztBQUVELFNBQVMsZ0JBQWdCLENBQUMsUUFBd0I7SUFDakQsS0FBSyxNQUFNLE9BQU8sSUFBSSxRQUFRLEVBQUUsQ0FBQztRQUNoQyxJQUNDLE9BQU8sQ0FBQyxZQUFZLENBQUMsd0JBQXdCO1lBQzdDLGtDQUFrQyxFQUNqQyxDQUFDO1lBQ0YsTUFBTSxJQUFJLEtBQUssQ0FDZCw4Q0FBOEMsa0NBQWtDLEVBQUUsQ0FDbEYsQ0FBQztRQUNILENBQUM7UUFDRCxJQUNDLE9BQU8sQ0FBQyxZQUFZLENBQUMsd0JBQXdCO1lBQzdDLGtDQUFrQyxFQUNqQyxDQUFDO1lBQ0YsTUFBTSxJQUFJLEtBQUssQ0FDZCw4Q0FBOEMsa0NBQWtDLEVBQUUsQ0FDbEYsQ0FBQztRQUNILENBQUM7UUFDRCxJQUNDLE9BQU8sQ0FBQyxZQUFZLENBQUMsd0JBQXdCO1lBQzdDLGtDQUFrQyxFQUNqQyxDQUFDO1lBQ0YsTUFBTSxJQUFJLEtBQUssQ0FDZCw4Q0FBOEMsa0NBQWtDLEVBQUUsQ0FDbEYsQ0FBQztRQUNILENBQUM7UUFDRCxJQUNDLE9BQU8sQ0FBQyxZQUFZLENBQUMsd0JBQXdCO1lBQzdDLGtDQUFrQyxFQUNqQyxDQUFDO1lBQ0YsTUFBTSxJQUFJLEtBQUssQ0FDZCw4Q0FBOEMsa0NBQWtDLEVBQUUsQ0FDbEYsQ0FBQztRQUNILENBQUM7UUFDRCxJQUNDLE9BQU8sQ0FBQyxZQUFZLENBQUMsY0FBYyxHQUFHLGtDQUFrQyxFQUN2RSxDQUFDO1lBQ0YsTUFBTSxJQUFJLEtBQUssQ0FDZCxvQ0FBb0Msa0NBQWtDLEVBQUUsQ0FDeEUsQ0FBQztRQUNILENBQUM7SUFDRixDQUFDO0FBQ0YsQ0FBQztBQUVELE1BQU0sYUFBYSxHQUFtQixJQUFJLENBQUMsS0FBSztBQUMvQywyR0FBMkc7QUFDM0csRUFBRSxDQUFDLFlBQVksQ0FDZCxJQUFJLENBQUMsT0FBTyxDQUNYLGtGQUFrRixDQUNsRixFQUNELE1BQU0sQ0FDTixDQUNELENBQUM7QUFFRiwrRUFBK0U7QUFDL0UsYUFBYSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxRQUFRLEdBQUcsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBRXRELGdCQUFnQixDQUFDLGFBQWEsQ0FBQyxDQUFDO0FBRWhDLEVBQUUsQ0FBQyxhQUFhLENBQ2YsSUFBSSxDQUFDLE9BQU8sQ0FDWCw4RUFBOEUsQ0FDOUUsRUFDRDtFQUNDLE9BQU87O0VBRVAsK0JBQStCLENBQUMsYUFBYSxDQUFDOzs7O0VBSTlDLDZCQUE2QixDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQy9DLENBQUMifQ==