{"transpiled":true,"noir_version":"0.31.0+6237d96a0bc23a5ed656e7ba172fb57facd9c807","name":"KeyRegistry","functions":[{"name":"rotate_npk_m","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"new_npk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":""},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/+2b3U7bQBCF18GhBoOb2HGckEAIBaTehRSScMfLtM/d60p9haqss6Mclmm0UcdLVool5LG9O+ebsz+EyERqfSSvP5GJ2+Z8rN4f1ObFnGf/dzwI5po1yRkFwtkKhPMoEM5YkDNiOPU5NrFed3rNfVLr9fjuIXbWA30Ez9W2RLZqYgJ8eC1V6Wr2fAzJEVwZ8Ng8o7PGSc0zBEtNkXUbuEeFtuAe6RzBPdrBSCcxpgjX+5RskOXyvs4+XcOJyUXcKcT4bAzWxQ3V2Jav8bGRMXn1rqExqVcx+d42uRO4pjE4NbHgb44H1I7Mz6k1F2KIR9CW2pEfLWDVx7narJfTLf1iq18GbY6hn7230DWNtfaqa2J9btOeAPkb8HCm86byed+MTWx5l0JNGXgioz1f6fxn6u0RWdfXEGfAcy7Os1578nWux+4zsMvkfXrUXnUsr84srzJogwydBvyLQJdy03WH0ZbzYrHS2l0HL7oMT9ezF11GW9CLZ62dO3iRMzy5Zy9yRlvOi+U3rV04eFEwPIVnLwpGW86Lef0ZoOfgRY/h6Xn2osdoC66Rel6UDl6UDE/p2YuS0Rb04ofW7jt40Wd4+p696DPagl5819qVgxcVw1N59qJitAX3zvrzxcDBiwHDM/DsxYDRFvRirrWHDl4MGZ6hZy+GjLbgGqm1Lxy8uGB4Ljx7QXq7MvcCZK4CZC72gDmxYhntRb1/jhy8GDE8I89e4HcuuzCXe8CcWLGM9uJJa48dvBgzPGPPXpDersx5gMxFgMz9AJnLAJmrAJn3YT4nViyjvaz30EsHLy4ZnkvPXpDersx5gMyjAJmLPWBOrFhGe1l/N3fl4MUVw3Pl2QvS25V5ECBzdw+YEyuW0V4utPbEwYsJwzPx7AXp7co8DJC5CpB5FCBzESBzP0DmMkDmwxr0w5zvATO+e/S7UZ75c2rxkGfKYlQWYwpxBozU9kXJva+SWbWT1lTcj/X42POFrqeNas9XOu+XBmrSeW/l89Z/I9yZXPQO3y3j1b2JI+FxuoO8EejQ/RjiX9CW2pEftB8Qu36X68bE91v6Tax+GbS5gX63Vj+6prHW3v00cVNzy2Ved9RmLX8Fngb2wUd8J1eBV8pipGMCPNfyPA8N1TnDd/j+KNm1N7W8OrG8yqAN7tEftW8emA/M/2LGzxMncA956F7LqgX/v2EKOf4CARQXTpY1AAA=","debug_symbols":"ndpBahtBFEXRvfTYBL2v7qpqbyWEINtyEBjZWHIgCO89UkIWkDNTVevN7uhQl+lp//Dx4/vh+Px6mu6/XqaX18fd+fB6vJ4u0+ZLjT+3p7fd8XZxOu/ez9P9tvW7aX98uv7q9Xk3PR9e9rfbfH67u41WGG03MoqMSkZbGc0yWmTUZNRlJEVspYhZipiliFmKmKWIWYqYpYhZipiliFmKmKWIRYpYpIhFilikiEWKWKSIRYpYpIhFilikiCZFNCmiSRFNimhSRJMimhTRpIgmRTQpoksRXYroUkSXIroU0aWILkV0KaJLEV2KGFLEkCKGFDGkiCFFDCliSBFDihhSxJAiVililSJWKWKVIlYpYpUiVililSJWKWKVIrLZ0Cq0KlptaTXTaqFVo1Wn1aAVtRFqI9RGqI1QG6E2Qm2E2gi1EWoj1EZRG0VtFLVR1EZRG0VtFLVR1AaBZkg0Q6QZMs0QaoZUM8SaIdcMwWZINkO0GbLNEG6GdDPEmyHfDAFnSDhDxBkyzhByhpQzxJwh5wxBZ0g6Q9QZss4Qdoa0M8SdIe8MgWdIPEPkGTLPEHqG1DPEniH3DMFnSD5D9BmyzxB+hvQzxJ8h/wwBaEhAQwQaMtAQgoYUNMSgIQcNQWhIQkMUGrLQEIaGNDTEoSEPDYFoSERDJBoy0RCKhlQ0xKIhFy1y0SIXLXLRIhctctEiFy1y0SIXLXLRIhctctEiFy1y0SIXLXLRIhctctEiFy1y0SIXLXLRIhctctEiFy1y0SIXLXLRIhcte+hJLlrkokUuWuSiRS5a5KJFLlr/7aLX08/d+2H38LK/ve29ffw4Pv576ns9nn+9/f1y/e9v"},{"name":"register_npk_and_ivpk","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"partial_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::partial_address::PartialAddress"},"visibility":"private"},{"name":"keys","type":{"fields":[{"name":"npk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"ivpk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"ovpk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"tpk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"aztec::keys::public_keys::PublicKeys"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":""},{"name":"register_ovpk_and_tpk","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"partial_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::partial_address::PartialAddress"},"visibility":"private"},{"name":"keys","type":{"fields":[{"name":"npk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"ivpk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"ovpk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"tpk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"aztec::keys::public_keys::PublicKeys"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":""}],"outputs":{"globals":{"storage":[{"fields":[{"name":"npk_m_x_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"npk_m_y_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"ivpk_m_x_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"ivpk_m_y_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"ovpk_m_x_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"ovpk_m_y_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"tpk_m_x_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"tpk_m_y_registry","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"new_npk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"KeyRegistry::rotate_npk_m_parameters"}}],"kind":"struct","path":"KeyRegistry::rotate_npk_m_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"partial_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::partial_address::PartialAddress"}},{"name":"keys","type":{"fields":[{"name":"npk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"ivpk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"ovpk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"tpk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"aztec::keys::public_keys::PublicKeys"}}],"kind":"struct","path":"KeyRegistry::register_ovpk_and_tpk_parameters"}}],"kind":"struct","path":"KeyRegistry::register_ovpk_and_tpk_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"partial_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::partial_address::PartialAddress"}},{"name":"keys","type":{"fields":[{"name":"npk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"ivpk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"ovpk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"tpk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"aztec::keys::public_keys::PublicKeys"}}],"kind":"struct","path":"KeyRegistry::register_npk_and_ivpk_parameters"}}],"kind":"struct","path":"KeyRegistry::register_npk_and_ivpk_abi"}]}},"file_map":{"144":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{hash::pedersen_hash, storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"155":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_delay_change.nr","source":"use dep::protocol_types::traits::{Serialize, Deserialize, FromField, ToField};\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to store the minimum delay with which a ScheduledValueChange object can\n// schedule a change.\n// This delay is initally equal to INITIAL_DELAY, and can be safely mutated to any other value over time. This mutation \n// is performed via `schedule_change` in order to satisfy ScheduleValueChange constraints: if e.g. we allowed for the \n// delay to be decreased immediately then it'd be possible for the state variable to schedule a value change with a \n// reduced delay, invalidating prior private reads.\nstruct ScheduledDelayChange<INITIAL_DELAY> {\n    // Both pre and post are stored in public storage, so by default they are zeroed. By wrapping them in an Option, \n    // they default to Option::none(), which we detect and replace with INITIAL_DELAY. The end result is that a\n    // ScheduledDelayChange that has not been initialized has a delay equal to INITIAL_DELAY, which is the desired\n    // effect. Once initialized, the Option will never be none again.\n    pre: Option<u32>,\n    post: Option<u32>,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n    // The _dummy variable forces INITIAL_DELAY to be interpreted as a numeric value. This is a workaround to\n    // https://github.com/noir-lang/noir/issues/4633. Remove once resolved.\n    _dummy: [Field; INITIAL_DELAY],\n}\n\nimpl<INITIAL_DELAY> ScheduledDelayChange<INITIAL_DELAY> {\n    pub fn new(pre: Option<u32>, post: Option<u32>, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change, _dummy: [0; INITIAL_DELAY] }\n    }\n\n    /// Returns the current value of the delay stored in the data structure.\n    /// This function only returns a meaningful value when called in public with the current block number - for\n    /// historical private reads use `get_effective_minimum_delay_at` instead.\n    pub fn get_current(self, current_block_number: u32) -> u32 {\n        // The post value becomes the current one at the block of change, so any transaction that is included in the\n        // block of change will use the post value.\n\n        if current_block_number < self.block_of_change {\n            self.pre.unwrap_or(INITIAL_DELAY)\n        } else {\n            self.post.unwrap_or(INITIAL_DELAY)\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change delay and the block at which it will become the current\n    /// delay. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (u32, u32) {\n        (self.post.unwrap_or(INITIAL_DELAY), self.block_of_change)\n    }\n\n    /// Mutates the delay change by scheduling a change at the current block number. This function is only meaningful\n    /// when called in public with the current block number.\n    /// The block at which the new delay will become effective is determined automatically:\n    ///  - when increasing the delay, the change is effective immediately\n    ///  - when reducing the delay, the change will take effect after a delay equal to the difference between old and\n    ///    new delay. For example, if reducing from 3 days to 1 day, the reduction will be scheduled to happen after 2\n    ///    days.\n    pub fn schedule_change(&mut self, new: u32, current_block_number: u32) {\n        let current = self.get_current(current_block_number);\n\n        // When changing the delay value we must ensure that it is not possible to produce a value change with a delay\n        // shorter than the current one.\n        let blocks_until_change = if new > current {\n            // Increasing the delay value can therefore be done immediately: this does not invalidate prior contraints\n            // about how quickly a value might be changed (indeed it strengthens them).\n            0\n        } else {\n            // Decreasing the delay requires waiting for the difference between current and new delay in order to ensure\n            // that overall the current delay is respected.\n            //\n            //      current                    delay              earliest value block of change\n            //       block                 block of change         if delay remained unchanged\n            //  =======N=========================|================================X=================>\n            //         ^                         ^                                ^\n            //         |-------------------------|--------------------------------|\n            //         |   blocks until change               new delay            |\n            //         ------------------------------------------------------------\n            //                            current delay\n            current - new\n        };\n\n        self.pre = Option::some(current);\n        self.post = Option::some(new);\n        self.block_of_change = current_block_number + blocks_until_change;\n    }\n\n    /// Returns the minimum delay before a value might mutate due to a scheduled change, from the perspective of some\n    /// historical block number. It only returns a meaningful value when called in private with historical blocks. This \n    /// function can be used alongside `ScheduledValueChange.get_block_horizon` to properly constrain the\n    /// `max_block_number` transaction property when reading mutable shared state.\n    /// This value typically equals the current delay at the block following the historical one (the earliest one in\n    /// which a value change could be scheduled), but it also considers scenarios in which a delay reduction is \n    /// scheduled to happen in the near future, resulting in a way to schedule a change with an overall delay lower than\n    /// the current one.\n    pub fn get_effective_minimum_delay_at(self, historical_block_number: u32) -> u32 {\n        if self.block_of_change <= historical_block_number {\n            // If no delay changes were scheduled, then the delay value at the historical block (post) is guaranteed to\n            // hold due to how further delay changes would be scheduled by `schedule_change`.\n            self.post.unwrap_or(INITIAL_DELAY)\n        } else {\n            // If a change is scheduled, then the effective delay might be lower than the current one (pre). At the\n            // block of change the current delay will be the scheduled one, with an overall delay from the historical\n            // block number equal to the number of blocks until the change plus the new delay. If this value is lower\n            // than the current delay, then that is the effective minimum delay.\n            //\n            //       historical\n            //         block                  delay                  actual earliest value\n            //           v                block of change              block of change\n            //  =========NS=====================|=============================X===========Y=====>\n            //            ^                     ^                             ^           ^\n            //     earliest block in            |                             |           |\n            //   which to schedule change       |                             |           |\n            //           |                      |                             |           |\n            //           |----------------------|------------------------------           |\n            //           |         blocks                  new delay                      |\n            //           |      until change                                              |\n            //           |                                                                |\n            //           |----------------------------------------------------------------|\n            //                        current delay at the earliest block in \n            //                             which to scheduled value change\n\n            let blocks_until_change = self.block_of_change - (historical_block_number + 1);\n\n            min(\n                self.pre.unwrap_or(INITIAL_DELAY),\n                blocks_until_change + self.post.unwrap_or(INITIAL_DELAY)\n            )\n        }\n    }\n}\n\nimpl<INITIAL_DELAY> Serialize<1> for ScheduledDelayChange<INITIAL_DELAY> {\n    fn serialize(self) -> [Field; 1] {\n        // We pack all three u32 values into a single U128, which is made up of two u64 limbs.\n        // Low limb: [ pre_inner: u32 | post_inner: u32 ]\n        // High limb: [ empty | pre_is_some: u8 |  post_is_some: u8 | block_of_change: u32 ]\n\n        let lo = ((self.pre.unwrap_unchecked() as u64) * (1 << 32))\n            + (self.post.unwrap_unchecked() as u64);\n\n        let hi = (self.pre.is_some() as u64) * (1 << 33) \n            + (self.post.is_some() as u64 * (1 << 32)) \n            + self.block_of_change as u64;\n\n        let packed = U128::from_u64s_le(lo, hi);\n\n        [packed.to_integer()]\n    }\n}\n\nimpl<INITIAL_DELAY> Deserialize<1> for ScheduledDelayChange<INITIAL_DELAY> {\n    fn deserialize(input: [Field; 1]) -> Self {\n        let packed = U128::from_integer(input[0]);\n\n        // We use division and modulo to clear the bits that correspond to other values when unpacking.\n\n        let pre_is_some = ((packed.hi as u64) / (1 << 33)) as bool;\n        let pre_inner = ((packed.lo as u64) / (1 << 32)) as u32;\n\n        let post_is_some = (((packed.hi as u64) / (1 << 32)) % (1 << 1)) as bool;\n        let post_inner = ((packed.lo as u64) % (1 << 32)) as u32;\n\n        let block_of_change = ((packed.hi as u64) % (1 << 32)) as u32;\n\n        Self {\n            pre: if pre_is_some { Option::some(pre_inner) } else { Option::none() },\n            post: if post_is_some { Option::some(post_inner) } else { Option::none() },\n            block_of_change,\n            _dummy: [0; INITIAL_DELAY],\n        }\n    }\n}\n\nimpl<INITIAL_DELAY> Eq for ScheduledDelayChange<INITIAL_DELAY> {\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre) & (self.post == other.post) & (self.block_of_change == other.block_of_change)\n    }\n}\n"},"159":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_value_change.nr","source":"use dep::protocol_types::traits::{Serialize, Deserialize, FromField, ToField};\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to represent a value that changes from `pre` to `post` at some block\n// called the `block_of_change`. The value can only be made to change by scheduling a change event at some future block\n// of change after some minimum delay measured in blocks has elapsed. This means that at any given block number we know\n// both the current value and the smallest block number at which the value might change - this is called the\n// 'block horizon'.\nstruct ScheduledValueChange<T> {\n    pre: T,\n    post: T,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n}\n\nimpl<T> ScheduledValueChange<T> {\n    pub fn new(pre: T, post: T, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the value stored in the data structure at a given block. This function can be called both in public\n    /// (where `block_number` is simply the current block number, i.e. the number of the block in which the current\n    /// transaction will be included) and in private (where `block_number` is the historical block number that is used\n    /// to construct the proof).\n    /// Reading in private is only safe if the transaction's `max_block_number` property is set to a value lower or\n    /// equal to the block horizon (see `get_block_horizon()`).\n    pub fn get_current_at(self, block_number: u32) -> T {\n        // The post value becomes the current one at the block of change. This means different things in each realm:\n        // - in public, any transaction that is included in the block of change will use the post value\n        // - in private, any transaction that includes the block of change as part of the historical state will use the\n        //   post value (barring any follow-up changes)\n\n        if block_number < self.block_of_change {\n            self.pre\n        } else {\n            self.post\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change value and the block at which it will become the current\n    /// value. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (T, u32) {\n        (self.post, self.block_of_change)\n    }\n\n    /// Returns the largest block number at which the value returned by `get_current_at` is known to remain the current\n    /// value. This value is only meaningful in private when constructing a proof at some `historical_block_number`,\n    /// since due to its asynchronous nature private execution cannot know about any later scheduled changes.\n    /// The caller of this function must know how quickly the value can change due to a scheduled change in the form of\n    /// `minimum_delay`. If the delay itself is immutable, then this is just its duration. If the delay is mutable\n    /// however, then this value is the 'effective minimum delay' (obtained by calling\n    /// `ScheduledDelayChange.get_effective_minimum_delay_at`), which equals the minimum number of blocks that need to\n    /// elapse from the next block until the value changes, regardless of further delay changes.\n    /// The value returned by `get_current_at` in private when called with a historical block number is only safe to use\n    /// if the transaction's `max_block_number` property is set to a value lower or equal to the block horizon computed\n    /// using the same historical block number.\n    pub fn get_block_horizon(self, historical_block_number: u32, minimum_delay: u32) -> u32 {\n        // The block horizon is the very last block in which the current value is known. Any block past the horizon\n        // (i.e. with a block number larger than the block horizon) may have a different current value. Reading the\n        // current value in private typically requires constraining the maximum valid block number to be equal to the\n        // block horizon.\n\n        if historical_block_number >= self.block_of_change {\n            // Once the block of change has been mined, the current value (post) will not change unless a new value\n            // change is scheduled. This did not happen at the historical block number (or else it would not be\n            // greater or equal to the block of change), and therefore could only happen after the historical block\n            // number. The earliest would be the immediate next block, and so the smallest possible next block of change\n            // equals `historical_block_number + 1 + minimum_delay`. Our block horizon is simply the previous block to\n            // that one.\n            //\n            //      block of      historical\n            //       change         block            block horizon\n            //   =======|=============N===================H===========>\n            //                         ^                   ^\n            //                         ---------------------\n            //                             minimum delay\n\n            historical_block_number + minimum_delay\n        } else {\n            // If the block of change has not yet been mined however, then there are two possible scenarios.\n            //   a) It could be so far into the future that the block horizon is actually determined by the minimum\n            //      delay, because a new change could be scheduled and take place _before_ the currently scheduled one.\n            //      This is similar to the scenario where the block of change is in the past: the time horizon is the\n            //      block prior to the earliest one in which a new block of change might land.\n            //\n            //         historical\n            //           block                        block horizon      block of change\n            //        =====N=================================H=================|=========>\n            //              ^                                 ^\n            //              |                                 |\n            //              -----------------------------------\n            //                        minimum delay\n            //\n            //   b) It could be fewer than `minimum_delay` blocks away from the historical block number, in which case\n            //      the block of change would become the limiting factor for the time horizon, which would equal the\n            //      block right before the block of change (since by definition the value changes at the block of\n            //      change).\n            //\n            //           historical                         block horizon\n            //             block     block of change       if not scheduled\n            //        =======N=============|===================H=================>\n            //                ^           ^                     ^\n            //                |     actual horizon              |\n            //                -----------------------------------\n            //                          minimum delay\n            //\n            // Note that the current implementation does not allow the caller to set the block of change to an arbitrary\n            // value, and therefore scenario a) is not currently possible. However implementing #5501 would allow for\n            // this to happen.\n\n            // Because historical_block_number < self.block_of_change, then block_of_change > 0 and we can safely\n            // subtract 1.\n            min(\n                self.block_of_change - 1,\n                historical_block_number + minimum_delay\n            )\n        }\n    }\n\n    /// Mutates the value by scheduling a change at the current block number. This function is only meaningful when\n    /// called in public with the current block number.\n    pub fn schedule_change(\n        &mut self,\n        new_value: T,\n        current_block_number: u32,\n        minimum_delay: u32,\n        block_of_change: u32\n    ) {\n        assert(block_of_change >= current_block_number + minimum_delay);\n\n        self.pre = self.get_current_at(current_block_number);\n        self.post = new_value;\n        self.block_of_change = block_of_change;\n    }\n}\n\nimpl<T> Serialize<3> for ScheduledValueChange<T> {\n    fn serialize(self) -> [Field; 3] where T: ToField {\n        [self.pre.to_field(), self.post.to_field(), self.block_of_change.to_field()]\n    }\n}\n\nimpl<T> Deserialize<3> for ScheduledValueChange<T> {\n  fn deserialize(input: [Field; 3]) -> Self  where T: FromField {\n    Self {\n        pre: FromField::from_field(input[0]),\n        post: FromField::from_field(input[1]),\n        block_of_change: FromField::from_field(input[2]),\n    }\n  }\n}\n\nimpl<T> Eq for ScheduledValueChange<T>  {\n    fn eq(self, other: Self) -> bool where T: Eq {\n        (self.pre == other.pre) & (self.post == other.post) & (self.block_of_change == other.block_of_change)\n    }\n}\n"},"160":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/shared_mutable.nr","source":"use dep::protocol_types::{\n    hash::{pedersen_hash, poseidon2_hash}, header::Header, address::AztecAddress,\n    traits::{FromField, ToField}\n};\n\nuse crate::context::{PrivateContext, PublicContext};\nuse crate::state_vars::{\n    storage::Storage,\n    shared_mutable::{scheduled_value_change::ScheduledValueChange, scheduled_delay_change::ScheduledDelayChange}\n};\nuse crate::oracle::storage::storage_read;\nuse dep::std::unsafe::zeroed;\n\nmod test;\n\nstruct SharedMutable<T, INITIAL_DELAY, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n\n// This will make the Aztec macros require that T implements the Serialize<N> trait, and allocate N storage slots to\n// this state variable. This is incorrect, since what we actually store is:\n//  - a ScheduledValueChange<T>, which requires 1 + 2 * M storage slots, where M is the serialization length of T\n//  - a ScheduledDelayChange, which requires another storage slot\n//\n// TODO https://github.com/AztecProtocol/aztec-packages/issues/5736: change the storage allocation scheme so that we\n// can actually use it here\nimpl<T, INITIAL_DELAY, Context> Storage<T> for SharedMutable<T, INITIAL_DELAY, Context> {}\n\n// TODO: extract into a utils module once  we can do arithmetic on generics, i.e. https://github.com/noir-lang/noir/issues/4784\nfn concat_arrays<N, M, O>(arr_n: [Field; N], arr_m: [Field; M]) -> [Field; O] {\n    assert_eq(N + M, O);\n    let mut out: [Field; O] = [0; O];\n    for i in 0..N {\n        out[i] = arr_n[i];\n    }\n    for i in 0..M {\n        out[N+i] = arr_m[i];\n    }\n    out\n}\n\n// SharedMutable<T> stores a value of type T that is:\n//  - publicly known (i.e. unencrypted)\n//  - mutable in public\n//  - readable in private with no contention (i.e. multiple parties can all read the same value without blocking one\n//    another nor needing to coordinate)\n// This is famously a hard problem to solve. SharedMutable makes it work by introducing a delay to public mutation:\n// the value is not changed immediately but rather a value change is scheduled to happen in the future after some delay\n// measured in blocks. Reads in private are only valid as long as they are included in a block not too far into the\n// future, so that they can guarantee the value will not have possibly changed by then (because of the delay).\n// The delay for changing a value is initially equal to INITIAL_DELAY, but can be changed by calling\n// `schedule_delay_change`.\nimpl<T, INITIAL_DELAY, Context> SharedMutable<T, INITIAL_DELAY, Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n\n    fn hash_scheduled_data(\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>\n    ) -> Field where T: ToField {\n        // TODO(#5491 and https://github.com/noir-lang/noir/issues/4784): update this so that we don't need to rely on\n        // ScheduledValueChange serializing to 3 and ScheduledDelayChange serializing to 1\n        let concatenated: [Field; 4] = concat_arrays(value_change.serialize(), delay_change.serialize());\n        poseidon2_hash(concatenated)\n    }\n\n    // Since we can't rely on the native storage allocation scheme, we hash the storage slot to get a unique location in\n    // which we can safely store as much data as we need.\n    // See https://github.com/AztecProtocol/aztec-packages/issues/5492 and\n    // https://github.com/AztecProtocol/aztec-packages/issues/5736\n    // We store three things in public storage:\n    //  - a ScheduledValueChange\n    //  - a ScheduledDelaChange\n    //  - the hash of both of these (via `hash_scheduled_data`)\n    fn get_value_change_storage_slot(self) -> Field {\n        pedersen_hash([self.storage_slot, 0], 0)\n    }\n\n    fn get_delay_change_storage_slot(self) -> Field {\n        pedersen_hash([self.storage_slot, 1], 0)\n    }\n\n    fn get_hash_storage_slot(self) -> Field {\n        pedersen_hash([self.storage_slot, 2], 0)\n    }\n\n    // It may seem odd that we take a header and address instead of reading from e.g. a PrivateContext, but this lets us\n    // reuse this function in SharedMutablePrivateGetter.\n    fn historical_read_from_public_storage(\n        self,\n        header: Header,\n        address: AztecAddress\n    ) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>, u32) where T: FromField + ToField + Eq {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for both the ScheduledValueChange and\n        // ScheduledDelayChange, but that'd require one full sibling path per storage slot (since due to kernel siloing\n        // the storage is not contiguous), and in the best case in which T is a single field that'd be 4 slots.\n        // Instead, we get an oracle to provide us the correct values for both the value and delay changes, and instead\n        // prove inclusion of their hash, which is both a much smaller proof (a single slot), and also independent of\n        // the size of T.\n        let (value_change_hint, delay_change_hint) = get_public_storage_hints(address, self.storage_slot, historical_block_number);\n\n        // Ideally the following would be simply public_storage::read_historical, but we can't implement that yet.\n        let hash = header.public_storage_historical_read(self.get_hash_storage_slot(), address);\n\n        // @todo This is written strangely to bypass a formatting issue with the if that is breaking ci.\n        let (a, b, c) = if hash != 0 {\n            let a = SharedMutable::hash_scheduled_data(value_change_hint, delay_change_hint);\n            (a, value_change_hint, delay_change_hint)\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized, meaning no value or delay change was ever\n            // scheduled. Therefore, the hints must then correspond to uninitialized scheduled changes.\n            let b = ScheduledValueChange::deserialize(zeroed());\n            let c = ScheduledDelayChange::deserialize(zeroed());\n            (hash, b, c)\n        };\n\n        assert_eq(hash, a, \"Hint values do not match hash\");\n        assert_eq(value_change_hint, b, \"Non-zero value change for zero hash\");\n        assert_eq(delay_change_hint, c, \"Non-zero delay change for zero hash\");\n\n        (value_change_hint, delay_change_hint, historical_block_number)\n    }\n}\n\nimpl<T, INITIAL_DELAY> SharedMutable<T, INITIAL_DELAY, &mut PublicContext> {\n    pub fn schedule_value_change(self, new_value: T) where T: ToField {\n        let mut value_change = self.read_value_change();\n        let delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n        let current_delay = delay_change.get_current(block_number);\n\n        // TODO: make this configurable\n        // https://github.com/AztecProtocol/aztec-packages/issues/5501\n        let block_of_change = block_number + current_delay;\n        value_change.schedule_change(new_value, block_number, current_delay, block_of_change);\n\n        self.write(value_change, delay_change);\n    }\n\n    pub fn schedule_delay_change(self, new_delay: u32) where T: ToField {\n        let mut delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n\n        delay_change.schedule_change(new_delay, block_number);\n\n        self.write(self.read_value_change(), delay_change);\n    }\n\n    pub fn get_current_value_in_public(self) -> T {\n        let block_number = self.context.block_number() as u32;\n        self.read_value_change().get_current_at(block_number)\n    }\n\n    pub fn get_current_delay_in_public(self) -> u32 {\n        let block_number = self.context.block_number() as u32;\n        self.read_delay_change().get_current(block_number)\n    }\n\n    pub fn get_scheduled_value_in_public(self) -> (T, u32) {\n        self.read_value_change().get_scheduled()\n    }\n\n    pub fn get_scheduled_delay_in_public(self) -> (u32, u32) {\n        self.read_delay_change().get_scheduled()\n    }\n\n    fn read_value_change(self) -> ScheduledValueChange<T> {\n        self.context.storage_read(self.get_value_change_storage_slot())\n    }\n\n    fn read_delay_change(self) -> ScheduledDelayChange<INITIAL_DELAY> {\n        self.context.storage_read(self.get_delay_change_storage_slot())\n    }\n\n    fn write(\n        self,\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>\n    ) where T: ToField {\n        // Whenever we write to public storage, we write both the value change and delay change as well as the hash of\n        // them both. This guarantees that the hash is always kept up to date.\n        // While this makes for more costly writes, it also makes private proofs much simpler because they only need to\n        // produce a historical proof for the hash, which results in a single inclusion proof (as opposed to 4 in the\n        // best case scenario in which T is a single field). Private shared mutable reads are assumed to be much more\n        // frequent than public writes, so this tradeoff makes sense.\n        self.context.storage_write(self.get_value_change_storage_slot(), value_change);\n        self.context.storage_write(self.get_delay_change_storage_slot(), delay_change);\n        self.context.storage_write(\n            self.get_hash_storage_slot(),\n            SharedMutable::hash_scheduled_data(value_change, delay_change)\n        );\n    }\n}\n\nimpl<T, INITIAL_DELAY> SharedMutable<T, INITIAL_DELAY, &mut PrivateContext> {\n    pub fn get_current_value_in_private(self) -> T where T: FromField + ToField + Eq {\n        // When reading the current value in private we construct a historical state proof for the public value.\n        // However, since this value might change, we must constrain the maximum transaction block number as this proof\n        // will only be valid for however many blocks we can ensure the value will not change, which will depend on the\n        // current delay and any scheduled delay changes.\n\n        let (value_change, delay_change, historical_block_number) = self.historical_read_from_public_storage(self.context.get_header(), self.context.this_address());\n\n        // We use the effective minimum delay as opposed to the current delay at the historical block as this one also\n        // takes into consideration any scheduled delay changes.\n        // For example, consider a scenario in which at block 200 the current delay was 50. We may naively think that\n        // the earliest we could change the value would be at block 251 by scheduling immediately after the historical\n        // block, i.e. at block 201. But if there was a delay change scheduled for block 210 to reduce the delay to 20\n        // blocks, then if a value change was scheduled at block 210 it would go into effect at block 230, which is\n        // earlier than what we'd expect if we only considered the current delay.\n        let effective_minimum_delay = delay_change.get_effective_minimum_delay_at(historical_block_number);\n        let block_horizon = value_change.get_block_horizon(historical_block_number, effective_minimum_delay);\n\n        // We prevent this transaction from being included in any block after the block horizon, ensuring that the\n        // historical public value matches the current one, since it can only change after the horizon.\n        self.context.set_tx_max_block_number(block_horizon);\n        value_change.get_current_at(historical_block_number)\n    }\n}\n\nunconstrained fn get_public_storage_hints<T, INITIAL_DELAY>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>) {\n    // This function cannot be part of the &mut PrivateContext impl because that'd mean that by passing `self` we'd also\n    // be passing a mutable reference to an unconstrained function, which is not allowed. We therefore create a dummy\n    // state variable here so that we can access the methods to compute storage slots. This will all be removed in the\n    // future once we do proper storage slot allocation (#5492).\n    let dummy = SharedMutable::new((), storage_slot);\n\n    (\n        storage_read(address, dummy.get_value_change_storage_slot(), block_number), storage_read(address, dummy.get_delay_change_storage_slot(), block_number)\n    )\n}\n"},"193":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"},"21":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\nstruct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    fn new(x: Field, y: Field, is_infinite: bool) -> Self {\n        Self { x, y, is_infinite }\n    }\n\n    fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    fn neg(self) -> EmbeddedCurvePoint { \n        EmbeddedCurvePoint {\n            x: self.x,\n            y: -self.y,\n            is_infinite: self.is_infinite\n        }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite) | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n// Scalar represented as low and high limbs\nstruct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    pub fn derive_public_key(self) -> EmbeddedCurvePoint {\n        let public_key = fixed_base_scalar_mul(self.lo, self.hi);\n        EmbeddedCurvePoint { x: public_key[0], y: public_key[1], is_infinite: false }\n    }\n\n    #[field(bn254)]\n    fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, key: EmbeddedCurveScalar) -> bool {\n        (key.hi == self.hi) & (key.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n#[foreign(multi_scalar_mul)]\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> [Field; 3]\n// docs:end:multi_scalar_mul\n{}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(\n    scalar_low: Field,\n    scalar_high: Field\n) -> [Field; 3]\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    let scalar = EmbeddedCurveScalar { lo: scalar_low, hi: scalar_high };\n    multi_scalar_mul([g1], [scalar])\n}\n\n// This is a hack as returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\nfn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint\n) -> EmbeddedCurvePoint\n// docs:end:embedded_curve_add\n{\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n    EmbeddedCurvePoint { x, y, is_infinite: point_array[2] == 1 }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n"},"229":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::pedersen_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n"},"23":{"path":"std/field/mod.nr","source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n"},"234":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U64_SERIALIZED_LEN: Field = 1;\nglobal U128_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n"},"235":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<N> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<N> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\nimpl<N> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let mut result = [0; N];\n        let bytes: [u8; N] = self.as_bytes();\n        for i in 0..N {\n            result[i] = field_from_bytes([bytes[i];1], true);\n        }\n        result\n    }\n}\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<N> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n"},"240":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path, messaging::l2_to_l1_message::ScopedL2ToL1Message,\n    recursion::verification_key::VerificationKey, traits::is_empty,\n    utils::field::field_from_bytes_32_trunc\n};\nuse std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    pedersen_hash(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, inner_note_hash: Field) -> Field {\n    let inputs = [nonce, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_encrypted_log_hash(address: AztecAddress, randomness: Field, log_hash: Field) -> Field {\n    // TODO: Using 0 GENERATOR_INDEX here as interim before we move to posiedon\n    // NB: A unique separator will be needed for masked_contract_address\n    let mut masked_contract_address = pedersen_hash([address.to_field(), randomness], 0);\n    if randomness == 0 {\n        // In some cases, we actually want to reveal the contract address we are siloing with:\n        // e.g. 'handshaking' contract w/ known address\n        // An app providing randomness = 0 signals to not mask the address.\n        masked_contract_address = address.to_field();\n    }\n    accumulate_sha256([masked_contract_address, log_hash])\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedEncryptedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_encrypted_log_hash(\n            log_hash.contract_address,\n            log_hash.log_hash.randomness,\n            log_hash.log_hash.value\n        )\n    }\n}\n\npub fn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly. \npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<N>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n"},"273":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes = field.to_be_bytes(31);\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2 = field.to_be_bytes(31);\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n"},"290":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId, hash::poseidon2_hash,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash([pub_keys_hash.to_field(), partial_address.to_field(), GENERATOR_INDEX__CONTRACT_ADDRESS_V1])\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x1b6ead051e7b42665064ca6cf1ec77da0a36d86e00d1ff6e44077966c0c3a9fa;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"30":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\nglobal RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) -> [Field; RATE] {\n        // zero-pad the cache\n        for i in 0..RATE {\n            if i >= self.cache_size {\n                self.cache[i] = 0;\n            }\n        }\n        // add the cache into sponge state\n        for i in 0..RATE {\n            self.state[i] += self.cache[i];\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n        // return `RATE` number of field elements from the sponge state.\n        let mut result = [0; RATE];\n        for i in 0..RATE {\n            result[i] = self.state[i];\n        }\n        result\n    }\n\n    fn absorb(&mut self, input: Field) {\n        if (!self.squeeze_mode) & (self.cache_size == RATE) {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            let _ = self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else if (!self.squeeze_mode) & (self.cache_size != RATE) {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        } else if self.squeeze_mode {\n            // If we're in squeeze mode, switch to absorb mode and add the input into the cache.\n            // N.B. I don't think this code path can be reached?!\n            self.cache[0] = input;\n            self.cache_size = 1;\n            self.squeeze_mode = false;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        if self.squeeze_mode & (self.cache_size == 0) {\n            // If we're in squeze mode and the cache is empty, there is nothing left to squeeze out of the sponge!\n            // Switch to absorb mode.\n            self.squeeze_mode = false;\n            self.cache_size = 0;\n        }\n        if !self.squeeze_mode {\n            // If we're in absorb mode, apply sponge permutation to compress the cache, populate cache with compressed\n            // state and switch to squeeze mode. Note: this code block will execute if the previous `if` condition was\n            // matched\n            let new_output_elements = self.perform_duplex();\n            self.squeeze_mode = true;\n            for i in 0..RATE {\n                self.cache[i] = new_output_elements[i];\n            }\n            self.cache_size = RATE;\n        }\n        // By this point, we should have a non-empty cache. Pop one item off the top of the cache and return it.\n        let result = self.cache[0];\n        for i in 1..RATE {\n            if i < self.cache_size {\n                self.cache[i - 1] = self.cache[i];\n            }\n        }\n        self.cache_size -= 1;\n        self.cache[self.cache_size] = 0;\n        result\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n"},"361":{"path":"/usr/src/noir-projects/noir-contracts/contracts/key_registry_contract/src/main.nr","source":"contract KeyRegistry {\n    use dep::authwit::auth::assert_current_call_valid_authwit_public;\n\n    use dep::aztec::{\n        keys::PublicKeys, state_vars::{SharedMutable, Map},\n        protocol_types::{point::Point, address::{AztecAddress, PartialAddress}}\n    };\n\n    global KEY_ROTATION_DELAY = 5;\n\n    #[aztec(storage)]\n  struct Storage {\n    // The following stores a hash of individual master public keys\n    // If you change slots of vars below, you must update the slots in `SharedMutablePrivateGetter` in aztec-nr/keys.\n    // We store x and y coordinates in individual shared mutables as shared mutable currently supports only 1 field\n    npk_m_x_registry: Map<AztecAddress, SharedMutable<Field, KEY_ROTATION_DELAY>>,\n    npk_m_y_registry: Map<AztecAddress, SharedMutable<Field, KEY_ROTATION_DELAY>>,\n\n    ivpk_m_x_registry: Map<AztecAddress, SharedMutable<Field, KEY_ROTATION_DELAY>>,\n    ivpk_m_y_registry: Map<AztecAddress, SharedMutable<Field, KEY_ROTATION_DELAY>>,\n    \n    ovpk_m_x_registry: Map<AztecAddress, SharedMutable<Field, KEY_ROTATION_DELAY>>,\n    ovpk_m_y_registry: Map<AztecAddress, SharedMutable<Field, KEY_ROTATION_DELAY>>,\n    \n    tpk_m_x_registry: Map<AztecAddress, SharedMutable<Field, KEY_ROTATION_DELAY>>,\n    tpk_m_y_registry: Map<AztecAddress, SharedMutable<Field, KEY_ROTATION_DELAY>>,\n  }\n\n    #[aztec(public)]\n  fn rotate_npk_m(address: AztecAddress, new_npk_m: Point, nonce: Field) {\n        // TODO: (#6137)\n        if (!address.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, address);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let npk_m_x_registry = storage.npk_m_x_registry.at(address);\n        let npk_m_y_registry = storage.npk_m_y_registry.at(address);\n        npk_m_x_registry.schedule_value_change(new_npk_m.x);\n        npk_m_y_registry.schedule_value_change(new_npk_m.y);\n    }\n\n    // We need to have two separate register functions because a single one would produce too many storage writes, since\n    // each SharedMutable.schedule_value_change call results in 5 writes (pre, post, block_of_change, delay and hash),\n    // totaling 40 writes, while the kernels only accept up to 32 writes.\n    // Once SharedMutable accepts multi-field values, we can have a single state variable hold all keys, and that way\n    // also have a single block of change, hash, and delay.\n    // TODO (#5491): make this be a single function with a single schedule call.\n\n    #[aztec(public)]\n  fn register_npk_and_ivpk(address: AztecAddress, partial_address: PartialAddress, keys: PublicKeys) {\n        let computed_address = AztecAddress::compute(keys.hash(), partial_address);\n\n        assert(computed_address.eq(address), \"Computed address does not match supplied address\");\n\n        let npk_m_x_registry = storage.npk_m_x_registry.at(address);\n        let npk_m_y_registry = storage.npk_m_y_registry.at(address);\n        let ivpk_m_x_registry = storage.ivpk_m_x_registry.at(address);\n        let ivpk_m_y_registry = storage.ivpk_m_y_registry.at(address);\n\n        npk_m_x_registry.schedule_value_change(keys.npk_m.x);\n        npk_m_y_registry.schedule_value_change(keys.npk_m.y);\n        ivpk_m_x_registry.schedule_value_change(keys.ivpk_m.x);\n        ivpk_m_y_registry.schedule_value_change(keys.ivpk_m.y);\n    }\n\n    #[aztec(public)]\n  fn register_ovpk_and_tpk(address: AztecAddress, partial_address: PartialAddress, keys: PublicKeys) {\n        let computed_address = AztecAddress::compute(keys.hash(), partial_address);\n\n        assert(computed_address.eq(address), \"Computed address does not match supplied address\");\n\n        let ovpk_m_x_registry = storage.ovpk_m_x_registry.at(address);\n        let ovpk_m_y_registry = storage.ovpk_m_y_registry.at(address);\n        let tpk_m_x_registry = storage.tpk_m_x_registry.at(address);\n        let tpk_m_y_registry = storage.tpk_m_y_registry.at(address);\n\n        ovpk_m_x_registry.schedule_value_change(keys.ovpk_m.x);\n        ovpk_m_y_registry.schedule_value_change(keys.ovpk_m.y);\n        tpk_m_x_registry.schedule_value_change(keys.tpk_m.x);\n        tpk_m_y_registry.schedule_value_change(keys.tpk_m.y);\n    }\n}\n"},"47":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\nuse crate::println;\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\nstruct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_be_bytes(8);\n        let hi = self.hi.to_be_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_le_bytes(8);\n        let hi = self.hi.to_le_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    fn decode_ascii(ascii: u8) -> Field {\n        if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (U128::uconstrained_check_is_upper_ascii(ascii) as u8);\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        } as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;  \n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi*b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo*b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo+self.hi)*(b.lo+b.hi) - low + carry\n        } else {\n            self.lo*b.hi + self.hi*b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        q\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        r\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n        \n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 { \n    fn not(self) -> U128 {\n        U128 {\n            lo: (!(self.lo as u64)) as Field,\n            hi: (!(self.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitOr for U128 { \n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 { \n    fn shl(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    } \n}\n\nimpl Shr for U128 { \n    fn shr(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    } \n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c= b.to_le_bytes(17);\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        let (q,r) = a.unconstrained_div(b);\n        assert_eq(q, c);\n        assert_eq(r, d);\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        let (c,d ) = a.unconstrained_div(b);\n        assert_eq((c, d), (a, U128::zero()));\n\n        // Check where b is a multiple of a\n        let (c,d) = b.unconstrained_div(a);\n        assert_eq((c, d), (U128::zero(), b));\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        let (c,d)= a.unconstrained_div(b);\n        assert_eq((c, d), (U128::zero(), U128::zero()));\n\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        let (c,d )= a.unconstrained_div(b);\n        assert_eq((c, d), (U128::one(), U128::zero()));\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"54":{"path":"/usr/src/noir-projects/aztec-nr/authwit/src/auth.nr","source":"use dep::aztec::protocol_types::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{\n    GENERATOR_INDEX__AUTHWIT_INNER, GENERATOR_INDEX__AUTHWIT_OUTER, GENERATOR_INDEX__AUTHWIT_NULLIFIER,\n    CANONICAL_AUTH_REGISTRY_ADDRESS\n},\n    hash::pedersen_hash\n};\nuse dep::aztec::{prelude::Deserialize, context::{PrivateContext, PublicContext, gas::GasOpts}, hash::hash_args_array};\n\n/**\n * Authenticaion witness helper library\n *\n * Authentication Witness is a scheme for authenticating actions on Aztec, so users can allow third-parties \n * (e.g. protocols or other users) to execute an action on their behalf.\n * \n * This library provides helper functions to manage such witnesses.\n * The authentication witness, is some \"witness\" (data) that authenticates a `message_hash`.\n * The simplest example of an authentication witness, is a signature. The signature is the \"evidence\",\n * that the signer has seen the message, agrees with it, and has allowed it.\n * It does not need to be a signature. It could be any kind of \"proof\" that the message is allowed.\n * Another proof could be knowing some kind of secret, or having some kind of \"token\" that allows the message.\n *\n * The `message_hash` is a hash of the following structure:\n * hash(consumer, chain_id, version, inner_hash)\n * - consumer: the address of the contract that is \"consuming\" the message,\n * - chain_id: the chain id of the chain that the message is being consumed on,\n * - version: the version of the chain that the message is being consumed on,\n * - inner_hash: the hash of the \"inner\" message that is being consumed, this is the \"actual\" message or action.\n *\n * While the `inner_hash` could be anything, such as showing you signed a specific message, it will often be \n * a hash of the \"action\" to approve, along with who made the call. As part of this library, we provide a few \n * helper functions to deal with such messages.\n *\n * For example, we provide helper function that is used for checking that the message is an encoding of the current call.\n * This can be used to let some contract \"allow\" another contract to act on its behalf, as long as it can \n * show that it is acting on behalf of the contract.\n *\n * If we take a case of allowing a contract to transfer tokens on behalf of an account, the `inner_hash` can be \n * derived as:\n * inner_hash = hash(caller, \"transfer\", hash(to, amount))\n * \n * Where the `caller` would be the address of the contract that is trying to transfer the tokens, and `to` and `amount`\n * the arguments for the transfer. \n * \n * Note that we have both a `caller` and a `consumer`, the `consumer` will be the contract that is consuming the message,\n * in the case of the transfer, it would be the `Token` contract itself, while the caller, will be the actor that is \n * allowed to transfer the tokens.\n *\n *\n * The authentication mechanism works differently in public and private contexts. In private, we recall that everything\n * is executed on the user's device, so we can use `oracles` to \"ask\" the user (not contract) for information. In public\n * we cannot do this, since it is executed by the sequencer (someone else). Therefore we can instead use a \"registry\"\n * to store the messages that we have approved.\n * \n * A simple example would be a \"token\" that is being \"pulled\" from one account into another. We will first outline \n * how this would look in private, and then in public later. \n *\n * Say that a user `Alice` wants to deposit some tokens into a DeFi protocol (say a DEX). \n * `Alice` would make a `deposit` transaction, that she is executing using her account contract. \n * The account would call the `DeFi` contract to execute `deposit`, which would try to pull funds from the `Token` \n * contract. Since the `DeFi` contract is trying to pull funds from an account that is not its own, it needs to \n * convince the `Token` contract that it is allowed to do so. \n * \n * This is where the authentication witness comes in! The `Token` contract computes a `message_hash` from the \n * `transfer` call, and then asks `Alice Account` contract to verify that the `DeFi` contract is allowed to \n * execute that call.\n * \n * `Alice Account` contract can then ask `Alice` if she wants to allow the `DeFi` contract to pull funds from her \n * account. If she does, she will sign the `message_hash` and return the signature to the `Alice Account` which\n * will validate it and return success to the `Token` contract which will then allow the `DeFi` contract to pull\n * funds from `Alice`.\n * \n * To ensure that the same \"approval\" cannot be used multiple times, we also compute a `nullifier` for the\n * authentication witness, and emit it from the `Token` contract (consumer).\n * \n * Note that we can do this flow as we are in private were we can do oracle calls out from contracts. \n * \n *\n *  Person          Contract              Contract               Contract\n *  Alice          Alice Account          Token                   DeFi\n *   |                  |                  |                      |\n *   | Defi.deposit(Token, 1000)           |                      |\n *   |----------------->|                  |                      |\n *   |                  | deposit(Token, 1000)                    |\n *   |                  |---------------------------------------->|\n *   |                  |                  |                      |\n *   |                  |                  | transfer(Alice, Defi, 1000)\n *   |                  |                  |<---------------------|\n *   |                  |                  |                      |\n *   |                  | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |<-----------------|                      |\n *   |                  |                  |                      |\n *   | Please give me AuthWit for DeFi     |                      |\n *   | calling transfer(Alice, Defi, 1000) |                      |\n *   |<-----------------|                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   | AuthWit for transfer(Alice, Defi, 1000)                    |\n *   |----------------->|                  |                      |\n *   |                  | AuthWit validity |                      |\n *   |                  |----------------->|                      |\n *   |                  |                  |                      |\n *   |                  |       throw if invalid AuthWit          |\n *   |                  |                  |                      |\n *   |                  |       emit AuthWit nullifier            |\n *   |                  |                  |                      |\n *   |                  |       transfer(Alice, Defi, 1000)       |\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  | success              |\n *   |                  |                  |--------------------->|\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *   |                  |                  |           deposit(Token, 1000)\n *   |                  |                  |                      |\n *   |                  |                  |                      |\n *\n *  \n * If we instead were in public, we cannot do the same flow. Instead we would use an authentication registry to store \n * the messages that we have approved. \n * \n * To approve a message, `Alice Account` can make a `set_authorized` call to the registry, to set a `message_hash`\n * as authorized. This is essentially a mapping from `message_hash` to `true` for `Alice Contract`. Every account\n * has its own map in the registry, so `Alice` cannot approve a message for `Bob`.\n *\n * The `Token` contract can then try to \"spend\" the approval by calling `consume` on the registry. If the message\n * was approved, the value is updated to `false`, and we return the success flag. For more information on the\n * registry, see `main.nr` in `auth_registry_contract`.\n *\n * Person          Contract              Contract            Contract               Contract\n * Alice          Alice Account          Registry             Token                   DeFi\n *   |                  |                    |                   |                      |\n *   | Registry.set_authorized(..., true)    |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | set_authorized(..., true)              |                      |\n *   |                  |------------------->|                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |         set authorized to true         |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   | Defi.deposit(Token, 1000)             |                   |                      |\n *   |----------------->|                    |                   |                      |\n *   |                  | deposit(Token, 1000)                   |                      |\n *   |                  |-------------------------------------------------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |              transfer(Alice, Defi, 1000) |\n *   |                  |                    |                   |<---------------------|\n *   |                  |                    |                   |                      |\n *   |                  |                    | Check if Defi may call transfer(Alice, Defi, 1000)\n *   |                  |                    |<------------------|                      |\n *   |                  |                    |                   |                      |\n *   |                  |          throw if invalid AuthWit      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |           set authorized to false      |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    | AuthWit validity  |                      |\n *   |                  |                    |------------------>|                      |\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | transfer(Alice, Defi, 1000)\n *   |                  |                    |                   |<-------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   | success              |\n *   |                  |                    |                   |--------------------->|\n *   |                  |                    |                   |                      |\n *   |                  |                    |                   |     deposit(Token, 1000)\n *   |                  |                    |                   |                      |\n *\n *\n * --- FAQ ---\n * Q:   Why are we using a success flag of `keccak256(\"IS_VALID()\")` instead of just returning a boolean?\n * A:   We want to make sure that we don't accidentally return `true` if there is a collision in the function selector.\n *      By returning a hash of `IS_VALID()`, it becomes very unlikely that there is both a colission and we return \n *      a success flag.\n * \n * Q:   Why are we using static calls?\n * A:   We are using static calls to ensure that the account contract cannot re-enter. If it was a normal call, it\n *      could make a new call and do a re-entry attack. Using a static ensures that it cannot update any state.\n *\n * Q:   Would it not be cheaper to use a nullifier instead of updating state in public?\n * A:   At a quick glance, a public state update + nullifier is 96 bytes, but two state updates are 128, so it would be \n *      cheaper to use a nullifier, if this is the way it would always be done. However, if both the approval and the \n *      consumption is done in the same transaction, then we will be able to squash the updates (only final tx state diff is posted to DA), and now it is cheaper.\n * \n * Q:   Why is the chain id and the version part of the message hash?\n * A:   The chain id and the version is part of the message hash to ensure that the message is only valid on a specific\n *      chain to avoid a case where the same message could be used across multiple chains. \n */\n\nglobal IS_VALID_SELECTOR = 0xabf64ad4; // 4 first bytes of keccak256(\"IS_VALID()\")\n\n/** \n * Assert that `on_behalf_of` have authorized the current call with a valid authentication witness\n * \n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the \n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n * \n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit\npub fn assert_current_call_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash([context.msg_sender().to_field(), context.selector().to_field(), context.args_hash]);\n    assert_inner_hash_valid_authwit(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit\n\n/** \n * Assert that a specific `inner_hash` is valid for the `on_behalf_of` address\n * \n * Used as an internal function for `assert_current_call_valid_authwit` and can be used as a standalone function when\n * the `inner_hash` is from a different source, e.g., say a block of text etc.\n * \n * @param on_behalf_of The address that have authorized the current call\n * @param inner_hash The hash of the message to authorize  \n */\npub fn assert_inner_hash_valid_authwit(context: &mut PrivateContext, on_behalf_of: AztecAddress, inner_hash: Field) {\n    // We perform a static call here and not a standard one to ensure that the account contract cannot re-enter.\n    let result: Field = context.static_call_private_function(\n        on_behalf_of,\n        FunctionSelector::from_signature(\"verify_private_authwit(Field)\"),\n        [inner_hash]\n    ).unpack_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n    // Compute the nullifier, similar computation to the outer hash, but without the chain_id and version.\n    // Those should already be handled in the verification, so we just need something to nullify, that allow same inner_hash for multiple actors.\n    let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n    context.push_nullifier(nullifier, 0);\n}\n\n/** \n * Assert that `on_behalf_of` have authorized the current call in the authentication registry\n * \n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the \n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n * \n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n * \n * @param on_behalf_of The address that have authorized the current call\n */\n// docs:start:assert_current_call_valid_authwit_public\npub fn assert_current_call_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress) {\n    let inner_hash = compute_inner_authwit_hash(\n        [(*context).msg_sender().to_field(), (*context).selector().to_field(), (*context).get_args_hash()]\n    );\n    assert_inner_hash_valid_authwit_public(context, on_behalf_of, inner_hash);\n}\n// docs:end:assert_current_call_valid_authwit_public\n\n/** \n * Assert that `on_behalf_of` have authorized a speicifc `inner_hash` in the authentication registry\n * \n * Computing the `inner_hash` using the `msg_sender`, `selector` and `args_hash` and then making a call out to the \n * `on_behalf_of` contract to verify that the `inner_hash` is valid.\n *\n * Note that the authentication registry will take the `msg_sender` into account as the consumer, so this will only\n * work if the `msg_sender` is the same as the `consumer` when the `message_hash` was inserted into the registry.\n * \n * @param on_behalf_of The address that have authorized the the `inner_hash`\n */\npub fn assert_inner_hash_valid_authwit_public(context: &mut PublicContext, on_behalf_of: AztecAddress, inner_hash: Field) {\n    let result: Field = context.call_public_function(\n        AztecAddress::from_field(CANONICAL_AUTH_REGISTRY_ADDRESS),\n        FunctionSelector::from_signature(\"consume((Field),Field)\"),\n        [on_behalf_of.to_field(), inner_hash].as_slice(),\n        GasOpts::default()\n    ).deserialize_into();\n    assert(result == IS_VALID_SELECTOR, \"Message not authorized by account\");\n}\n\n/**\n * Compute the `message_hash` from a function call to be used by an authentication witness \n * \n * Useful for when you need a non-account contract to approve during execution. For example if you need a contract\n * to make a call to nested contract, e.g., contract A wants to exit token T to L1 using bridge B, so it needs to allow\n * B to transfer T on its behalf.\n * \n * @param caller The address of the contract that is calling the function, in the example above, this would be B\n * @param consumer The address of the contract that is consuming the message, in the example above, this would be T\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param selector The function selector of the function that is being called\n * @param args The arguments of the function that is being called\n */\n// docs:start:compute_authwit_message_hash_from_call\npub fn compute_authwit_message_hash_from_call<N>(\n    caller: AztecAddress,\n    consumer: AztecAddress,\n    chain_id: Field,\n    version: Field,\n    selector: FunctionSelector,\n    args: [Field; N]\n) -> Field {\n    let args_hash = hash_args_array(args);\n    let inner_hash = compute_inner_authwit_hash([caller.to_field(), selector.to_field(), args_hash]);\n    compute_authwit_message_hash(consumer, chain_id, version, inner_hash)\n}\n// docs:end:compute_authwit_message_hash_from_call\n\n/**\n * Computes the `inner_hash` of the authentication witness\n * \n * This is used internally, but also useful in cases where you want to compute the `inner_hash` for a specific message\n * that is not necessarily a call, but just some \"bytes\" or text.\n * \n * @param args The arguments to hash\n */\npub fn compute_inner_authwit_hash<N>(args: [Field; N]) -> Field {\n    pedersen_hash(args, GENERATOR_INDEX__AUTHWIT_INNER)\n}\n\n/** \n * Computs the `authwit_nullifier` for a specific `on_behalf_of` and `inner_hash`\n * \n * Using the `on_behalf_of` and the `inner_hash` to ensure that the nullifier is siloed for a specific `on_behalf_of`.\n * \n * @param on_behalf_of The address that have authorized the the `inner_hash`\n * @param inner_hash The hash of the message to authorize\n */\npub fn compute_authwit_nullifier(on_behalf_of: AztecAddress, inner_hash: Field) -> Field {\n    pedersen_hash(\n        [on_behalf_of.to_field(), inner_hash],\n        GENERATOR_INDEX__AUTHWIT_NULLIFIER\n    )\n}\n\n/**\n * Computes the `message_hash` for the authentication witness\n * \n * @param consumer The address of the contract that is consuming the message\n * @param chain_id The chain id of the chain that the message is being consumed on\n * @param version The version of the chain that the message is being consumed on\n * @param inner_hash The hash of the \"inner\" message that is being consumed\n */\npub fn compute_authwit_message_hash(consumer: AztecAddress, chain_id: Field, version: Field, inner_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        consumer.to_field(),\n        chain_id,\n        version,\n        inner_hash\n    ],\n        GENERATOR_INDEX__AUTHWIT_OUTER\n    )\n}\n\n/**\n * Helper function to set the authorization status of a message hash\n * \n * Wraps a public call to the authentication registry to set the authorization status of a `message_hash`\n * \n * @param message_hash The hash of the message to authorize\n * @param authorize True if the message should be authorized, false if it should be revoked\n */\npub fn set_authorized(context: &mut PublicContext, message_hash: Field, authorize: bool) {\n    context.call_public_function(\n        AztecAddress::from_field(CANONICAL_AUTH_REGISTRY_ADDRESS),\n        FunctionSelector::from_signature(\"set_authorized(Field,bool)\"),\n        [message_hash, authorize as Field].as_slice(),\n        GasOpts::default()\n    ).assert_empty();\n}\n\n/**\n * Helper function to reject all authwits\n * \n * Wraps a public call to the authentication registry to set the `reject_all` flag\n *\n * @param reject True if all authwits should be rejected, false otherwise \n */\npub fn set_reject_all(context: &mut PublicContext, reject: bool) {\n    context.call_public_function(\n        AztecAddress::from_field(CANONICAL_AUTH_REGISTRY_ADDRESS),\n        FunctionSelector::from_signature(\"set_reject_all(bool)\"),\n        [context.this_address().to_field(), reject as Field].as_slice(),\n        GasOpts::default()\n    ).assert_empty();\n}\n"},"66":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH, hash::poseidon2_hash,\n    point::Point, traits::{Deserialize, Serialize, Empty, is_empty}\n};\nuse crate::keys::constants::{NUM_KEY_TYPES, NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX};\n\nglobal PUBLIC_KEYS_LENGTH = 12;\n\nstruct PublicKeys {\n    npk_m: Point,\n    ivpk_m: Point,\n    ovpk_m: Point,\n    tpk_m: Point,\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m : Point::empty(),\n            ivpk_m : Point::empty(),\n            ovpk_m : Point::empty(),\n            tpk_m : Point::empty()\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        ( self.npk_m == other.npk_m ) &\n        ( self.ivpk_m == other.ivpk_m ) &\n        ( self.ovpk_m == other.ovpk_m ) &\n        ( self.tpk_m == other.tpk_m )\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash(\n                [\n                self.npk_m.x,\n                self.npk_m.y,\n                self.npk_m.is_infinite as Field,\n                self.ivpk_m.x,\n                self.ivpk_m.y,\n                self.ivpk_m.is_infinite as Field,\n                self.ovpk_m.x,\n                self.ovpk_m.y,\n                self.ovpk_m.is_infinite as Field,\n                self.tpk_m.x,\n                self.tpk_m.y,\n                self.tpk_m.is_infinite as Field,\n                GENERATOR_INDEX__PUBLIC_KEYS_HASH\n            ]\n            )\n        }\n        )\n    }\n\n    pub fn get_key_by_index(self, index: Field) -> Point {\n        assert(index as u8 < NUM_KEY_TYPES, \"Invalid key index\");\n        if index == NULLIFIER_INDEX {\n            self.npk_m\n        } else if index == INCOMING_INDEX {\n            self.ivpk_m\n        } else if index == OUTGOING_INDEX {\n            self.ovpk_m\n        } else {\n            self.tpk_m\n        }\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.x,\n            self.npk_m.y,\n            self.npk_m.is_infinite as Field,\n            self.ivpk_m.x,\n            self.ivpk_m.y,\n            self.ivpk_m.is_infinite as Field,\n            self.ovpk_m.x,\n            self.ovpk_m.y,\n            self.ovpk_m.is_infinite as Field,\n            self.tpk_m.x,\n            self.tpk_m.y,\n            self.tpk_m.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: Point::new(serialized[0], serialized[1], serialized[2] as bool),\n            ivpk_m: Point::new(serialized[3], serialized[4], serialized[5] as bool),\n            ovpk_m: Point::new(serialized[6], serialized[7], serialized[8] as bool),\n            tpk_m: Point::new(serialized[9], serialized[10], serialized[11] as bool)\n        }\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: Point { x: 1, y: 2, is_infinite: false },\n        ivpk_m: Point { x: 3, y: 4, is_infinite: false },\n        ovpk_m: Point { x: 5, y: 6, is_infinite: false },\n        tpk_m: Point { x: 7, y: 8, is_infinite: false }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x146f68c0e0ba4067d61a3304bbfdec0797d5df1357db6c01247c48bfb345c7d7;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nfn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nfn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: Point { x: 1, y: 2, is_infinite: false },\n        ivpk_m: Point { x: 3, y: 4, is_infinite: false },\n        ovpk_m: Point { x: 5, y: 6, is_infinite: false },\n        tpk_m: Point { x: 7, y: 8, is_infinite: false }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.x, deserialized.npk_m.x);\n    assert_eq(keys.npk_m.y, deserialized.npk_m.y);\n    assert_eq(keys.ivpk_m.x, deserialized.ivpk_m.x);\n    assert_eq(keys.ivpk_m.y, deserialized.ivpk_m.y);\n    assert_eq(keys.ovpk_m.x, deserialized.ovpk_m.x);\n    assert_eq(keys.ovpk_m.y, deserialized.ovpk_m.y);\n    assert_eq(keys.tpk_m.x, deserialized.tpk_m.x);\n    assert_eq(keys.tpk_m.y, deserialized.tpk_m.y);\n}\n"},"95":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::inputs::public_context_inputs::PublicContextInputs;\nuse crate::context::gas::GasOpts;\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs) -> Self {\n        PublicContext { inputs }\n    }\n\n    pub fn emit_unencrypted_log<T, N>(&mut self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0);\n    }\n\n    fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        assert(false, \"'delegate_call_public_function' not implemented!\");\n        FunctionReturns::new([0; RETURNS_COUNT])\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        // Cannot nullify pending commitments in AVM, so `nullified_commitment` is not used\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(self) -> AztecAddress {\n        sender()\n    }\n    fn selector(self) -> FunctionSelector {\n        FunctionSelector::from_u32(function_selector())\n    }\n    fn get_args_hash(self) -> Field {\n        self.inputs.args_hash\n    }\n    fn transaction_fee(self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(self) -> Field {\n        chain_id()\n    }\n    fn version(self) -> Field {\n        version()\n    }\n    fn block_number(self) -> Field {\n        block_number()\n    }\n    fn timestamp(self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(self) -> Field {\n        da_gas_left()\n    }\n\n    fn raw_storage_read<N>(_self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(storage_slot)\n    }\n\n    fn storage_read<T, N>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<N>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        storage_write(storage_slot, values);\n    }\n\n    fn storage_write<T, N>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    let MAX_POSSIBLE_FIELD: Field = 0 - 1;\n    [\n        user_gas.l2_gas.unwrap_or(MAX_POSSIBLE_FIELD),\n        user_gas.da_gas.unwrap_or(MAX_POSSIBLE_FIELD)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/6420): reconsider.\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\nunconstrained fn function_selector() -> u32 {\n    function_selector_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<RET_SIZE>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<RET_SIZE>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_opcode(storage_slot, N)\n}\n\nunconstrained fn storage_write<N>(storage_slot: Field, values: [Field; N]) {\n    storage_write_opcode(storage_slot, values);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(PublicContextInputs::empty())\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n#[oracle(avmOpcodeFunctionSelector)]\nunconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<RET_SIZE>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<RET_SIZE>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode<N>(storage_slot: Field, length: Field) -> [Field; N] {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode<N>(storage_slot: Field, values: [Field; N]) {}\n\nstruct FunctionReturns<N> {\n    values: [Field; N]\n}\n\nimpl<N> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn assert_empty(returns: FunctionReturns<0>) {\n        assert(returns.values.len() == 0);\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n"}}}