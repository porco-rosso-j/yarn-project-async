{"transpiled":true,"noir_version":"0.31.0+6237d96a0bc23a5ed656e7ba172fb57facd9c807","name":"Crowdfunding","functions":[{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":"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"},{"name":"donate","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"_check_deadline","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)","aztec(view)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"}],"return_type":null},"bytecode":"H4sIAAAAAAAC/+WZ227bRhCGV1Kk2JVEUpZkxdTZomTZVtKkRu27XhW97CsU6QkpUqRB0l606BP2NXpdoI/QnZkd/qRYqFjDWBSIAIrk7P9xZmeXqx07Mw1jjurGfqbGfezdkYlMy55qdHxm9EoaTS0yNTWtqZGptZOZxrn9Ov7U6INj+nrE381rvqYre7QyUyPgUZOeRw6lKaOgGDtea1CPDRvpc0xfoiHsKEOLfeCX9vyRiB87cXtdF6NpA2uL5lguGf0JZkU7jJKgA7QDtOPQn2FWtMsoCbpAu0C7Dl3ArGjEKAkioBHQyKE/wKxozCgJYqAx0Nihb2BWNGGUBAnQBGgi5yoS+SOdB/di+/QSZkV7jJKgB7QHtOfQH2FW9IRREpwAPQF6Ug30JA/0AGK9/Qazon1GSdAH2gfad+h3MCs6YJQEA6ADoAOHfguzokNGSTAEOgQ6pPOSXq33eDETBg3eRn39SG3W+oraJz4y+Jyyq9Oyq5HAQ7nUFpqCI4jO8IKnLb5MnX7sFpBJjYUTMtHBEb+VO+0uMZO1yp7AsTTUxUiN6uGMzvR2fl8Iay/g25rOQZoopiWrXJPXspZb5k4FvyUmT9sQaRuV17NjdNcmofZFOVoSn+XRnhWyJJqRC5zQX2BWNGWUewY0BZpW+5jmy8IBxHr7BmZFx4ymMlKKjoGOq97G+fLgiUT+SNsfif2R7mHEZu4rmBWVCUmCCdAJ0EnV2yRP9gHEensFs6JTRkkwBToFOq16m+aLjieSHkZsgK9hVnTGKAlmQGdAZ1VvszyDnsjAH+n7I0mQwHr+SOSPxEEy1vVH0iDjEgfpSztIYP8xYezb+SvMis4ZJcEc6BzovOptnqfhAGK9fQ2zogtGSbAAugC6qHpb5HPOE+n6I6k/kvgjvSDIPTI2CJLkyB+J/ZHOg2fMzuh3MCu6ZJQES6BLoMuqt2XeJ08k8Ud6QZDZYYS+eEPrdtN3DBpsoXXPvMyLkJE8sViEnLOr87KrlcBLudQW2q6vIFpjV76RImTj9BeuCNlKEbIlEx0c8Tu50+4Ss12rLINjaaiLkRrVA/VkY6dG7VUhrL2Ab10pZe5cKC35g0pDixCgSNnpXsrQ1fOs2NIQrYxCXniMKjXcEqNVRc78kdgfSf2Rjj8S+SPtIN3v+iPjIEme+CP9IIFNg2RsEKT7SZDAekHelzhIxrpB5lhi/qfvfphF6R4TZhak+/MPe471giD3yNjgwZNsN0XvYVZ0xeiovMvb31n9G9LxR5IgXiJ/JA3Sl14QZHYYoYv6G+yG7xg05Y2ucWopIJbyxGIBkeV79GJtIPDKcStst9cQXWBXvZUCYuv0l27XfiUFxBWZ6OCIX8uddpeYq7XKNnAsDXUxUmOjUItsF/ZJLwth7QV86youKiCapvwhYYP/GyyXVQXBzSj/d0cTfd7k+c2Q340pVRuri7p7NN1lyNIFNC5hF65Lkpnf6YojL0SaOdkl54jSuIl4AMlrJkHy6ImVMrDh/7+sWjCQRiqozFVQG4mlz1WawUTJR7Tcp8vCWNvB/RwjokN1zUNFY3gN7Bqjdm3yKrCM9P2RxB8Z+CM9fyTyR+IgGev6I5Mg4zJ68L7Y6fkWZkV3jJJgB3QHdFf1tsv75ImMgiB9f2RwGOFF6G8sDizPF4ctFodd/oOylScWf1CesqunZVfPBN7JpbZQF55B9ByLzAtZH184/SfuB+VGflBuyEQHR/yX3Gl3iblZq+xjOJaGuhipUT08p/PCPunPQlh7Ad/qn7gG/BP75A86/gF3XJNRbCQAAA==","debug_symbols":"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"},{"name":"withdraw","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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s5j3vHQW857DTmLe8Ibq2cx7DjuLec9hZzHvOews5smZn8S857CzmPccdhbznsPOYt5z2FnMew47iXnD28ZnM+96XoL5z9tkg+GN0bOZd20z67RxbTOLedc2k5gvrm1mMe/1+VnMe33+18w/sOkanZNNcjYZ2fTa+Dk201YOIIlesun1bk42Pc/jZNNzN042PR9jZLN6jsXJpudNJ9msR7ExUN7+weaTT1e6c9/oAQmFR+49c5rHvedZ87gn534a957DzePeM7553Ht+OI97zybnce+55zTum2eq87j3vHYe957XzuPe89p53JNzP417z2vnce957TzuPa+dx73ntfO497x2Gvfd89p53HteO497z2vnce957Tzuybmfxr3ntfO497x2Hvee187j3vPaedx7XjuL+7h5XjuPe89r53Hvee087j2vncc9OffTuPe8dh73ntfO497z2nnce147jfvgGlOA+xMT0GJwhTmLeb9nJZj/PJMoBr9lZzHvd+ws5r1yPIn56HXjWcx71fjXzD+w6Rqdk03X3efYzOHwMeTaPpwK1A/UOTz85fCPU4Gc+UnMe1V3FvOea85i3nPNWcx7rjmLec81JzGfPNcUYD7T8adzTq+Y91xzFvOel85i3nPYWcyTMz+Jec9hZzHvOews5j2HlWW+bK+Y9xx2FvOew05injyHPcd8+WKk5PCB+ZDpvsMn58d5/4/v4ZFnsfO49zx2Hveeyc7jnpz7adx7NjuPe89nRbi/v3p906PxFfee0c7j3nPaedx7VjuN++x57TzuPa+dx73ntRLcU9/u3Ld/asyf1d2y58A64kQeJxVx8txaIk6lfn260as7x3Predx7bj2Pe8+t53HvufU07ovn1vO499x6HveeW4tw3+4zi0rvr7j3fHke9+TcT+Pe89p53HteO497z2vnce957TzuPa8V4T4cQEIN/9T3P6s3V8+BdcTJ82UdcfLcWiJObbv/zvYPJP+4c6rn1vO4J+d+GveeW8/j3nPredx7bj2Pe8+t53HvubUI9yHfuY/tBffN8+V53HsOPI97z2vnce957Tzuybmfxr3ntfO497xWgvs3e81+Vm9ungPriJPnyzriZDe3LumO+vYT/6c45f71FkDoDzieMpKPKyc+bra74fhivtvNrGczbzevns283ax6NvN2c2o25h/YJGeTkU27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7znsLOY9h53FvOews5gnZ34S857DzmLec9hZzHsOO4t5z2FnMe857CTmyXPYWcx7DjuLec9hZzHvOews5smZn8S857CzmPccdhbznsPOYt5z2FnMew47ifnsOews5j2HncW857CzmPccdhbz5MxPYt5z2FnMew47i3nPYWcx7znsLOY9h53EfPEcdhbznsPOYt5z2FnMew47i3ly5icx7znsLOY9h53FvOv5c8zHQAeQ2Oon5k/MdKqu52cx73p+FvOu52cx73p+FvPkzAswf2LiRHU9P4t51/OzmPffpGYx779JzWLec9hJzDfPYSWYP1G3aZ7DzmLec9hZzHsOO4t5cuYnMe857CzmPYedxbznsLOY9xx2FvOew05ivnsOO4t5z2FnMe857CzmPYedxTw585OY9xx2FvOew85i3nPYWcx7DjuLec9h5zB/o9iZn8S857CzmPccdhbznsPOYp6c+UnMew47i3nPYWcx7znsLOY9h53FvOewk5gPnsPOYt5z2FnMew47i3nPYWcxT878JOY9h53FvOews5j3HHYW857DTmI+2tXzoeU76sHfW+ZPTO8I0a5C5+fSrubm55KcSzYu7epifi7tKt3vcdmPD5ctv+LSrnbl59KuGuXn0u5vJOxcJru/enyTy4/TaELyvIePS897+Lj0vIePS3Iu2bj0vIePS897znF5on6ZPO/h49LzHj4uPe9h45I87+Hj0vMePi497+Hj0vMePi7JuWTj0vMePi497+Hj0vMePi497+Hj0vMeNi6z5z18XHrew8el5z18XHrew8clOZdsXHrew8el5z18XHrew8el5z18XHrew8Zl8byHj0vPe/i49LyHj0vPe/i4JOeSjUvPe/i49LyHj0vPe/i49LyHj0vPe9i4rJ738HHpeQ8fl5738HHpeQ8fl+RcsnFpV19u6fAxbp0+cXlirkG1qy/5ubSrL9m5bHb1JT+XdvUlP5d29eX3uDwxI6LZ1Zf8XJJzycal3bo6P5d26+rf5PJzL37zvIePS897+Lj0vIeNy+55Dx+Xnvfwcel5zzkuT9Qvu+c9fFySc8nGpec9/8LGpec9fFx63sPHpec9fFx63sPFZdw87+Hj0vMePi497+Hj0vMePi7JuWTj0vMePi497+Hj0vMePi497+Hj0vMeNi4Nb4fn59LzHj4uPe/h49LzHj4u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"},{"name":"init","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(initializer)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"donation_token","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"operator","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"deadline","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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"},{"name":"_publish_donation_receipts","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"7Z3hjhXHEYXfZX+j6HZVT/eMXyWKImzjCAktlsGRIuR3zxL23gVxQuXk3vZW0+eXDXSPar6its4cemo+3P386sff//H31/e/vH1398NfP9y9efvTy/ev394//OrD3ekvxf7zu+9+fXn/8TfevX/52/u7H04v7l7d//zw3z9e3P3y+s2rux+82h9/e/Fxg7MbKrthYzc0dkNnN+zshoPcYKf/fcOLr9Yd2/a48uj9srYYWltLPy+uZa+X1ccGFjfz/ri42eafL/4Udrkm7HJye1xaTlv9UwO3q3gf5SnuLYi7lFLPq0s/fTvuXi832beyfx23D4r709Xr0KtvQ6/ehl69D736PvTqx8ir+2no1cvQq9vQqw+tVR9aqz60Vn1orfrQWvWhtepDa7UOrdU6tFbr0FqtQ2u1Dq3VOrRW69BarUNrtQ6t1Tq0VrehtboNrdVtaK1uQ2t1G1qr29Ba3YbW6ja0VrehtboNrdU2tFbb0FptQ2u1Da3VNrRW29BabUNrtQ2t1Ta0VtvQWu1Da7UPrdU+tFb70FrtQ2u1D63VPrRW+9Ba7UNrtQ+t1X1ore5Da3UfWqv70Frdh9bqPrRW96G1ug+t1X1ore5Da/UYWqvH0Fo9htbqMbRWj6G1egyt1WNorR5Da/UYWqvH0Fotp9PYy5exl7exl/exl69jL7+NvXwbe/k+9vL72MuPrdoytmrL2KotY6u2jK3aMrZqy9iqLWOrtoyt2jK2asvYqrWxVWtjq9bGVu3Y80xl7IGmMvZEU7nuSFN1O587q+52WY3Py/m+Py5u9fT1ebly3QGom57dK0YfxzT2PGZhjjU97ij0Dv7wLX36ljkm9LiDPn/r9AFcp0/gOp1zp3Ne6ZxXOueVznnlT1zTOa90ziud80rnvNI5r3TONzrnG53zjc75Rud8o3O+0Tnf6JxvdM43OucbnfNG57zROW90zhud80bnvPHvVtA5b3TOG53zRue80znvdM47nfNO57zTOe90zjv/Qg2d807nvNM53+mc73TOdzrnO53znc75Tud8p3O+829R0Tnf6ZwfdM4POucHnfODzvlB5/ygc37QOT/onB/8q3P8u3Mnekehdxi9w+kdld6x0TsavaPTO3Z6B53zQue80DmnX441+u1Yo1+PNfr9WKNfkDX6DVmjX5E1/h1Zo3NudM6NzrnROTc650bn3OicG51z2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2ocz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2odz2oertA9XaR+u0j5cpX24SvtwlfbhKu3DVdqHq7QPV2kfrtI+XKV9uEr7cJX24Srtw1Xah6u0D1dpH67SPlylfbhK+3CV9uEq7cNV2oertA9XaR+u0j5cpX24SvtwFftwD38V/HHTQ453sA+7cQ9/sZ/2Nf9iH3j9+OntYwuWfuvCjwGVbAFZtoA8W0A1W0BbtoBatoB6toD2PzWgUurTp3SOclldTicUfj+PEdg+m2iA15Zy/hKRWY+isP08zODhf9vTlXc/YzmEBWCpJ2FBWIqwICwmLAiLCwvCUoUFYdmEBWFpwoKwdGFBWKRyIRapXIRlk8qFWKRyIRapXIhFKhdiqcKCsEjlQixSuRCLVC7EIpULsUjlIixNKhdikcqFWKRyIRapXIilCgvCIpULsUjlQixSuQhLX7JBP30Korh3hGXJBh1jWfJHrm92wdINYVnyR26MZckfuTGWJY2FGMuSxkKIZV/SWKh2nKOo/fQFFrC6XRZ/ttb6BeGS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"}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003e93e0ef"},{"kind":"string","value":"TransparentNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000edf2744b"},{"kind":"string","value":"TokenNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000071421477"},{"kind":"string","value":"ValueNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003e93e0ef"},{"kind":"string","value":"TransparentNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000edf2744b"},{"kind":"string","value":"TokenNote"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"donation_token","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"operator","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"deadline","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"donation_receipts","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"events":[{"fields":[{"name":"who","type":{"kind":"field"}},{"name":"amount","type":{"kind":"field"}}],"kind":"struct","path":"Crowdfunding::WithdrawalProcessed"}],"functions":[{"fields":[],"kind":"struct","path":"Crowdfunding::_check_deadline_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64}}],"kind":"struct","path":"Crowdfunding::donate_parameters"}}],"kind":"struct","path":"Crowdfunding::donate_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64}}],"kind":"struct","path":"Crowdfunding::withdraw_parameters"}}],"kind":"struct","path":"Crowdfunding::withdraw_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Crowdfunding::_publish_donation_receipts_parameters"}}],"kind":"struct","path":"Crowdfunding::_publish_donation_receipts_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"donation_token","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"operator","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"deadline","type":{"kind":"integer","sign":"unsigned","width":64}}],"kind":"struct","path":"Crowdfunding::init_parameters"}}],"kind":"struct","path":"Crowdfunding::init_abi"}]}},"file_map":{"100":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/unencrypted_logs/unencrypted_event_emission.nr","source":"use crate::{\n    context::{PrivateContext, PublicContext}, event::event_interface::EventInterface,\n    encrypted_logs::payload::compute_encrypted_event_log, oracle::logs_traits::LensForEncryptedEvent\n};\nuse dep::protocol_types::{address::AztecAddress, traits::Serialize};\n\nfn emit<Event, NB, MB, OB, N, M>(\n    context: &mut PublicContext,\n    event: Event\n) where Event: EventInterface<NB, MB>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    let selector = Event::get_event_type_id();\n\n    let serialized_event = event.serialize();\n    let mut emitted_log = [0; M];\n\n    // We put the selector in the \"last\" place, to avoid reading or assigning to an expression in an index\n    for i in 0..serialized_event.len() {\n        emitted_log[i] = serialized_event[i];\n    }\n\n    emitted_log[serialized_event.len()] = selector.to_field();\n\n    context.emit_unencrypted_log(emitted_log);\n}\n\npub fn encode_event<Event, NB, MB, OB, N, M>(context: &mut PublicContext) -> fn[(&mut PublicContext,)](Event) -> () where Event: EventInterface<NB, MB>, Event: Serialize<N>, [Field; N]: LensForEventSelector<N, M> {\n    | e: Event | {\n        emit(\n          context,\n          e,\n        );\n    }\n}\n\ntrait LensForEventSelector<N, M> {\n    // N = event preimage input in fields\n    // M = event preimage input in fields + event selector as field\n    fn output(self: [Field; N]) -> [Field; M];\n}\n\nimpl LensForEventSelector<1, 2> for [Field; 1] {\n    fn output(self) -> [Field; 2] {[self[0] as Field; 2]}\n}\nimpl LensForEventSelector<2, 3> for [Field; 2] {\n    fn output(self) -> [Field; 3] {[self[0] as Field; 3]}\n}\nimpl LensForEventSelector<3, 4> for [Field; 3] {\n    fn output(self) -> [Field; 4] {[self[0] as Field; 4]}\n}\nimpl LensForEventSelector<4, 5> for [Field; 4] {\n    fn output(self) -> [Field; 5] {[self[0] as Field; 5]}\n}\nimpl LensForEventSelector<5, 6> for [Field; 5] {\n    fn output(self) -> [Field; 6] {[self[0] as Field; 6]}\n}\nimpl LensForEventSelector<6, 7> for [Field; 6] {\n    fn output(self) -> [Field; 7] {[self[0] as Field; 7]}\n}\n"},"102":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::{Point, pub_key_to_bytes},\n    constants::{GENERATOR_INDEX__IVSK_M, GENERATOR_INDEX__OVSK_M}, hash::poseidon2_hash\n};\n\nuse std::field::bytes32_to_field;\n\nuse crate::oracle::unsafe_rand::unsafe_rand;\n\nuse crate::event::event_interface::EventInterface;\nuse crate::note::note_interface::NoteInterface;\n\nuse crate::encrypted_logs::{\n    header::EncryptedLogHeader, incoming_body::EncryptedLogIncomingBody,\n    outgoing_body::EncryptedLogOutgoingBody\n};\n\npub fn compute_encrypted_event_log<Event, NB, MB, OB>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    ovsk_app: Field,\n    ovpk: Point,\n    ivpk: Point,\n    event: Event\n) -> [u8; OB] where Event: EventInterface<NB, MB> {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    let eph_sk: Scalar = fr_to_fq(unsafe_rand());\n    let eph_pk = eph_sk.derive_public_key();\n\n    // TODO: (#7177) This value needs to be populated!\n    let recipient = AztecAddress::from_field(0);\n\n    let ivpk_app = compute_ivpk_app(ivpk, contract_address);\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_Header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_event(event, randomness).compute_ciphertext(eph_sk, ivpk_app);\n    let outgoing_body_ciphertext: [u8; 176] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk_app).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; OB] = [0; OB];\n    // @todo We ignore the tags for now \n\n    let eph_pk_bytes = pub_key_to_bytes(eph_pk);\n    for i in 0..64 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[128 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[176 + i] = outgoing_Header_ciphertext[i];\n    }\n    for i in 0..176 {\n        encrypted_bytes[224 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = OB - 400;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[400 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (64 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (176 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\npub fn compute_encrypted_note_log<Note, N, NB, M>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: Point,\n    ivpk: Point,\n    note: Note\n) -> [u8; M] where Note: NoteInterface<N, NB> {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    let eph_sk: Scalar = fr_to_fq(unsafe_rand());\n    let eph_pk = eph_sk.derive_public_key();\n\n    // TODO: (#7177) This value needs to be populated!\n    let recipient = AztecAddress::from_field(0);\n\n    let ivpk_app = compute_ivpk_app(ivpk, contract_address);\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_Header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_note(note, storage_slot).compute_ciphertext(eph_sk, ivpk_app);\n    let outgoing_body_ciphertext: [u8; 176] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk_app).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now \n\n    let eph_pk_bytes = pub_key_to_bytes(eph_pk);\n    for i in 0..64 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[128 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[176 + i] = outgoing_Header_ciphertext[i];\n    }\n    for i in 0..176 {\n        encrypted_bytes[224 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 400;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[400 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (64 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (176 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field elememt to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let r_bytes = r.to_be_bytes(32);\n\n    let mut high_bytes = [0; 32];\n    let mut low_bytes = [0; 32];\n\n    for i in 0..16 {\n        high_bytes[16 + i] = r_bytes[i];\n        low_bytes[16 + i] = r_bytes[i + 16];\n    }\n\n    let low = bytes32_to_field(low_bytes);\n    let high = bytes32_to_field(high_bytes);\n\n    Scalar::new(low, high)\n}\n\nfn compute_ivpk_app(ivpk: Point, contract_address: AztecAddress) -> Point {\n    // It is useless to compute this, it brings no value to derive fully.\n    // Issue(#6955)\n    ivpk\n    /*\n    // @todo Just setting infinite to false, but it should be checked.\n    // for example user could define ivpk = infinity using the registry\n    assert((ivpk.x != 0) & (ivpk.y != 0), \"ivpk is infinite\");\n\n    let i = fr_to_fq(poseidon2_hash([contract_address.to_field(), ivpk.x, ivpk.y, GENERATOR_INDEX__IVSK_M]));\n    let I = i.derive_public_key();\n\n    let embed_I = Point { x: I.x, y: I.y, is_infinite: false };\n    let embed_ivpk = Point { x: ivpk.x, y: ivpk.y, is_infinite: false };\n\n    let embed_result = embedded_curve_add(embed_I, embed_ivpk);\n\n    Point::new(embed_result.x, embed_result.y)*/\n}\n"},"103":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    encrypted_logs::payload::compute_encrypted_note_log, oracle::logs_traits::LensForEncryptedLog\n};\nuse dep::protocol_types::{\n    hash::sha256_to_field, address::AztecAddress, point::Point, abis::note_hash::NoteHash,\n    constants::MAX_NOTE_HASHES_PER_CALL, utils::arrays::find_index\n};\n\nunconstrained fn compute_unconstrained<Note, N, NB, M>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: Point,\n    ivpk: Point,\n    note: Note\n) -> ([u8; M], Field) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    compute(contract_address, storage_slot, ovsk_app, ovpk, ivpk, note)\n}\n\nfn compute<Note, N, NB, M>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: Point,\n    ivpk: Point,\n    note: Note\n) -> ([u8; M], Field) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    let encrypted_log: [u8; M] = compute_encrypted_note_log(contract_address, storage_slot, ovsk_app, ovpk, ivpk, note);\n    let log_hash = sha256_to_field(encrypted_log);\n    (encrypted_log, log_hash)\n}\n\nfn emit_with_keys<Note, N, NB, M>(\n    context: &mut PrivateContext,\n    note: Note,\n    ovpk: Point,\n    ivpk: Point,\n    inner_compute: fn(AztecAddress, Field, Field, Point, Point, Note) -> ([u8; M], Field)\n) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    let note_exists_index = find_index(\n        context.note_hashes.storage,\n        |n: NoteHash| n.counter == note_hash_counter\n    );\n    assert(\n        note_exists_index as u32 != MAX_NOTE_HASHES_PER_CALL, \"Can only emit a note log for an existing note.\"\n    );\n\n    let contract_address: AztecAddress = context.this_address();\n    let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n    let (encrypted_log, log_hash) = inner_compute(contract_address, storage_slot, ovsk_app, ovpk, ivpk, note);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n\npub fn encode_and_encrypt_note<Note, N, NB, M>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let header = context.get_header();\n        let ovpk = header.get_ovpk_m(context, ov);\n        let ivpk = header.get_ivpk_m(context, iv);\n        emit_with_keys(context, e.note, ovpk, ivpk, compute);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, N, NB, M>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let header = context.get_header();\n        let ovpk = header.get_ovpk_m(context, ov);\n        let ivpk = header.get_ivpk_m(context, iv);\n        emit_with_keys(context, e.note, ovpk, ivpk, compute_unconstrained);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys<Note, N, NB, M>(\n    context: &mut PrivateContext,\n    ovpk: Point,\n    ivpk: Point\n) -> fn[(&mut PrivateContext, Point, Point)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        emit_with_keys(context, e.note, ovpk, ivpk, compute);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys_unconstrained<Note, N, NB, M>(\n    context: &mut PrivateContext,\n    ovpk: Point,\n    ivpk: Point\n) -> fn[(&mut PrivateContext, Point, Point)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        emit_with_keys(context, e.note, ovpk, ivpk, compute_unconstrained);\n    }\n}\n"},"104":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/outgoing_body.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash\n};\n\nuse std::aes128::aes128_encrypt;\n\nuse crate::keys::point_to_symmetric_key::point_to_symmetric_key;\n\nstruct EncryptedLogOutgoingBody {\n    eph_sk: Scalar,\n    recipient: AztecAddress,\n    recipient_ivpk_app: Point,\n}\n\nimpl EncryptedLogOutgoingBody {\n    pub fn new(eph_sk: Scalar, recipient: AztecAddress, recipient_ivpk_app: Point) -> Self {\n        Self { eph_sk, recipient, recipient_ivpk_app }\n    }\n\n    pub fn compute_ciphertext(self, ovsk_app: Scalar, eph_pk: Point) -> [u8; 176] {\n        // Again, we could compute `eph_pk` here, but we keep the interface more similar\n        // and also make it easier to optimise it later as we just pass it along\n\n        let mut buffer: [u8; 160] = [0; 160];\n\n        let serialized_eph_sk_high = self.eph_sk.hi.to_be_bytes(32);\n        let serialized_eph_sk_low = self.eph_sk.lo.to_be_bytes(32);\n\n        let address_bytes = self.recipient.to_field().to_be_bytes(32);\n        let serialized_recipient_ivpk_app = self.recipient_ivpk_app.serialize();\n        let serialized_recipient_ivpk_app_x = serialized_recipient_ivpk_app[0].to_be_bytes(32);\n        let serialized_recipient_ivpk_app_y = serialized_recipient_ivpk_app[1].to_be_bytes(32);\n\n        for i in 0..32 {\n            buffer[i] = serialized_eph_sk_high[i];\n            buffer[i + 32] = serialized_eph_sk_low[i];\n            buffer[i + 64] = address_bytes[i];\n            buffer[i + 96] = serialized_recipient_ivpk_app_x[i];\n            buffer[i + 128] = serialized_recipient_ivpk_app_y[i];\n        }\n\n        // We compute the symmetric key using poseidon.\n        let full_key: [u8; 32] = poseidon2_hash(\n            [\n            ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y,\n            GENERATOR_INDEX__SYMMETRIC_KEY as Field\n        ]\n        ).to_be_bytes(32).as_array();\n\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(buffer, iv, sym_key).as_array()\n    }\n}\n\nmod test {\n    use crate::encrypted_logs::outgoing_body::EncryptedLogOutgoingBody;\n    use dep::protocol_types::{\n        address::AztecAddress, traits::Empty, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        scalar::Scalar, point::Point, hash::poseidon2_hash\n    };\n\n    use crate::context::PrivateContext;\n\n    #[test]\n    fn test_encrypted_log_outgoing_body() {\n        let eph_sk = Scalar::new(\n            0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        );\n        let recipient_ivsk_app = Scalar::new(\n            0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        );\n        let sender_ovsk_app = Scalar::new(\n            0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        );\n\n        let eph_pk = eph_sk.derive_public_key();\n        let recipient_ivpk_app = recipient_ivsk_app.derive_public_key();\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let body = EncryptedLogOutgoingBody::new(eph_sk, recipient, recipient_ivpk_app);\n\n        let ciphertext = body.compute_ciphertext(sender_ovsk_app, eph_pk);\n\n        let expected_outgoing_body_ciphertext = [\n            127, 84, 96, 176, 101, 107, 236, 57, 68, 8, 53, 202, 138, 74, 186, 54, 74, 193, 245, 7, 109, 59, 218, 33, 1, 31, 205, 225, 241, 209, 64, 222, 94, 245, 4, 150, 47, 241, 187, 64, 152, 20, 102, 158, 200, 217, 213, 82, 1, 240, 170, 185, 51, 80, 27, 109, 63, 231, 235, 120, 174, 44, 133, 248, 10, 97, 60, 40, 222, 190, 147, 76, 187, 48, 91, 206, 48, 106, 56, 118, 38, 127, 82, 4, 182, 188, 44, 224, 31, 129, 47, 107, 134, 252, 20, 25, 122, 191, 158, 69, 35, 255, 215, 171, 196, 45, 91, 184, 83, 80, 238, 201, 1, 233, 235, 159, 171, 130, 158, 64, 176, 165, 132, 30, 84, 81, 71, 195, 145, 47, 82, 247, 210, 192, 23, 4, 220, 90, 56, 109, 46, 105, 79, 251, 165, 141, 185, 233, 191, 118, 219, 153, 191, 162, 99, 238, 241, 249, 9, 74, 210, 241, 54, 28, 126, 226, 85, 235, 174, 75, 239, 207, 100, 184, 248, 194\n        ];\n\n        for i in 0..expected_outgoing_body_ciphertext.len() {\n            assert_eq(ciphertext[i], expected_outgoing_body_ciphertext[i]);\n        }\n        assert_eq(expected_outgoing_body_ciphertext.len(), ciphertext.len());\n    }\n}\n"},"105":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::point_to_symmetric_key::point_to_symmetric_key;\n\nuse std::aes128::aes128_encrypt;\n\nstruct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext(self, secret: Scalar, point: Point) -> [u8; 48] {\n        let full_key = point_to_symmetric_key(secret, point);\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes(32).as_array();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nfn test_encrypted_log_header() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar::new(\n        0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    );\n    let point = Point::new(\n        0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        false\n    );\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    let expected_header_ciphertext = [\n        228, 9, 65, 81, 62, 59, 249, 207, 90, 196, 206, 72, 39, 199, 82, 196, 23, 131, 32, 226, 26, 176, 43, 39, 239, 177, 177, 192, 85, 216, 17, 15, 18, 187, 35, 225, 135, 192, 63, 88, 29, 173, 232, 46, 72, 82, 187, 139\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext);\n}\n"},"106":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/incoming_body.nr","source":"use crate::note::note_interface::NoteInterface;\nuse crate::event::event_interface::EventInterface;\nuse dep::protocol_types::{scalar::Scalar, point::Point};\n\nuse std::aes128::aes128_encrypt;\nuse crate::keys::point_to_symmetric_key::point_to_symmetric_key;\n\nstruct EncryptedLogIncomingBody<M> {\n    plaintext: [u8; M]\n}\n\nimpl<M> EncryptedLogIncomingBody<M> {\n    pub fn from_note<T, N>(note: T, storage_slot: Field) -> Self where T: NoteInterface<N, M> {\n        let mut plaintext = note.to_be_bytes(storage_slot);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn from_event<T, MR>(event: T, randomness: Field) -> Self where T: EventInterface<M, MR> {\n        let mut plaintext = event.private_to_be_bytes(randomness);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn compute_ciphertext(self, eph_sk: Scalar, ivpk_app: Point) -> [u8] {\n        let full_key = point_to_symmetric_key(eph_sk, ivpk_app);\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(self.plaintext, iv, sym_key)\n    }\n}\n\nmod test {\n    use crate::encrypted_logs::incoming_body::EncryptedLogIncomingBody;\n    use dep::protocol_types::{\n        address::AztecAddress, traits::Empty, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        scalar::Scalar, point::Point, traits::Serialize, abis::event_selector::EventSelector\n    };\n\n    use crate::{\n        note::{note_header::NoteHeader, note_interface::NoteInterface},\n        event::event_interface::EventInterface, oracle::unsafe_rand::unsafe_rand,\n        context::PrivateContext\n    };\n\n    struct AddressNote {\n        address: AztecAddress,\n        owner: AztecAddress,\n        randomness: Field,\n        header: NoteHeader,\n    }\n\n    global ADDRESS_NOTE_LEN: Field = 3;\n    global ADDRESS_NOTE_BYTES_LEN = 32 * 3 + 64;\n\n    impl NoteInterface<ADDRESS_NOTE_LEN, ADDRESS_NOTE_BYTES_LEN> for AddressNote {\n        fn compute_note_content_hash(self) -> Field {1}\n\n        fn get_note_type_id() -> Field {\n            1\n        }\n\n        fn get_header(self) -> NoteHeader { self.header}\n\n        fn set_header(&mut self, header: NoteHeader) {self.header = header; }\n\n        fn compute_note_hash_and_nullifier(self, context: &mut PrivateContext) -> (Field, Field) {\n            (1, 1)\n        }\n\n        fn compute_note_hash_and_nullifier_without_context(self) -> (Field, Field) {(1,1)}\n\n        fn serialize_content(self) -> [Field; ADDRESS_NOTE_LEN] { [self.address.to_field(), self.owner.to_field(), self.randomness]}\n\n        fn deserialize_content(fields: [Field; ADDRESS_NOTE_LEN]) -> Self {\n            AddressNote { address: AztecAddress::from_field(fields[0]), owner: AztecAddress::from_field(fields[1]), randomness: fields[2], header: NoteHeader::empty() }\n        }\n\n        fn to_be_bytes(self, storage_slot: Field) -> [u8; ADDRESS_NOTE_BYTES_LEN] {\n            let serialized_note = self.serialize_content();\n\n            let mut buffer: [u8; ADDRESS_NOTE_BYTES_LEN] = [0; ADDRESS_NOTE_BYTES_LEN];\n\n            let storage_slot_bytes = storage_slot.to_be_bytes(32);\n            let note_type_id_bytes = AddressNote::get_note_type_id().to_be_bytes(32);\n\n            for i in 0..32 {\n                buffer[i] = storage_slot_bytes[i];\n                buffer[32 + i] = note_type_id_bytes[i];\n            }\n\n            for i in 0..serialized_note.len() {\n                let bytes = serialized_note[i].to_be_bytes(32);\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n            buffer\n        }\n    }\n\n    impl AddressNote {\n        pub fn new(address: AztecAddress, owner: AztecAddress, randomness: Field) -> Self {\n            AddressNote { address, owner, randomness, header: NoteHeader::empty() }\n        }\n    }\n\n    #[test]\n    fn test_encrypted_note_log_incoming_body() {\n        let note = AddressNote::new(\n            AztecAddress::from_field(0x1),\n            AztecAddress::from_field(0x2),\n            3\n        );\n\n        let storage_slot = 2;\n\n        let eph_sk = Scalar::new(\n            0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        );\n        let ivpk_app = Point::new(\n            0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            false\n        );\n\n        let body = EncryptedLogIncomingBody::from_note(note, storage_slot);\n\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk_app);\n\n        let expected_note_body_ciphertext = [\n            228, 9, 65, 81, 62, 59, 249, 207, 90, 196, 206, 72, 39, 199, 82, 196, 63, 127, 188, 251, 150, 188, 238, 205, 3, 86, 102, 164, 175, 12, 137, 158, 163, 111, 205, 10, 229, 230, 46, 202, 110, 107, 156, 180, 67, 192, 161, 201, 48, 153, 169, 1, 25, 182, 93, 39, 39, 207, 251, 218, 234, 147, 156, 13, 110, 180, 190, 199, 41, 6, 211, 203, 176, 110, 165, 186, 110, 127, 199, 22, 201, 149, 92, 249, 219, 68, 145, 68, 179, 29, 233, 34, 98, 123, 197, 234, 169, 53, 44, 14, 81, 60, 92, 27, 250, 134, 49, 248, 57, 119, 236, 118, 158, 104, 82, 243, 98, 164, 60, 72, 74, 27, 177, 194, 221, 225, 193, 150, 67, 235, 205, 106, 150, 24, 126, 186, 220, 178, 199, 189, 113, 54, 181, 55, 46, 15, 236, 236, 9, 159, 5, 172, 237, 154, 110, 50, 241, 64, 92, 13, 37, 53, 20, 140, 42, 146, 229, 63, 97, 25, 159, 63, 235, 104, 68, 100\n        ];\n\n        assert_eq(expected_note_body_ciphertext.len(), ciphertext.len());\n\n        for i in 0..expected_note_body_ciphertext.len() {\n            assert_eq(ciphertext[i], expected_note_body_ciphertext[i]);\n        }\n    }\n\n    struct TestEvent {\n        value0: Field,\n        value1: Field,\n        value2: Field,\n    }\n\n    impl Serialize<3> for TestEvent {\n        fn serialize(self) -> [Field; 3] {\n            [self.value0, self.value1, self.value2]\n        }\n    }\n\n    global TEST_EVENT_LEN: Field = 3;\n    global TEST_EVENT_BYTES_LEN = 32 * 3 + 64;\n    global TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS = 32 * 3 + 32;\n\n    impl EventInterface<TEST_EVENT_BYTES_LEN, TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS> for TestEvent {\n        fn get_event_type_id() -> EventSelector {\n            EventSelector::from_signature(\"TestEvent(Field,Field,Field)\")\n        }\n\n        fn private_to_be_bytes(self, randomness: Field) -> [u8; TEST_EVENT_BYTES_LEN] {\n            let mut buffer: [u8; TEST_EVENT_BYTES_LEN] = [0; TEST_EVENT_BYTES_LEN];\n\n            let randomness_bytes = randomness.to_be_bytes(32);\n            let event_type_id_bytes = TestEvent::get_event_type_id().to_field().to_be_bytes(32);\n\n            for i in 0..32 {\n                buffer[i] = randomness_bytes[i];\n                buffer[32 + i] = event_type_id_bytes[i];\n            }\n\n            let serialized_event = self.serialize();\n\n            for i in 0..serialized_event.len() {\n                let bytes = serialized_event[i].to_be_bytes(32);\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n\n            buffer\n        }\n\n        fn to_be_bytes(self) -> [u8; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS] {\n             let mut buffer: [u8; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS] = [0; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS];\n\n             let event_type_id_bytes = TestEvent::get_event_type_id().to_field().to_be_bytes(32);\n\n             for i in 0..32 {\n                 buffer[i] = event_type_id_bytes[i];\n            }\n\n             let serialized_event = self.serialize();\n\n             for i in 0..serialized_event.len() {\n                 let bytes = serialized_event[i].to_be_bytes(32);\n                 for j in 0..32 {\n                     buffer[32 + i * 32 + j] = bytes[j];\n                }\n            }\n\n             buffer\n        }\n\n        fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n            _emit(self);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_event_incoming_body() {\n        let test_event = TestEvent { value0: 1, value1: 2, value2: 3 };\n\n        let eph_sk = Scalar::new(\n            0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        );\n\n        let ivpk_app = Point::new(\n            0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            false\n        );\n\n        let randomness = 2;\n\n        let body = EncryptedLogIncomingBody::from_event(test_event, randomness);\n\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk_app);\n\n        let expected_event_body_ciphertext = [\n            228, 9, 65, 81, 62, 59, 249, 207, 90, 196, 206, 72, 39, 199, 82, 196, 63, 127, 188, 251, 150, 188, 238, 205, 3, 86, 102, 164, 175, 12, 137, 158, 163, 111, 205, 10, 229, 230, 46, 202, 110, 107, 156, 180, 67, 192, 161, 201, 66, 122, 29, 35, 42, 33, 153, 216, 199, 208, 103, 207, 126, 153, 189, 136, 19, 220, 238, 15, 169, 29, 255, 11, 123, 107, 70, 192, 53, 40, 36, 93, 187, 32, 123, 136, 104, 23, 229, 245, 152, 90, 84, 2, 136, 112, 42, 27, 82, 214, 104, 14, 250, 48, 199, 245, 88, 22, 200, 77, 38, 51, 127, 56, 138, 255, 16, 46, 179, 129, 215, 185, 185, 116, 148, 16, 133, 62, 56, 180, 10, 132, 109, 77, 206, 199, 21, 167, 7, 163, 171, 158, 244, 23, 18, 121, 108, 42, 107, 7, 48, 84, 212, 104, 39, 16, 109, 7, 108, 129, 60, 80, 112, 241, 223, 140, 186, 158, 38, 74, 230, 213, 159, 175, 142, 228, 128, 160\n        ];\n\n        assert_eq(expected_event_body_ciphertext.len(), ciphertext.len());\n\n        for i in 0..expected_event_body_ciphertext.len() {\n            assert_eq(ciphertext[i], expected_event_body_ciphertext[i]);\n        }\n    }\n}\n"},"112":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    constants::GENERATOR_INDEX__INNER_NOTE_HASH,\n    hash::{\n    pedersen_hash, compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_inner_note_hash_from_preimage(storage_slot: Field, note_content_hash: Field) -> Field {\n    pedersen_hash(\n        [storage_slot, note_content_hash],\n        GENERATOR_INDEX__INNER_NOTE_HASH\n    )\n}\n\nfn compute_inner_note_hash<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    compute_inner_note_hash_from_preimage(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N, M>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note_with_header.get_header();\n    let (_, inner_nullifier) = note_with_header.compute_note_hash_and_nullifier(context);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\nfn compute_note_hash_for_read_request_from_innter_and_nonce(\n    inner_note_hash: Field,\n    nonce: Field\n) -> Field {\n    // TODO(#1386): This if-else can be nuked once we have nonces injected from public\n    if (nonce == 0) {\n        // If nonce is zero, that means we are reading a public note.\n        inner_note_hash\n    } else {\n        compute_unique_note_hash(nonce, inner_note_hash)\n    }\n}\n\npub fn compute_note_hash_for_read_request<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let inner_note_hash = compute_inner_note_hash(note);\n    let nonce = note.get_header().nonce;\n\n    compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, nonce)\n}\n\npub fn compute_note_hash_for_consumption<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    if (header.note_hash_counter != 0) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        inner_note_hash\n    } else {\n        // If a note is not transient, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the siloed_note_hash which has already been hashed with\n        // nonce and then contract address. This hash will match the existing leaf in the note hash\n        // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        let unique_note_hash = compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, header.nonce);\n        compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n        // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n        // nullification, it is not strictly necessary to silo the note hash before computing\n        // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n        // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n        // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n        // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n        // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n    }\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, N, M, S>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N, M> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n    let unique_note_hash = compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, note_header.nonce);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        let (_, nullifier) = note.compute_note_hash_and_nullifier_without_context();\n        nullifier\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [inner_note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"113":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_inner_note_hash, compute_note_hash_for_consumption}, note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N, M>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let inner_note_hash = compute_inner_note_hash(*note);\n\n    let serialized_note = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        inner_note_hash,\n        note_hash_counter\n    )\n        == 0\n    );\n\n    context.push_note_hash(inner_note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, N, M>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let inner_note_hash = compute_inner_note_hash(*note);\n\n    context.push_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N, M>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N, M> {\n    let (note_hash, nullifier) = note.compute_note_hash_and_nullifier(context);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let note_hash_for_consumption = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a non-transient note and we don't populate the note_hash with real\n        // value (if we did so the `notifyNullifiedNote` oracle would throw).\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a transient note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can find it and squash both\n        // the note and the nullifier.\n        note_hash\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    assert(notify_nullified_note(nullifier, note_hash_for_consumption, nullifier_counter) == 0);\n\n    context.push_nullifier(nullifier, note_hash_for_consumption)\n}\n"},"114":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\nstruct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting  \n * a change note in a token's transfer function only when there is \"change\" left).\n */\nstruct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(self) {}\n}\n"},"121":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH, MAX_ARGS_LENGTH\n},\n    traits::Hash, hash::{pedersen_hash, compute_siloed_nullifier, sha256_to_field}\n};\nuse crate::oracle::logs_traits::{LensForEncryptedLog, ToBytesForUnencryptedLog};\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    pedersen_hash([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, N, M>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes = (n as Field).to_be_bytes(4);\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    pedersen_hash(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<N>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() <= MAX_ARGS_LENGTH, \"Args length exceeds maximum\");\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..MAX_ARGS_LENGTH {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x11e40f2a780822f7971803048c9a2100579de352e7dadd99981760964da65b57);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"122":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::{compute_siloed_nullifier, pedersen_hash},\n    constants::GENERATOR_INDEX__CONSTRUCTOR, abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier, 0);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier, 0);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_contract_initialization_nullifier(context.this_address());\n    let header = context.get_header();\n    header.prove_nullifier_inclusion(init_nullifier);\n}\n\nfn compute_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    compute_siloed_nullifier(\n        address,\n        compute_unsiloed_contract_initialization_nullifier(address)\n    )\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    pedersen_hash(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"123":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr","source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, hash::pedersen_hash, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: Field = 24;\n\nstruct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nunconstrained fn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nunconstrained fn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n"},"124":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::{address::AztecAddress, point::Point};\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<M>(_note_hash_counter: u32, _encrypted_note: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_note_log<M>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<M>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32\n) {}\n\nunconstrained pub fn emit_encrypted_event_log<M>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedNoteLog)]\nunconstrained fn compute_encrypted_note_log_oracle<N, M>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_note_log<N, M>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_note_log_oracle(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        preimage\n    )\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedEventLog)]\nunconstrained fn compute_encrypted_event_log_oracle<N, M>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _event_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_event_log<N, M>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    event_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_event_log_oracle(\n        contract_address,\n        randomness,\n        event_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        preimage\n    )\n}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_oracle_private<T>(_contract_address: AztecAddress, _message: T, _counter: u32) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log_private_internal<T>(\n    contract_address: AztecAddress,\n    message: T,\n    counter: u32\n) -> Field {\n    emit_unencrypted_log_oracle_private(contract_address, message, counter)\n}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private<N>(contract_address: AztecAddress, message: [Field; N], counter: u32) -> Field {}\n\nunconstrained pub fn emit_contract_class_unencrypted_log_private_internal<N>(contract_address: AztecAddress, message: [Field; N], counter: u32) -> Field {\n    emit_contract_class_unencrypted_log_private(contract_address, message, counter)\n}\n"},"125":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<N>(_args: [Field; N]) -> Field {}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n/// - Pack arguments (array version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments_array<N>(args: [Field; N]) -> Field {\n    pack_arguments_array_oracle(args)\n}\n\n/// - Pack arguments (slice version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments(args: [Field]) -> Field {\n    pack_arguments_oracle(args)\n}\n\n"},"128":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, hash::pedersen_hash,\n    public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage, traits::{Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _leaf_slot: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, leaf_slot: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, leaf_slot);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"129":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub fn get_key_validation_request(pk_m_hash: Field, key_index: Field) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n\n"},"132":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/storage.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<N>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field\n) -> [Field; N] {}\n\nunconstrained pub fn raw_storage_read<N>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> [Field; N] {\n    storage_read_oracle(address.to_field(), storage_slot, block_number as Field, N)\n}\n\nunconstrained pub fn storage_read<T, N>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> T where T: Deserialize<N> {\n    T::deserialize(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::address::AztecAddress;\n\n    use std::test::OracleMock;\n    use crate::test::mocks::mock_struct::MockStruct;\n\n    global address = AztecAddress::from_field(29);\n    global slot = 7;\n    global block_number = 17;\n\n    #[test]\n    fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"},"133":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/unsafe_rand.nr","source":"#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n\n// Called `unsafe_rand` because we do not constrain in circuit that we are dealing with an actual random value.\n// Instead we just trust our PXE.\nunconstrained pub fn unsafe_rand() -> Field {\n    rand_oracle()\n}\n"},"135":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n"},"136":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::PublicKeys;\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained fn get_public_keys_and_partial_address_oracle_wrapper(address: AztecAddress) -> [Field; 13] {\n    get_public_keys_and_partial_address_oracle(address)\n}\n\nfn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle_wrapper(address);\n\n    let keys = PublicKeys {\n        npk_m: Point::new(result[0], result[1], result[2] as bool),\n        ivpk_m: Point::new(result[3], result[4], result[5] as bool),\n        ovpk_m: Point::new(result[6], result[7], result[8] as bool),\n        tpk_m: Point::new(result[9], result[10], result[11] as bool)\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"138":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _inner_note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    inner_note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        serialized_note,\n        inner_note_hash,\n        counter\n    )\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field, _counter: u32) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash, counter)\n}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, N, NB, M, S, NS>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N, NB> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n// Only ever use this in private!\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n// Only ever use this in private!\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n"},"139":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, utils::arr_copy_slice,\n    constants::CONTRACT_INSTANCE_LENGTH, utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"140":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{\n    abis::{\n    function_selector::FunctionSelector, public_call_stack_item::PublicCallStackItem,\n    function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs,\n    call_context::CallContext, read_request::ReadRequest, note_hash::NoteHash, nullifier::Nullifier,\n    log_hash::LogHash, global_variables::GlobalVariables, gas::Gas\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    messaging::l2_to_l1_message::L2ToL1Message, header::Header, address::AztecAddress,\n    utils::reader::Reader,\n    constants::{\n    MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n}\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn parse_public_call_stack_item_from_oracle(fields: [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH]) -> PublicCallStackItem {\n    let mut reader = Reader::new(fields);\n\n    // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n    // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n    // WARNING: if updating, see comment in public_call_stack_item.ts's PublicCallStackItem.hash()\n    let item = PublicCallStackItem {\n        contract_address: AztecAddress::from_field(reader.read()),\n        function_data: FunctionData { selector: FunctionSelector::from_field(reader.read()), is_private: false },\n        public_inputs: PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            start_side_effect_counter: reader.read_u32(),\n            args_hash: reader.read(),\n            returns_hash: 0,\n            note_hash_read_requests: [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n            l1_to_l2_msg_read_requests: [ReadRequest::empty(); MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL],\n            contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n            contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            note_hashes: [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL],\n            nullifiers: [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL],\n            l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL],\n            end_side_effect_counter: 0,\n            unencrypted_logs_hashes: [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL],\n            historical_header: Header::empty(),\n            global_variables: GlobalVariables::empty(),\n            prover_address: AztecAddress::zero(),\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty(),\n            transaction_fee: 0\n        },\n        is_execution_request: true\n    };\n    reader.finish();\n\n    item\n}\n"},"148":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr","source":"use crate::{\n    context::{PublicContext, UnconstrainedContext}, oracle::storage::storage_read,\n    state_vars::storage::Storage\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like SharedImmutable but without the ability to read from private functions.\n// docs:start:public_immutable_struct\nstruct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\nimpl<T, Context> Storage<T> for PublicImmutable<T, Context> {}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl <T> PublicImmutable<T, &mut PublicContext> {\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T> PublicImmutable<T, UnconstrainedContext> {\n    unconstrained pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"149":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext}, oracle::storage::storage_read,\n    state_vars::storage::Storage\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\nstruct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T> SharedImmutable<T, &mut PublicContext> {\n    // Intended to be only called once. \n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T> SharedImmutable<T, UnconstrainedContext> {\n    unconstrained pub fn read_public<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T> SharedImmutable<T, &mut PrivateContext> {\n    pub fn read_private<T_SERIALIZED_LEN>(self) -> T  where T: Deserialize<T_SERIALIZED_LEN> {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"153":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE, lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader, note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note> PrivateSet<Note, &mut PublicContext> {\n    // docs:start:insert_from_public\n    pub fn insert_from_public<N, M>(self, note: &mut Note) where Note: NoteInterface<N, M> {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note> PrivateSet<Note, &mut PrivateContext> {\n    // docs:start:insert\n    pub fn insert<N, M>(self, note: &mut Note) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    // docs:start:remove\n    pub fn remove<N, M>(self, note: Note) where Note: NoteInterface<N, M> {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read = self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(self.context, note);\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<N, M, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, M, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> where Note: NoteInterface<N, M> {\n        get_notes(self.context, self.storage_slot, options)\n    }\n    // docs:end:get_notes\n}\n\nimpl<Note> PrivateSet<Note, UnconstrainedContext> {\n    // docs:start:view_notes\n    unconstrained pub fn view_notes<N, M>(\n        self,\n        options: NoteViewerOptions<Note, N, M>\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N, M> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"155":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_delay_change.nr","source":"use dep::protocol_types::traits::{Serialize, Deserialize, FromField, ToField};\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to store the minimum delay with which a ScheduledValueChange object can\n// schedule a change.\n// This delay is initally equal to INITIAL_DELAY, and can be safely mutated to any other value over time. This mutation \n// is performed via `schedule_change` in order to satisfy ScheduleValueChange constraints: if e.g. we allowed for the \n// delay to be decreased immediately then it'd be possible for the state variable to schedule a value change with a \n// reduced delay, invalidating prior private reads.\nstruct ScheduledDelayChange<INITIAL_DELAY> {\n    // Both pre and post are stored in public storage, so by default they are zeroed. By wrapping them in an Option, \n    // they default to Option::none(), which we detect and replace with INITIAL_DELAY. The end result is that a\n    // ScheduledDelayChange that has not been initialized has a delay equal to INITIAL_DELAY, which is the desired\n    // effect. Once initialized, the Option will never be none again.\n    pre: Option<u32>,\n    post: Option<u32>,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n    // The _dummy variable forces INITIAL_DELAY to be interpreted as a numeric value. This is a workaround to\n    // https://github.com/noir-lang/noir/issues/4633. Remove once resolved.\n    _dummy: [Field; INITIAL_DELAY],\n}\n\nimpl<INITIAL_DELAY> ScheduledDelayChange<INITIAL_DELAY> {\n    pub fn new(pre: Option<u32>, post: Option<u32>, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change, _dummy: [0; INITIAL_DELAY] }\n    }\n\n    /// Returns the current value of the delay stored in the data structure.\n    /// This function only returns a meaningful value when called in public with the current block number - for\n    /// historical private reads use `get_effective_minimum_delay_at` instead.\n    pub fn get_current(self, current_block_number: u32) -> u32 {\n        // The post value becomes the current one at the block of change, so any transaction that is included in the\n        // block of change will use the post value.\n\n        if current_block_number < self.block_of_change {\n            self.pre.unwrap_or(INITIAL_DELAY)\n        } else {\n            self.post.unwrap_or(INITIAL_DELAY)\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change delay and the block at which it will become the current\n    /// delay. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (u32, u32) {\n        (self.post.unwrap_or(INITIAL_DELAY), self.block_of_change)\n    }\n\n    /// Mutates the delay change by scheduling a change at the current block number. This function is only meaningful\n    /// when called in public with the current block number.\n    /// The block at which the new delay will become effective is determined automatically:\n    ///  - when increasing the delay, the change is effective immediately\n    ///  - when reducing the delay, the change will take effect after a delay equal to the difference between old and\n    ///    new delay. For example, if reducing from 3 days to 1 day, the reduction will be scheduled to happen after 2\n    ///    days.\n    pub fn schedule_change(&mut self, new: u32, current_block_number: u32) {\n        let current = self.get_current(current_block_number);\n\n        // When changing the delay value we must ensure that it is not possible to produce a value change with a delay\n        // shorter than the current one.\n        let blocks_until_change = if new > current {\n            // Increasing the delay value can therefore be done immediately: this does not invalidate prior contraints\n            // about how quickly a value might be changed (indeed it strengthens them).\n            0\n        } else {\n            // Decreasing the delay requires waiting for the difference between current and new delay in order to ensure\n            // that overall the current delay is respected.\n            //\n            //      current                    delay              earliest value block of change\n            //       block                 block of change         if delay remained unchanged\n            //  =======N=========================|================================X=================>\n            //         ^                         ^                                ^\n            //         |-------------------------|--------------------------------|\n            //         |   blocks until change               new delay            |\n            //         ------------------------------------------------------------\n            //                            current delay\n            current - new\n        };\n\n        self.pre = Option::some(current);\n        self.post = Option::some(new);\n        self.block_of_change = current_block_number + blocks_until_change;\n    }\n\n    /// Returns the minimum delay before a value might mutate due to a scheduled change, from the perspective of some\n    /// historical block number. It only returns a meaningful value when called in private with historical blocks. This \n    /// function can be used alongside `ScheduledValueChange.get_block_horizon` to properly constrain the\n    /// `max_block_number` transaction property when reading mutable shared state.\n    /// This value typically equals the current delay at the block following the historical one (the earliest one in\n    /// which a value change could be scheduled), but it also considers scenarios in which a delay reduction is \n    /// scheduled to happen in the near future, resulting in a way to schedule a change with an overall delay lower than\n    /// the current one.\n    pub fn get_effective_minimum_delay_at(self, historical_block_number: u32) -> u32 {\n        if self.block_of_change <= historical_block_number {\n            // If no delay changes were scheduled, then the delay value at the historical block (post) is guaranteed to\n            // hold due to how further delay changes would be scheduled by `schedule_change`.\n            self.post.unwrap_or(INITIAL_DELAY)\n        } else {\n            // If a change is scheduled, then the effective delay might be lower than the current one (pre). At the\n            // block of change the current delay will be the scheduled one, with an overall delay from the historical\n            // block number equal to the number of blocks until the change plus the new delay. If this value is lower\n            // than the current delay, then that is the effective minimum delay.\n            //\n            //       historical\n            //         block                  delay                  actual earliest value\n            //           v                block of change              block of change\n            //  =========NS=====================|=============================X===========Y=====>\n            //            ^                     ^                             ^           ^\n            //     earliest block in            |                             |           |\n            //   which to schedule change       |                             |           |\n            //           |                      |                             |           |\n            //           |----------------------|------------------------------           |\n            //           |         blocks                  new delay                      |\n            //           |      until change                                              |\n            //           |                                                                |\n            //           |----------------------------------------------------------------|\n            //                        current delay at the earliest block in \n            //                             which to scheduled value change\n\n            let blocks_until_change = self.block_of_change - (historical_block_number + 1);\n\n            min(\n                self.pre.unwrap_or(INITIAL_DELAY),\n                blocks_until_change + self.post.unwrap_or(INITIAL_DELAY)\n            )\n        }\n    }\n}\n\nimpl<INITIAL_DELAY> Serialize<1> for ScheduledDelayChange<INITIAL_DELAY> {\n    fn serialize(self) -> [Field; 1] {\n        // We pack all three u32 values into a single U128, which is made up of two u64 limbs.\n        // Low limb: [ pre_inner: u32 | post_inner: u32 ]\n        // High limb: [ empty | pre_is_some: u8 |  post_is_some: u8 | block_of_change: u32 ]\n\n        let lo = ((self.pre.unwrap_unchecked() as u64) * (1 << 32))\n            + (self.post.unwrap_unchecked() as u64);\n\n        let hi = (self.pre.is_some() as u64) * (1 << 33) \n            + (self.post.is_some() as u64 * (1 << 32)) \n            + self.block_of_change as u64;\n\n        let packed = U128::from_u64s_le(lo, hi);\n\n        [packed.to_integer()]\n    }\n}\n\nimpl<INITIAL_DELAY> Deserialize<1> for ScheduledDelayChange<INITIAL_DELAY> {\n    fn deserialize(input: [Field; 1]) -> Self {\n        let packed = U128::from_integer(input[0]);\n\n        // We use division and modulo to clear the bits that correspond to other values when unpacking.\n\n        let pre_is_some = ((packed.hi as u64) / (1 << 33)) as bool;\n        let pre_inner = ((packed.lo as u64) / (1 << 32)) as u32;\n\n        let post_is_some = (((packed.hi as u64) / (1 << 32)) % (1 << 1)) as bool;\n        let post_inner = ((packed.lo as u64) % (1 << 32)) as u32;\n\n        let block_of_change = ((packed.hi as u64) % (1 << 32)) as u32;\n\n        Self {\n            pre: if pre_is_some { Option::some(pre_inner) } else { Option::none() },\n            post: if post_is_some { Option::some(post_inner) } else { Option::none() },\n            block_of_change,\n            _dummy: [0; INITIAL_DELAY],\n        }\n    }\n}\n\nimpl<INITIAL_DELAY> Eq for ScheduledDelayChange<INITIAL_DELAY> {\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre) & (self.post == other.post) & (self.block_of_change == other.block_of_change)\n    }\n}\n"},"157":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/shared_mutable_private_getter.nr","source":"use dep::protocol_types::{\n    hash::{pedersen_hash, poseidon2_hash}, traits::{FromField, ToField}, address::AztecAddress,\n    header::Header\n};\n\nuse crate::context::PrivateContext;\nuse crate::state_vars::{\n    storage::Storage,\n    shared_mutable::{\n    shared_mutable::SharedMutable, scheduled_delay_change::ScheduledDelayChange,\n    scheduled_value_change::ScheduledValueChange\n}\n};\n\nstruct SharedMutablePrivateGetter<T, INITIAL_DELAY> {\n    context: &mut PrivateContext,\n    // The contract address of the contract we want to read from\n    other_contract_address: AztecAddress,\n    // The storage slot where the SharedMutable is stored on the other contract\n    storage_slot: Field,\n    // The _dummy variable forces INITIAL_DELAY to be interpreted as a numberic value. This is a workaround to\n    // https://github.com/noir-lang/noir/issues/4633. Remove once resolved.\n    _dummy: [Field; INITIAL_DELAY],\n}\n\n// We have this as a view-only interface to reading Shared Mutables in other contracts.\n// Currently the Shared Mutable does not support this. We can adapt SharedMutable at a later date\nimpl<T, INITIAL_DELAY> SharedMutablePrivateGetter<T, INITIAL_DELAY> {\n    pub fn new(\n        context: &mut PrivateContext,\n        other_contract_address: AztecAddress,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        assert(other_contract_address.to_field() != 0, \"Other contract address cannot be 0\");\n        Self { context, other_contract_address, storage_slot, _dummy: [0; INITIAL_DELAY] }\n    }\n\n    pub fn get_value_in_private(self, header: Header) -> T where T: FromField + ToField + Eq {\n        // We create a dummy SharedMutable state variable so that we can reuse its historical_read_from_public_storage\n        // method, greatly reducing code duplication. \n        let dummy: SharedMutable<T, INITIAL_DELAY, ()> = SharedMutable::new((), self.storage_slot);\n        let (value_change, delay_change, historical_block_number) = dummy.historical_read_from_public_storage(header, self.other_contract_address);\n\n        let effective_minimum_delay = delay_change.get_effective_minimum_delay_at(historical_block_number);\n        let block_horizon = value_change.get_block_horizon(historical_block_number, effective_minimum_delay);\n\n        // If our context has the same header as the one we pass in via the parameter, we are trying to read the \"current\" value\n        // and thus need to set the tx max block number below. If the context header is not the same as the one we pass in, this means\n        // we are trying to read a historical value and thus have no constraint on the max block number that this transaction can be included in.\n        if (self.context.historical_header.global_variables.block_number.eq(header.global_variables.block_number)) {\n            self.context.set_tx_max_block_number(block_horizon);\n        }\n\n        value_change.get_current_at(historical_block_number)\n    }\n}\n"},"159":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_value_change.nr","source":"use dep::protocol_types::traits::{Serialize, Deserialize, FromField, ToField};\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to represent a value that changes from `pre` to `post` at some block\n// called the `block_of_change`. The value can only be made to change by scheduling a change event at some future block\n// of change after some minimum delay measured in blocks has elapsed. This means that at any given block number we know\n// both the current value and the smallest block number at which the value might change - this is called the\n// 'block horizon'.\nstruct ScheduledValueChange<T> {\n    pre: T,\n    post: T,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n}\n\nimpl<T> ScheduledValueChange<T> {\n    pub fn new(pre: T, post: T, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the value stored in the data structure at a given block. This function can be called both in public\n    /// (where `block_number` is simply the current block number, i.e. the number of the block in which the current\n    /// transaction will be included) and in private (where `block_number` is the historical block number that is used\n    /// to construct the proof).\n    /// Reading in private is only safe if the transaction's `max_block_number` property is set to a value lower or\n    /// equal to the block horizon (see `get_block_horizon()`).\n    pub fn get_current_at(self, block_number: u32) -> T {\n        // The post value becomes the current one at the block of change. This means different things in each realm:\n        // - in public, any transaction that is included in the block of change will use the post value\n        // - in private, any transaction that includes the block of change as part of the historical state will use the\n        //   post value (barring any follow-up changes)\n\n        if block_number < self.block_of_change {\n            self.pre\n        } else {\n            self.post\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change value and the block at which it will become the current\n    /// value. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (T, u32) {\n        (self.post, self.block_of_change)\n    }\n\n    /// Returns the largest block number at which the value returned by `get_current_at` is known to remain the current\n    /// value. This value is only meaningful in private when constructing a proof at some `historical_block_number`,\n    /// since due to its asynchronous nature private execution cannot know about any later scheduled changes.\n    /// The caller of this function must know how quickly the value can change due to a scheduled change in the form of\n    /// `minimum_delay`. If the delay itself is immutable, then this is just its duration. If the delay is mutable\n    /// however, then this value is the 'effective minimum delay' (obtained by calling\n    /// `ScheduledDelayChange.get_effective_minimum_delay_at`), which equals the minimum number of blocks that need to\n    /// elapse from the next block until the value changes, regardless of further delay changes.\n    /// The value returned by `get_current_at` in private when called with a historical block number is only safe to use\n    /// if the transaction's `max_block_number` property is set to a value lower or equal to the block horizon computed\n    /// using the same historical block number.\n    pub fn get_block_horizon(self, historical_block_number: u32, minimum_delay: u32) -> u32 {\n        // The block horizon is the very last block in which the current value is known. Any block past the horizon\n        // (i.e. with a block number larger than the block horizon) may have a different current value. Reading the\n        // current value in private typically requires constraining the maximum valid block number to be equal to the\n        // block horizon.\n\n        if historical_block_number >= self.block_of_change {\n            // Once the block of change has been mined, the current value (post) will not change unless a new value\n            // change is scheduled. This did not happen at the historical block number (or else it would not be\n            // greater or equal to the block of change), and therefore could only happen after the historical block\n            // number. The earliest would be the immediate next block, and so the smallest possible next block of change\n            // equals `historical_block_number + 1 + minimum_delay`. Our block horizon is simply the previous block to\n            // that one.\n            //\n            //      block of      historical\n            //       change         block            block horizon\n            //   =======|=============N===================H===========>\n            //                         ^                   ^\n            //                         ---------------------\n            //                             minimum delay\n\n            historical_block_number + minimum_delay\n        } else {\n            // If the block of change has not yet been mined however, then there are two possible scenarios.\n            //   a) It could be so far into the future that the block horizon is actually determined by the minimum\n            //      delay, because a new change could be scheduled and take place _before_ the currently scheduled one.\n            //      This is similar to the scenario where the block of change is in the past: the time horizon is the\n            //      block prior to the earliest one in which a new block of change might land.\n            //\n            //         historical\n            //           block                        block horizon      block of change\n            //        =====N=================================H=================|=========>\n            //              ^                                 ^\n            //              |                                 |\n            //              -----------------------------------\n            //                        minimum delay\n            //\n            //   b) It could be fewer than `minimum_delay` blocks away from the historical block number, in which case\n            //      the block of change would become the limiting factor for the time horizon, which would equal the\n            //      block right before the block of change (since by definition the value changes at the block of\n            //      change).\n            //\n            //           historical                         block horizon\n            //             block     block of change       if not scheduled\n            //        =======N=============|===================H=================>\n            //                ^           ^                     ^\n            //                |     actual horizon              |\n            //                -----------------------------------\n            //                          minimum delay\n            //\n            // Note that the current implementation does not allow the caller to set the block of change to an arbitrary\n            // value, and therefore scenario a) is not currently possible. However implementing #5501 would allow for\n            // this to happen.\n\n            // Because historical_block_number < self.block_of_change, then block_of_change > 0 and we can safely\n            // subtract 1.\n            min(\n                self.block_of_change - 1,\n                historical_block_number + minimum_delay\n            )\n        }\n    }\n\n    /// Mutates the value by scheduling a change at the current block number. This function is only meaningful when\n    /// called in public with the current block number.\n    pub fn schedule_change(\n        &mut self,\n        new_value: T,\n        current_block_number: u32,\n        minimum_delay: u32,\n        block_of_change: u32\n    ) {\n        assert(block_of_change >= current_block_number + minimum_delay);\n\n        self.pre = self.get_current_at(current_block_number);\n        self.post = new_value;\n        self.block_of_change = block_of_change;\n    }\n}\n\nimpl<T> Serialize<3> for ScheduledValueChange<T> {\n    fn serialize(self) -> [Field; 3] where T: ToField {\n        [self.pre.to_field(), self.post.to_field(), self.block_of_change.to_field()]\n    }\n}\n\nimpl<T> Deserialize<3> for ScheduledValueChange<T> {\n  fn deserialize(input: [Field; 3]) -> Self  where T: FromField {\n    Self {\n        pre: FromField::from_field(input[0]),\n        post: FromField::from_field(input[1]),\n        block_of_change: FromField::from_field(input[2]),\n    }\n  }\n}\n\nimpl<T> Eq for ScheduledValueChange<T>  {\n    fn eq(self, other: Self) -> bool where T: Eq {\n        (self.pre == other.pre) & (self.post == other.post) & (self.block_of_change == other.block_of_change)\n    }\n}\n"},"160":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/shared_mutable.nr","source":"use dep::protocol_types::{\n    hash::{pedersen_hash, poseidon2_hash}, header::Header, address::AztecAddress,\n    traits::{FromField, ToField}\n};\n\nuse crate::context::{PrivateContext, PublicContext};\nuse crate::state_vars::{\n    storage::Storage,\n    shared_mutable::{scheduled_value_change::ScheduledValueChange, scheduled_delay_change::ScheduledDelayChange}\n};\nuse crate::oracle::storage::storage_read;\nuse dep::std::unsafe::zeroed;\n\nmod test;\n\nstruct SharedMutable<T, INITIAL_DELAY, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n\n// This will make the Aztec macros require that T implements the Serialize<N> trait, and allocate N storage slots to\n// this state variable. This is incorrect, since what we actually store is:\n//  - a ScheduledValueChange<T>, which requires 1 + 2 * M storage slots, where M is the serialization length of T\n//  - a ScheduledDelayChange, which requires another storage slot\n//\n// TODO https://github.com/AztecProtocol/aztec-packages/issues/5736: change the storage allocation scheme so that we\n// can actually use it here\nimpl<T, INITIAL_DELAY, Context> Storage<T> for SharedMutable<T, INITIAL_DELAY, Context> {}\n\n// TODO: extract into a utils module once  we can do arithmetic on generics, i.e. https://github.com/noir-lang/noir/issues/4784\nfn concat_arrays<N, M, O>(arr_n: [Field; N], arr_m: [Field; M]) -> [Field; O] {\n    assert_eq(N + M, O);\n    let mut out: [Field; O] = [0; O];\n    for i in 0..N {\n        out[i] = arr_n[i];\n    }\n    for i in 0..M {\n        out[N+i] = arr_m[i];\n    }\n    out\n}\n\n// SharedMutable<T> stores a value of type T that is:\n//  - publicly known (i.e. unencrypted)\n//  - mutable in public\n//  - readable in private with no contention (i.e. multiple parties can all read the same value without blocking one\n//    another nor needing to coordinate)\n// This is famously a hard problem to solve. SharedMutable makes it work by introducing a delay to public mutation:\n// the value is not changed immediately but rather a value change is scheduled to happen in the future after some delay\n// measured in blocks. Reads in private are only valid as long as they are included in a block not too far into the\n// future, so that they can guarantee the value will not have possibly changed by then (because of the delay).\n// The delay for changing a value is initially equal to INITIAL_DELAY, but can be changed by calling\n// `schedule_delay_change`.\nimpl<T, INITIAL_DELAY, Context> SharedMutable<T, INITIAL_DELAY, Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n\n    fn hash_scheduled_data(\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>\n    ) -> Field where T: ToField {\n        // TODO(#5491 and https://github.com/noir-lang/noir/issues/4784): update this so that we don't need to rely on\n        // ScheduledValueChange serializing to 3 and ScheduledDelayChange serializing to 1\n        let concatenated: [Field; 4] = concat_arrays(value_change.serialize(), delay_change.serialize());\n        poseidon2_hash(concatenated)\n    }\n\n    // Since we can't rely on the native storage allocation scheme, we hash the storage slot to get a unique location in\n    // which we can safely store as much data as we need.\n    // See https://github.com/AztecProtocol/aztec-packages/issues/5492 and\n    // https://github.com/AztecProtocol/aztec-packages/issues/5736\n    // We store three things in public storage:\n    //  - a ScheduledValueChange\n    //  - a ScheduledDelaChange\n    //  - the hash of both of these (via `hash_scheduled_data`)\n    fn get_value_change_storage_slot(self) -> Field {\n        pedersen_hash([self.storage_slot, 0], 0)\n    }\n\n    fn get_delay_change_storage_slot(self) -> Field {\n        pedersen_hash([self.storage_slot, 1], 0)\n    }\n\n    fn get_hash_storage_slot(self) -> Field {\n        pedersen_hash([self.storage_slot, 2], 0)\n    }\n\n    // It may seem odd that we take a header and address instead of reading from e.g. a PrivateContext, but this lets us\n    // reuse this function in SharedMutablePrivateGetter.\n    fn historical_read_from_public_storage(\n        self,\n        header: Header,\n        address: AztecAddress\n    ) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>, u32) where T: FromField + ToField + Eq {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for both the ScheduledValueChange and\n        // ScheduledDelayChange, but that'd require one full sibling path per storage slot (since due to kernel siloing\n        // the storage is not contiguous), and in the best case in which T is a single field that'd be 4 slots.\n        // Instead, we get an oracle to provide us the correct values for both the value and delay changes, and instead\n        // prove inclusion of their hash, which is both a much smaller proof (a single slot), and also independent of\n        // the size of T.\n        let (value_change_hint, delay_change_hint) = get_public_storage_hints(address, self.storage_slot, historical_block_number);\n\n        // Ideally the following would be simply public_storage::read_historical, but we can't implement that yet.\n        let hash = header.public_storage_historical_read(self.get_hash_storage_slot(), address);\n\n        // @todo This is written strangely to bypass a formatting issue with the if that is breaking ci.\n        let (a, b, c) = if hash != 0 {\n            let a = SharedMutable::hash_scheduled_data(value_change_hint, delay_change_hint);\n            (a, value_change_hint, delay_change_hint)\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized, meaning no value or delay change was ever\n            // scheduled. Therefore, the hints must then correspond to uninitialized scheduled changes.\n            let b = ScheduledValueChange::deserialize(zeroed());\n            let c = ScheduledDelayChange::deserialize(zeroed());\n            (hash, b, c)\n        };\n\n        assert_eq(hash, a, \"Hint values do not match hash\");\n        assert_eq(value_change_hint, b, \"Non-zero value change for zero hash\");\n        assert_eq(delay_change_hint, c, \"Non-zero delay change for zero hash\");\n\n        (value_change_hint, delay_change_hint, historical_block_number)\n    }\n}\n\nimpl<T, INITIAL_DELAY> SharedMutable<T, INITIAL_DELAY, &mut PublicContext> {\n    pub fn schedule_value_change(self, new_value: T) where T: ToField {\n        let mut value_change = self.read_value_change();\n        let delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n        let current_delay = delay_change.get_current(block_number);\n\n        // TODO: make this configurable\n        // https://github.com/AztecProtocol/aztec-packages/issues/5501\n        let block_of_change = block_number + current_delay;\n        value_change.schedule_change(new_value, block_number, current_delay, block_of_change);\n\n        self.write(value_change, delay_change);\n    }\n\n    pub fn schedule_delay_change(self, new_delay: u32) where T: ToField {\n        let mut delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n\n        delay_change.schedule_change(new_delay, block_number);\n\n        self.write(self.read_value_change(), delay_change);\n    }\n\n    pub fn get_current_value_in_public(self) -> T {\n        let block_number = self.context.block_number() as u32;\n        self.read_value_change().get_current_at(block_number)\n    }\n\n    pub fn get_current_delay_in_public(self) -> u32 {\n        let block_number = self.context.block_number() as u32;\n        self.read_delay_change().get_current(block_number)\n    }\n\n    pub fn get_scheduled_value_in_public(self) -> (T, u32) {\n        self.read_value_change().get_scheduled()\n    }\n\n    pub fn get_scheduled_delay_in_public(self) -> (u32, u32) {\n        self.read_delay_change().get_scheduled()\n    }\n\n    fn read_value_change(self) -> ScheduledValueChange<T> {\n        self.context.storage_read(self.get_value_change_storage_slot())\n    }\n\n    fn read_delay_change(self) -> ScheduledDelayChange<INITIAL_DELAY> {\n        self.context.storage_read(self.get_delay_change_storage_slot())\n    }\n\n    fn write(\n        self,\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>\n    ) where T: ToField {\n        // Whenever we write to public storage, we write both the value change and delay change as well as the hash of\n        // them both. This guarantees that the hash is always kept up to date.\n        // While this makes for more costly writes, it also makes private proofs much simpler because they only need to\n        // produce a historical proof for the hash, which results in a single inclusion proof (as opposed to 4 in the\n        // best case scenario in which T is a single field). Private shared mutable reads are assumed to be much more\n        // frequent than public writes, so this tradeoff makes sense.\n        self.context.storage_write(self.get_value_change_storage_slot(), value_change);\n        self.context.storage_write(self.get_delay_change_storage_slot(), delay_change);\n        self.context.storage_write(\n            self.get_hash_storage_slot(),\n            SharedMutable::hash_scheduled_data(value_change, delay_change)\n        );\n    }\n}\n\nimpl<T, INITIAL_DELAY> SharedMutable<T, INITIAL_DELAY, &mut PrivateContext> {\n    pub fn get_current_value_in_private(self) -> T where T: FromField + ToField + Eq {\n        // When reading the current value in private we construct a historical state proof for the public value.\n        // However, since this value might change, we must constrain the maximum transaction block number as this proof\n        // will only be valid for however many blocks we can ensure the value will not change, which will depend on the\n        // current delay and any scheduled delay changes.\n\n        let (value_change, delay_change, historical_block_number) = self.historical_read_from_public_storage(self.context.get_header(), self.context.this_address());\n\n        // We use the effective minimum delay as opposed to the current delay at the historical block as this one also\n        // takes into consideration any scheduled delay changes.\n        // For example, consider a scenario in which at block 200 the current delay was 50. We may naively think that\n        // the earliest we could change the value would be at block 251 by scheduling immediately after the historical\n        // block, i.e. at block 201. But if there was a delay change scheduled for block 210 to reduce the delay to 20\n        // blocks, then if a value change was scheduled at block 210 it would go into effect at block 230, which is\n        // earlier than what we'd expect if we only considered the current delay.\n        let effective_minimum_delay = delay_change.get_effective_minimum_delay_at(historical_block_number);\n        let block_horizon = value_change.get_block_horizon(historical_block_number, effective_minimum_delay);\n\n        // We prevent this transaction from being included in any block after the block horizon, ensuring that the\n        // historical public value matches the current one, since it can only change after the horizon.\n        self.context.set_tx_max_block_number(block_horizon);\n        value_change.get_current_at(historical_block_number)\n    }\n}\n\nunconstrained fn get_public_storage_hints<T, INITIAL_DELAY>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>) {\n    // This function cannot be part of the &mut PrivateContext impl because that'd mean that by passing `self` we'd also\n    // be passing a mutable reference to an unconstrained function, which is not allowed. We therefore create a dummy\n    // state variable here so that we can access the methods to compute storage slots. This will all be removed in the\n    // future once we do proper storage slot allocation (#5492).\n    let dummy = SharedMutable::new((), storage_slot);\n\n    (\n        storage_read(address, dummy.get_value_change_storage_slot(), block_number), storage_read(address, dummy.get_delay_change_storage_slot(), block_number)\n    )\n}\n"},"167":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{GAS_LENGTH, FIXED_DA_GAS, FIXED_L2_GAS}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered, utils::reader::Reader,\n    abis::gas_fees::GasFees\n};\nuse std::ops::{Add, Sub};\n\nstruct Gas {\n    da_gas: u32,\n    l2_gas: u32,\n}\n\nimpl Gas {\n    pub fn new(da_gas: u32, l2_gas: u32) -> Self {\n        Self { da_gas, l2_gas }\n    }\n\n    pub fn tx_overhead() -> Self {\n        Self { da_gas: FIXED_DA_GAS, l2_gas: FIXED_L2_GAS }\n    }\n\n    pub fn compute_fee(self, fees: GasFees) -> Field {\n        (self.da_gas as Field) * fees.fee_per_da_gas + (self.l2_gas as Field) * fees.fee_per_l2_gas\n    }\n\n    pub fn is_empty(self) -> bool {\n        (self.da_gas == 0) & (self.l2_gas == 0)\n    }\n\n    pub fn within(self, limits: Gas) -> bool {\n        (self.da_gas <= limits.da_gas) & (self.l2_gas <= limits.l2_gas)\n    }\n}\n\nimpl Add for Gas {\n    fn add(self, other: Gas) -> Self {\n        Gas::new(self.da_gas + other.da_gas, self.l2_gas + other.l2_gas)\n    }\n}\n\nimpl Sub for Gas {\n    fn sub(self, other: Gas) -> Self {\n        Gas::new(self.da_gas - other.da_gas, self.l2_gas - other.l2_gas)\n    }\n}\n\nimpl Serialize<GAS_LENGTH> for Gas {\n    fn serialize(self) -> [Field; GAS_LENGTH] {\n        [self.da_gas as Field, self.l2_gas as Field]\n    }\n}\n\nimpl Deserialize<GAS_LENGTH> for Gas {\n    fn deserialize(serialized: [Field; GAS_LENGTH]) -> Gas {\n        Gas::new(serialized[0] as u32, serialized[1] as u32)\n    }\n}\n\nimpl Eq for Gas {\n    fn eq(self, other : Gas) -> bool {\n        (self.da_gas == other.da_gas) & (self.l2_gas == other.l2_gas)\n    }\n}\n\nimpl Empty for Gas {\n    fn empty() -> Self {\n        Gas::new(0, 0)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = Gas::empty();\n    let serialized = item.serialize();\n    let deserialized = Gas::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n"},"169":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/note_hash.nr","source":"use crate::{\n    abis::read_request::ScopedReadRequest, address::AztecAddress,\n    abis::side_effect::{Ordered, OrderedValue, Readable, Scoped},\n    constants::{NOTE_HASH_LENGTH, SCOPED_NOTE_HASH_LENGTH}, traits::{Empty, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct NoteHash {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for NoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for NoteHash {\n    fn eq(self, other: NoteHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter) \n    }\n}\n\nimpl Empty for NoteHash {\n    fn empty() -> Self {\n        NoteHash {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<NOTE_HASH_LENGTH> for NoteHash {\n    fn serialize(self) -> [Field; NOTE_HASH_LENGTH] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<NOTE_HASH_LENGTH> for NoteHash {\n    fn deserialize(values: [Field; NOTE_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl NoteHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedNoteHash {\n        ScopedNoteHash { note_hash: self, contract_address }\n    }\n}\n\nstruct ScopedNoteHash {\n    note_hash: NoteHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<NoteHash> for ScopedNoteHash {\n    fn inner(self) -> NoteHash {\n        self.note_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedNoteHash {\n    fn counter(self) -> u32 {\n        self.note_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedNoteHash {\n    fn value(self) -> Field {\n        self.note_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.note_hash.counter\n    }\n}\n\nimpl Eq for ScopedNoteHash {\n    fn eq(self, other: ScopedNoteHash) -> bool {\n        (self.note_hash == other.note_hash)\n            & (self.contract_address == other.contract_address)\n    }\n}\n\nimpl Empty for ScopedNoteHash {\n    fn empty() -> Self {\n        ScopedNoteHash {\n            note_hash: NoteHash::empty(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_NOTE_HASH_LENGTH> for ScopedNoteHash {\n    fn serialize(self) -> [Field; SCOPED_NOTE_HASH_LENGTH] {\n        array_concat(self.note_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_NOTE_HASH_LENGTH> for ScopedNoteHash {\n    fn deserialize(values: [Field; SCOPED_NOTE_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            note_hash: reader.read_struct(NoteHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl Readable for ScopedNoteHash {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        assert_eq(self.note_hash.value, read_request.value(), \"Value of the note hash does not match read request\");\n        assert_eq(self.contract_address, read_request.contract_address, \"Contract address of the note hash does not match read request\");\n        assert(\n            read_request.counter() > self.note_hash.counter, \"Read request counter must be greater than the counter of the note hash\"\n        );\n    }\n}\n\nimpl ScopedNoteHash {\n    pub fn expose_to_public(self) -> NoteHash {\n        // Hide the actual counter when exposing it to the public kernel.\n        NoteHash { value: self.note_hash.value, counter: 0 }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NoteHash::empty();\n    let serialized = item.serialize();\n    let deserialized = NoteHash::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedNoteHash::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedNoteHash::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"170":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_fees.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::GAS_FEES_LENGTH, hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty},\n    abis::side_effect::Ordered, utils::reader::Reader\n};\n\nstruct GasFees {\n    fee_per_da_gas: Field,\n    fee_per_l2_gas: Field,\n}\n\nimpl GasFees {\n    pub fn new(fee_per_da_gas: Field, fee_per_l2_gas: Field) -> Self {\n        Self { fee_per_da_gas, fee_per_l2_gas }\n    }\n\n    pub fn default() -> Self {\n        GasFees::new(1, 1)\n    }\n\n    pub fn is_empty(self) -> bool {\n        (self.fee_per_da_gas == 0) & (self.fee_per_l2_gas == 0)\n    }\n}\n\nimpl Serialize<GAS_FEES_LENGTH> for GasFees {\n    fn serialize(self) -> [Field; GAS_FEES_LENGTH] {\n        [self.fee_per_da_gas, self.fee_per_l2_gas]\n    }\n}\n\nimpl Deserialize<GAS_FEES_LENGTH> for GasFees {\n    fn deserialize(serialized: [Field; GAS_FEES_LENGTH]) -> GasFees {\n        GasFees::new(serialized[0], serialized[1])\n    }\n}\n\nimpl Eq for GasFees {\n    fn eq(self, other : GasFees) -> bool {\n        (self.fee_per_da_gas == other.fee_per_da_gas) & (self.fee_per_l2_gas == other.fee_per_l2_gas)\n    }\n}\n\nimpl Empty for GasFees {\n    fn empty() -> Self {\n        GasFees::new(0, 0)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = GasFees::empty();\n    let serialized = item.serialize();\n    let deserialized = GasFees::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"172":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_circuit_public_inputs.nr","source":"use crate::{\n    abis::{\n    call_context::CallContext, max_block_number::MaxBlockNumber, gas_settings::GasSettings,\n    validation_requests::KeyValidationRequestAndGenerator, note_hash::NoteHash, nullifier::Nullifier,\n    private_call_request::PrivateCallRequest, read_request::ReadRequest,\n    log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_L2_TO_L1_MSGS_PER_CALL, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS, MAX_ENCRYPTED_LOGS_PER_CALL,\n    MAX_UNENCRYPTED_LOGS_PER_CALL, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, hash::pedersen_hash, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader,\n    transaction::tx_context::TxContext, utils::arrays::validate_array\n};\n\nstruct PrivateCircuitPublicInputsArrayLengths {\n    note_hash_read_requests: u32,\n    nullifier_read_requests: u32,\n    key_validation_requests_and_generators: u32,\n    note_hashes: u32,\n    nullifiers: u32,\n    l2_to_l1_msgs: u32,\n    private_call_requests: u32,\n    public_call_stack_hashes: u32,\n    note_encrypted_logs_hashes: u32,\n    encrypted_logs_hashes: u32,\n    unencrypted_logs_hashes: u32,\n}\n\nimpl PrivateCircuitPublicInputsArrayLengths {\n    pub fn new(public_inputs: PrivateCircuitPublicInputs) -> Self {\n        PrivateCircuitPublicInputsArrayLengths {\n            note_hash_read_requests: validate_array(public_inputs.note_hash_read_requests),\n            nullifier_read_requests: validate_array(public_inputs.nullifier_read_requests),\n            key_validation_requests_and_generators: validate_array(public_inputs.key_validation_requests_and_generators),\n            note_hashes: validate_array(public_inputs.note_hashes),\n            nullifiers: validate_array(public_inputs.nullifiers),\n            l2_to_l1_msgs: validate_array(public_inputs.l2_to_l1_msgs),\n            private_call_requests: validate_array(public_inputs.private_call_requests),\n            public_call_stack_hashes: validate_array(public_inputs.public_call_stack_hashes),\n            note_encrypted_logs_hashes: validate_array(public_inputs.note_encrypted_logs_hashes),\n            encrypted_logs_hashes: validate_array(public_inputs.encrypted_logs_hashes),\n            unencrypted_logs_hashes: validate_array(public_inputs.unencrypted_logs_hashes)\n        }\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    returns_hash: Field,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: [ReadRequest; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    key_validation_requests_and_generators: [KeyValidationRequestAndGenerator; MAX_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    note_hashes: [NoteHash; MAX_NOTE_HASHES_PER_CALL],\n    nullifiers: [Nullifier; MAX_NULLIFIERS_PER_CALL],\n    private_call_requests: [PrivateCallRequest; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    public_teardown_function_hash: Field,\n    l2_to_l1_msgs: [L2ToL1Message; MAX_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter : u32,\n    end_side_effect_counter : u32,\n    note_encrypted_logs_hashes: [NoteLogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_CALL],\n    encrypted_logs_hashes: [EncryptedLogHash; MAX_ENCRYPTED_LOGS_PER_CALL],\n    unencrypted_logs_hashes: [LogHash; MAX_UNENCRYPTED_LOGS_PER_CALL],\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // Note: The chain_id and version here are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    tx_context: TxContext,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.returns_hash == other.returns_hash) &\n        (self.min_revertible_side_effect_counter == other.min_revertible_side_effect_counter) &\n        (self.is_fee_payer == other.is_fee_payer) &\n        (self.max_block_number == other.max_block_number) &\n        (self.note_hash_read_requests == other.note_hash_read_requests) &\n        (self.nullifier_read_requests == other.nullifier_read_requests) &\n        (self.key_validation_requests_and_generators == other.key_validation_requests_and_generators) &\n        (self.note_hashes == other.note_hashes) &\n        (self.nullifiers == other.nullifiers) &\n        (self.private_call_requests == other.private_call_requests) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.l2_to_l1_msgs == other.l2_to_l1_msgs) &\n        (self.start_side_effect_counter == other.start_side_effect_counter) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.note_encrypted_logs_hashes == other.note_encrypted_logs_hashes) &\n        (self.encrypted_logs_hashes == other.encrypted_logs_hashes) &\n        (self.unencrypted_logs_hashes == other.unencrypted_logs_hashes) &\n        self.historical_header.eq(other.historical_header) &\n        self.tx_context.eq(other.tx_context)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n\n        fields.push(self.min_revertible_side_effect_counter as Field);\n        fields.push(if self.is_fee_payer { 1 } else { 0 } as Field);\n\n        fields.extend_from_array(self.max_block_number.serialize());\n\n        for i in 0..self.note_hash_read_requests.len() {\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..self.nullifier_read_requests.len() {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..self.key_validation_requests_and_generators.len() {\n            fields.extend_from_array(self.key_validation_requests_and_generators[i].serialize());\n        }\n        for i in 0..self.note_hashes.len() {\n            fields.extend_from_array(self.note_hashes[i].serialize());\n        }\n        for i in 0..self.nullifiers.len() {\n            fields.extend_from_array(self.nullifiers[i].serialize());\n        }\n        for i in 0..self.private_call_requests.len() {\n            fields.extend_from_array(self.private_call_requests[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n        fields.push(self.public_teardown_function_hash);\n        for i in 0..self.l2_to_l1_msgs.len() {\n            fields.extend_from_array(self.l2_to_l1_msgs[i].serialize());\n        }\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n        for i in 0..self.note_encrypted_logs_hashes.len() {\n            fields.extend_from_array(self.note_encrypted_logs_hashes[i].serialize());\n        }\n        for i in 0..self.encrypted_logs_hashes.len() {\n            fields.extend_from_array(self.encrypted_logs_hashes[i].serialize());\n        }\n        for i in 0..self.unencrypted_logs_hashes.len() {\n            fields.extend_from_array(self.unencrypted_logs_hashes[i].serialize());\n        }\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.extend_from_array(self.tx_context.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            min_revertible_side_effect_counter: reader.read() as u32,\n            is_fee_payer: reader.read() == 1,\n            max_block_number: reader.read_struct(MaxBlockNumber::deserialize),\n            note_hash_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            key_validation_requests_and_generators: reader.read_struct_array(KeyValidationRequestAndGenerator::deserialize, [KeyValidationRequestAndGenerator::empty(); MAX_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            note_hashes: reader.read_struct_array(NoteHash::deserialize, [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL]),\n            nullifiers: reader.read_struct_array(Nullifier::deserialize, [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL]),\n            private_call_requests: reader.read_struct_array(PrivateCallRequest::deserialize, [PrivateCallRequest::empty(); MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            public_teardown_function_hash: reader.read(),\n            l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            note_encrypted_logs_hashes: reader.read_struct_array(NoteLogHash::deserialize, [NoteLogHash::empty(); MAX_NOTE_ENCRYPTED_LOGS_PER_CALL]),\n            encrypted_logs_hashes: reader.read_struct_array(EncryptedLogHash::deserialize, [EncryptedLogHash::empty(); MAX_ENCRYPTED_LOGS_PER_CALL]),\n            unencrypted_logs_hashes: reader.read_struct_array(LogHash::deserialize, [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL]),\n            historical_header: reader.read_struct(Header::deserialize),\n            tx_context: reader.read_struct(TxContext::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\nimpl Empty for PrivateCircuitPublicInputs {\n    fn empty() -> Self {\n        PrivateCircuitPublicInputs {\n            call_context: CallContext::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            key_validation_requests_and_generators: [KeyValidationRequestAndGenerator::empty(); MAX_KEY_VALIDATION_REQUESTS_PER_CALL],\n            note_hashes: [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL],\n            nullifiers: [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL],\n            private_call_requests: [PrivateCallRequest::empty(); MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL],\n            start_side_effect_counter : 0 as u32,\n            end_side_effect_counter : 0 as u32,\n            note_encrypted_logs_hashes: [NoteLogHash::empty(); MAX_NOTE_ENCRYPTED_LOGS_PER_CALL],\n            encrypted_logs_hashes: [EncryptedLogHash::empty(); MAX_ENCRYPTED_LOGS_PER_CALL],\n            unencrypted_logs_hashes: [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL],\n            historical_header: Header::empty(),\n            tx_context: TxContext::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi = PrivateCircuitPublicInputs::empty();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs = PrivateCircuitPublicInputs::empty();\n    let hash = inputs.hash();\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x15c9b0a92b9b541598e24c9f0b0b4b04b7f2408599751c45aa12de671fd9b363;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"173":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item_compressed.nr","source":"use crate::abis::{call_context::CallContext, function_data::FunctionData, gas::Gas};\nuse crate::address::AztecAddress;\nuse crate::constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH};\nuse crate::traits::{Hash, Empty, Serialize, Deserialize};\nuse crate::utils::reader::Reader;\n\n/**\n * A compressed version of the PublicCallStackItem struct used to compute the \"hash\"\n * of a PublicCallStackItem.\n * \n * Historically, we have been zeroing most values in the PublicCallStackItem struct\n * to compute the hash involved when adding a PublicCallStackItem to the PublicCallStack.\n * \n * This struct is used to store the values that we did not zero out, and allow us to hash\n * only these, thereby skipping a lot of computation and saving us a lot of constraints\n * \n * Essentially this struct exists such that we don't have a `hash` function in the \n * PublicCallStackItem struct that practically throws away some values of the struct\n * without clearly indicating that it does so.\n */\nstruct PublicCallStackItemCompressed {\n    contract_address: AztecAddress,\n    call_context: CallContext,\n    function_data: FunctionData,\n    args_hash: Field,\n    returns_hash: Field,\n    revert_code: u8,\n    start_gas_left: Gas,\n    end_gas_left: Gas,\n}\n\nimpl Eq for PublicCallStackItemCompressed {\n    fn eq(self, other: PublicCallStackItemCompressed) -> bool {\n        (self.contract_address == other.contract_address)\n            & (self.call_context == other.call_context)\n            & (self.function_data == other.function_data)\n            & (self.args_hash == other.args_hash)\n            & (self.returns_hash == other.returns_hash)\n            & (self.revert_code == other.revert_code)\n            & (self.start_gas_left == other.start_gas_left)\n            & (self.end_gas_left == other.end_gas_left)\n    }\n}\n\nimpl Hash for PublicCallStackItemCompressed {\n    fn hash(self) -> Field {\n        std::hash::pedersen_hash_with_separator(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl Empty for PublicCallStackItemCompressed {\n    fn empty() -> Self {\n        PublicCallStackItemCompressed {\n            contract_address: AztecAddress::empty(),\n            call_context: CallContext::empty(),\n            function_data: FunctionData::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty(),\n        }\n    }\n}\n\nimpl Serialize<PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> for PublicCallStackItemCompressed {\n    fn serialize(self) -> [Field; PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.call_context.serialize());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n        fields.push(self.revert_code as Field);\n        fields.extend_from_array(self.start_gas_left.serialize());\n        fields.extend_from_array(self.end_gas_left.serialize());\n\n        assert_eq(fields.len(), PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> for PublicCallStackItemCompressed {\n  fn deserialize(fields: [Field; PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH]) -> PublicCallStackItemCompressed {\n    let mut reader = Reader::new(fields);\n\n    let item = PublicCallStackItemCompressed {\n      contract_address: reader.read_struct(AztecAddress::deserialize),\n      call_context: reader.read_struct(CallContext::deserialize),\n      function_data: reader.read_struct(FunctionData::deserialize),\n      args_hash: reader.read(),\n      returns_hash: reader.read(),\n      revert_code: reader.read() as u8,\n      start_gas_left: reader.read_struct(Gas::deserialize),\n      end_gas_left: reader.read_struct(Gas::deserialize),\n    };\n    reader.finish();\n    item\n  }\n}\n"},"175":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/global_variables.nr","source":"use crate::{\n    address::{AztecAddress, EthAddress}, abis::gas_fees::GasFees,\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}, utils::reader::Reader\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : u64,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n    gas_fees : GasFees\n}\n// docs:end:global-variables\n\nimpl GlobalVariables {\n    fn is_empty(self) -> bool {\n        (self.chain_id == 0)\n            & (self.version == 0)\n            & (self.block_number == 0)\n            & (self.timestamp == 0)\n            & (self.coinbase.is_zero())\n            & (self.fee_recipient.is_zero())\n            & (self.gas_fees.is_empty())\n    }\n}\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        let mut serialized: BoundedVec<Field, GLOBAL_VARIABLES_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.chain_id);\n        serialized.push(self.version);\n        serialized.push(self.block_number);\n        serialized.push(self.timestamp as Field);\n        serialized.push(self.coinbase.to_field());\n        serialized.push(self.fee_recipient.to_field());\n        serialized.extend_from_array(self.gas_fees.serialize());\n\n        serialized.storage\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        let mut reader = Reader::new(serialized);\n        GlobalVariables {\n            chain_id: reader.read(),\n            version: reader.read(),\n            block_number: reader.read(),\n            timestamp: reader.read() as u64,\n            coinbase: EthAddress::from_field(reader.read()),\n            fee_recipient: AztecAddress::from_field(reader.read()),\n            gas_fees: reader.read_struct(GasFees::deserialize)\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient) &\n        (self.gas_fees == other.gas_fees) \n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n            gas_fees: GasFees::empty()\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars = GlobalVariables::empty();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n"},"176":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/read_request.nr","source":"use crate::{\n    abis::side_effect::{Ordered, Scoped}, traits::{Empty, Serialize, Deserialize},\n    address::AztecAddress, constants::{READ_REQUEST_LENGTH, SCOPED_READ_REQUEST_LEN},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct ReadRequest {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for ReadRequest {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for ReadRequest {\n    fn eq(self, read_request: ReadRequest) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n    }\n}\n\nimpl Empty for ReadRequest {\n    fn empty() -> Self {\n        ReadRequest {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_LENGTH> for ReadRequest {\n    fn serialize(self) -> [Field; READ_REQUEST_LENGTH] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_LENGTH> for ReadRequest {\n    fn deserialize(values: [Field; READ_REQUEST_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl ReadRequest {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedReadRequest {\n        ScopedReadRequest { read_request: self, contract_address }\n    }\n}\n\nstruct ScopedReadRequest {\n    read_request: ReadRequest,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<ReadRequest> for ScopedReadRequest {\n    fn inner(self) -> ReadRequest {\n        self.read_request\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Eq for ScopedReadRequest {\n    fn eq(self, other: ScopedReadRequest) -> bool {\n        (self.read_request == other.read_request)\n        & (self.contract_address.eq(other.contract_address))\n    }\n}\n\nimpl Empty for ScopedReadRequest {\n    fn empty() -> Self {\n        ScopedReadRequest {\n            read_request: ReadRequest::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_READ_REQUEST_LEN> for ScopedReadRequest {\n    fn serialize(self) -> [Field; SCOPED_READ_REQUEST_LEN] {\n        array_concat(self.read_request.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_READ_REQUEST_LEN> for ScopedReadRequest {\n    fn deserialize(values: [Field; SCOPED_READ_REQUEST_LEN]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            read_request: reader.read_struct(ReadRequest::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl ScopedReadRequest {\n    pub fn value(self) -> Field {\n        self.read_request.value\n    }\n    pub fn counter(self) -> u32 {\n        self.read_request.counter\n    }\n}\n\n#[test]\nfn serialization_of_empty_read() {\n    let item = ReadRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ReadRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedReadRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedReadRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"179":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request_and_generator.nr","source":"use crate::{\n    address::AztecAddress,\n    abis::validation_requests::{\n    key_validation_request::KeyValidationRequest,\n    scoped_key_validation_request_and_generator::ScopedKeyValidationRequestAndGenerator\n},\n    constants::KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH, traits::{Empty, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct KeyValidationRequestAndGenerator {\n    request: KeyValidationRequest,\n    sk_app_generator: Field,\n}\n\nimpl Eq for KeyValidationRequestAndGenerator {\n    fn eq(self, other: KeyValidationRequestAndGenerator) -> bool {\n        (self.request == other.request) & (self.sk_app_generator == other.sk_app_generator)\n    }\n}\n\nimpl Empty for KeyValidationRequestAndGenerator {\n    fn empty() -> Self {\n        KeyValidationRequestAndGenerator {\n            request: KeyValidationRequest::empty(),\n            sk_app_generator: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH> for KeyValidationRequestAndGenerator {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH] {\n        array_concat(self.request.serialize(), [self.sk_app_generator])\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH> for KeyValidationRequestAndGenerator {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH]) -> Self {\n        let mut reader = Reader::new(fields);\n        let res = Self {\n            request: reader.read_struct(KeyValidationRequest::deserialize),\n            sk_app_generator: reader.read(),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl KeyValidationRequestAndGenerator {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedKeyValidationRequestAndGenerator {\n        ScopedKeyValidationRequestAndGenerator { request: self, contract_address }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = KeyValidationRequestAndGenerator::empty();\n    let serialized = item.serialize();\n    let deserialized = KeyValidationRequestAndGenerator::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"180":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{constants::KEY_VALIDATION_REQUEST_LENGTH, traits::{Empty, Serialize, Deserialize}, point::Point};\n\nstruct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m))\n            & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest {\n            pk_m: Point::empty(),\n            sk_app: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app,\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point::new(fields[0], fields[1], fields[2] as bool),\n            sk_app: fields[3],\n        }\n    }\n}\n\n"},"183":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/event_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct EventSelector {\n    // 1st 4-bytes (big-endian leftmost) of abi-encoding of an event.\n    inner: u32,\n}\n\nimpl Eq for EventSelector {\n    fn eq(self, other: EventSelector) -> bool {\n        other.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for EventSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for EventSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for EventSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for EventSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for EventSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl EventSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        EventSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"},"184":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier.nr","source":"use crate::{\n    abis::{side_effect::{Ordered, OrderedValue, Readable, Scoped}, read_request::ScopedReadRequest},\n    address::AztecAddress, constants::{NULLIFIER_LENGTH, SCOPED_NULLIFIER_LENGTH},\n    hash::compute_siloed_nullifier, traits::{Empty, Hash, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct Nullifier {\n    value: Field,\n    counter: u32,\n    note_hash: Field,\n}\n\nimpl Ordered for Nullifier {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for Nullifier {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for Nullifier {\n    fn eq(self, other: Nullifier) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.note_hash == other.note_hash) \n    }\n}\n\nimpl Empty for Nullifier {\n    fn empty() -> Self {\n        Nullifier {\n            value: 0,\n            counter: 0,\n            note_hash: 0,\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_LENGTH> for Nullifier {\n    fn serialize(self) -> [Field; NULLIFIER_LENGTH] {\n        [self.value, self.counter as Field, self.note_hash]\n    }\n}\n\nimpl Deserialize<NULLIFIER_LENGTH> for Nullifier {\n    fn deserialize(values: [Field; NULLIFIER_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            note_hash: values[2],\n        }\n    }\n}\n\nimpl Readable for Nullifier {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        // Public kernels output Nullifier instead of ScopedNullifier.\n        // The nullifier value has been siloed.\n        let siloed_request_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.value, siloed_request_value, \"Value of the nullifier does not match read request\");\n        assert(\n            read_request.counter() > self.counter, \"Read request counter must be greater than the counter of the nullifier\"\n        );\n    }\n}\n\nimpl Nullifier {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedNullifier {\n        ScopedNullifier { nullifier: self, contract_address }\n    }\n}\n\nstruct ScopedNullifier {\n    nullifier: Nullifier,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<Nullifier> for ScopedNullifier {\n    fn inner(self) -> Nullifier {\n        self.nullifier\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedNullifier {\n    fn counter(self) -> u32 {\n        self.nullifier.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedNullifier {\n    fn value(self) -> Field {\n        self.nullifier.value\n    }\n    fn counter(self) -> u32 {\n        self.nullifier.counter\n    }\n}\n\nimpl Eq for ScopedNullifier {\n    fn eq(self, other: ScopedNullifier) -> bool {\n        (self.nullifier == other.nullifier)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedNullifier {\n    fn empty() -> Self {\n        ScopedNullifier {\n            nullifier: Nullifier::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_NULLIFIER_LENGTH> for ScopedNullifier {\n    fn serialize(self) -> [Field; SCOPED_NULLIFIER_LENGTH] {\n        array_concat(self.nullifier.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_NULLIFIER_LENGTH> for ScopedNullifier {\n    fn deserialize(values: [Field; SCOPED_NULLIFIER_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            nullifier: reader.read_struct(Nullifier::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl Readable for ScopedNullifier {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        assert_eq(self.nullifier.value, read_request.value(), \"Value of the nullifier does not match read request\");\n        assert_eq(self.contract_address, read_request.contract_address, \"Contract address of the nullifier does not match read request\");\n        assert(\n            read_request.counter() > self.nullifier.counter, \"Read request counter must be greater than the counter of the nullifier\"\n        );\n    }\n}\n\nimpl ScopedNullifier {\n    pub fn nullified_note_hash(self) -> Field {\n        self.nullifier.note_hash\n    }\n\n    pub fn expose_to_public(self) -> Nullifier {\n        // Hide the actual counter and note hash when exposing it to the public kernel.\n        Nullifier { value: self.nullifier.value, counter: 0, note_hash: 0 }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = Nullifier::empty();\n    let serialized = item.serialize();\n    let deserialized = Nullifier::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedNullifier::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedNullifier::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"192":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr","source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u32 = 3;\n\nuse crate::{\n    abis::{read_request::ScopedReadRequest, side_effect::Readable}, hash::compute_siloed_nullifier,\n    merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}\n};\n\nstruct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u32,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            nullifier : 0,\n            next_nullifier : 0,\n            next_index : 0,\n        }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            std::hash::pedersen_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl Readable for NullifierLeafPreimage {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        let siloed_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.nullifier, siloed_value, \"Value of the nullifier leaf does not match read request\");\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u32 }\n    }\n}\n\nimpl Eq for NullifierLeafPreimage {\n  fn eq(self, other: Self) -> bool {\n    (self.nullifier == other.nullifier) &\n    (self.next_nullifier == other.next_nullifier) &\n    (self.next_index == other.next_index)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NullifierLeafPreimage::empty();\n    let serialized = item.serialize();\n    let deserialized = NullifierLeafPreimage::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"193":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"},"194":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_request.nr","source":"use crate::{\n    abis::{\n    private_call_stack_item::PrivateCallStackItem, call_context::CallContext,\n    function_data::FunctionData, caller_context::CallerContext,\n    side_effect::{Ordered, RangeOrdered, Scoped}\n},\n    address::AztecAddress, constants::{PRIVATE_CALL_REQUEST_LENGTH, SCOPED_PRIVATE_CALL_REQUEST_LENGTH},\n    traits::{Empty, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PrivateCallRequest {\n    target: AztecAddress,\n    call_context: CallContext,\n    function_data: FunctionData,\n    args_hash: Field,\n    returns_hash: Field,\n    caller_context: CallerContext,\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n}\n\nimpl Ordered for PrivateCallRequest {\n    fn counter(self) -> u32 {\n        self.start_side_effect_counter\n    }\n}\n\nimpl RangeOrdered for PrivateCallRequest {\n    fn counter_start(self) -> u32 {\n        self.start_side_effect_counter\n    }\n    fn counter_end(self) -> u32 {\n        self.end_side_effect_counter\n    }\n}\n\nimpl Eq for PrivateCallRequest {\n    fn eq(self, other: PrivateCallRequest) -> bool {\n        (self.target == other.target) \n            & (self.call_context == other.call_context) \n            & (self.function_data == other.function_data) \n            & (self.args_hash == other.args_hash) \n            & (self.returns_hash == other.returns_hash)\n            & (self.caller_context == other.caller_context)\n            & (self.start_side_effect_counter == other.start_side_effect_counter)\n            & (self.end_side_effect_counter == other.end_side_effect_counter)\n    }\n}\n\nimpl Empty for PrivateCallRequest {\n    fn empty() -> Self {\n        PrivateCallRequest {\n            target: AztecAddress::empty(),\n            call_context: CallContext::empty(),\n            function_data: FunctionData::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            caller_context: CallerContext::empty(),\n            start_side_effect_counter: 0,\n            end_side_effect_counter: 0,\n        }\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_REQUEST_LENGTH> for PrivateCallRequest {\n    fn serialize(self) -> [Field; PRIVATE_CALL_REQUEST_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_REQUEST_LENGTH> = BoundedVec::new();\n\n        fields.push(self.target.to_field());\n        fields.extend_from_array(self.call_context.serialize());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n        fields.extend_from_array(self.caller_context.serialize());\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        assert_eq(fields.len(), PRIVATE_CALL_REQUEST_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_REQUEST_LENGTH> for PrivateCallRequest {\n    fn deserialize(fields: [Field; PRIVATE_CALL_REQUEST_LENGTH]) -> PrivateCallRequest {\n        let mut reader = Reader::new(fields);\n        let item = PrivateCallRequest {\n            target: reader.read_struct(AztecAddress::deserialize),\n            call_context: reader.read_struct(CallContext::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            caller_context: reader.read_struct(CallerContext::deserialize),\n            start_side_effect_counter: reader.read_u32(),\n            end_side_effect_counter: reader.read_u32(),\n        };\n        reader.finish();\n        item\n    }\n}\n\nimpl PrivateCallRequest {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedPrivateCallRequest {\n        ScopedPrivateCallRequest { call_request: self, contract_address }\n    }\n\n    pub fn matches_stack_item(self, stack_item: PrivateCallStackItem) -> bool {\n        (self.target == stack_item.contract_address)\n            & (self.call_context == stack_item.public_inputs.call_context)\n            & (self.function_data == stack_item.function_data)\n            & (self.args_hash == stack_item.public_inputs.args_hash)\n            & (self.returns_hash == stack_item.public_inputs.returns_hash)\n            & (self.start_side_effect_counter\n                                == stack_item.public_inputs.start_side_effect_counter)\n            & (self.end_side_effect_counter\n                                    == stack_item.public_inputs.end_side_effect_counter)\n    }\n}\n\nstruct ScopedPrivateCallRequest {\n    call_request: PrivateCallRequest,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<PrivateCallRequest> for ScopedPrivateCallRequest {\n    fn inner(self) -> PrivateCallRequest {\n        self.call_request\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedPrivateCallRequest {\n    fn counter(self) -> u32 {\n        self.call_request.counter_start()\n    }\n}\n\nimpl RangeOrdered for ScopedPrivateCallRequest {\n    fn counter_start(self) -> u32 {\n        self.call_request.counter_start()\n    }\n    fn counter_end(self) -> u32 {\n        self.call_request.counter_end()\n    }\n}\n\nimpl Eq for ScopedPrivateCallRequest {\n    fn eq(self, other: ScopedPrivateCallRequest) -> bool {\n        (self.call_request == other.call_request)\n            & (self.contract_address == other.contract_address)\n    }\n}\n\nimpl Empty for ScopedPrivateCallRequest {\n    fn empty() -> Self {\n        ScopedPrivateCallRequest {\n            call_request: PrivateCallRequest::empty(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_PRIVATE_CALL_REQUEST_LENGTH> for ScopedPrivateCallRequest {\n    fn serialize(self) -> [Field; SCOPED_PRIVATE_CALL_REQUEST_LENGTH] {\n        let mut fields: BoundedVec<Field, SCOPED_PRIVATE_CALL_REQUEST_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.call_request.serialize());\n        fields.extend_from_array(self.contract_address.serialize());\n\n        assert_eq(fields.len(), SCOPED_PRIVATE_CALL_REQUEST_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<SCOPED_PRIVATE_CALL_REQUEST_LENGTH> for ScopedPrivateCallRequest {\n    fn deserialize(fields: [Field; SCOPED_PRIVATE_CALL_REQUEST_LENGTH]) -> ScopedPrivateCallRequest {\n        let mut reader = Reader::new(fields);\n        let item = ScopedPrivateCallRequest {\n            call_request: reader.read_struct(PrivateCallRequest::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        item\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = ScopedPrivateCallRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedPrivateCallRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"199":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_settings.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress}, abis::gas::Gas,\n    abis::gas_fees::GasFees,\n    constants::{\n    GAS_SETTINGS_LENGTH, DEFAULT_GAS_LIMIT, DEFAULT_TEARDOWN_GAS_LIMIT, DEFAULT_MAX_FEE_PER_GAS,\n    DEFAULT_INCLUSION_FEE\n},\n    hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered,\n    utils::reader::Reader\n};\n\nstruct GasSettings {\n    gas_limits: Gas,\n    teardown_gas_limits: Gas,\n    max_fees_per_gas: GasFees,\n    inclusion_fee: Field,\n}\n\nimpl GasSettings {\n    pub fn new(\n        gas_limits: Gas,\n        teardown_gas_limits: Gas,\n        max_fees_per_gas: GasFees,\n        inclusion_fee: Field\n    ) -> Self {\n        Self { gas_limits, teardown_gas_limits, max_fees_per_gas, inclusion_fee }\n    }\n\n    pub fn default() -> Self {\n        GasSettings::new(\n            Gas::new(DEFAULT_GAS_LIMIT, DEFAULT_GAS_LIMIT),\n            Gas::new(DEFAULT_TEARDOWN_GAS_LIMIT, DEFAULT_TEARDOWN_GAS_LIMIT),\n            GasFees::new(DEFAULT_MAX_FEE_PER_GAS, DEFAULT_MAX_FEE_PER_GAS),\n            DEFAULT_INCLUSION_FEE\n        )\n    }\n}\n\nimpl Eq for GasSettings {\n    fn eq(self, other: Self) -> bool {\n        (self.gas_limits == other.gas_limits) & (self.teardown_gas_limits == other.teardown_gas_limits) & (self.max_fees_per_gas == other.max_fees_per_gas) & (self.inclusion_fee == other.inclusion_fee)\n    }\n}\n\nimpl Empty for GasSettings {\n    fn empty() -> Self {\n        GasSettings::new(\n            Gas::empty(), Gas::empty(), GasFees::empty(), 0\n        )\n    }\n}\n\nimpl Serialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn serialize(self) -> [Field; GAS_SETTINGS_LENGTH] {\n        let mut serialized: BoundedVec<Field, GAS_SETTINGS_LENGTH> = BoundedVec::new();\n\n        serialized.extend_from_array(self.gas_limits.serialize());\n        serialized.extend_from_array(self.teardown_gas_limits.serialize());\n        serialized.extend_from_array(self.max_fees_per_gas.serialize());\n        serialized.push(self.inclusion_fee);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn deserialize(serialized: [Field; GAS_SETTINGS_LENGTH]) -> GasSettings {\n        let mut reader = Reader::new(serialized);\n        GasSettings::new(reader.read_struct(Gas::deserialize), reader.read_struct(Gas::deserialize), reader.read_struct(GasFees::deserialize), reader.read())\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = GasSettings::empty();\n    let serialized = item.serialize();\n    let deserialized = GasSettings::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"208":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_stack_item.nr","source":"use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl Empty for PrivateCallStackItem {\n    fn empty() -> Self {\n        PrivateCallStackItem {\n            contract_address: AztecAddress::empty(),\n            function_data: FunctionData::empty(),\n            public_inputs: PrivateCircuitPublicInputs::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = PrivateCallStackItem::empty();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item = PrivateCallStackItem::empty();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x065f2831db9ac0db5e710bd3a865b5facd8cf83f1585e1af8fd1d6ce9c47f685;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"209":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/caller_context.nr","source":"use crate::address::AztecAddress;\nuse crate::traits::{Empty, Serialize, Deserialize};\nuse crate::constants::CALLER_CONTEXT_LENGTH;\nuse crate::utils::reader::Reader;\n\nstruct CallerContext {\n    msg_sender: AztecAddress,\n    storage_contract_address: AztecAddress,\n    is_static_call: bool,\n}\n\nimpl Eq for CallerContext {\n    fn eq(self, other: CallerContext) -> bool {\n        other.msg_sender.eq(self.msg_sender)\n            & other.storage_contract_address.eq(self.storage_contract_address)\n            & other.is_static_call == self.is_static_call\n    }\n}\n\nimpl Empty for CallerContext {\n    fn empty() -> Self {\n        CallerContext {\n            msg_sender: AztecAddress::zero(),\n            storage_contract_address: AztecAddress::zero(),\n            is_static_call: false,\n        }\n    }\n}\n\nimpl CallerContext {\n    pub fn is_empty(self) -> bool {\n        self.msg_sender.is_zero() & self.storage_contract_address.is_zero() & !self.is_static_call\n    }\n\n    // Different to an empty context, a hidden context won't reveal the caller's msg_sender and storage_contract_address,\n    // but will still propagate the is_static_call flag.\n    pub fn is_hidden(self) -> bool {\n        self.msg_sender.is_zero() & self.storage_contract_address.is_zero()\n    }\n}\n\nimpl Serialize<CALLER_CONTEXT_LENGTH> for CallerContext {\n  fn serialize(self) -> [Field; CALLER_CONTEXT_LENGTH] {\n    let mut fields: BoundedVec<Field, CALLER_CONTEXT_LENGTH> = BoundedVec::new();\n\n    fields.extend_from_array(self.msg_sender.serialize());\n    fields.extend_from_array(self.storage_contract_address.serialize());\n    fields.push(self.is_static_call as Field);\n\n    assert_eq(fields.len(), CALLER_CONTEXT_LENGTH);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CALLER_CONTEXT_LENGTH> for CallerContext {\n  fn deserialize(fields: [Field; CALLER_CONTEXT_LENGTH]) -> CallerContext {\n    let mut reader = Reader::new(fields);\n\n    let item = CallerContext {\n      msg_sender: reader.read_struct(AztecAddress::deserialize),\n      storage_contract_address: reader.read_struct(AztecAddress::deserialize),\n      is_static_call: reader.read_bool(),\n    };\n    reader.finish();\n    item\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = CallerContext::empty();\n    let serialized = item.serialize();\n    let deserialized = CallerContext::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"21":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\nstruct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    fn new(x: Field, y: Field, is_infinite: bool) -> Self {\n        Self { x, y, is_infinite }\n    }\n\n    fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    fn neg(self) -> EmbeddedCurvePoint { \n        EmbeddedCurvePoint {\n            x: self.x,\n            y: -self.y,\n            is_infinite: self.is_infinite\n        }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite) | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n// Scalar represented as low and high limbs\nstruct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    pub fn derive_public_key(self) -> EmbeddedCurvePoint {\n        let public_key = fixed_base_scalar_mul(self.lo, self.hi);\n        EmbeddedCurvePoint { x: public_key[0], y: public_key[1], is_infinite: false }\n    }\n\n    #[field(bn254)]\n    fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, key: EmbeddedCurveScalar) -> bool {\n        (key.hi == self.hi) & (key.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n#[foreign(multi_scalar_mul)]\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> [Field; 3]\n// docs:end:multi_scalar_mul\n{}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(\n    scalar_low: Field,\n    scalar_high: Field\n) -> [Field; 3]\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    let scalar = EmbeddedCurveScalar { lo: scalar_low, hi: scalar_high };\n    multi_scalar_mul([g1], [scalar])\n}\n\n// This is a hack as returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\nfn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint\n) -> EmbeddedCurvePoint\n// docs:end:embedded_curve_add\n{\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n    EmbeddedCurvePoint { x, y, is_infinite: point_array[2] == 1 }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n"},"211":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/log_hash.nr","source":"use crate::{\n    abis::side_effect::{Ordered, OrderedValue, Scoped}, address::AztecAddress,\n    constants::{\n    LOG_HASH_LENGTH, NOTE_LOG_HASH_LENGTH, ENCRYPTED_LOG_HASH_LENGTH, SCOPED_LOG_HASH_LENGTH,\n    SCOPED_ENCRYPTED_LOG_HASH_LENGTH\n},\n    traits::{Empty, Serialize, Deserialize}, utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct LogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n}\n\nimpl Ordered for LogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for LogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for LogHash {\n    fn eq(self, other: LogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n    }\n}\n\nimpl Empty for LogHash {\n    fn empty() -> Self {\n        LogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n        }\n    }\n}\n\nimpl Serialize<LOG_HASH_LENGTH> for LogHash {\n    fn serialize(self) -> [Field; LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length]\n    }\n}\n\nimpl Deserialize<LOG_HASH_LENGTH> for LogHash {\n    fn deserialize(values: [Field; LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n        }\n    }\n}\n\nimpl LogHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedLogHash {\n        ScopedLogHash { log_hash: self, contract_address }\n    }\n}\n\nstruct ScopedLogHash {\n    log_hash: LogHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<LogHash> for ScopedLogHash {\n    fn inner(self) -> LogHash {\n        self.log_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedLogHash {\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedLogHash {\n    fn value(self) -> Field {\n        self.log_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl Eq for ScopedLogHash {\n    fn eq(self, other: ScopedLogHash) -> bool {\n        (self.log_hash == other.log_hash)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedLogHash {\n    fn empty() -> Self {\n        ScopedLogHash {\n            log_hash: LogHash::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_LOG_HASH_LENGTH> for ScopedLogHash {\n    fn serialize(self) -> [Field; SCOPED_LOG_HASH_LENGTH] {\n       array_concat(self.log_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_LOG_HASH_LENGTH> for ScopedLogHash {\n    fn deserialize(values: [Field; SCOPED_LOG_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            log_hash: reader.read_struct(LogHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl ScopedLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the counter when exposing to public.\n        // The log hash must already be siloed when we call this.\n        LogHash { value: self.log_hash.value, counter: 0, length: self.log_hash.length }\n    }\n}\n\nstruct EncryptedLogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n    randomness: Field,\n}\n\nimpl Ordered for EncryptedLogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for EncryptedLogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for EncryptedLogHash {\n    fn eq(self, other: EncryptedLogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n            & (self.randomness == other.randomness) \n    }\n}\n\nimpl Empty for EncryptedLogHash {\n    fn empty() -> Self {\n        EncryptedLogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n            randomness: 0,\n        }\n    }\n}\n\nimpl Serialize<ENCRYPTED_LOG_HASH_LENGTH> for EncryptedLogHash {\n    fn serialize(self) -> [Field; ENCRYPTED_LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length, self.randomness]\n    }\n}\n\nimpl Deserialize<ENCRYPTED_LOG_HASH_LENGTH> for EncryptedLogHash {\n    fn deserialize(values: [Field; ENCRYPTED_LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n            randomness: values[3],\n        }\n    }\n}\n\nimpl EncryptedLogHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedEncryptedLogHash {\n        ScopedEncryptedLogHash { log_hash: self, contract_address }\n    }\n}\n\nstruct ScopedEncryptedLogHash {\n    log_hash: EncryptedLogHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<EncryptedLogHash> for ScopedEncryptedLogHash {\n    fn inner(self) -> EncryptedLogHash {\n        self.log_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl ScopedEncryptedLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the secret randomness and counter when exposing to public\n        // Expose as a LogHash rather than EncryptedLogHash to avoid bringing an unnec. 0 value around\n        // The log hash will already be silo'd when we call this\n        LogHash { value: self.log_hash.value, counter: 0, length: self.log_hash.length }\n    }\n}\n\nimpl Ordered for ScopedEncryptedLogHash {\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedEncryptedLogHash {\n    fn value(self) -> Field {\n        self.log_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl Eq for ScopedEncryptedLogHash {\n    fn eq(self, other: ScopedEncryptedLogHash) -> bool {\n        (self.log_hash == other.log_hash)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedEncryptedLogHash {\n    fn empty() -> Self {\n        ScopedEncryptedLogHash {\n            log_hash: EncryptedLogHash::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_ENCRYPTED_LOG_HASH_LENGTH> for ScopedEncryptedLogHash {\n    fn serialize(self) -> [Field; SCOPED_ENCRYPTED_LOG_HASH_LENGTH] {\n       array_concat(self.log_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_ENCRYPTED_LOG_HASH_LENGTH> for ScopedEncryptedLogHash {\n    fn deserialize(values: [Field; SCOPED_ENCRYPTED_LOG_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            log_hash: reader.read_struct(EncryptedLogHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nstruct NoteLogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n    note_hash_counter: u32,\n}\n\nimpl NoteLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the actual counter and note hash counter when exposing it to the public kernel.\n        // The counter is usually note_hash.counter + 1, so it can be revealing.\n        // Expose as a LogHash rather than NoteLogHash to avoid bringing an unnec. 0 value around\n        LogHash { value: self.value, counter: 0, length: self.length }\n    }\n}\n\nimpl Ordered for NoteLogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for NoteLogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for NoteLogHash {\n    fn eq(self, other: NoteLogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n            & (self.note_hash_counter == other.note_hash_counter) \n    }\n}\n\nimpl Empty for NoteLogHash {\n    fn empty() -> Self {\n        NoteLogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n            note_hash_counter: 0,\n        }\n    }\n}\n\nimpl Serialize<NOTE_LOG_HASH_LENGTH> for NoteLogHash {\n    fn serialize(self) -> [Field; NOTE_LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length, self.note_hash_counter as Field]\n    }\n}\n\nimpl Deserialize<NOTE_LOG_HASH_LENGTH> for NoteLogHash {\n    fn deserialize(values: [Field; NOTE_LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n            note_hash_counter: values[3] as u32,\n        }\n    }\n}\n"},"215":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/append_only_tree_snapshot.nr","source":"struct AppendOnlyTreeSnapshot {\n    root : Field,\n    // TODO(Alvaro) change this to a u64\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: u32 = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n"},"216":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n}\n// docs:end:call-context\n\nimpl Eq for CallContext {\n    fn eq(self, other: CallContext) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        let mut serialized: BoundedVec<Field, CALL_CONTEXT_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.msg_sender.to_field());\n        serialized.push(self.storage_contract_address.to_field());\n        serialized.push(self.function_selector.to_field());\n        serialized.push(self.is_delegate_call as Field);\n        serialized.push(self.is_static_call as Field);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        let mut reader = Reader::new(serialized);\n        CallContext {\n            msg_sender: AztecAddress::from_field(reader.read()),\n            storage_contract_address: AztecAddress::from_field(reader.read()),\n            function_selector: FunctionSelector::from_field(reader.read()),\n            is_delegate_call: reader.read() as bool,\n            is_static_call: reader.read() as bool,\n        }\n    }\n}\n\nimpl Empty for CallContext {\n    fn empty() -> Self {\n        CallContext {\n            msg_sender: AztecAddress::empty(),\n            storage_contract_address: AztecAddress::empty(),\n            function_selector: FunctionSelector::empty(),\n            is_delegate_call: false,\n            is_static_call: false,\n        }\n    }\n}\n\n#[test]\nfn serialize_deserialize_of_empty() {\n    let context = CallContext::empty();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = true;\n\n    let address: AztecAddress = AztecAddress::from_field(69420);\n    context1.msg_sender = address;\n    context2.msg_sender = address;\n\n    assert(context1.eq(context2));\n}\n\n#[test(should_fail)]\nfn not_eq_test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = false;\n\n    let address1: AztecAddress = AztecAddress::from_field(69420);\n    let address2: AztecAddress = AztecAddress::from_field(42069);\n\n    context1.msg_sender = address1;\n    context2.msg_sender = address2;\n\n    assert(context1.eq(context2));\n}\n\n#[test]\nfn hash_smoke() {\n    let context = CallContext::empty();\n    let _hashed = context.hash();\n}\n"},"217":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/max_block_number.nr","source":"use crate::{constants::MAX_BLOCK_NUMBER_LENGTH, traits::{Deserialize, Serialize, Empty}};\n\nstruct MaxBlockNumber {\n    _opt: Option<u32>\n}\n\nimpl Empty for MaxBlockNumber {\n    fn empty() -> Self {\n        Self { _opt: Option::none() }\n    }\n}\n\nimpl Eq for MaxBlockNumber {\n    fn eq(self, other: Self) -> bool {\n        self._opt == other._opt\n    }\n}\n\nimpl Serialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn serialize(self) -> [Field; MAX_BLOCK_NUMBER_LENGTH] {\n        [self._opt._is_some as Field, self._opt._value as Field]\n    }\n}\n\nimpl Deserialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn deserialize(serialized: [Field; MAX_BLOCK_NUMBER_LENGTH]) -> MaxBlockNumber {\n        MaxBlockNumber {\n            _opt: Option {\n                _is_some: serialized[0] as bool,\n                _value: serialized[1] as u32,\n            }\n        }\n    }\n}\n\nimpl MaxBlockNumber {\n    pub fn new(max_block_number: u32) -> Self {\n        Self { _opt: Option::some(max_block_number) }\n    }\n\n    pub fn is_none(self) -> bool {\n        self._opt.is_none()\n    }\n\n    pub fn is_some(self) -> bool {\n        self._opt.is_some()\n    }\n\n    pub fn unwrap(self) -> u32 {\n        self._opt.unwrap()\n    }\n\n    pub fn unwrap_unchecked(self) -> u32 {\n        self._opt.unwrap_unchecked()\n    }\n\n    pub fn min(lhs: MaxBlockNumber, rhs: MaxBlockNumber) -> MaxBlockNumber {\n        if rhs.is_none() {\n            lhs // lhs might also be none, but in that case both would be\n        } else {\n            MaxBlockNumber::min_with_u32(lhs, rhs.unwrap_unchecked())\n        }\n    }\n\n    pub fn min_with_u32(lhs: MaxBlockNumber, rhs: u32) -> MaxBlockNumber {\n        if lhs._opt.is_none() {\n            MaxBlockNumber::new(rhs)\n        } else {\n            let lhs_value = lhs._opt.unwrap_unchecked();\n\n            MaxBlockNumber::new(if lhs_value < rhs { lhs_value } else { rhs })\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = MaxBlockNumber::empty();\n    let serialized = item.serialize();\n    let deserialized = MaxBlockNumber::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn zeroed_is_none() {\n    // Large parts of the kernel rely on zeroed to initialize structs. This conveniently matches what `default` does,\n    // and though we should eventually move everything to use `default`, it's good to check for now that both are\n    // equivalent.\n    let a = MaxBlockNumber::empty();\n    assert(a.is_none());\n}\n\n#[test]\nfn serde_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert(b.is_none());\n}\n\n#[test]\nfn serde_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert_eq(b.unwrap(), 13);\n}\n\n#[test(should_fail)]\nfn default_unwrap_panics() {\n    let a = MaxBlockNumber::empty();\n    let _ = a.unwrap();\n}\n\n#[test]\nfn min_default_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::empty();\n\n    assert(MaxBlockNumber::min(a, b).is_none());\n}\n\n#[test]\nfn min_default_some() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::new(13);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_some_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::new(42);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_with_u32_default() {\n    let a = MaxBlockNumber::empty();\n    let b = 42;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 42);\n}\n\n#[test]\nfn min_with_u32_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = 42;\n    let c = 8;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min_with_u32(a, c).unwrap(), 8);\n}\n"},"22":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.to_le_radix(256, num_bytes);\n    let y_bytes = y.to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    let borrow = lte_16_hint(alo, blo);\n\n    let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n    let rhi = ahi - bhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Take hints of the decomposition\n        let (xlo, xhi) = decompose_hint(x);\n\n        // Range check the limbs\n        xlo.assert_max_bit_size(128);\n        xhi.assert_max_bit_size(128);\n\n        // Check that the decomposition is correct\n        assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n        // Assert that the decomposition of P is greater than the decomposition of x\n        assert_gt_limbs((PLO, PHI), (xlo, xhi));\n        (xlo, xhi)\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else  {\n        // Take a hint of the comparison and verify it\n        if lt_32_hint(a, b) {\n            assert_gt(b, a);\n            false\n        } else {\n            assert_gt(a, b);\n            true\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose_hint, decompose, compute_lt, assert_gt, gt, lt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"220":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize, Empty}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        (self.is_private == other.is_private)\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nimpl Empty for FunctionData {\n    fn empty() -> Self {\n        FunctionData {\n            selector: FunctionSelector::empty(),\n            is_private: false\n        }\n    }\n\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data = FunctionData::empty();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data = FunctionData::empty();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty function data hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"227":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/messaging/l2_to_l1_message.nr","source":"use crate::{\n    address::{AztecAddress, EthAddress},\n    constants::{L2_TO_L1_MESSAGE_LENGTH, SCOPED_L2_TO_L1_MESSAGE_LENGTH},\n    abis::side_effect::{Ordered, Scoped}, traits::{Deserialize, Empty, Serialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\n// Note: Not to be confused with L2ToL1Msg in Solidity\nstruct L2ToL1Message {\n    recipient: EthAddress,\n    content: Field,\n    counter: u32,\n}\n\nimpl Ordered for L2ToL1Message {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Empty for L2ToL1Message {\n    fn empty() -> Self {\n        Self {\n            recipient: EthAddress::empty(),\n            content: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Eq for L2ToL1Message {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient) & (self.content == other.content) & (self.counter == other.counter)\n    }\n}\n\nimpl Serialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn serialize(self) -> [Field; L2_TO_L1_MESSAGE_LENGTH] {\n        [self.recipient.to_field(), self.content, self.counter as Field]\n    }\n}\n\nimpl Deserialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn deserialize(values: [Field; L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        Self {\n            recipient: EthAddress::from_field(values[0]),\n            content: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n\nimpl L2ToL1Message {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedL2ToL1Message {\n        ScopedL2ToL1Message { message: self, contract_address }\n    }\n}\n\nstruct ScopedL2ToL1Message {\n    message: L2ToL1Message,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<L2ToL1Message> for ScopedL2ToL1Message {\n    fn inner(self) -> L2ToL1Message {\n        self.message\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedL2ToL1Message {\n    fn counter(self) -> u32 {\n        self.message.counter\n    }\n}\n\nimpl Eq for ScopedL2ToL1Message {\n    fn eq(self, other: ScopedL2ToL1Message) -> bool {\n        (self.message == other.message)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedL2ToL1Message {\n    fn empty() -> Self {\n        ScopedL2ToL1Message {\n            message: L2ToL1Message::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_L2_TO_L1_MESSAGE_LENGTH> for ScopedL2ToL1Message {\n    fn serialize(self) -> [Field; SCOPED_L2_TO_L1_MESSAGE_LENGTH] {\n        array_concat(self.message.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_L2_TO_L1_MESSAGE_LENGTH> for ScopedL2ToL1Message {\n    fn deserialize(values: [Field; SCOPED_L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            message: reader.read_struct(L2ToL1Message::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\n#[test]\nfn serialization_of_empty_l2() {\n    let item = L2ToL1Message::empty();\n    let serialized = item.serialize();\n    let deserialized = L2ToL1Message::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped_l2() {\n    let item = ScopedL2ToL1Message::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedL2ToL1Message::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"229":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::pedersen_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n"},"23":{"path":"std/field/mod.nr","source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n"},"234":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U64_SERIALIZED_LEN: Field = 1;\nglobal U128_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n"},"235":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<N> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<N> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\nimpl<N> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let mut result = [0; N];\n        let bytes: [u8; N] = self.as_bytes();\n        for i in 0..N {\n            result[i] = field_from_bytes([bytes[i];1], true);\n        }\n        result\n    }\n}\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<N> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n"},"237":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/content_commitment.nr","source":"use crate::{\n    constants::CONTENT_COMMITMENT_LENGTH, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct ContentCommitment {\n  num_txs: Field,\n  txs_effects_hash: Field,\n  in_hash: Field,\n  out_hash: Field,\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new();\n\n    fields.push(self.num_txs);\n    fields.push(self.txs_effects_hash);\n    fields.push(self.in_hash);\n    fields.push(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let num_txs = serialized[0];\n\n    let txs_effects_hash = serialized[1];\n\n    let in_hash = serialized[2];\n\n    let out_hash = serialized[3];\n\n    Self {\n      num_txs,\n      txs_effects_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      num_txs: 0,\n      txs_effects_hash: 0,\n      in_hash: 0,\n      out_hash: 0,\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.num_txs == other.num_txs)\n      & (self.txs_effects_hash == other.txs_effects_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n"},"238":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            std::hash::pedersen_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"239":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/header.nr","source":"use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, STATE_REFERENCE_LENGTH, CONTENT_COMMITMENT_LENGTH},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n    total_fees: Field\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables) &\n        self.total_fees.eq(other.total_fees)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n        fields.push(self.total_fees);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n        offset = offset + GLOBAL_VARIABLES_LENGTH;\n\n        let total_fees = serialized[offset];\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n            total_fees\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n            total_fees: 0\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header = Header::empty();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header = Header::empty();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header = Header::empty();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x124e8c40a6eca2e3ad10c04050b01a3fad00df3cea47b13592c7571b6914c7a7;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"240":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path, messaging::l2_to_l1_message::ScopedL2ToL1Message,\n    recursion::verification_key::VerificationKey, traits::is_empty,\n    utils::field::field_from_bytes_32_trunc\n};\nuse std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    pedersen_hash(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, inner_note_hash: Field) -> Field {\n    let inputs = [nonce, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_encrypted_log_hash(address: AztecAddress, randomness: Field, log_hash: Field) -> Field {\n    // TODO: Using 0 GENERATOR_INDEX here as interim before we move to posiedon\n    // NB: A unique separator will be needed for masked_contract_address\n    let mut masked_contract_address = pedersen_hash([address.to_field(), randomness], 0);\n    if randomness == 0 {\n        // In some cases, we actually want to reveal the contract address we are siloing with:\n        // e.g. 'handshaking' contract w/ known address\n        // An app providing randomness = 0 signals to not mask the address.\n        masked_contract_address = address.to_field();\n    }\n    accumulate_sha256([masked_contract_address, log_hash])\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedEncryptedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_encrypted_log_hash(\n            log_hash.contract_address,\n            log_hash.log_hash.randomness,\n            log_hash.log_hash.value\n        )\n    }\n}\n\npub fn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly. \npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<N>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n"},"241":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/partial_state_reference.nr","source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0], \n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial = PartialStateReference::empty();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n"},"243":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/transaction/tx_context.nr","source":"use crate::{\n    constants::{GENERATOR_INDEX__TX_CONTEXT, TX_CONTEXT_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader,\n    abis::gas_settings::GasSettings\n};\n\n// docs:start:tx-context\nstruct TxContext {\n    chain_id : Field,\n    version : Field,\n    gas_settings: GasSettings,\n}\n// docs:end:tx-context\n\nimpl TxContext {\n    pub fn new(chain_id: Field, version: Field, gas_settings: GasSettings) -> Self {\n        TxContext { chain_id, version, gas_settings }\n    }\n}\n\nimpl Eq for TxContext {\n    fn eq(self, other: Self) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.gas_settings.eq(other.gas_settings))\n    }\n}\n\nimpl Empty for TxContext {\n    fn empty() -> Self {\n        TxContext {\n            chain_id: 0,\n            version: 0,\n            gas_settings: GasSettings::empty(),\n        }\n    }\n}\n\nimpl Serialize<TX_CONTEXT_LENGTH> for TxContext {\n    fn serialize(self) -> [Field; TX_CONTEXT_LENGTH] {\n        let mut fields: BoundedVec<Field, TX_CONTEXT_LENGTH> = BoundedVec::new();\n\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.extend_from_array(self.gas_settings.serialize());\n\n        assert_eq(fields.len(), TX_CONTEXT_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<TX_CONTEXT_LENGTH> for TxContext {\n    fn deserialize(serialized: [Field; TX_CONTEXT_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let context = Self {\n            chain_id: reader.read(),\n            version: reader.read(),\n            gas_settings: reader.read_struct(GasSettings::deserialize),\n        };\n\n        reader.finish();\n        context\n    }\n}\n\nimpl Hash for TxContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__TX_CONTEXT)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context = TxContext::empty();\n    let serialized = context.serialize();\n    let deserialized = TxContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let context = TxContext::empty();\n    let hash = context.hash();\n\n    // Value from tx_context.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x17e4357684c5a4349b4587c95b0b6161dcb4a3c5b02d4eb2ecc3b02c80193261;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"246":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: Field = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point {\n            x: 0,\n            y: 0,\n            is_infinite: false\n        }\n    }\n}\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn pub_key_to_bytes(pk: Point) -> [u8; 64] {\n    assert(!pk.is_infinite, \"Point at infinity is not a valid public key.\");\n    let mut result = [0 as u8; 64];\n    let x_bytes = pk.x.to_be_bytes(32);\n    let y_bytes = pk.y.to_be_bytes(32);\n    for i in 0..32 {\n        result[i] = x_bytes[i];\n        result[i + 32] = y_bytes[i];\n    }\n    result\n}\n"},"247":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"249":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/state_reference.nr","source":"use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state = StateReference::empty();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n"},"25":{"path":"std/hash/mod.nr","source":"mod poseidon;\nmod mimc;\nmod poseidon2;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::sha256::{digest, sha256_var};\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul};\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n#[no_predicates]\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    let value = pedersen_commitment_with_separator(input, 0);\n    if (value.x == 0) & (value.y == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value.x, y: value.y, is_infinite: false }\n    }\n}\n\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        points[i] = EmbeddedCurveScalar::from_field(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let values = multi_scalar_mul(generators, points);\n    EmbeddedCurvePoint { x: values[0], y: values[1], is_infinite: values[2] as bool }\n}\n\n#[no_predicates]\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    EmbeddedCurvePoint { x: values[0], y: values[1], is_infinite: false }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    crate::assert_constant(starting_index);\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let v1 = pedersen_commitment_with_separator(input, separator);\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    multi_scalar_mul(\n        [length_generator[0], v1],\n        [EmbeddedCurveScalar { lo: N as Field, hi: 0 }, EmbeddedCurveScalar { lo: 1, hi: 0 }]\n    )[0]\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes(32).as_array();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n#[test]\nfn assert_pedersen_noir() {\n    // TODO: make this a fuzzer test once fuzzer supports curve-specific blackbox functions.\n    let input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    assert_eq(pedersen_hash_with_separator(input, 4), pedersen_hash_with_separator_noir(input, 4));\n    assert_eq(pedersen_commitment_with_separator(input, 4), pedersen_commitment_with_separator_noir(input, 4));\n}\n"},"263":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"struct Reader<N> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"273":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes = field.to_be_bytes(31);\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2 = field.to_be_bytes(31);\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n"},"275":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"289":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr","source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n"},"290":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId, hash::poseidon2_hash,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash([pub_keys_hash.to_field(), partial_address.to_field(), GENERATOR_INDEX__CONTRACT_ADDRESS_V1])\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x1b6ead051e7b42665064ca6cf1ec77da0a36d86e00d1ff6e44077966c0c3a9fa;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"30":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\nglobal RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) -> [Field; RATE] {\n        // zero-pad the cache\n        for i in 0..RATE {\n            if i >= self.cache_size {\n                self.cache[i] = 0;\n            }\n        }\n        // add the cache into sponge state\n        for i in 0..RATE {\n            self.state[i] += self.cache[i];\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n        // return `RATE` number of field elements from the sponge state.\n        let mut result = [0; RATE];\n        for i in 0..RATE {\n            result[i] = self.state[i];\n        }\n        result\n    }\n\n    fn absorb(&mut self, input: Field) {\n        if (!self.squeeze_mode) & (self.cache_size == RATE) {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            let _ = self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else if (!self.squeeze_mode) & (self.cache_size != RATE) {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        } else if self.squeeze_mode {\n            // If we're in squeeze mode, switch to absorb mode and add the input into the cache.\n            // N.B. I don't think this code path can be reached?!\n            self.cache[0] = input;\n            self.cache_size = 1;\n            self.squeeze_mode = false;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        if self.squeeze_mode & (self.cache_size == 0) {\n            // If we're in squeze mode and the cache is empty, there is nothing left to squeeze out of the sponge!\n            // Switch to absorb mode.\n            self.squeeze_mode = false;\n            self.cache_size = 0;\n        }\n        if !self.squeeze_mode {\n            // If we're in absorb mode, apply sponge permutation to compress the cache, populate cache with compressed\n            // state and switch to squeeze mode. Note: this code block will execute if the previous `if` condition was\n            // matched\n            let new_output_elements = self.perform_duplex();\n            self.squeeze_mode = true;\n            for i in 0..RATE {\n                self.cache[i] = new_output_elements[i];\n            }\n            self.cache_size = RATE;\n        }\n        // By this point, we should have a non-empty cache. Pop one item off the top of the cache and return it.\n        let result = self.cache[0];\n        for i in 1..RATE {\n            if i < self.cache_size {\n                self.cache[i - 1] = self.cache[i];\n            }\n        }\n        self.cache_size -= 1;\n        self.cache[self.cache_size] = 0;\n        result\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n"},"303":{"path":"/usr/src/noir-projects/noir-contracts/contracts/token_contract/src/main.nr","source":"// docs:start:token_all\n// docs:start:imports\nmod types;\nmod test;\n\n// Minimal token implementation that supports `AuthWit` accounts.\n// The auth message follows a similar pattern to the cross-chain message and includes a designated caller.\n// The designated caller is ALWAYS used here, and not based on a flag as cross-chain.\n// message hash = H([caller, contract, selector, ...args])\n// To be read as `caller` calls function at `contract` defined by `selector` with `args`\n// Including a nonce in the message hash ensures that the message can only be used once.\n\ncontract Token {\n    // Libs\n\n    use dep::compressed_string::FieldCompressedString;\n\n    use dep::aztec::{\n        hash::compute_secret_hash,\n        prelude::{NoteGetterOptions, Map, PublicMutable, SharedImmutable, PrivateSet, AztecAddress},\n        encrypted_logs::{\n        encrypted_note_emission::{\n        encode_and_encrypt_note, encode_and_encrypt_note_with_keys,\n        encode_and_encrypt_note_with_keys_unconstrained\n    },\n        encrypted_event_emission::{encode_and_encrypt_event, encode_and_encrypt_event_with_keys_unconstrained}\n    }\n    };\n\n    // docs:start:import_authwit\n    use dep::authwit::auth::{assert_current_call_valid_authwit, assert_current_call_valid_authwit_public, compute_authwit_nullifier};\n    // docs:end:import_authwit\n\n    use crate::types::{transparent_note::TransparentNote, token_note::{TokenNote, TOKEN_NOTE_LEN}, balances_map::BalancesMap};\n    // docs:end::imports\n\n    #[aztec(event)]\n    struct Transfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n    }\n\n    // docs:start:storage_struct\n    #[aztec(storage)]\n    struct Storage {\n        // docs:start:storage_admin\n        admin: PublicMutable<AztecAddress>,\n        // docs:end:storage_admin\n        // docs:start:storage_minters\n        minters: Map<AztecAddress, PublicMutable<bool>>,\n        // docs:end:storage_minters\n        // docs:start:storage_balances\n        balances: BalancesMap<TokenNote>,\n        // docs:end:storage_balances\n        total_supply: PublicMutable<U128>,\n        // docs:start:storage_pending_shields\n        pending_shields: PrivateSet<TransparentNote>,\n        // docs:end:storage_pending_shields\n        public_balances: Map<AztecAddress, PublicMutable<U128>>,\n        symbol: SharedImmutable<FieldCompressedString>,\n        name: SharedImmutable<FieldCompressedString>,\n        // docs:start:storage_decimals\n        decimals: SharedImmutable<u8>,\n        // docs:end:storage_decimals\n    }\n    // docs:end:storage_struct\n\n    // docs:start:constructor\n    #[aztec(public)]\n    #[aztec(initializer)]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>, decimals: u8) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.minters.at(admin).write(true);\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n        // docs:start:initialize_decimals\n        storage.decimals.initialize(decimals);\n        // docs:end:initialize_decimals\n    }\n    // docs:end:constructor\n\n    // docs:start:set_admin\n    #[aztec(public)]\n    fn set_admin(new_admin: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:start:write_admin\n        storage.admin.write(new_admin);\n        // docs:end:write_admin\n    }\n    // docs:end:set_admin\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn public_get_name() -> pub FieldCompressedString {\n        storage.name.read_public()\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn private_get_name() -> pub FieldCompressedString {\n        storage.name.read_private()\n    }\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_public()\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_private()\n    }\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn public_get_decimals() -> pub u8 {\n        // docs:start:read_decimals_public\n        storage.decimals.read_public()\n        // docs:end:read_decimals_public\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn private_get_decimals() -> pub u8 {\n        // docs:start:read_decimals_private\n        storage.decimals.read_private()\n        // docs:end:read_decimals_private\n    }\n\n    // docs:start:admin\n    #[aztec(public)]\n    #[aztec(view)]\n    fn admin() -> Field {\n        storage.admin.read().to_field()\n    }\n    // docs:end:admin\n\n    // docs:start:is_minter\n    #[aztec(public)]\n    #[aztec(view)]\n    fn is_minter(minter: AztecAddress) -> bool {\n        storage.minters.at(minter).read()\n    }\n    // docs:end:is_minter\n\n    // docs:start:total_supply\n    #[aztec(public)]\n    #[aztec(view)]\n    fn total_supply() -> Field {\n        storage.total_supply.read().to_integer()\n    }\n    // docs:end:total_supply\n\n    // docs:start:balance_of_public\n    #[aztec(public)]\n    #[aztec(view)]\n    fn balance_of_public(owner: AztecAddress) -> Field {\n        storage.public_balances.at(owner).read().to_integer()\n    }\n    // docs:end:balance_of_public\n\n    // docs:start:set_minter\n    #[aztec(public)]\n    fn set_minter(minter: AztecAddress, approve: bool) {\n        // docs:start:read_admin\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:end:read_admin\n        // docs:start:write_minter\n        storage.minters.at(minter).write(approve);\n        // docs:end:write_minter\n    }\n    // docs:end:set_minter\n\n    // docs:start:mint_public\n    #[aztec(public)]\n    fn mint_public(to: AztecAddress, amount: Field) {\n        // docs:start:read_minter\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n        // docs:end:read_minter\n        let amount = U128::from_integer(amount);\n        let new_balance = storage.public_balances.at(to).read().add(amount);\n        let supply = storage.total_supply.read().add(amount);\n\n        storage.public_balances.at(to).write(new_balance);\n        storage.total_supply.write(supply);\n    }\n    // docs:end:mint_public\n\n    // docs:start:mint_private\n    #[aztec(public)]\n    fn mint_private(amount: Field, secret_hash: Field) {\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n        let pending_shields = storage.pending_shields;\n        let mut note = TransparentNote::new(amount, secret_hash);\n        let supply = storage.total_supply.read().add(U128::from_integer(amount));\n\n        storage.total_supply.write(supply);\n        // docs:start:insert_from_public\n        pending_shields.insert_from_public(&mut note);\n        // docs:end:insert_from_public\n    }\n    // docs:end:mint_private\n\n    // TODO: Nuke this - test functions do not belong to token contract!\n    #[aztec(private)]\n    fn privately_mint_private_note(amount: Field) {\n        let caller = context.msg_sender();\n        storage.balances.add(caller, U128::from_integer(amount)).emit(encode_and_encrypt_note(&mut context, caller, caller));\n\n        Token::at(context.this_address()).assert_minter_and_mint(context.msg_sender(), amount).enqueue(&mut context);\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn assert_minter_and_mint(minter: AztecAddress, amount: Field) {\n        assert(storage.minters.at(minter).read(), \"caller is not minter\");\n        let supply = storage.total_supply.read() + U128::from_integer(amount);\n        storage.total_supply.write(supply);\n    }\n\n    // docs:start:shield\n    #[aztec(public)]\n    fn shield(from: AztecAddress, amount: Field, secret_hash: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            // The redeem is only spendable once, so we need to ensure that you cannot insert multiple shields from the same message.\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n\n        let pending_shields = storage.pending_shields;\n        let mut note = TransparentNote::new(amount.to_field(), secret_hash);\n\n        storage.public_balances.at(from).write(from_balance);\n        pending_shields.insert_from_public(&mut note);\n    }\n    // docs:end:shield\n\n    // docs:start:transfer_public\n    #[aztec(public)]\n    fn transfer_public(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n\n        let to_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(to_balance);\n    }\n    // docs:end:transfer_public\n\n    // docs:start:burn_public\n    #[aztec(public)]\n    fn burn_public(from: AztecAddress, amount: Field, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit_public\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit_public\n\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n\n        let new_supply = storage.total_supply.read().sub(amount);\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:burn_public\n\n    // docs:start:redeem_shield\n    #[aztec(private)]\n    fn redeem_shield(to: AztecAddress, amount: Field, secret: Field) {\n        let pending_shields = storage.pending_shields;\n        let secret_hash = compute_secret_hash(secret);\n        // Get 1 note (set_limit(1)) which has amount stored in field with index 0 (select(0, amount)) and secret_hash\n        // stored in field with index 1 (select(1, secret_hash)).\n        let mut options = NoteGetterOptions::new();\n        options = options.select(TransparentNote::properties().amount, amount, Option::none()).select(\n            TransparentNote::properties().secret_hash,\n            secret_hash,\n            Option::none()\n        ).set_limit(1);\n        let notes = pending_shields.get_notes(options);\n        let note = notes.get_unchecked(0);\n        // Remove the note from the pending shields set\n        pending_shields.remove(note);\n\n        // Add the token note to user's balances set\n        // Note: Using context.msg_sender() as a sender below makes this incompatible with escrows because we send\n        // outgoing logs to that address and to send outgoing logs you need to get a hold of ovsk_m.\n        let from = context.msg_sender();\n        storage.balances.add(to, U128::from_integer(amount)).emit(encode_and_encrypt_note(&mut context, from, to));\n    }\n    // docs:end:redeem_shield\n\n    // docs:start:unshield\n    #[aztec(private)]\n    fn unshield(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        storage.balances.sub(from, U128::from_integer(amount)).emit(encode_and_encrypt_note(&mut context, from, from));\n\n        Token::at(context.this_address())._increase_public_balance(to, amount).enqueue(&mut context);\n    }\n    // docs:end:unshield\n\n    // docs:start:transfer\n    #[aztec(private)]\n    fn transfer(to: AztecAddress, amount: Field) {\n        let from = context.msg_sender();\n\n        // By fetching the keys here, we can avoid doing an extra read from the storage, since from_ovpk would\n        // be needed twice.\n        let header = context.get_header();\n        let from_ovpk = header.get_ovpk_m(&mut context, from);\n        let from_ivpk = header.get_ivpk_m(&mut context, from);\n        let to_ivpk = header.get_ivpk_m(&mut context, to);\n\n        let amount = U128::from_integer(amount);\n        storage.balances.sub(from, amount).emit(encode_and_encrypt_note_with_keys_unconstrained(&mut context, from_ovpk, from_ivpk));\n        storage.balances.add(to, amount).emit(encode_and_encrypt_note_with_keys_unconstrained(&mut context, from_ovpk, to_ivpk));\n\n        Transfer { from, to, amount: amount.to_field() }.emit(encode_and_encrypt_event_with_keys_unconstrained(&mut context, from_ovpk, to_ivpk));\n    }\n    // docs:end:transfer\n\n    /**\n     * Cancel a private authentication witness.\n     * @param inner_hash The inner hash of the authwit to cancel.\n     */\n    // docs:start:cancel_authwit\n    #[aztec(private)]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier, 0);\n    }\n    // docs:end:cancel_authwit\n\n    // docs:start:transfer_from\n    #[aztec(private)]\n    fn transfer_from(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit\n\n        // By fetching the keys here, we can avoid doing an extra read from the storage, since from_ovpk would\n        // be needed twice.\n        let header = context.get_header();\n        let from_ovpk = header.get_ovpk_m(&mut context, from);\n        let from_ivpk = header.get_ivpk_m(&mut context, from);\n        let to_ivpk = header.get_ivpk_m(&mut context, to);\n\n        let amount = U128::from_integer(amount);\n        // docs:start:increase_private_balance\n        // docs:start:encrypted\n        storage.balances.sub(from, amount).emit(encode_and_encrypt_note_with_keys(&mut context, from_ovpk, from_ivpk));\n        // docs:end:encrypted\n        // docs:end:increase_private_balance\n        storage.balances.add(to, amount).emit(encode_and_encrypt_note_with_keys(&mut context, from_ovpk, to_ivpk));\n    }\n    // docs:end:transfer_from\n\n    // docs:start:burn\n    #[aztec(private)]\n    fn burn(from: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        storage.balances.sub(from, U128::from_integer(amount)).emit(encode_and_encrypt_note(&mut context, from, from));\n\n        Token::at(context.this_address())._reduce_total_supply(amount).enqueue(&mut context);\n    }\n    // docs:end:burn\n\n    /// Internal ///\n\n    // docs:start:increase_public_balance\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _increase_public_balance(to: AztecAddress, amount: Field) {\n        let new_balance = storage.public_balances.at(to).read().add(U128::from_integer(amount));\n        storage.public_balances.at(to).write(new_balance);\n    }\n    // docs:end:increase_public_balance\n\n    // docs:start:reduce_total_supply\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _reduce_total_supply(amount: Field) {\n        // Only to be called from burn.\n        let new_supply = storage.total_supply.read().sub(U128::from_integer(amount));\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:reduce_total_supply\n\n    /// Unconstrained ///\n\n    // docs:start:balance_of_private\n    unconstrained fn balance_of_private(owner: AztecAddress) -> pub Field {\n        storage.balances.balance_of(owner).to_field()\n    }\n    // docs:end:balance_of_private\n}\n// docs:end:token_all"},"315":{"path":"/usr/src/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    prelude::{AztecAddress, NoteHeader, NoteInterface, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash},\n    note::utils::compute_note_hash_for_consumption, oracle::unsafe_rand::unsafe_rand,\n    keys::getters::get_nsk_app\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\nglobal TOKEN_NOTE_LEN: Field = 3; // 3 plus a header.\n// TOKEN_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal TOKEN_NOTE_BYTES_LEN: Field = 3 * 32 + 64;\n\n#[aztec(note)]\nstruct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n\nimpl NoteInterface<TOKEN_NOTE_LEN, TOKEN_NOTE_BYTES_LEN> for TokenNote {\n    // docs:start:nullifier\n    fn compute_note_hash_and_nullifier(self, context: &mut PrivateContext) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n    // docs:end:nullifier\n\n    fn compute_note_hash_and_nullifier_without_context(self) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        Self {\n            amount,\n            npk_m_hash: owner_npk_m_hash,\n            randomness: unsafe_rand(),\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n"},"317":{"path":"/usr/src/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::{note_getter_options::PropertySelector, utils::compute_note_hash_for_consumption},\n    prelude::{NoteHeader, NoteInterface, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash}\n};\n\nglobal TRANSPARENT_NOTE_LEN: Field = 2;\n// TRANSPARENT_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal TRANSPARENT_NOTE_BYTES_LEN: Field = 2 * 32 + 64;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[aztec(note)]\nstruct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nstruct TransparentNoteProperties {\n    amount: PropertySelector,\n    secret_hash: PropertySelector,\n}\n\nimpl NoteInterface<TRANSPARENT_NOTE_LEN, TRANSPARENT_NOTE_BYTES_LEN> for TransparentNote {\n\n    // Custom serialization to avoid disclosing the secret field\n    fn serialize_content(self) -> [Field; TRANSPARENT_NOTE_LEN] {\n        [self.amount, self.secret_hash]\n    }\n\n    // Custom deserialization since we don't have access to the secret plaintext\n    fn deserialize_content(serialized_note: [Field; TRANSPARENT_NOTE_LEN]) -> Self {\n        TransparentNote {\n            amount: serialized_note[0],\n            secret_hash: serialized_note[1],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386): Ensure nullifier collisions are prevented\n    fn compute_note_hash_and_nullifier(self, _context: &mut PrivateContext) -> (Field, Field) {\n        self.compute_note_hash_and_nullifier_without_context()\n    }\n\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit. \n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_note_hash_and_nullifier_without_context(self) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n\n    // CUSTOM FUNCTIONS FOR THIS NOTE TYPE\n    // Custom serialization forces us to manually create the metadata struct and its getter\n    pub fn properties() -> TransparentNoteProperties {\n        TransparentNoteProperties {\n            amount: PropertySelector { index: 0, offset: 0, length: 32 },\n            secret_hash: PropertySelector { index: 1, offset: 0, length: 32 }\n        }\n    }\n}\n// docs:end:token_types_all\n"},"32":{"path":"std/merkle.nr","source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<let N: u32>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n"},"330":{"path":"/usr/src/noir-projects/aztec-nr/value-note/src/value_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n    address::AztecAddress, traits::{Deserialize, Serialize}, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::poseidon2_hash\n},\n    note::{note_header::NoteHeader, note_interface::NoteInterface, utils::compute_note_hash_for_consumption},\n    oracle::unsafe_rand::unsafe_rand, keys::getters::get_nsk_app, context::PrivateContext\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n// VALUE_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal VALUE_NOTE_BYTES_LEN: Field = 3 * 32 + 64;\n\n// docs:start:value-note-def\n#[aztec(note)]\nstruct ValueNote {\n    value: Field,\n   // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NoteInterface<VALUE_NOTE_LEN, VALUE_NOTE_BYTES_LEN> for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_note_hash_and_nullifier(self, context: &mut PrivateContext) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n\n    // docs:end:nullifier\n\n    fn compute_note_hash_and_nullifier_without_context(self) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, npk_m_hash: Field) -> Self {\n        let randomness = unsafe_rand();\n        let header = NoteHeader::empty();\n        ValueNote { value, npk_m_hash, randomness, header }\n    }\n}\n\nimpl Serialize<7> for ValueNote {\n    fn serialize(self) -> [Field; 7] {\n        let header = self.header.serialize();\n\n        [self.value, self.npk_m_hash, self.randomness, header[0], header[1], header[2], header[3]]\n    }\n}\n"},"342":{"path":"/usr/src/noir-projects/noir-contracts/contracts/crowdfunding_contract/src/main.nr","source":"// docs:start:empty-contract\ncontract Crowdfunding {\n    // docs:end:empty-contract\n\n    // docs:start:all-deps\n    use dep::aztec::{\n        protocol_types::address::AztecAddress,\n        encrypted_logs::encrypted_note_emission::encode_and_encrypt_note,\n        state_vars::{PrivateSet, PublicImmutable, SharedImmutable}\n    };\n    use dep::aztec::unencrypted_logs::unencrypted_event_emission::encode_event;\n    use dep::value_note::value_note::ValueNote;\n    use dep::token::Token;\n    // docs:end:all-deps\n\n    #[aztec(event)]\n    struct WithdrawalProcessed {\n        who: Field,\n        amount: Field,\n    }\n\n    // docs:start:storage\n    #[aztec(storage)]\n    struct Storage {\n        // Token used for donations (e.g. DAI)\n        donation_token: SharedImmutable<AztecAddress>,\n        // Crowdfunding campaign operator\n        operator: SharedImmutable<AztecAddress>,\n        // End of the crowdfunding campaign after which no more donations are accepted\n        deadline: PublicImmutable<u64>,\n        // Notes emitted to donors when they donate (can be used as proof to obtain rewards, eg in Claim contracts)\n        donation_receipts: PrivateSet<ValueNote>,\n    }\n    // docs:end:storage\n\n    // docs:start:init\n    // docs:start:init-header\n    // docs:start:init-header-error\n    #[aztec(public)]\n    #[aztec(initializer)]\n    // this-will-error:init-header-error\n    fn init(donation_token: AztecAddress, operator: AztecAddress, deadline: u64) {\n        // docs:end:init-header\n        // docs:end:init-header-error\n        storage.donation_token.initialize(donation_token);\n        storage.operator.initialize(operator);\n        storage.deadline.initialize(deadline);\n    }\n    // docs:end:init\n\n    // docs:start:deadline\n    // docs:start:deadline-header\n    #[aztec(public)]\n    #[aztec(internal)]\n    #[aztec(view)]\n    fn _check_deadline() {\n        // docs:end:deadline-header\n        let deadline = storage.deadline.read();\n        assert(context.timestamp() < deadline, \"Deadline has passed\");\n    }\n    // docs:end:deadline\n\n    // docs:start:donate\n    // docs:start:call-check-deadline\n    #[aztec(private)]\n    fn donate(amount: u64) {\n        // 1) Check that the deadline has not passed\n        Crowdfunding::at(context.this_address())._check_deadline().enqueue_view(&mut context);\n        // docs:end:call-check-deadline\n\n        // docs:start:do-transfer\n        // 2) Transfer the donation tokens from donor to this contract\n        let donor = context.msg_sender();\n        Token::at(storage.donation_token.read_private()).transfer_from(donor, context.this_address(), amount as Field, 0).call(&mut context);\n        // docs:end:do-transfer\n\n        let header = context.get_header();\n        // 3) Create a value note for the donor so that he can later on claim a rewards token in the Claim\n        // contract by proving that the hash of this note exists in the note hash tree.\n        let donor_npk_m_hash = header.get_npk_m_hash(&mut context, donor);\n        let mut note = ValueNote::new(amount as Field, donor_npk_m_hash);\n        storage.donation_receipts.insert(&mut note).emit(encode_and_encrypt_note(&mut context, donor, donor));\n    }\n    // docs:end:donate\n\n    // docs:start:operator-withdrawals\n    // Withdraws balance to the operator. Requires that msg_sender() is the operator.\n    #[aztec(private)]\n    fn withdraw(amount: u64) {\n        // 1) Check that msg_sender() is the operator\n        let operator_address = storage.operator.read_private();\n        assert(context.msg_sender() == operator_address, \"Not an operator\");\n\n        // 2) Transfer the donation tokens from this contract to the operator\n        Token::at(storage.donation_token.read_private()).transfer(operator_address, amount as Field).call(&mut context);\n        // 3) Emit an unencrypted event so that anyone can audit how much the operator has withdrawn\n        Crowdfunding::at(context.this_address())._publish_donation_receipts(amount, operator_address).enqueue(&mut context);\n    }\n    // docs:end:operator-withdrawals\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _publish_donation_receipts(amount: u64, to: AztecAddress) {\n        WithdrawalProcessed { amount: amount as Field, who: to.to_field() }.emit(encode_event(&mut context));\n    }\n}\n"},"38":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n"},"4":{"path":"std/cmp.nr","source":"// docs:start:eq-trait\ntrait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\nimpl Eq for Field { fn eq(self, other: Field) -> bool { self == other } }\n\nimpl Eq for u64 { fn eq(self, other: u64) -> bool { self == other } }\nimpl Eq for u32 { fn eq(self, other: u32) -> bool { self == other } }\nimpl Eq for u8 { fn eq(self, other: u8) -> bool { self == other } }\nimpl Eq for u1 { fn eq(self, other: u1) -> bool { self == other } }\n\nimpl Eq for i8 { fn eq(self, other: i8) -> bool { self == other } }\nimpl Eq for i32 { fn eq(self, other: i32) -> bool { self == other } }\nimpl Eq for i64 { fn eq(self, other: i64) -> bool { self == other } }\n\nimpl Eq for () { fn eq(_self: Self, _other: ()) -> bool { true } }\nimpl Eq for bool { fn eq(self, other: bool) -> bool { self == other } }\n\nimpl<T, let N: u32> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T] where T: Eq {\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3) & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\nstruct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n// docs:start:ord-trait\ntrait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v1 } else { v2 }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v2 } else { v1 }\n}\n\nmod cmp_tests {\n    use crate::cmp::{min, max};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"},"47":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\nuse crate::println;\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\nstruct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_be_bytes(8);\n        let hi = self.hi.to_be_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_le_bytes(8);\n        let hi = self.hi.to_le_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    fn decode_ascii(ascii: u8) -> Field {\n        if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (U128::uconstrained_check_is_upper_ascii(ascii) as u8);\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        } as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;  \n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi*b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo*b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo+self.hi)*(b.lo+b.hi) - low + carry\n        } else {\n            self.lo*b.hi + self.hi*b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        q\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        r\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n        \n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 { \n    fn not(self) -> U128 {\n        U128 {\n            lo: (!(self.lo as u64)) as Field,\n            hi: (!(self.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitOr for U128 { \n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 { \n    fn shl(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    } \n}\n\nimpl Shr for U128 { \n    fn shr(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    } \n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c= b.to_le_bytes(17);\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        let (q,r) = a.unconstrained_div(b);\n        assert_eq(q, c);\n        assert_eq(r, d);\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        let (c,d ) = a.unconstrained_div(b);\n        assert_eq((c, d), (a, U128::zero()));\n\n        // Check where b is a multiple of a\n        let (c,d) = b.unconstrained_div(a);\n        assert_eq((c, d), (U128::zero(), b));\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        let (c,d)= a.unconstrained_div(b);\n        assert_eq((c, d), (U128::zero(), U128::zero()));\n\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        let (c,d )= a.unconstrained_div(b);\n        assert_eq((c, d), (U128::one(), U128::zero()));\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"64":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::{Point, pub_key_to_bytes},\n    utils::arr_copy_slice\n};\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret_fields = multi_scalar_mul([point], [secret]);\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/6061): make the func return Point struct directly\n    let shared_secret = pub_key_to_bytes(Point::new(shared_secret_fields[0], shared_secret_fields[1], false));\n    let mut shared_secret_bytes_with_separator = [0 as u8; 65];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[64] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nfn check_point_to_symmetric_key() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar::new(\n        0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    );\n    let point = Point::new(\n        0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        false\n    );\n\n    let key = point_to_symmetric_key(secret, point);\n    // The following value gets updated when running encrypt_buffer.test.ts with AZTEC_GENERATE_TEST_DATA=1\n    let expected_key = [\n        49, 167, 146, 222, 151, 129, 138, 184, 87, 210, 245, 249, 99, 100, 1, 59, 223, 180, 5, 99, 14, 7, 177, 236, 159, 203, 231, 72, 220, 180, 241, 23\n    ];\n    assert_eq(key, expected_key);\n}\n"},"65":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/getters.nr","source":"use dep::protocol_types::{\n    header::Header, abis::validation_requests::KeyValidationRequest, address::AztecAddress,\n    constants::CANONICAL_KEY_REGISTRY_ADDRESS, point::Point, storage::map::derive_storage_slot_in_map,\n    traits::is_empty\n};\nuse crate::{\n    context::PrivateContext,\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX, TAGGING_INDEX}},\n    state_vars::{shared_mutable::shared_mutable_private_getter::SharedMutablePrivateGetter}\n};\n\nglobal DELAY = 5;\n\n// docs:start:key-getters\ntrait KeyGetters {\n  fn get_npk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_ivpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_ovpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_tpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_npk_m_hash(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Field;\n}\n\nimpl KeyGetters for Header {\n    fn get_npk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, NULLIFIER_INDEX, self)\n    }\n\n    fn get_ivpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, INCOMING_INDEX, self)\n    }\n\n    fn get_ovpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, OUTGOING_INDEX, self)\n    }\n\n    fn get_tpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, TAGGING_INDEX, self)\n    }\n\n    fn get_npk_m_hash(self, context: &mut PrivateContext, address: AztecAddress) -> Field {\n        get_master_key(context, address, NULLIFIER_INDEX, self).hash()\n    }\n}\n// docs:end:key-getters\n\nfn get_master_key(\n    context: &mut PrivateContext,\n    address: AztecAddress,\n    key_index: Field,\n    header: Header\n) -> Point {\n    let key = fetch_key_from_registry(context, key_index, address, header);\n    if is_empty(key) {\n        // Keys were not registered in registry yet --> fetch key from PXE\n        let keys = fetch_and_constrain_keys(address);\n        // Return the corresponding to index\n        keys.get_key_by_index(key_index)\n    } else {\n        // Keys were registered --> return the key\n        key\n    }\n}\n\nfn fetch_key_from_registry(\n    context: &mut PrivateContext,\n    key_index: Field,\n    address: AztecAddress,\n    header: Header\n) -> Point {\n    let x_coordinate_map_slot = key_index * 2 + 1;\n    let y_coordinate_map_slot = x_coordinate_map_slot + 1;\n    let x_coordinate_derived_slot = derive_storage_slot_in_map(x_coordinate_map_slot, address);\n    let y_coordinate_derived_slot = derive_storage_slot_in_map(y_coordinate_map_slot, address);\n\n    let x_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        x_coordinate_derived_slot\n    );\n    let y_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        y_coordinate_derived_slot\n    );\n    let x_coordinate = x_coordinate_registry.get_value_in_private(header);\n    let y_coordinate = y_coordinate_registry.get_value_in_private(header);\n\n    Point::new(x_coordinate, y_coordinate, false)\n}\n\n// Passes only when keys were not rotated - is expected to be called only when keys were not registered yet\nfn fetch_and_constrain_keys(address: AztecAddress) -> PublicKeys {\n    let (public_keys, partial_address) = get_public_keys_and_partial_address(address);\n\n    let computed_address = AztecAddress::compute(public_keys.hash(), partial_address);\n\n    assert(computed_address.eq(address));\n\n    public_keys\n}\n\n// A helper function since requesting nsk_app is very common\n// TODO(#6543)\npub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n"},"66":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH, hash::poseidon2_hash,\n    point::Point, traits::{Deserialize, Serialize, Empty, is_empty}\n};\nuse crate::keys::constants::{NUM_KEY_TYPES, NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX};\n\nglobal PUBLIC_KEYS_LENGTH = 12;\n\nstruct PublicKeys {\n    npk_m: Point,\n    ivpk_m: Point,\n    ovpk_m: Point,\n    tpk_m: Point,\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m : Point::empty(),\n            ivpk_m : Point::empty(),\n            ovpk_m : Point::empty(),\n            tpk_m : Point::empty()\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        ( self.npk_m == other.npk_m ) &\n        ( self.ivpk_m == other.ivpk_m ) &\n        ( self.ovpk_m == other.ovpk_m ) &\n        ( self.tpk_m == other.tpk_m )\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash(\n                [\n                self.npk_m.x,\n                self.npk_m.y,\n                self.npk_m.is_infinite as Field,\n                self.ivpk_m.x,\n                self.ivpk_m.y,\n                self.ivpk_m.is_infinite as Field,\n                self.ovpk_m.x,\n                self.ovpk_m.y,\n                self.ovpk_m.is_infinite as Field,\n                self.tpk_m.x,\n                self.tpk_m.y,\n                self.tpk_m.is_infinite as Field,\n                GENERATOR_INDEX__PUBLIC_KEYS_HASH\n            ]\n            )\n        }\n        )\n    }\n\n    pub fn get_key_by_index(self, index: Field) -> Point {\n        assert(index as u8 < NUM_KEY_TYPES, \"Invalid key index\");\n        if index == NULLIFIER_INDEX {\n            self.npk_m\n        } else if index == INCOMING_INDEX {\n            self.ivpk_m\n        } else if index == OUTGOING_INDEX {\n            self.ovpk_m\n        } else {\n            self.tpk_m\n        }\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.x,\n            self.npk_m.y,\n            self.npk_m.is_infinite as Field,\n            self.ivpk_m.x,\n            self.ivpk_m.y,\n            self.ivpk_m.is_infinite as Field,\n            self.ovpk_m.x,\n            self.ovpk_m.y,\n            self.ovpk_m.is_infinite as Field,\n            self.tpk_m.x,\n            self.tpk_m.y,\n            self.tpk_m.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: Point::new(serialized[0], serialized[1], serialized[2] as bool),\n            ivpk_m: Point::new(serialized[3], serialized[4], serialized[5] as bool),\n            ovpk_m: Point::new(serialized[6], serialized[7], serialized[8] as bool),\n            tpk_m: Point::new(serialized[9], serialized[10], serialized[11] as bool)\n        }\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: Point { x: 1, y: 2, is_infinite: false },\n        ivpk_m: Point { x: 3, y: 4, is_infinite: false },\n        ovpk_m: Point { x: 5, y: 6, is_infinite: false },\n        tpk_m: Point { x: 7, y: 8, is_infinite: false }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x146f68c0e0ba4067d61a3304bbfdec0797d5df1357db6c01247c48bfb345c7d7;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nfn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nfn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: Point { x: 1, y: 2, is_infinite: false },\n        ivpk_m: Point { x: 3, y: 4, is_infinite: false },\n        ovpk_m: Point { x: 5, y: 6, is_infinite: false },\n        tpk_m: Point { x: 7, y: 8, is_infinite: false }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.x, deserialized.npk_m.x);\n    assert_eq(keys.npk_m.y, deserialized.npk_m.y);\n    assert_eq(keys.ivpk_m.x, deserialized.ivpk_m.x);\n    assert_eq(keys.ivpk_m.y, deserialized.ivpk_m.y);\n    assert_eq(keys.ovpk_m.x, deserialized.ovpk_m.x);\n    assert_eq(keys.ovpk_m.y, deserialized.ovpk_m.y);\n    assert_eq(keys.tpk_m.x, deserialized.tpk_m.x);\n    assert_eq(keys.tpk_m.y, deserialized.tpk_m.y);\n}\n"},"80":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::pedersen_hash, address::AztecAddress,\n    header::Header, utils::field::full_field_less_than\n};\nuse std::merkle::compute_merkle_root;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header { \n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf slot by siloing the storage slot with the contract address\n        let public_value_leaf_slot = pedersen_hash(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness of the slot\n        let witness = get_public_data_witness(\n            self.global_variables.block_number as u32,\n            public_value_leaf_slot\n        );\n\n        // 3) Extract the value from the witness leaf and check that the storage slot is correct\n        let preimage = witness.leaf_preimage;\n\n        // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n        // 1. The value is the same as the one in the witness\n        // 2. The value was never initialized and is zero\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_value_leaf_slot);\n        let is_next_greater_than = full_field_less_than(public_value_leaf_slot, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_value_leaf_slot, \"Public data slot doesn't match witness\");\n            preimage.value\n        };\n\n        // 4) Prove that the leaf exists in the public data tree. Note that `hash` returns not just the hash of the value\n        // but also the metadata (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == compute_merkle_root(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        value\n    }\n}\n"},"81":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr","source":"use std::merkle::compute_merkle_root;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::NoteInterface}\n};\n\ntrait ProveNullifierInclusion {\n    fn prove_nullifier_inclusion(header: Header, nullifier: Field);\n}\n\nimpl ProveNullifierInclusion for Header {\n    fn prove_nullifier_inclusion(self, nullifier: Field) {\n        // 1) Get the membership witness of the nullifier\n        let witness = get_nullifier_membership_witness(self.global_variables.block_number as u32, nullifier);\n\n        // 2) Check that the witness we obtained matches the nullifier\n        assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n\n        // 3) Compute the nullifier tree leaf\n        let nullifier_leaf = witness.leaf_preimage.hash();\n\n        // 4) Prove that the nullifier is in the nullifier tree\n        assert(\n            self.state.partial.nullifier_tree.root\n            == compute_merkle_root(nullifier_leaf, witness.index, witness.path), \"Proving nullifier inclusion failed\"\n        );\n        // --> Now we have traversed the trees all the way up to archive root and verified that the nullifier\n        //     was included in the nullifier tree.\n    }\n}\n\ntrait ProveNoteIsNullified {\n    fn prove_note_is_nullified<Note, N, M>(header: Header, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N, M>;\n}\n\nimpl ProveNoteIsNullified for Header {\n    // docs:start:prove_note_is_nullified\n    fn prove_note_is_nullified<Note, N, M>(self, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N, M> {\n        let nullifier = compute_siloed_nullifier(note, context);\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n    // docs:end:prove_note_is_nullified\n}\n"},"89":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\nstruct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<N>(self) -> [Field; N] {\n        let unpacked: [Field; N] = unpack_returns(self.packed_returns);\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, N>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"93":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    public_context::FunctionReturns, inputs::{PrivateContextInputs, PublicContextInputs}\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\ntrait CallInterface<N, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateStaticCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateStaticVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> T {\n        self.original\n    }\n}\n\nstruct PublicCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](PublicContextInputs) -> T,\n    is_static: bool\n}\n\nimpl<N, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> () {\n        self.original\n    }\n}\n\nstruct PublicVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<N, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> T {\n        self.original\n    }\n}\n\nstruct PublicStaticCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<N, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> () {\n        self.original\n    }\n}\n\nstruct PublicStaticVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<N, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"94":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, set_public_teardown_function_call_internal,\n    parse_public_call_stack_item_from_oracle\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    caller_context::CallerContext, function_selector::FunctionSelector,\n    max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_function_hash: Field,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    // TODO(#7112): This function is called with non-zero note hash only in 1 of 25 cases in aztec-packages repo\n    // - consider creating a separate function with 1 arg for the zero note hash case.\n    fn push_nullifier(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            public_teardown_function_hash: self.public_teardown_function_hash,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one \n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<M>(&mut self, randomness: Field, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<M>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.start_side_effect_counter, start_side_effect_counter);\n        let end_side_effect_counter = item.public_inputs.end_side_effect_counter;\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        let mut caller_context = CallerContext::empty();\n        caller_context.is_static_call = self.inputs.call_context.is_static_call;\n        if is_delegate_call {\n            caller_context.msg_sender = self.inputs.call_context.msg_sender;\n            caller_context.storage_contract_address = self.inputs.call_context.storage_contract_address;\n        }\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            target: item.contract_address,\n            call_context: item.public_inputs.call_context,\n            function_data: item.function_data,\n            args_hash: item.public_inputs.args_hash,\n            returns_hash: item.public_inputs.returns_hash,\n            caller_context,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(item.public_inputs.returns_hash)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_call_stack_hashes.push(item.get_compressed().hash());\n    }\n\n    pub fn set_public_teardown_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_teardown_function_hash = item.get_compressed().hash();\n    }\n\n    fn validate_call_stack_item_from_oracle(\n        self,\n        item: PublicCallStackItem,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"95":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::inputs::public_context_inputs::PublicContextInputs;\nuse crate::context::gas::GasOpts;\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs) -> Self {\n        PublicContext { inputs }\n    }\n\n    pub fn emit_unencrypted_log<T, N>(&mut self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0);\n    }\n\n    fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        assert(false, \"'delegate_call_public_function' not implemented!\");\n        FunctionReturns::new([0; RETURNS_COUNT])\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        // Cannot nullify pending commitments in AVM, so `nullified_commitment` is not used\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(self) -> AztecAddress {\n        sender()\n    }\n    fn selector(self) -> FunctionSelector {\n        FunctionSelector::from_u32(function_selector())\n    }\n    fn get_args_hash(self) -> Field {\n        self.inputs.args_hash\n    }\n    fn transaction_fee(self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(self) -> Field {\n        chain_id()\n    }\n    fn version(self) -> Field {\n        version()\n    }\n    fn block_number(self) -> Field {\n        block_number()\n    }\n    fn timestamp(self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(self) -> Field {\n        da_gas_left()\n    }\n\n    fn raw_storage_read<N>(_self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(storage_slot)\n    }\n\n    fn storage_read<T, N>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<N>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        storage_write(storage_slot, values);\n    }\n\n    fn storage_write<T, N>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    let MAX_POSSIBLE_FIELD: Field = 0 - 1;\n    [\n        user_gas.l2_gas.unwrap_or(MAX_POSSIBLE_FIELD),\n        user_gas.da_gas.unwrap_or(MAX_POSSIBLE_FIELD)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/6420): reconsider.\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\nunconstrained fn function_selector() -> u32 {\n    function_selector_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<RET_SIZE>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<RET_SIZE>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_opcode(storage_slot, N)\n}\n\nunconstrained fn storage_write<N>(storage_slot: Field, values: [Field; N]) {\n    storage_write_opcode(storage_slot, values);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(PublicContextInputs::empty())\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n#[oracle(avmOpcodeFunctionSelector)]\nunconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<RET_SIZE>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<RET_SIZE>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode<N>(storage_slot: Field, length: Field) -> [Field; N] {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode<N>(storage_slot: Field, values: [Field; N]) {}\n\nstruct FunctionReturns<N> {\n    values: [Field; N]\n}\n\nimpl<N> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn assert_empty(returns: FunctionReturns<0>) {\n        assert(returns.values.len() == 0);\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n"}}}