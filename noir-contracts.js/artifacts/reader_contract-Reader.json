{"noir_version":"0.24.0+78ef0134b82e76a73dadb6c7975def22290e3a1a","name":"Reader","functions":[{"name":"check_name_private","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"who","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"what","type":{"kind":"string","length":31},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":41}],"what":[{"start":42,"end":73}],"who":[{"start":41,"end":42}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515]},"bytecode":"","debug_symbols":""},{"name":"get_name","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"who","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"who":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"string","length":6},"visibility":"public"},"return_witnesses":[1,2,3,4,5,6]},"bytecode":"H4sIAAAAAAAA/81XbW6DMAw1JYGErNK0XYAjhKkf0n71/qcaZPF4pO6YNINqKcIkjd/zc0yhIaKKvq0GH43nbvka/2eDYqxYAccG/EPOx4zD5rXPvO4gt16LyyleE75ZasYWMieC37TjeAdORp/T4HL+qnFjvLjMXzluqifXp8mxGceCVp5mnZWwB8Su8vCAyaVj/41m8+BznZn3C81n0z/YY4o9R1hvhLx75bxb4NLDPeNZmHsdR2XuuW1xzqa+qWlpZW/14OMZUe+nuFk/RVdoqRP3/EG0rG1d6HSEdcTfoLfTObO0rBvftwK2ng6XM8f7TQcncHE76+AEbEUd0n+vX9HBC1y2eu480sEL2Io6nKYY3YoOncCl21kH5PhXvu0T8HWFr4N9Tc+zsKJDELiEnXUIcLUF1wDrBuYORS6h2DPZdBbv3tFvigkxoPQhsPaC/WNf35fjTFYMAAA=","debug_symbols":"q1bKyU9OLMnMzytWsqqu1VEqSyzKTEzKSYVySyoLIMxaAA=="},{"name":"check_name_public","function_type":"Open","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"who","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"what","type":{"kind":"string","length":31},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":39}],"what":[{"start":40,"end":71}],"who":[{"start":39,"end":40}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264]},"bytecode":"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","debug_symbols":"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fPrJp198+sWnX3z6xadffPrFp198+sWnX3z6xafffPrNp998+s2n33z6zafffPrNp998+s2nv/j0F5/+4tNffPqLT3/x6S8+/cWnv/j0F5/+5tPffPqbT3/z6W8+/c2nv/n0N5/+5tPffPqHT//w6R8+/cOnf/j0D5/+4dM/fPqHT5+zPuOszzjrM876jLO+t+96+ZHiR5ofWfzI5kf49DnrM876jLM+46zPOOszzvqMsz7jrM846zPO+oyzPuOszzjrM876jLM+46zPOOszzvqMsz7jrM846zPO+oyzPuOszzjrM876jLM+46zPOOszzvqMsz7jrM846zPO+oyzPuOszzjrM876jLM+46zPOOszzvqMsz7jrM846zPO+oyzPuOszzjrM876jLM+46zPOOszzvqMsz7jrM846zPO+oyzPuOszzjrM876jLM+46zPOOszzvqMsz7jrM846zPO+oyzPuOszzjrM876jLM+46zPOOszzvqMsz7jrM846zPO+oyzPuOszzjrM876jLM+46zPOOszzvqcsz7nrM8563PO+pyzPueszznrc876nLM+56zPOetzzvqcsz7nrM8563PO+pyzPueszznrc876nLM+56zPOetzzvqcsz7nrM8563PO+pyzPueszznrc876nLM+56zPOetzzvqcsz7nrM8563PO+pyzPueszznrc876nLM+56zPOetzzvqcsz7nrM8563PO+pyzPueszznrc876nLM+56zPOetzzvqcsz7nrM8563PO+pyzPueszznrc876nLM+56zPOetzzvqcsz7nrM8563PO+pyzPueszznrc876nLM+56zPOetzzvqcsz7nrM8563PO+pyzPueszznrc876nLM+56zPOetzzvqcsz7nrM8563PO+oKzvuCsLzjrC876grO+4KwvOOsLzvqCs77grC846wvO+oKzvuCsLzjrC876grO+4KwvOOsLzvqCs77grC846wvO+oKzvuCsLzjrC876grO+4KwvOOsLzvqCs77grC846wvO+oKzvuCsLzjrC876grO+4KwvOOsLzvqCs77grC846wvO+oKzvuCsLzjrC876grO+4KwvOOsLzvqCs77grC846wvO+oKzvuCsLzjrC876grO+4KwvOOsLzvqCs77grC846wvO+oKzvuCsLzjrC876grO+4KwvOOsLzvqCs77grC846wvO+oKzvuCsLzjrC876grO+4KwvOOsLzvqCs77grC846wvO+oKzvuCsLzjrC876krO+5KwvOetLzvqSs77krC8560vO+pKzvuSsLznrS876krO+5KwvOetLzvqSs77krC8560vO+pKzvuSsLznrS876krO+5KwvOetLzvqSs77krC8560vO+pKzvuSsLznrS876krO+5KwvOetLzvqSs77krC8560vO+pKzvuSsLznrS876krO+5KwvOetLzvqSs77krC8560vO+pKzvuSsLznrS876krO+5KwvOetLzvqSs77krC8560vO+pKzvuSsLznrS876krO+5KwvOetLzvqSs77krC8560vO+pKzvuSsLznrS876krO+5KwvOetLzvqSs77krC8560vO+pKzvuSsLznrS876krO+5KwvOetLzvqKs77irK846yvO+oqzvuKsrzjrK876irO+4qyvOOsrzvqKs77irK846yvO+oqzvuKsrzjrK876irO+4qyvOOsrzvqKs77irK846yvO+oqzvuKsrzjrK876irO+4qyvOOsrzvqKs77irK846yvO+oqzvuKsrzjrK876irO+4qyvOOsrzvqKs77irK846yvO+oqzvuKsrzjrK876irO+4qyvOOsrzvqKs77irK846yvO+oqzvuKsrzjrK876irO+4qyvOOsrzvqKs77irK846yvO+oqzvuKsrzjrK876irO+4qyvOOsrzvqKs77irK846yvO+oqzvuKsrzjrK876irO+4qyvOOsrzvqKs77irK846yvO+pqzvuasrznra876mrO+5qyvOetrzvqas77mrK8562vO+pqzvuasrznra876mrO+5qyvOetrzvqas77mrK8562vO+pqzvuasrznra876mrO+5qyvOetrzvqas77mrK8562vO+pqzvuasrznra876mrO+5qyvOetrzvqas77mrK8562vO+pqzvuasrznra876mrO+5qyvOetrzvqas77mrK8562vO+pqzvuasrznra876mrO+5qyvOetrzvqas77mrK8562vO+pqzvuasrznra876mrO+5qyvOetrzvqas77mrK8562vO+pqzvuasrznra876mrO+5qyvOetrzvqas77mrK8562vO+pqzvuasrznra876Fmd9i7O+xVnf4qxvcda3OOtb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n8POZdMacnVD//mPhucSO/VXP/6cK6c1VNMaUjv1Fz91nGtNa2hPa+gMa8i+34dsffxkY3b8Jw19FAlFkVQUKUWRVhT5GbQaH39P/fbH9bLIVhQ5giJ+KYqYoogrioSiSCqKlKJIK4ooFO8KxbtC8aFQfCgUHwrFh0LxoVB8KBQfCsWHQvGhUHwoFJ8KxadC8alQfCoUnwrFp0LxqVB8KhSfCsWnQvGlUHwpFF8KxZdC8aVQfCkUXwrFl0LxpVB8KRTfCsW3QvGtUHwrFN8KxbdC8a1QfCsU3wrFt0LxS6H4pVD8Uih+KRS/FIpfCsUvheKXQvFLofilUPxWKH4rFL8Vit8KxW+F4rdC8Vuh+K1Q/FYofisUfxSKPwrFH4Xij0LxR6H4o1D8USj+KBR/FIo/zyv+7dilKGKKIq4oEooiqShSiiKtKLIURbaiiELxplC8KRRvCsWbQvGmULwpFG8KxZtC8aZQvCkU7wrFu0LxrlC8KxTvCsW7QvGuULwrFO8KxbtC8aFQfCgUHwrFh0LxoVB8KBQfCsWHQvGhUHwoFJ8KxadC8alQfCoUnwrFp0LxqVB8KhSfCsWnQvGlUHwpFF8KxZdC8aVQfCkUXwrFl0LxpVB8KRTfCsW3QvGtUHwrFN8KxbdC8a1QfCsU3wrFt0LxS6H4pVD8Uih+KRS/FIpfCsUvheKXQvFLofilUPxWKH4rFL8Vit8KxW+F4rdC8Vuh+J8jc+f1WcT7ZZGtKHIERX6OzN3XRUxRxBVFQlEkFUVKUaQVRRSKPwrFH4Hi7boURUxRxBVFQlEkFUVKUaQVRZaiyFYUUSjeFIo3heJNoXhTKN4UijeF4k2heFMo3hSKN4XiXaF4VyjeFYonv57040jzI4sf2fzIwUfIb+/8OGL8iPMj3/VrMys//su7ld8eiZ3zeX0+e309e30/e/169vr97PXn0evzevZ6e/Z6f/b6Z1Wbz6o2v0u1P/rCVD/67SdXf17fz16/nr1+P3v9efT6up693p693p+9Pp69Pp+9/lnV1rOqrWdVW8+qtp5VbT+r2n5Wtf2savtZ1fazqu1nVdvPqrafVW0/q9p+VrXrWdWuZ1W7nlXtela161nVrmdVu55V7XpWtYsTm8WJzf6u95m53z+Z+fIfYsez1+ez19ez1/ez169nr9/PXn8evf5cz15vz17/fdzl+vhkXa+vj2evz2evr2ev72evX89ev5+9/jx5vV/Xs9fbs9f7s9fHs9fns9fXs9f3s9evZ6/fz17/fV9r18dXq7Lr1fV2PXu9PXu9P3t9PHt9Pnt9PXt9P3v9evb6/ez1z6rWn1WtP6taf1a1/qxq/VnV+rOq9WdV68+q1p9VrT+r2nhWtfGsauNZ1cazqo1nVRvPqjaeVW08q9p4VrXxrGrzWdXms6rNZ1Wbz6r2dY6mP9cD167PY52fp9atU/vWqXPn1OuMyj8/9fY//vfv/uMPv/vvf/z9n98OvP3Pv/yff//7H//2fwE="},{"name":"check_symbol_private","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"who","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"what","type":{"kind":"string","length":31},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":41}],"what":[{"start":42,"end":73}],"who":[{"start":41,"end":42}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,502,503,504,505,506,507,508,509,510,511,512,513,514,515]},"bytecode":"","debug_symbols":""},{"name":"check_decimals_private","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"who","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"what","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":41}],"what":[{"start":42,"end":43}],"who":[{"start":41,"end":42}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471,472,473,474,475,476,477,478,479,480,481,482,483,484,485,486,487,488,489,490,491]},"bytecode":"","debug_symbols":""},{"name":"check_decimals_public","function_type":"Open","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"who","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"what","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":39}],"what":[{"start":40,"end":41}],"who":[{"start":39,"end":40}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234]},"bytecode":"","debug_symbols":""},{"name":"get_decimals","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"who","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"who":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},"return_witnesses":[1]},"bytecode":"H4sIAAAAAAAA/61S2w2AMAgEa+qjP47gCLRxgO4/lTUWvRrjj1xCSg9yXAhMREwnHOQI5XJ95R+ioZbww+dc8xH41WreJskfIn27F0Uo0emn9gwlPNS58tq3AMfg3UGeLbxLTOG2demjZ61N9HIHNiYkMgz/OramtgNnWVenpgIAAA==","debug_symbols":"q1bKyU9OLMnMzytWsqqu1VEqSyzKTEzKSYVySyoLIMxaAA=="},{"name":"compute_note_hash_and_nullifier","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"contract_address":[{"start":0,"end":1}],"nonce":[{"start":1,"end":2}],"note_type_id":[{"start":3,"end":4}],"serialized_note":[{"start":4,"end":24}],"storage_slot":[{"start":2,"end":3}]},"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[24,25,26,27]},"bytecode":"H4sIAAAAAAAA/+2YS1KEQAyG09C8wefooLPhCFCycOldvP8VLIl25AedlelFqiZVXfQDOl9CV0g4EZGjb0mXltFvkfW3cB3/J5PiXmNMTmeEMzHCmSpyMtuB4p5TH8Gv2oyZAcbcAGNhgLE0wFgZYKwNMDYGGFsDjJ0BxisDjNcGGG8MMN4aYLwzwHhvgPFggPHBAOOjAcajIqMDRh/6/dKelva8tNPSXsJ8SasMWgzz9M45uyjvaSucmyQy8OtcKtwwJ/wJzMk/htSvNuTqNowz71to7xtqhR787/X9/1qCnxTZY/nk68zKWczD3qInA19Voa/4b2VC3S60CnRSeEfSP9IqFfTlTAt3S+u5rM4843fPdLCe/2H3oGx3ASwDjEVfFuxg4fyo91tuZqv12eaGtrGJxe3GA/TryL6KZOfI+zZhrw/S/U614J9y56cO1hu4p43gOwd6ZW8ZI+OF98KLDPWOtYH1CuaSnS2YS+D9+/ihapAoxGTHBThe44DJwZSDekFroKrBMH4JXMxzsczBlos9Lqa4WOFigJNtTmbxA3QuwfuRT4hpJ8qiGQAA","debug_symbols":"q1bKyU9OLMnMzytWsqqu1VEqSyzKTEzKSYVySyoLIMxaAA=="},{"name":"constructor","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":41}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259]},"bytecode":"H4sIAAAAAAAA/+XdZZRUZRwG8IkNMBEREWttmsmdGXLp7m522Fm6uxFbUbFbEVtRsVsRu7GwFTGwuwN9nsPFM+e63/jvh/c895zn7N4DDPd37+zsvW/9w8FAYFtgx4ZvAyEkjJTk7Rd43+/cL/TtF/n2i33/vqZvv7Zvv45vv65vv55vv763n7+FvK9l3td4pDSRyKViuWg8Wh6JZbLpZCSRzJamo+loMp2siKXj8Vw6kU5lsplUJBNNxHPRymQmXhnZsRUbvlbDvNeK7NoWC3vnwb8Fff7Irm1Rw2OO5B9vI+/9E/DeN/7j37mFq/i+Rt7f225o9f+//mOpVcVx/u8alBkeTHVczEbV8LqNA3Y/JNXlbmx/jSKBKt4QVuehifFxWp/TYu+cWrubVtP1CRn7Lc3NHDEHDc3NHTGHDM0RR8xhQ3PUEXOBoTnmiLnQ0Bx3xFxkaE44YrZ8iEk6Ym5iaC4VNKcEzWlBc0bQ3MIRc1NDc0vB69xK0Nxa0NxG0NxW0FwmaG4naG4vaO4gaO4oaO4kaO4saO4iaO4qaO4maO4uaO4haO4paO4laO4taO4jaO4raO4naO4vaB4gaB4oaB4kaB4saB4iaB4qaB4maB4uaB4haB4paB4laB4taB4jaB4raC4XNGcFzeMEzRWC5pyguVLQPF7QPEHQPFHQPEnQPFnQPEXQPFXQPE3QPF3QPEPQPFPQPEvQPFvQPEfQPFfQPE/QPF/QvEDQvFDQvEjQvFjQvETQvFTQvEzQvFzQvELQfKygeaWg+ThB8/GC5hMEzScKmk8SNJ8saD5F0HyqoPk0QfMqQfPpguYzBM1nCppXC5rPEjSfLWg+R9B8rqD5PEHz+YLmCwTNFwqaLxI0XyxovkTQfKmg+TJB8+WC5isEzWsEzVcKmtcKmq8SNF8taL5G0HytoPk6QfP1guYbBM03CppvEjSvEzTfLGi+RdB8q6B5vaD5NkHz7YLmOwTNdwqa7xI03y1ovkfQfK+g+T5B8/2C5gcEzQ8Kmh8SND8saH5E0LxB0PyooHmjoPkxQfPjguYnBM1PCpqfEjQ/LWh+RtD8rKD5OUHz84LmFwTNLwqaXxI0bxI0vyxofkXQ/Kqg+TVB8+uC5s2C5jcEzW8Kmt8SNL8taH7HEXOxofldwev8nqD5fUHzB4LmLYLmDwXNWx0x1zA0f+SIuaah+WNHzLsZmj9xxLy7oflTR8x7GJq3OWLe09D8mSPmvQzNnzti3tvQ/IUj5lqG5i8dMe9jaP7KEXNtQ/PXjpj3NTR/44i5jqH5W0fM+xmav3PEXNfQ/L0j5v0NzT84Yq5naP7REfMBhuafHDHXNzT/7Ij5QEPzL46YDzI0/+qI+WBD82+OmA8xNP/uiPlQQ/MfjphLDM1/OmI+zND8lyPmww3NfztiPsLQvN0R85GG5n8cMR9laA4E3TAfbWgOOmI+xtAccsTcwNAcNjTjpQJh77Ua5vmD3jngnxUghUgRwjFf7Etn3zL7Wtn3yL449k2xr4Z9F2zLZ9s223rZ9sm2QLaNsa2IbSdsS+CzNZ81+ezFZxHem/NelfduJQh/t/N3HT/7+VnIzwb+rPC90yDvODd7X5shzXk+kCgS43lGEkgSKUVSSBrJIC2QlkgrpDXSBmnrXaN2SHukA9IR6YR0RrogXZFuSHekB9IT6YX0RvogfZF+SH9kADIQGYQMRoYgQ5FhyHBkBDISGYWMRsYgY5FyJIuMQyqQHFKJjEcmIBORSchkZAoyFZmGTEdmIDORWchsZA4yF5mHzEcWIAuRRchiZAmyFFmGLEdWIKwjvxJhnXHW3WYdatZlZp1i1u1lHVvWdWWd01UI62CyLiTrJK5GWEePdeVYZ411x1iHi3WpWKeJdYtYx4d1bVjnhXVPWAeEdTFYJ2INwjoCaxGuM89117kOOdfl5jrVXLeZ6xhzXV+uc7sO4TqoXBeU62SuR7iOItcV5Dp7XHeO67BxXTKu08V1q7iOE9c14jo/XPeG68BwXRSuE7IB4ToSGxGuM8B595yHznnZnKfMebucx8p5nZznyHl/nAfHeWGcJ7UJ4TwazivhPAvOO+A4fL5POU6b45Y5jpfjWjnOk+MeOQ6Q4+I4TmwLwnFEWxGOM+G4C45DYL88+6nZb8t+TPbrsZ+L/T7sB2G/ANvJ2W7MdlS2K7Kdje1ObIdhuwSf0/ncyuc4PtfwPp/3vbwP5H0R7xP4g8/fI/xc5efMf9u/czkChPbWAAA=","debug_symbols":"tZDBCoQgFEX/5a5d6GgzjL8SLV5lIIhFShDiv2cUbVq7evfA4SxegpsHinb2ATpBCOg2ISzkTwyR1gjNGYwfy80Mk3UGWvKyX55UTXOrUv3+j/3luWMQn4ptWbGtarULbLRa6p05v18w7ss18wE="},{"name":"get_symbol","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"who","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"}],"param_witnesses":{"who":[{"start":0,"end":1}]},"return_type":{"abi_type":{"kind":"string","length":3},"visibility":"public"},"return_witnesses":[1,2,3]},"bytecode":"H4sIAAAAAAAA/81W2w7CIAztZBeWucToD/DuC1N83/9/lWO27gyJMbEzNiErhfWctpRgiKighxjQUcQ28td/J4OiL18ARwP6judntlmIx2nhBx/q6KRc50mkYx4Ee5ppnIBTqc9piH4rbb/eXy3zV/Y711DqU7NvwakgVy0teVbCHhC74NECppRO9CMt0oIudRbee44l3Yd6mfzTw3qdidspx90AFwdzwavAdphGwYQNcNvinHWAIZL2lgMdz4h6P/nN+slHv1hnHb+3C9G6tibJUw/riL9Bb8/nrKJ13WTeZLD18hCC+HuXB5vhYn+cB+T4Kd/6D/h2YDNgw3tTbLskFuxx2R/vnZf3x6gYED4QUsk9Hp5yBysXdNAmCQAA","debug_symbols":"q1bKyU9OLMnMzytWsqqu1VEqSyzKTEzKSYVySyoLIMxaAA=="},{"name":"check_symbol_public","function_type":"Open","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"who","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"what","type":{"kind":"string","length":31},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":39}],"what":[{"start":40,"end":71}],"who":[{"start":39,"end":40}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264]},"bytecode":"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","debug_symbols":""}],"events":[],"file_map":{"58":{"source":"use crate::{\n    context::inputs::PublicContextInputs, messaging::process_l1_to_l2_message,\n    oracle::{arguments, public_call::call_public_function_internal}\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_READ_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::hash_args, header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = StorageRead::empty();\n        let empty_storage_update = StorageUpdateRequest::empty();\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(0),\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_reads: BoundedVec::new(empty_storage_read),\n            public_call_stack_hashes: BoundedVec::new(0),\n            new_note_hashes: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n            new_l2_to_l1_msgs: BoundedVec::new(L2ToL1Message::empty()),\n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field, sender: EthAddress) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            sender,\n            self.chain_id(),\n            self.version(),\n            msg_key,\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(contract_address, function_selector, 0, false, true)\n    }\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"60":{"source":"use crate::{\n    context::inputs::PrivateContextInputs, key::nullifier_key::validate_nullifier_key_against_address,\n    messaging::process_l1_to_l2_message,\n    oracle::{\n    arguments, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    debug_log::debug_log\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_data::FunctionData, function_selector::FunctionSelector,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, hash::hash_args, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader\n};\nuse dep::std::option::Option;\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<SideEffect, MAX_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.call_context.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        // Note. The side effect counter is 2 when this is the initial call\n        if (side_effect_counter == 2) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(0),\n            read_requests: BoundedVec::new(SideEffect::empty()),\n            nullifier_key_validation_requests: BoundedVec::new(NullifierKeyValidationRequest::empty()),\n            new_note_hashes: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(0),\n            public_call_stack_hashes: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(L2ToL1Message::empty()),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            // TODO(fees): start this from 0 and test the following:\n            // - in the private circuit init that it gets set correctly\n            // - in the private circuit inner that it remains 0\n            // I've had to initialize the counter here so that it would work for contract deployments\n            // the above checks should be doable after we figure out fee payments for contract deployments\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            read_requests: self.read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        let side_effect = SideEffect { value: read_request, counter: self.side_effect_counter };\n        self.read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            msg_key,\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash: [0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero()\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"64":{"source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, constants::RETURN_VALUES_LENGTH};\n\n#[oracle(callPublicFunction)]\nfn call_public_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; RETURN_VALUES_LENGTH] {}\n\nunconstrained pub fn call_public_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; RETURN_VALUES_LENGTH] {\n    call_public_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        is_static_call,\n        is_delegate_call\n    )\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/public_call.nr"},"65":{"source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nfn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr"},"106":{"source":"use dep::protocol_types::{hash::hash_args, traits::Hash};\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/hasher.nr"},"113":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::AztecAddress,\n    constants::{NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH, NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH},\n    traits::{Empty, Serialize, Deserialize}, grumpkin_point::GrumpkinPoint,\n    grumpkin_private_key::GrumpkinPrivateKey\n};\n\nstruct NullifierKeyValidationRequest {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\nimpl Eq for NullifierKeyValidationRequest {\n    fn eq(self, request: NullifierKeyValidationRequest) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequest {\n    fn empty() -> Self {\n        NullifierKeyValidationRequest {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH> for NullifierKeyValidationRequest {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n        }\n    }\n}\n\nimpl NullifierKeyValidationRequest {\n    pub fn to_context(self, contract_address: AztecAddress) -> NullifierKeyValidationRequestContext {\n        NullifierKeyValidationRequestContext { public_key: self.public_key, secret_key: self.secret_key, contract_address }\n    }\n}\n\nstruct NullifierKeyValidationRequestContext {\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n    contract_address: AztecAddress,\n}\n\nimpl Eq for NullifierKeyValidationRequestContext {\n    fn eq(self, request: NullifierKeyValidationRequestContext) -> bool {\n        (request.public_key.eq(self.public_key))\n            & (request.secret_key.eq(self.secret_key))\n            & (request.contract_address.eq(self.contract_address))\n    }\n}\n\nimpl Empty for NullifierKeyValidationRequestContext {\n    fn empty() -> Self {\n        NullifierKeyValidationRequestContext {\n            public_key: GrumpkinPoint::zero(),\n            secret_key: GrumpkinPrivateKey::zero(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn serialize(self) -> [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.secret_key.high,\n            self.secret_key.low,\n            self.contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH> for NullifierKeyValidationRequestContext {\n    fn deserialize(fields: [Field; NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint::new(fields[0], fields[1]),\n            secret_key: GrumpkinPrivateKey::new(fields[2], fields[3]),\n            contract_address: AztecAddress::from_field(fields[4]),\n        }\n    }\n}\n\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/nullifier_key_validation_request.nr"},"114":{"source":"use dep::std::cmp::Eq;\nuse crate::{\n    address::{AztecAddress, EthAddress},\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : Field,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n}\n// docs:end:global-variables\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        [\n            self.chain_id,\n            self.version,\n            self.block_number,\n            self.timestamp,\n            self.coinbase.to_field(),\n            self.fee_recipient.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        GlobalVariables {\n            chain_id: serialized[0],\n            version: serialized[1],\n            block_number: serialized[2],\n            timestamp: serialized[3],\n            coinbase: EthAddress::from_field(serialized[4]),\n            fee_recipient: AztecAddress::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient)\n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars: GlobalVariables = dep::std::unsafe::zeroed();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/global_variables.nr"},"115":{"source":"use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new(0); \n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item: PrivateCallStackItem = dep::std::unsafe::zeroed();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x07151bc7440eb0b1c4c61a0bcfacca82cf2aed402c20d3742557179f7fedb635);\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/private_call_stack_item.nr"},"118":{"source":"use crate::{\n    abis::{\n    call_context::CallContext, nullifier_key_validation_request::NullifierKeyValidationRequest,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    constants::{\n    MAX_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL,\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS\n},\n    contrakt::contract_deployment_data::ContractDeploymentData, header::Header, hash::pedersen_hash,\n    messaging::l2_to_l1_message::L2ToL1Message, traits::{Deserialize, Hash, Serialize},\n    utils::reader::Reader\n};\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    min_revertible_side_effect_counter: u32,\n\n    read_requests: [SideEffect; MAX_READ_REQUESTS_PER_CALL],\n    nullifier_key_validation_requests: [NullifierKeyValidationRequest; MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    private_call_stack_hashes: [Field; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n    end_side_effect_counter : u32,\n\n    encrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    encrypted_log_preimages_length: Field,\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    contract_deployment_data: ContractDeploymentData,\n\n    // Note: The following 2 values are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    chain_id: Field,\n    version: Field,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.return_values == other.return_values) &\n        (self.read_requests == other.read_requests) &\n        (self.nullifier_key_validation_requests == other.nullifier_key_validation_requests) &\n        (self.new_note_hashes == other.new_note_hashes) &\n        (self.new_nullifiers == other.new_nullifiers) &\n        (self.private_call_stack_hashes == other.private_call_stack_hashes) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.new_l2_to_l1_msgs == other.new_l2_to_l1_msgs) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.encrypted_logs_hash == other.encrypted_logs_hash) &\n        (self.unencrypted_logs_hash == other.unencrypted_logs_hash) &\n        (self.encrypted_log_preimages_length == other.encrypted_log_preimages_length) &\n        (self.unencrypted_log_preimages_length == other.unencrypted_log_preimages_length) &\n        self.historical_header.eq(other.historical_header) &\n        self.contract_deployment_data.eq(other.contract_deployment_data) &\n        self.chain_id.eq(other.chain_id) &\n        self.version.eq(other.version)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0);\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n\n        fields.push(self.min_revertible_side_effect_counter as Field);\n\n        for i in 0..MAX_READ_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.read_requests[i].serialize());\n        }\n        for i in 0..MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL{\n            fields.extend_from_array(self.nullifier_key_validation_requests[i].serialize());\n        }\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL{\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL{\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        fields.extend_from_array(self.private_call_stack_hashes);\n        fields.extend_from_array(self.public_call_stack_hashes);\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n        fields.push(self.end_side_effect_counter as Field);\n        fields.extend_from_array(self.encrypted_logs_hash);\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.encrypted_log_preimages_length);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.extend_from_array(self.contract_deployment_data.serialize());\n        fields.push(self.chain_id);\n        fields.push(self.version);\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            min_revertible_side_effect_counter: reader.read() as u32,\n            read_requests: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_READ_REQUESTS_PER_CALL]),\n            nullifier_key_validation_requests: reader.read_struct_array(NullifierKeyValidationRequest::deserialize, [NullifierKeyValidationRequest::empty(); MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            private_call_stack_hashes: reader.read_array([0; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            end_side_effect_counter: reader.read() as u32,\n            encrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            encrypted_log_preimages_length: reader.read(),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            contract_deployment_data: reader.read_struct(ContractDeploymentData::deserialize),\n            chain_id: reader.read(),\n            version: reader.read(),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PrivateCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x1d45bdd12fe635c85eedd27300524378c35be3aafb3501632a408bbe9db2e1d9);\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/private_circuit_public_inputs.nr"},"120":{"source":"use crate::constants::{GENERATOR_INDEX__SIDE_EFFECT};\nuse dep::std::cmp::Eq;\nuse crate::traits::{Empty, Hash, Serialize, Deserialize};\n\ntrait Ordered {\n    fn counter(self) -> u32;\n}\n\nstruct SideEffect{\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffect {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffect {\n    fn eq(self, side_effect: SideEffect) -> bool {\n        (self.value == side_effect.value)\n        & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffect {\n    fn empty() -> Self {\n        SideEffect {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffect {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize() , GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<2> for SideEffect {\n    fn serialize(self) -> [Field; 2] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<2> for SideEffect {\n    fn deserialize(values: [Field; 2]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nstruct SideEffectLinkedToNoteHash{\n    value: Field,\n    note_hash: Field,\n    counter: u32,\n}\n\nimpl Ordered for SideEffectLinkedToNoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for SideEffectLinkedToNoteHash {\n    fn eq(self, side_effect: SideEffectLinkedToNoteHash) -> bool {\n        (self.value == side_effect.value)\n            & (self.note_hash == side_effect.note_hash) \n            & (self.counter == side_effect.counter)\n    }\n}\n\nimpl Empty for SideEffectLinkedToNoteHash {\n    fn empty() -> Self {\n        SideEffectLinkedToNoteHash {\n            value: 0,\n            note_hash: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Hash for SideEffectLinkedToNoteHash {\n    fn hash(self) -> Field {\n        dep::std::hash::pedersen_hash_with_separator(\n            self.serialize(),\n        GENERATOR_INDEX__SIDE_EFFECT)\n    }\n}\n\nimpl Serialize<3> for SideEffectLinkedToNoteHash {\n    fn serialize(self) -> [Field; 3] {\n        [self.value, self.note_hash, self.counter as Field]\n    }\n}\n\nimpl Deserialize<3> for SideEffectLinkedToNoteHash {\n    fn deserialize(values: [Field; 3]) -> Self {\n        Self {\n            value: values[0],\n            note_hash: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/side_effect.nr"},"121":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment : bool,\n\n    start_side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.is_contract_deployment == false);\n        assert(self.start_side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.is_contract_deployment == self.is_contract_deployment)\n            & (call_context.start_side_effect_counter == self.start_side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n            self.start_side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            is_contract_deployment: serialized[6] as bool,\n            start_side_effect_counter: serialized[7] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/call_context.nr"},"142":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize}\n};\n\nstruct FunctionData {\n    // First four bytes of the abi encoding \n    // of a function. \n    selector : FunctionSelector,\n    is_internal : bool,\n    is_private : bool,\n    is_constructor : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_internal == other.is_internal &\n        self.is_private == other.is_private &\n        self.is_constructor == other.is_constructor\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_internal: serialized[1] as bool,\n            is_private: serialized[2] as bool,\n            is_constructor: serialized[3] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x200569267c0f73ac89aaa414239398db9445dd4ad3a8cf37015cd55b8d4c5e8d);\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/function_data.nr"},"145":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_field(value: Field) -> Self {\n        Self { inner: value as u32 }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/function_selector.nr"},"147":{"source":"use dep::std::cmp::Eq;\n\nstruct AppendOnlyTreeSnapshot {\n    root : Field,\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: Field = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/append_only_tree_snapshot.nr"},"156":{"source":"use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{\n    GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, NUM_FIELDS_PER_SHA256, STATE_REFERENCE_LENGTH,\n    CONTENT_COMMITMENT_LENGTH\n},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::{arr_copy_slice}, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new(0);\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header: Header = dep::std::unsafe::zeroed();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    assert_eq(hash, 0x2df930cc7b9fc763e82ade72f7c4618834692b2a3d0936aff8d7bbfb27f59d6e);\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/header.nr"},"174":{"source":"global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_NOTE_HASHES_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as note hashes and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_NOTE_HASHES_PER_TX ≥ MAX_NEW_NOTE_HASHES_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_NOTE_HASHES_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL: Field = 1;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_NOTE_HASHES_PER_TX: Field = 64;\nglobal MAX_NON_REVERTIBLE_NOTE_HASHES_PER_TX: Field = 8;\nglobal MAX_REVERTIBLE_NOTE_HASHES_PER_TX: Field = 56;\n\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_NON_REVERTIBLE_NULLIFIERS_PER_TX: Field = 8;\nglobal MAX_REVERTIBLE_NULLIFIERS_PER_TX: Field = 56;\n\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\n\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NON_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 3;\nglobal MAX_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 5;\n\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 32;\nglobal MAX_NON_REVERTIBLE_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_REVERTIBLE_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\n\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 32;\nglobal MAX_NON_REVERTIBLE_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_REVERTIBLE_PUBLIC_DATA_READS_PER_TX: Field = 16;\n\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX: Field = 4;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 40;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\nglobal ARTIFACT_FUNCTION_TREE_MAX_HEIGHT = 5;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 0;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 16;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 6;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 26;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 6;\nglobal PUBLIC_DATA_SUBTREE_HEIGHT: Field = 5;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 14;\nglobal PUBLIC_DATA_SUBTREE_SIBLING_PATH_LENGTH: Field = 35;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\n// sha256 hash is stored in two fields to accommodate all 256-bits of the hash\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 32;\n\n// CONTRACT CLASS CONSTANTS\n// This should be around 8192 (assuming 2**15 instructions packed at 8 bytes each),\n// but it's reduced to speed up build times, otherwise the ClassRegisterer takes over 5 mins to compile.\n// We are not using 1024 so we can squeeze in a few more args to methods that consume packed public bytecode,\n// such as the ClassRegisterer.register, and still land below the 32 * 32 max args limit for hashing.\nglobal MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS: Field = 1000;\n// Bytecode size for private functions is per function, not for the entire contract.\n// Note that private functions bytecode includes a mix of acir and brillig.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS: Field = 500;\n// Same for unconstrained functions: the size is per function.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS: Field = 500;\n// Since we are not yet emitting selectors we'll use this magic value to identify events emitted by the ClassRegisterer.\n// This is just a stopgap until we implement proper selectors.\n// sha224sum 'struct ContractClassRegistered {contract_class_id: ContractClassId, version: Field, artifact_hash: Field, private_functions_root: Field, packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS] }'\nglobal REGISTERER_CONTRACT_CLASS_REGISTERED_MAGIC_VALUE = 0x6999d1e02b08a447a463563453cb36919c9dd7150336fc7c4d2b52f8;\n// sha224sum 'struct ClassPrivateFunctionBroadcasted'\nglobal REGISTERER_PRIVATE_FUNCTION_BROADCASTED_MAGIC_VALUE = 0x1b70e95fde0b70adc30496b90a327af6a5e383e028e7a43211a07bcd;\n// sha224sum 'struct ClassUnconstrainedFunctionBroadcasted'\nglobal REGISTERER_UNCONSTRAINED_FUNCTION_BROADCASTED_MAGIC_VALUE = 0xe7af816635466f128568edb04c9fa024f6c87fb9010fdbffa68b3d99;\n\n// CONTRACT INSTANCE CONSTANTS\n// sha224sum 'struct ContractInstanceDeployed'\nglobal DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE = 0x85864497636cf755ae7bde03f267ce01a520981c21c3682aaf82a631;\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue below is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 25;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\n\n// LENGTH OF STRUCTS SERIALIZED TO FIELDS\nglobal AZTEC_ADDRESS_LENGTH = 1;\nglobal CALL_CONTEXT_LENGTH: Field = 8;\nglobal CONTENT_COMMITMENT_LENGTH: Field = 7;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 2;\nglobal ETH_ADDRESS_LENGTH = 1;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal FUNCTION_LEAF_PREIMAGE_LENGTH: Field = 5;\nglobal GLOBAL_VARIABLES_LENGTH: Field = 6;\nglobal HEADER_LENGTH: Field = 25; // 2 for last_archive, 7 for content commitment, 10 for state reference, 6 for global vars\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L2_TO_L1_MESSAGE_LENGTH: Field = 2;\nglobal NEW_CONTRACT_DATA_LENGTH: Field = 3;\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH = 4;\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH = 5;\nglobal PARTIAL_STATE_REFERENCE_LENGTH: Field = 8;\nglobal PRIVATE_CALL_STACK_ITEM_LENGTH: Field = 219;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we should change this\n// constant as well PRIVATE_CALL_STACK_ITEM_LENGTH\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 214;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 194;\nglobal STATE_REFERENCE_LENGTH: Field = 10; // 2 for snap + 8 for partial\nglobal TX_CONTEXT_DATA_LENGTH: Field = 11;\nglobal TX_REQUEST_LENGTH: Field = 17;\n\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal NOTE_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 32;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 52;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__NOTE_HASH = 1;\nglobal GENERATOR_INDEX__NOTE_HASH_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_NOTE_HASH = 3;\nglobal GENERATOR_INDEX__SILOED_NOTE_HASH = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\nglobal GENERATOR_INDEX__SIDE_EFFECT = 29;\nglobal GENERATOR_INDEX__FEE_PAYLOAD = 30;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/constants.nr"},"175":{"source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/utils/field.nr"},"177":{"source":"struct Reader<N> {\n    data: [Field; N],\n    offset: Field,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/utils/reader.nr"},"183":{"source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Hash, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    contract_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.contract_tree.eq(other.contract_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_contract_tree = self.contract_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0],\n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_contract_tree[0],\n            serialized_contract_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            contract_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[6], serialized[7]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            contract_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial: PartialStateReference = dep::std::unsafe::zeroed();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/partial_state_reference.nr"},"184":{"source":"use crate::{\n  constants::{NUM_FIELDS_PER_SHA256, CONTENT_COMMITMENT_LENGTH},\n  traits::{Deserialize, Empty, Hash, Serialize},\n  utils::{arr_copy_slice},\n};\n\nstruct ContentCommitment {\n  tx_tree_height: Field,\n  txs_hash: [Field; NUM_FIELDS_PER_SHA256],\n  in_hash: [Field; NUM_FIELDS_PER_SHA256],\n  out_hash: [Field; NUM_FIELDS_PER_SHA256],\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new(0);\n\n    fields.extend_from_array([self.tx_tree_height]);\n    fields.extend_from_array(self.txs_hash);\n    fields.extend_from_array(self.in_hash);\n    fields.extend_from_array(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let tx_tree_height = serialized[0];\n    let mut offset = 1;\n\n    let txs_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n    offset = offset + NUM_FIELDS_PER_SHA256;\n\n    let in_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n    offset = offset + NUM_FIELDS_PER_SHA256;\n\n    let out_hash = arr_copy_slice(serialized, [0; NUM_FIELDS_PER_SHA256], offset);\n\n    Self {\n      tx_tree_height,\n      txs_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      tx_tree_height: 0,\n      txs_hash: [0; NUM_FIELDS_PER_SHA256],\n      in_hash: [0; NUM_FIELDS_PER_SHA256],\n      out_hash: [0; NUM_FIELDS_PER_SHA256],\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.tx_tree_height == other.tx_tree_height)\n      & (self.txs_hash == other.txs_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/content_commitment.nr"},"185":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/utils.nr"},"186":{"source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS},\n    contract_class_id::ContractClassId, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let contract_address_salt = 3;\n    let contract_class_id = ContractClassId::from_field(4);\n    let initialization_hash = 5;\n    let portal_contract_address = EthAddress::from_field(6);\n\n    let address = AztecAddress::compute_from_public_key(\n        point,\n        contract_class_id,\n        contract_address_salt,\n        initialization_hash,\n        portal_contract_address\n    );\n\n    assert(address.to_field() == 0x2fd71a4f0742364f194dd16d0ae32d2f47845ddc7f5d328f37d4148b565c4123);\n}\n\n#[test]\nfn compute_address_from_partial_and_pubkey() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let partial_address = PartialAddress::from_field(3);\n\n    let address = AztecAddress::compute(PublicKeysHash::compute(point), partial_address);\n    assert(address.to_field() == 0x0447f893197175723deb223696e2e96dbba1e707ee8507766373558877e74197);\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/address/aztec_address.nr"},"191":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::function_leaf_preimage::FunctionLeafPreimage;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::abis::new_contract_data::NewContractData as ContractLeafPreimage;\nuse crate::abis::function_data::FunctionData;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n    ARGS_HASH_CHUNK_COUNT, ARGS_HASH_CHUNK_LENGTH, CONTRACT_TREE_HEIGHT, FUNCTION_TREE_HEIGHT,\n    NOTE_HASH_TREE_HEIGHT, NUM_FIELDS_PER_SHA256, GENERATOR_INDEX__SILOED_NOTE_HASH,\n    GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__VK, GENERATOR_INDEX__CONSTRUCTOR,\n    GENERATOR_INDEX__PARTIAL_ADDRESS, GENERATOR_INDEX__CONTRACT_ADDRESS,\n    GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__FUNCTION_ARGS\n};\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Checks that `value` is a member of a merkle tree with root `root` at position `index`\n// The witness being the `sibling_path`\npub fn assert_check_membership<N>(value: Field, index: Field, sibling_path: [Field; N], root: Field) {\n    let calculated_root = root_from_sibling_path(value, index, sibling_path);\n    assert(calculated_root == root, \"membership check failed\");\n}\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like \n// this because it means we never even need to consider cases where \n// the index is greater than p.\npub fn root_from_sibling_path<N>(leaf: Field, leaf_index: Field, sibling_path: [Field; N]) -> Field {\n    let mut node = leaf;\n    let indices = leaf_index.to_le_bits(N);\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\n// Calculate the function tree root from the sibling path and leaf preimage.\n//\n// TODO: The cpp code passes in components of the FunctionLeafPreimage and then \n// builds it up. We should build it up and then pass the leaf preimage as a parameter.\n// We can then choose to have a general method that takes in anything hashable\n// and deduplicate the logic in `contract_tree_root_from_siblings`\npub fn function_tree_root_from_siblings(\n    selector: FunctionSelector,\n    is_internal: bool,\n    is_private: bool,\n    vk_hash: Field,\n    acir_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = FunctionLeafPreimage { selector, is_internal, is_private, vk_hash, acir_hash };\n\n    let function_leaf = function_leaf_preimage.hash();\n\n    let function_tree_root = root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path);\n\n    function_tree_root\n}\n\n// Calculate the contract tree root from the sibling path and leaf preimage.\npub fn contract_tree_root_from_siblings(\n    contract_class_id: ContractClassId,\n    storage_contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    contract_leaf_index: Field,\n    contract_leaf_sibling_path: [Field; CONTRACT_TREE_HEIGHT]\n) -> Field {\n    //TODO(Kev): if we use shorthand syntax here, we get an error as expected,\n    // since variable name is `storage_contract_address` but the span is incorrect.\n    let contract_leaf_preimage = ContractLeafPreimage { contract_address: storage_contract_address, portal_contract_address, contract_class_id };\n\n    let contract_leaf = contract_leaf_preimage.hash();\n\n    let computed_contract_tree_root = root_from_sibling_path(contract_leaf, contract_leaf_index, contract_leaf_sibling_path);\n\n    computed_contract_tree_root\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn read_request_root_from_siblings(\n    read_request: Field,\n    leaf_index: Field,\n    sibling_path: [Field; NOTE_HASH_TREE_HEIGHT]\n) -> Field {\n    root_from_sibling_path(read_request, leaf_index, sibling_path)\n}\n\npub fn silo_note_hash(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\nfn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\n// TODO CPP uses blake2s for this\npub fn compute_new_contract_address_hash(new_contract_address: AztecAddress) -> Field {\n    dep::std::hash::pedersen_hash([new_contract_address.to_field()])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new(0);\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn compute_constructor_hash(\n    function_data: FunctionData,\n    args_hash: Field,\n    constructor_vk_hash: Field\n) -> Field {\n    let function_data_hash = function_data.hash();\n\n    pedersen_hash(\n        [\n        function_data_hash,\n        args_hash,\n        constructor_vk_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, commitment_index: Field) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_siloed_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn compute_unique_siloed_note_hashes<N>(\n    first_nullifier: Field,\n    siloed_note_hashes: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_note_hashes = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_note_hash = siloed_note_hashes[i];\n        if siloed_note_hash.value != 0 {\n            let nonce = compute_note_hash_nonce(first_nullifier, i);\n            unique_siloed_note_hashes[i] = SideEffect {\n                value: compute_unique_siloed_note_hash(nonce, siloed_note_hash.value),\n                counter: siloed_note_hash.counter\n                };\n        }\n    }\n    unique_siloed_note_hashes\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n    assert(result == 0x142a6d57007171f6eaa33d55976d9dbe739c889c8e920f115f7808dea184c718);\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = [0; 800];\n    for i in 0..800 {\n        input[i] = i as Field;\n    }\n    let hash = hash_args(input);\n    assert(hash == 0x371960dd84ed3445ab099ac4c1af5ba90e0c713b593e0ca52ee532087c7f097);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0x2266ac2f9f0c19c015239ef5ea85862fc6fac00db73779b220a4d49c4856c2e1);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x0f24729168d4450a5681beafa5e3a899ac28bd17bf5a4877dab37bcd834e1634);\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/hash.nr"},"195":{"source":"use crate::{address::EthAddress, constants::L2_TO_L1_MESSAGE_LENGTH, traits::{Deserialize, Empty, Serialize}};\n\n// Note: Not to be confused with L2ToL1Msg in Solidity\nstruct L2ToL1Message {\n    recipient: EthAddress,\n    content: Field,\n}\n\nimpl Empty for L2ToL1Message {\n    fn empty() -> Self {\n        Self {\n            recipient: EthAddress::empty(),\n            content: 0,\n        }\n    }\n}\n\nimpl Eq for L2ToL1Message {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient) & (self.content == other.content)\n    }\n}\n\nimpl Serialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn serialize(self) -> [Field; L2_TO_L1_MESSAGE_LENGTH] {\n        [self.recipient.to_field(), self.content]\n    }\n}\n\nimpl Deserialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn deserialize(values: [Field; L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        Self {\n            recipient: EthAddress::from_field(values[0]),\n            content: values[1],\n        }\n    }\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/messaging/l2_to_l1_message.nr"},"197":{"source":"use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::{arr_copy_slice}\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new(0);\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state: StateReference = dep::std::unsafe::zeroed();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/state_reference.nr"},"199":{"source":"use crate::{\n    constants::{CONTRACT_STORAGE_READ_LENGTH, GENERATOR_INDEX__PUBLIC_DATA_READ}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Empty, Serialize}\n};\n\nstruct StorageRead {\n    storage_slot: Field,\n    current_value: Field,\n}\n\nimpl Eq for StorageRead {\n    fn eq(self, other: Self) -> bool {\n        (self.storage_slot == other.storage_slot) & (self.current_value == other.current_value)\n    }\n}\n\nimpl Empty for StorageRead {   \n    fn empty() -> Self {\n        Self {\n            storage_slot: 0,\n            current_value: 0,\n        }\n    }\n}\n\nimpl Hash for StorageRead {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n}\n\nimpl Serialize<CONTRACT_STORAGE_READ_LENGTH> for StorageRead {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.current_value]\n    }\n}\n\nimpl Deserialize<CONTRACT_STORAGE_READ_LENGTH> for StorageRead {\n    fn deserialize(serialized: [Field; CONTRACT_STORAGE_READ_LENGTH]) -> Self {\n        Self {\n            storage_slot: serialized[0],\n            current_value: serialized[1],\n        }\n    }\n}\n\nimpl StorageRead {\n    pub fn is_empty(self) -> bool {\n        self.storage_slot == 0\n    }\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/contrakt/storage_read.nr"},"201":{"source":"use crate::{\n    address::EthAddress, contract_class_id::ContractClassId,\n    constants::{CONTRACT_DEPLOYMENT_DATA_LENGTH, GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA},\n    grumpkin_point::GrumpkinPoint, hash::pedersen_hash, traits::{Deserialize, Hash, Serialize}\n};\n\n// docs:start:contract-deployment-data\nstruct ContractDeploymentData {\n    public_key : GrumpkinPoint,\n    initialization_hash : Field,\n    contract_class_id : ContractClassId,\n    contract_address_salt : Field,\n    portal_contract_address : EthAddress,\n}\n// docs:end:contract-deployment-data\n\nimpl Eq for ContractDeploymentData {\n    fn eq(self, other: Self) -> bool {\n        self.public_key.eq(other.public_key) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.contract_address_salt.eq(other.contract_address_salt) &\n        self.portal_contract_address.eq(other.portal_contract_address)\n    }\n}\n\nimpl Hash for ContractDeploymentData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA)\n    }\n}\n\nimpl Serialize<CONTRACT_DEPLOYMENT_DATA_LENGTH> for ContractDeploymentData {\n    fn serialize(self) -> [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH] {\n        [\n            self.public_key.x,\n            self.public_key.y,\n            self.initialization_hash,\n            self.contract_class_id.to_field(),\n            self.contract_address_salt,\n            self.portal_contract_address.to_field(),\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_DEPLOYMENT_DATA_LENGTH> for ContractDeploymentData {\n    fn deserialize(serialized: [Field; CONTRACT_DEPLOYMENT_DATA_LENGTH]) -> Self {\n        Self {\n            public_key: GrumpkinPoint {\n                x: serialized[0],\n                y: serialized[1],\n            },\n            initialization_hash: serialized[2],\n            contract_class_id: ContractClassId::from_field(serialized[3]),\n            contract_address_salt: serialized[4],\n            portal_contract_address: EthAddress::from_field(serialized[5]),\n        }\n    }\n}\n\nimpl ContractDeploymentData {\n    fn assert_is_zero(self) {\n        self.public_key.assert_is_zero();\n        assert(self.initialization_hash == 0);\n        self.contract_class_id.assert_is_zero();\n        assert(self.contract_address_salt == 0);\n        self.portal_contract_address.assert_is_zero();\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: ContractDeploymentData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = ContractDeploymentData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: ContractDeploymentData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from contract_deployment_data.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x0e7babf59de8dfc7f5992cd34fb0066105d07ce67f68fc33d4a0a6a933a30405);\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/contrakt/contract_deployment_data.nr"},"287":{"source":"use dep::aztec::protocol_types::{utils::field::field_from_bytes, traits::{Serialize, Deserialize}};\n\n// A Fixedsize Compressed String.\n// Essentially a special version of Compressed String for practical use.\nstruct FieldCompressedString{\n  value: Field\n}\n\nimpl Serialize<1> for FieldCompressedString {\n  fn serialize(self) -> [Field; 1] {\n    [self.value]\n  }\n}\n\nimpl Deserialize<1> for FieldCompressedString {\n  fn deserialize(input: [Field; 1]) -> Self {\n    Self { value: input[0] }\n  }\n}\n\nimpl FieldCompressedString {\n    pub fn is_eq(self, other: FieldCompressedString) -> bool {\n        self.value == other.value\n    }\n\n    pub fn from_field(input_field: Field) -> Self {\n        Self { value: input_field }\n    }\n\n    pub fn from_string(input_string: str<31>) -> Self {\n        Self { value: field_from_bytes(input_string.as_bytes(), true) }\n    }\n\n    pub fn to_bytes(self) -> [u8; 31] {\n        let mut result = [0; 31];\n        let bytes = self.value.to_be_bytes(31);\n        for i in 0..31 {\n            result[i] = bytes[i];\n        }\n        result\n    }\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/compressed-string/src/field_compressed_string.nr"},"300":{"source":"contract Reader {\n    use dep::aztec::protocol_types::{address::AztecAddress, abis::function_selector::FunctionSelector};\n\n    use dep::compressed_string::FieldCompressedString;\n\n    #[aztec(private)]\n    fn constructor() {}\n\n    #[aztec(public)]\n    fn check_name_public(who: AztecAddress, what: str<31>) {\n        let selector = FunctionSelector::from_signature(\"public_get_name()\");\n        let ret = context.call_public_function_no_args(who, selector);\n        let name = FieldCompressedString::from_field(ret[0]);\n        let _what = FieldCompressedString::from_string(what);\n        assert(name.is_eq(_what));\n    }\n\n    #[aztec(private)]\n    fn check_name_private(who: AztecAddress, what: str<31>) {\n        let selector = FunctionSelector::from_signature(\"private_get_name()\");\n        let ret = context.call_private_function_no_args(who, selector);\n        let name = FieldCompressedString::from_field(ret[0]);\n        let _what = FieldCompressedString::from_string(what);\n        assert(name.is_eq(_what));\n    }\n\n    unconstrained fn get_name(who: AztecAddress) -> pub str<6> {\n        // We cannot yet call an unconstrained function from another\n        \"Reader\"\n    }\n\n    #[aztec(public)]\n    fn check_symbol_public(who: AztecAddress, what: str<31>) {\n        let selector = FunctionSelector::from_signature(\"public_get_symbol()\");\n        let ret = context.call_public_function_no_args(who, selector);\n        let symbol = FieldCompressedString::from_field(ret[0]);\n        let _what = FieldCompressedString::from_string(what);\n        assert(symbol.is_eq(_what));\n    }\n\n    #[aztec(private)]\n    fn check_symbol_private(who: AztecAddress, what: str<31>) {\n        let selector = FunctionSelector::from_signature(\"private_get_symbol()\");\n        let ret = context.call_private_function_no_args(who, selector);\n        let symbol = FieldCompressedString::from_field(ret[0]);\n        let _what = FieldCompressedString::from_string(what);\n        assert(symbol.is_eq(_what));\n    }\n\n    unconstrained fn get_symbol(who: AztecAddress) -> pub str<3> {\n        // We cannot yet call an unconstrained function from another\n        \"RDR\"\n    }\n\n    #[aztec(public)]\n    fn check_decimals_public(who: AztecAddress, what: u8) {\n        let selector = FunctionSelector::from_signature(\"public_get_decimals()\");\n        let ret = context.call_public_function_no_args(who, selector);\n        assert(ret[0] as u8 == what);\n    }\n\n    #[aztec(private)]\n    fn check_decimals_private(who: AztecAddress, what: u8) {\n        let selector = FunctionSelector::from_signature(\"private_get_decimals()\");\n        let ret = context.call_private_function_no_args(who, selector);\n        assert(ret[0] as u8 == what);\n    }\n\n    unconstrained fn get_decimals(who: AztecAddress) -> pub u8 {\n        // We cannot yet call an unconstrained function from another\n        18\n    }\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-contracts/contracts/reader_contract/src/main.nr"}}}