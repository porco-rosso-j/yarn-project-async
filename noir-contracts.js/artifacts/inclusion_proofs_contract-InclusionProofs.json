{"transpiled":true,"noir_version":"0.31.0+6237d96a0bc23a5ed656e7ba172fb57facd9c807","name":"InclusionProofs","functions":[{"name":"test_note_validity","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"use_block_number","type":{"kind":"boolean"},"visibility":"private"},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"nullified","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"constructor","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(initializer)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"public_value","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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"},{"name":"nullify_note","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"push_nullifier_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"nullifier","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"H4sIAAAAAAAC/62U2UoEMRBFq2e3nd6XGWcBl+4nfdVHP8F/EBQRRBHmyU/0q8ytpLzqgCAYSFJzc0+qMlDdyVBk5qbIVsKAIqlM3BZhXotFLhi4GaUSmdTjENSgDzYZagTj6NQt8aVYigzLWNfJucaI3Jx2EgGdjHGzTIM87lCMYnFv5c20Qh0xFu8BdtDxxF144/ZDb54F87wfeFHmxObeE/tQ0RfKhiaKwpAQTYgmAd1RNjRVFIaUaEo0DegxZUMzRWHIiGZEs4A+UjY0VxSGnGhONA/oM2VDC0VhKIgWRAu/7yPZ35Hk37O4N91SNrRUFIaSaEm0DOgTZUMrRWGoiFZEq/1Cq89Cf0FctjfKhtaKwlATrYnWAb2nbGijKAwN0YZoE9A7yoa2isLQEm2JtthP0Fo7NmauoLAbrf3glt5a1N04Eo6Fplp8T7X0cOtDO8EfuKRpxQZfTzRcB/8mfEC2kRrxLdtgasWv/pc9F8y2N9sRE/uDgRdxaBlW2NGdD1/K+lHwVWR9dYGcozM8f/mO+QEk7VcdZQUAAA==","debug_symbols":"vdrdattAEIbhe9GxKTu787PjWymhOIlTDEYOsVMoJvdeuZHdQExzEN4cmZU+fxoJnrM5Dvfr2+efPzbjw24/LL8fh+3ubnXY7MbpdBzKNyl/r+4fV+Ppwv6wejoMy7IY1uP99PuyGB422/WwbF5fFu9yaTYnM+KSlXotqxLnsErXSzrtSthrizns1drb8M3iNLZ8Zmwprc5RKaZfOnj91PdO+Te3fTC3iOg5LVH+P3fo5SXDpL+fu0Fzv7Yr2m5ou6PtgbZ3tD3J9lrQdkHbK9qOWq2o1YparajVilqtqNWKWm2o1YZabajVhlptqNWGWm2o1YZabajVhlpV1KqiVhW1qqhVRa0qalVRq4paVdSqolYNtWqoVUOtGmrVUKuGWjXUqqFWDbVqqFVHrTpq1VGrjlp11KqjVh216qhVR606ajVQq4FaDdRqoFYDtRqo1UCtBmo1UKuBWu2o1Y5a7ajVjlrtqNWOWu2o1Y5a7ajVjlpN1GqiVhO1mqjVRK0majVRq4laTdRqolalFLZe2PrK1rP7EEXZenYjorArEYXdiSjsUkRh1QqrVli1wqqFt5jgNSZ4j+n6IpP31ub/eff84CFaes5pnT7HJX1958zivCsXXvJt+GY6/Fo9bVa32/VpU/F073m8Oy8uTsfD78fXO1P2Dw=="},{"name":"test_nullifier_inclusion_from_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"nullifier","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"H4sIAAAAAAAC/62U2UoDQRBFa7JMYszsS2IWcJl58lkf/QT/QVBEEEXIi36iX2Xf6i6vGhAEG7q75vY90zUDVZ0MRaZuimwlDCiSSuy2CPNKLHLBwM0olcikHoegBn2wyVAjGEenbpldiF2RYRnrGp9rjMjNSScR0PEYb5aJHXVIRrFZb+lNNUMdMyzeA+yg44l74bXbD715GszzfuBFmRObe8/Mh4o+UzY0URSGhGhCNAnojrKhqaIwpERTomlAjykbmikKQ0Y0I5oF9IGyobmiMOREc6J5QJ8oG1ooCkNBtCBa+H0fyf6OJP9+i/umG8qGlorCUBItiZYBfaRsaKUoDBXRimi1n2j1megviLvtjbKhtaIw1ERronVA7ygb2igKQ0O0IdoE9Jayoa2iMLREW6It9hOU1o6FmSsorEYrP7iltxJ1bxwJx0KvWny/aunh1od2gh+4pGnFAl/HGq6DfxMayDZSI3rZBlMzfvFP9rlgtr3ZjnixPxh4EYd2wwo7qvP+S1o/Er6MrK60v020v41CM4t9X4tDX5toWq+IFNNxhv+1fMf8AMJfP9OWBQAA","debug_symbols":"vdrtSgJBFMbxe9nPEnNmzpkz461ExFYWgqyRFoR0763lG7gopP8+yeyeeTwKv2/PqnmaPLy/3E+75/miGd+umtn8sV1O511/WjXhRsLP08Vr260fLJbt27IZh1Ez6Z76z69R8zydTZpxyvFrdDRXzTaT1X03K3FoVsW3wypFd9PVBoZzTL4ZztHS4fDdaL22XLK2hBQ3oxJM/3XxeNH/XWW/t53ZW0R0Oy0eTu/tuvuRblKO907Q3r/piqYbmp7RdEfTC5peyfQY0HRB0yOajlqNqNWIWo2o1YhajajViFpNqNWEWk2o1YRaTajVhFpNqNWEWk2o1YRaVdSqolYVtaqoVUWtKmpVUauKWlXUqqJWDbVqqFVDrRpq1VCrhlo11KqhVg21aqjVjFrNqNWMWs2o1YxazajVjFrNqNWMWs2oVUetOmrVUauOWnXUqqNWHbXqqFVHrTpqtaBWC2q1oFYLarWgVgtqtaBWC2q1oFYLarWiVitqtaJWK2q1olYrarWiVitqtaJWK2pVQmDjhY2PbDzbhwjKxrONiMBWIgLbiQhsKSKwaoVVK6xaYdXCLSa4xgT3mIaLTB7ytivn4aD9NvwlVy75+fBGMe83sjMbXbcFN1yYOrXR5l79273hktPJe/3po32btg+zybrjuX753j1uK5/9cfn5+vumn/0G"},{"name":"test_storage_historical_read","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"expected","type":{"kind":"field"},"visibility":"private"},{"name":"use_block_number","type":{"kind":"boolean"},"visibility":"private"},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"test_contract_inclusion","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"test_deployment","type":{"kind":"boolean"},"visibility":"private"},{"name":"test_initialization","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"test_nullifier_inclusion","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"nullifier","type":{"kind":"field"},"visibility":"private"},{"name":"use_block_number","type":{"kind":"boolean"},"visibility":"private"},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"test_storage_historical_read_unset_slot","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"test_note_inclusion_fail_case","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"use_block_number","type":{"kind":"boolean"},"visibility":"private"},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"create_note","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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"},{"name":"test_note_not_nullified","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"use_block_number","type":{"kind":"boolean"},"visibility":"private"},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"fail_case","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"test_note_inclusion","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"use_block_number","type":{"kind":"boolean"},"visibility":"private"},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"nullified","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"test_contract_non_inclusion","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"test_deployment","type":{"kind":"boolean"},"visibility":"private"},{"name":"test_initialization","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000071421477"},{"kind":"string","value":"ValueNote"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"private_values","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"public_value","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"public_unused_value","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"test_deployment","type":{"kind":"boolean"}},{"name":"test_initialization","type":{"kind":"boolean"}}],"kind":"struct","path":"InclusionProofs::test_contract_non_inclusion_parameters"}}],"kind":"struct","path":"InclusionProofs::test_contract_non_inclusion_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"InclusionProofs::create_note_parameters"}}],"kind":"struct","path":"InclusionProofs::create_note_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"nullifier","type":{"kind":"field"}}],"kind":"struct","path":"InclusionProofs::push_nullifier_public_parameters"}}],"kind":"struct","path":"InclusionProofs::push_nullifier_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"use_block_number","type":{"kind":"boolean"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"nullified","type":{"kind":"boolean"}}],"kind":"struct","path":"InclusionProofs::test_note_inclusion_parameters"}}],"kind":"struct","path":"InclusionProofs::test_note_inclusion_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"InclusionProofs::nullify_note_parameters"}}],"kind":"struct","path":"InclusionProofs::nullify_note_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"use_block_number","type":{"kind":"boolean"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"fail_case","type":{"kind":"boolean"}}],"kind":"struct","path":"InclusionProofs::test_note_not_nullified_parameters"}}],"kind":"struct","path":"InclusionProofs::test_note_not_nullified_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"nullifier","type":{"kind":"field"}},{"name":"use_block_number","type":{"kind":"boolean"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"InclusionProofs::test_nullifier_inclusion_parameters"}}],"kind":"struct","path":"InclusionProofs::test_nullifier_inclusion_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"nullifier","type":{"kind":"field"}}],"kind":"struct","path":"InclusionProofs::test_nullifier_inclusion_from_public_parameters"}}],"kind":"struct","path":"InclusionProofs::test_nullifier_inclusion_from_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"InclusionProofs::test_storage_historical_read_unset_slot_parameters"}}],"kind":"struct","path":"InclusionProofs::test_storage_historical_read_unset_slot_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"public_value","type":{"kind":"field"}}],"kind":"struct","path":"InclusionProofs::constructor_parameters"}}],"kind":"struct","path":"InclusionProofs::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"use_block_number","type":{"kind":"boolean"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"nullified","type":{"kind":"boolean"}}],"kind":"struct","path":"InclusionProofs::test_note_validity_parameters"}}],"kind":"struct","path":"InclusionProofs::test_note_validity_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"use_block_number","type":{"kind":"boolean"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"InclusionProofs::test_note_inclusion_fail_case_parameters"}}],"kind":"struct","path":"InclusionProofs::test_note_inclusion_fail_case_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"test_deployment","type":{"kind":"boolean"}},{"name":"test_initialization","type":{"kind":"boolean"}}],"kind":"struct","path":"InclusionProofs::test_contract_inclusion_parameters"}}],"kind":"struct","path":"InclusionProofs::test_contract_inclusion_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"expected","type":{"kind":"field"}},{"name":"use_block_number","type":{"kind":"boolean"}},{"name":"block_number","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"InclusionProofs::test_storage_historical_read_parameters"}}],"kind":"struct","path":"InclusionProofs::test_storage_historical_read_abi"}]}},"file_map":{"102":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::{Point, pub_key_to_bytes},\n    constants::{GENERATOR_INDEX__IVSK_M, GENERATOR_INDEX__OVSK_M}, hash::poseidon2_hash\n};\n\nuse std::field::bytes32_to_field;\n\nuse crate::oracle::unsafe_rand::unsafe_rand;\n\nuse crate::event::event_interface::EventInterface;\nuse crate::note::note_interface::NoteInterface;\n\nuse crate::encrypted_logs::{\n    header::EncryptedLogHeader, incoming_body::EncryptedLogIncomingBody,\n    outgoing_body::EncryptedLogOutgoingBody\n};\n\npub fn compute_encrypted_event_log<Event, NB, MB, OB>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    ovsk_app: Field,\n    ovpk: Point,\n    ivpk: Point,\n    event: Event\n) -> [u8; OB] where Event: EventInterface<NB, MB> {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    let eph_sk: Scalar = fr_to_fq(unsafe_rand());\n    let eph_pk = eph_sk.derive_public_key();\n\n    // TODO: (#7177) This value needs to be populated!\n    let recipient = AztecAddress::from_field(0);\n\n    let ivpk_app = compute_ivpk_app(ivpk, contract_address);\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_Header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_event(event, randomness).compute_ciphertext(eph_sk, ivpk_app);\n    let outgoing_body_ciphertext: [u8; 176] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk_app).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; OB] = [0; OB];\n    // @todo We ignore the tags for now \n\n    let eph_pk_bytes = pub_key_to_bytes(eph_pk);\n    for i in 0..64 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[128 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[176 + i] = outgoing_Header_ciphertext[i];\n    }\n    for i in 0..176 {\n        encrypted_bytes[224 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = OB - 400;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[400 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (64 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (176 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\npub fn compute_encrypted_note_log<Note, N, NB, M>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: Point,\n    ivpk: Point,\n    note: Note\n) -> [u8; M] where Note: NoteInterface<N, NB> {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    let eph_sk: Scalar = fr_to_fq(unsafe_rand());\n    let eph_pk = eph_sk.derive_public_key();\n\n    // TODO: (#7177) This value needs to be populated!\n    let recipient = AztecAddress::from_field(0);\n\n    let ivpk_app = compute_ivpk_app(ivpk, contract_address);\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_Header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_note(note, storage_slot).compute_ciphertext(eph_sk, ivpk_app);\n    let outgoing_body_ciphertext: [u8; 176] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk_app).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now \n\n    let eph_pk_bytes = pub_key_to_bytes(eph_pk);\n    for i in 0..64 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[128 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[176 + i] = outgoing_Header_ciphertext[i];\n    }\n    for i in 0..176 {\n        encrypted_bytes[224 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 400;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[400 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (64 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (176 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field elememt to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let r_bytes = r.to_be_bytes(32);\n\n    let mut high_bytes = [0; 32];\n    let mut low_bytes = [0; 32];\n\n    for i in 0..16 {\n        high_bytes[16 + i] = r_bytes[i];\n        low_bytes[16 + i] = r_bytes[i + 16];\n    }\n\n    let low = bytes32_to_field(low_bytes);\n    let high = bytes32_to_field(high_bytes);\n\n    Scalar::new(low, high)\n}\n\nfn compute_ivpk_app(ivpk: Point, contract_address: AztecAddress) -> Point {\n    // It is useless to compute this, it brings no value to derive fully.\n    // Issue(#6955)\n    ivpk\n    /*\n    // @todo Just setting infinite to false, but it should be checked.\n    // for example user could define ivpk = infinity using the registry\n    assert((ivpk.x != 0) & (ivpk.y != 0), \"ivpk is infinite\");\n\n    let i = fr_to_fq(poseidon2_hash([contract_address.to_field(), ivpk.x, ivpk.y, GENERATOR_INDEX__IVSK_M]));\n    let I = i.derive_public_key();\n\n    let embed_I = Point { x: I.x, y: I.y, is_infinite: false };\n    let embed_ivpk = Point { x: ivpk.x, y: ivpk.y, is_infinite: false };\n\n    let embed_result = embedded_curve_add(embed_I, embed_ivpk);\n\n    Point::new(embed_result.x, embed_result.y)*/\n}\n"},"103":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    encrypted_logs::payload::compute_encrypted_note_log, oracle::logs_traits::LensForEncryptedLog\n};\nuse dep::protocol_types::{\n    hash::sha256_to_field, address::AztecAddress, point::Point, abis::note_hash::NoteHash,\n    constants::MAX_NOTE_HASHES_PER_CALL, utils::arrays::find_index\n};\n\nunconstrained fn compute_unconstrained<Note, N, NB, M>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: Point,\n    ivpk: Point,\n    note: Note\n) -> ([u8; M], Field) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    compute(contract_address, storage_slot, ovsk_app, ovpk, ivpk, note)\n}\n\nfn compute<Note, N, NB, M>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: Point,\n    ivpk: Point,\n    note: Note\n) -> ([u8; M], Field) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    let encrypted_log: [u8; M] = compute_encrypted_note_log(contract_address, storage_slot, ovsk_app, ovpk, ivpk, note);\n    let log_hash = sha256_to_field(encrypted_log);\n    (encrypted_log, log_hash)\n}\n\nfn emit_with_keys<Note, N, NB, M>(\n    context: &mut PrivateContext,\n    note: Note,\n    ovpk: Point,\n    ivpk: Point,\n    inner_compute: fn(AztecAddress, Field, Field, Point, Point, Note) -> ([u8; M], Field)\n) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    let note_exists_index = find_index(\n        context.note_hashes.storage,\n        |n: NoteHash| n.counter == note_hash_counter\n    );\n    assert(\n        note_exists_index as u32 != MAX_NOTE_HASHES_PER_CALL, \"Can only emit a note log for an existing note.\"\n    );\n\n    let contract_address: AztecAddress = context.this_address();\n    let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n    let (encrypted_log, log_hash) = inner_compute(contract_address, storage_slot, ovsk_app, ovpk, ivpk, note);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n\npub fn encode_and_encrypt_note<Note, N, NB, M>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let header = context.get_header();\n        let ovpk = header.get_ovpk_m(context, ov);\n        let ivpk = header.get_ivpk_m(context, iv);\n        emit_with_keys(context, e.note, ovpk, ivpk, compute);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, N, NB, M>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let header = context.get_header();\n        let ovpk = header.get_ovpk_m(context, ov);\n        let ivpk = header.get_ivpk_m(context, iv);\n        emit_with_keys(context, e.note, ovpk, ivpk, compute_unconstrained);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys<Note, N, NB, M>(\n    context: &mut PrivateContext,\n    ovpk: Point,\n    ivpk: Point\n) -> fn[(&mut PrivateContext, Point, Point)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        emit_with_keys(context, e.note, ovpk, ivpk, compute);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys_unconstrained<Note, N, NB, M>(\n    context: &mut PrivateContext,\n    ovpk: Point,\n    ivpk: Point\n) -> fn[(&mut PrivateContext, Point, Point)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        emit_with_keys(context, e.note, ovpk, ivpk, compute_unconstrained);\n    }\n}\n"},"104":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/outgoing_body.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash\n};\n\nuse std::aes128::aes128_encrypt;\n\nuse crate::keys::point_to_symmetric_key::point_to_symmetric_key;\n\nstruct EncryptedLogOutgoingBody {\n    eph_sk: Scalar,\n    recipient: AztecAddress,\n    recipient_ivpk_app: Point,\n}\n\nimpl EncryptedLogOutgoingBody {\n    pub fn new(eph_sk: Scalar, recipient: AztecAddress, recipient_ivpk_app: Point) -> Self {\n        Self { eph_sk, recipient, recipient_ivpk_app }\n    }\n\n    pub fn compute_ciphertext(self, ovsk_app: Scalar, eph_pk: Point) -> [u8; 176] {\n        // Again, we could compute `eph_pk` here, but we keep the interface more similar\n        // and also make it easier to optimise it later as we just pass it along\n\n        let mut buffer: [u8; 160] = [0; 160];\n\n        let serialized_eph_sk_high = self.eph_sk.hi.to_be_bytes(32);\n        let serialized_eph_sk_low = self.eph_sk.lo.to_be_bytes(32);\n\n        let address_bytes = self.recipient.to_field().to_be_bytes(32);\n        let serialized_recipient_ivpk_app = self.recipient_ivpk_app.serialize();\n        let serialized_recipient_ivpk_app_x = serialized_recipient_ivpk_app[0].to_be_bytes(32);\n        let serialized_recipient_ivpk_app_y = serialized_recipient_ivpk_app[1].to_be_bytes(32);\n\n        for i in 0..32 {\n            buffer[i] = serialized_eph_sk_high[i];\n            buffer[i + 32] = serialized_eph_sk_low[i];\n            buffer[i + 64] = address_bytes[i];\n            buffer[i + 96] = serialized_recipient_ivpk_app_x[i];\n            buffer[i + 128] = serialized_recipient_ivpk_app_y[i];\n        }\n\n        // We compute the symmetric key using poseidon.\n        let full_key: [u8; 32] = poseidon2_hash(\n            [\n            ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y,\n            GENERATOR_INDEX__SYMMETRIC_KEY as Field\n        ]\n        ).to_be_bytes(32).as_array();\n\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(buffer, iv, sym_key).as_array()\n    }\n}\n\nmod test {\n    use crate::encrypted_logs::outgoing_body::EncryptedLogOutgoingBody;\n    use dep::protocol_types::{\n        address::AztecAddress, traits::Empty, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        scalar::Scalar, point::Point, hash::poseidon2_hash\n    };\n\n    use crate::context::PrivateContext;\n\n    #[test]\n    fn test_encrypted_log_outgoing_body() {\n        let eph_sk = Scalar::new(\n            0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        );\n        let recipient_ivsk_app = Scalar::new(\n            0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        );\n        let sender_ovsk_app = Scalar::new(\n            0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        );\n\n        let eph_pk = eph_sk.derive_public_key();\n        let recipient_ivpk_app = recipient_ivsk_app.derive_public_key();\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let body = EncryptedLogOutgoingBody::new(eph_sk, recipient, recipient_ivpk_app);\n\n        let ciphertext = body.compute_ciphertext(sender_ovsk_app, eph_pk);\n\n        let expected_outgoing_body_ciphertext = [\n            127, 84, 96, 176, 101, 107, 236, 57, 68, 8, 53, 202, 138, 74, 186, 54, 74, 193, 245, 7, 109, 59, 218, 33, 1, 31, 205, 225, 241, 209, 64, 222, 94, 245, 4, 150, 47, 241, 187, 64, 152, 20, 102, 158, 200, 217, 213, 82, 1, 240, 170, 185, 51, 80, 27, 109, 63, 231, 235, 120, 174, 44, 133, 248, 10, 97, 60, 40, 222, 190, 147, 76, 187, 48, 91, 206, 48, 106, 56, 118, 38, 127, 82, 4, 182, 188, 44, 224, 31, 129, 47, 107, 134, 252, 20, 25, 122, 191, 158, 69, 35, 255, 215, 171, 196, 45, 91, 184, 83, 80, 238, 201, 1, 233, 235, 159, 171, 130, 158, 64, 176, 165, 132, 30, 84, 81, 71, 195, 145, 47, 82, 247, 210, 192, 23, 4, 220, 90, 56, 109, 46, 105, 79, 251, 165, 141, 185, 233, 191, 118, 219, 153, 191, 162, 99, 238, 241, 249, 9, 74, 210, 241, 54, 28, 126, 226, 85, 235, 174, 75, 239, 207, 100, 184, 248, 194\n        ];\n\n        for i in 0..expected_outgoing_body_ciphertext.len() {\n            assert_eq(ciphertext[i], expected_outgoing_body_ciphertext[i]);\n        }\n        assert_eq(expected_outgoing_body_ciphertext.len(), ciphertext.len());\n    }\n}\n"},"105":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::point_to_symmetric_key::point_to_symmetric_key;\n\nuse std::aes128::aes128_encrypt;\n\nstruct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext(self, secret: Scalar, point: Point) -> [u8; 48] {\n        let full_key = point_to_symmetric_key(secret, point);\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes(32).as_array();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nfn test_encrypted_log_header() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar::new(\n        0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    );\n    let point = Point::new(\n        0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        false\n    );\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    let expected_header_ciphertext = [\n        228, 9, 65, 81, 62, 59, 249, 207, 90, 196, 206, 72, 39, 199, 82, 196, 23, 131, 32, 226, 26, 176, 43, 39, 239, 177, 177, 192, 85, 216, 17, 15, 18, 187, 35, 225, 135, 192, 63, 88, 29, 173, 232, 46, 72, 82, 187, 139\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext);\n}\n"},"106":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/incoming_body.nr","source":"use crate::note::note_interface::NoteInterface;\nuse crate::event::event_interface::EventInterface;\nuse dep::protocol_types::{scalar::Scalar, point::Point};\n\nuse std::aes128::aes128_encrypt;\nuse crate::keys::point_to_symmetric_key::point_to_symmetric_key;\n\nstruct EncryptedLogIncomingBody<M> {\n    plaintext: [u8; M]\n}\n\nimpl<M> EncryptedLogIncomingBody<M> {\n    pub fn from_note<T, N>(note: T, storage_slot: Field) -> Self where T: NoteInterface<N, M> {\n        let mut plaintext = note.to_be_bytes(storage_slot);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn from_event<T, MR>(event: T, randomness: Field) -> Self where T: EventInterface<M, MR> {\n        let mut plaintext = event.private_to_be_bytes(randomness);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn compute_ciphertext(self, eph_sk: Scalar, ivpk_app: Point) -> [u8] {\n        let full_key = point_to_symmetric_key(eph_sk, ivpk_app);\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(self.plaintext, iv, sym_key)\n    }\n}\n\nmod test {\n    use crate::encrypted_logs::incoming_body::EncryptedLogIncomingBody;\n    use dep::protocol_types::{\n        address::AztecAddress, traits::Empty, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        scalar::Scalar, point::Point, traits::Serialize, abis::event_selector::EventSelector\n    };\n\n    use crate::{\n        note::{note_header::NoteHeader, note_interface::NoteInterface},\n        event::event_interface::EventInterface, oracle::unsafe_rand::unsafe_rand,\n        context::PrivateContext\n    };\n\n    struct AddressNote {\n        address: AztecAddress,\n        owner: AztecAddress,\n        randomness: Field,\n        header: NoteHeader,\n    }\n\n    global ADDRESS_NOTE_LEN: Field = 3;\n    global ADDRESS_NOTE_BYTES_LEN = 32 * 3 + 64;\n\n    impl NoteInterface<ADDRESS_NOTE_LEN, ADDRESS_NOTE_BYTES_LEN> for AddressNote {\n        fn compute_note_content_hash(self) -> Field {1}\n\n        fn get_note_type_id() -> Field {\n            1\n        }\n\n        fn get_header(self) -> NoteHeader { self.header}\n\n        fn set_header(&mut self, header: NoteHeader) {self.header = header; }\n\n        fn compute_note_hash_and_nullifier(self, context: &mut PrivateContext) -> (Field, Field) {\n            (1, 1)\n        }\n\n        fn compute_note_hash_and_nullifier_without_context(self) -> (Field, Field) {(1,1)}\n\n        fn serialize_content(self) -> [Field; ADDRESS_NOTE_LEN] { [self.address.to_field(), self.owner.to_field(), self.randomness]}\n\n        fn deserialize_content(fields: [Field; ADDRESS_NOTE_LEN]) -> Self {\n            AddressNote { address: AztecAddress::from_field(fields[0]), owner: AztecAddress::from_field(fields[1]), randomness: fields[2], header: NoteHeader::empty() }\n        }\n\n        fn to_be_bytes(self, storage_slot: Field) -> [u8; ADDRESS_NOTE_BYTES_LEN] {\n            let serialized_note = self.serialize_content();\n\n            let mut buffer: [u8; ADDRESS_NOTE_BYTES_LEN] = [0; ADDRESS_NOTE_BYTES_LEN];\n\n            let storage_slot_bytes = storage_slot.to_be_bytes(32);\n            let note_type_id_bytes = AddressNote::get_note_type_id().to_be_bytes(32);\n\n            for i in 0..32 {\n                buffer[i] = storage_slot_bytes[i];\n                buffer[32 + i] = note_type_id_bytes[i];\n            }\n\n            for i in 0..serialized_note.len() {\n                let bytes = serialized_note[i].to_be_bytes(32);\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n            buffer\n        }\n    }\n\n    impl AddressNote {\n        pub fn new(address: AztecAddress, owner: AztecAddress, randomness: Field) -> Self {\n            AddressNote { address, owner, randomness, header: NoteHeader::empty() }\n        }\n    }\n\n    #[test]\n    fn test_encrypted_note_log_incoming_body() {\n        let note = AddressNote::new(\n            AztecAddress::from_field(0x1),\n            AztecAddress::from_field(0x2),\n            3\n        );\n\n        let storage_slot = 2;\n\n        let eph_sk = Scalar::new(\n            0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        );\n        let ivpk_app = Point::new(\n            0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            false\n        );\n\n        let body = EncryptedLogIncomingBody::from_note(note, storage_slot);\n\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk_app);\n\n        let expected_note_body_ciphertext = [\n            228, 9, 65, 81, 62, 59, 249, 207, 90, 196, 206, 72, 39, 199, 82, 196, 63, 127, 188, 251, 150, 188, 238, 205, 3, 86, 102, 164, 175, 12, 137, 158, 163, 111, 205, 10, 229, 230, 46, 202, 110, 107, 156, 180, 67, 192, 161, 201, 48, 153, 169, 1, 25, 182, 93, 39, 39, 207, 251, 218, 234, 147, 156, 13, 110, 180, 190, 199, 41, 6, 211, 203, 176, 110, 165, 186, 110, 127, 199, 22, 201, 149, 92, 249, 219, 68, 145, 68, 179, 29, 233, 34, 98, 123, 197, 234, 169, 53, 44, 14, 81, 60, 92, 27, 250, 134, 49, 248, 57, 119, 236, 118, 158, 104, 82, 243, 98, 164, 60, 72, 74, 27, 177, 194, 221, 225, 193, 150, 67, 235, 205, 106, 150, 24, 126, 186, 220, 178, 199, 189, 113, 54, 181, 55, 46, 15, 236, 236, 9, 159, 5, 172, 237, 154, 110, 50, 241, 64, 92, 13, 37, 53, 20, 140, 42, 146, 229, 63, 97, 25, 159, 63, 235, 104, 68, 100\n        ];\n\n        assert_eq(expected_note_body_ciphertext.len(), ciphertext.len());\n\n        for i in 0..expected_note_body_ciphertext.len() {\n            assert_eq(ciphertext[i], expected_note_body_ciphertext[i]);\n        }\n    }\n\n    struct TestEvent {\n        value0: Field,\n        value1: Field,\n        value2: Field,\n    }\n\n    impl Serialize<3> for TestEvent {\n        fn serialize(self) -> [Field; 3] {\n            [self.value0, self.value1, self.value2]\n        }\n    }\n\n    global TEST_EVENT_LEN: Field = 3;\n    global TEST_EVENT_BYTES_LEN = 32 * 3 + 64;\n    global TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS = 32 * 3 + 32;\n\n    impl EventInterface<TEST_EVENT_BYTES_LEN, TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS> for TestEvent {\n        fn get_event_type_id() -> EventSelector {\n            EventSelector::from_signature(\"TestEvent(Field,Field,Field)\")\n        }\n\n        fn private_to_be_bytes(self, randomness: Field) -> [u8; TEST_EVENT_BYTES_LEN] {\n            let mut buffer: [u8; TEST_EVENT_BYTES_LEN] = [0; TEST_EVENT_BYTES_LEN];\n\n            let randomness_bytes = randomness.to_be_bytes(32);\n            let event_type_id_bytes = TestEvent::get_event_type_id().to_field().to_be_bytes(32);\n\n            for i in 0..32 {\n                buffer[i] = randomness_bytes[i];\n                buffer[32 + i] = event_type_id_bytes[i];\n            }\n\n            let serialized_event = self.serialize();\n\n            for i in 0..serialized_event.len() {\n                let bytes = serialized_event[i].to_be_bytes(32);\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n\n            buffer\n        }\n\n        fn to_be_bytes(self) -> [u8; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS] {\n             let mut buffer: [u8; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS] = [0; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS];\n\n             let event_type_id_bytes = TestEvent::get_event_type_id().to_field().to_be_bytes(32);\n\n             for i in 0..32 {\n                 buffer[i] = event_type_id_bytes[i];\n            }\n\n             let serialized_event = self.serialize();\n\n             for i in 0..serialized_event.len() {\n                 let bytes = serialized_event[i].to_be_bytes(32);\n                 for j in 0..32 {\n                     buffer[32 + i * 32 + j] = bytes[j];\n                }\n            }\n\n             buffer\n        }\n\n        fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n            _emit(self);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_event_incoming_body() {\n        let test_event = TestEvent { value0: 1, value1: 2, value2: 3 };\n\n        let eph_sk = Scalar::new(\n            0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        );\n\n        let ivpk_app = Point::new(\n            0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            false\n        );\n\n        let randomness = 2;\n\n        let body = EncryptedLogIncomingBody::from_event(test_event, randomness);\n\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk_app);\n\n        let expected_event_body_ciphertext = [\n            228, 9, 65, 81, 62, 59, 249, 207, 90, 196, 206, 72, 39, 199, 82, 196, 63, 127, 188, 251, 150, 188, 238, 205, 3, 86, 102, 164, 175, 12, 137, 158, 163, 111, 205, 10, 229, 230, 46, 202, 110, 107, 156, 180, 67, 192, 161, 201, 66, 122, 29, 35, 42, 33, 153, 216, 199, 208, 103, 207, 126, 153, 189, 136, 19, 220, 238, 15, 169, 29, 255, 11, 123, 107, 70, 192, 53, 40, 36, 93, 187, 32, 123, 136, 104, 23, 229, 245, 152, 90, 84, 2, 136, 112, 42, 27, 82, 214, 104, 14, 250, 48, 199, 245, 88, 22, 200, 77, 38, 51, 127, 56, 138, 255, 16, 46, 179, 129, 215, 185, 185, 116, 148, 16, 133, 62, 56, 180, 10, 132, 109, 77, 206, 199, 21, 167, 7, 163, 171, 158, 244, 23, 18, 121, 108, 42, 107, 7, 48, 84, 212, 104, 39, 16, 109, 7, 108, 129, 60, 80, 112, 241, 223, 140, 186, 158, 38, 74, 230, 213, 159, 175, 142, 228, 128, 160\n        ];\n\n        assert_eq(expected_event_body_ciphertext.len(), ciphertext.len());\n\n        for i in 0..expected_event_body_ciphertext.len() {\n            assert_eq(ciphertext[i], expected_event_body_ciphertext[i]);\n        }\n    }\n}\n"},"110":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, MAX_NOTES_PER_PAGE, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, Comparator, NoteStatus, PropertySelector},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\n\nmod test;\n\nfn extract_property_value_from_selector<N>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note. \n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value = serialized_note[selector.index].to_be_bytes(32);\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, N, M>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<N>(serialized_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        // Values are computed ahead of time because circuits evaluate all branches\n        let is_equal = value_field == select.value.to_field();\n        let is_lt = value_field.lt(select.value.to_field());\n\n        if (select.comparator == Comparator.EQ) {\n            assert(is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.NEQ) {\n            assert(!is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LT) {\n            assert(is_lt, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LTE) {\n            assert(is_lt | is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GT) {\n            assert(!is_lt & !is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GTE) {\n            assert(!is_lt, \"Mismatch return note field.\");\n        }\n    }\n}\n\nfn check_notes_order<N>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N, M>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> Note where Note: NoteInterface<N, M> {\n    let note = get_note_internal(storage_slot);\n\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    context.push_note_hash_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, M, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, M, FILTER_ARGS>\n) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> where Note: NoteInterface<N, M> {\n    let opt_notes = get_notes_internal(storage_slot, options);\n\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nfn constrain_get_notes_internal<Note, N, M, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, M, FILTER_ARGS>\n) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> where Note: NoteInterface<N, M> {\n    let mut returned_notes = BoundedVec::new();\n\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        let opt_note = filtered_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n\n            // The below code is used to collapse a sparse array into one where the values are guaranteed to be at the \n            // front of the array. This is highly useful because the caller knows that the returned array won't have\n            // more than option.limits notes, and can therefore loop over this limit value instead of the entire array,\n            // resulting in a smaller circuit and faster proving times.\n            // We write at returned_notes[num_notes] because num_notes is only advanced when we have a value in \n            // filtered_notes.\n            returned_notes.push(note);\n        };\n    }\n\n    // As long as we only loop till `options.limit` the array will be guaranteed to be at most of length `options.limit`.\n    assert(returned_notes.len() <= options.limit, \"Got more notes than limit.\");\n    // We will however check that nothing else was returned after the limit.\n    for i in options.limit..filtered_notes.len() {\n        assert(filtered_notes[i].is_none(), \"Got more notes than limit.\");\n    }\n\n    assert(returned_notes.len() != 0, \"Cannot return zero notes\");\n\n    returned_notes\n}\n\nunconstrained fn get_note_internal<Note, N, M>(storage_slot: Field) -> Note where Note: NoteInterface<N, M> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, M, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, M, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N, M> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    )\n}\n\nunconstrained pub fn view_notes<Note, N, M>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N, M>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N, M> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"},"112":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    constants::GENERATOR_INDEX__INNER_NOTE_HASH,\n    hash::{\n    pedersen_hash, compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_inner_note_hash_from_preimage(storage_slot: Field, note_content_hash: Field) -> Field {\n    pedersen_hash(\n        [storage_slot, note_content_hash],\n        GENERATOR_INDEX__INNER_NOTE_HASH\n    )\n}\n\nfn compute_inner_note_hash<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    compute_inner_note_hash_from_preimage(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N, M>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note_with_header.get_header();\n    let (_, inner_nullifier) = note_with_header.compute_note_hash_and_nullifier(context);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\nfn compute_note_hash_for_read_request_from_innter_and_nonce(\n    inner_note_hash: Field,\n    nonce: Field\n) -> Field {\n    // TODO(#1386): This if-else can be nuked once we have nonces injected from public\n    if (nonce == 0) {\n        // If nonce is zero, that means we are reading a public note.\n        inner_note_hash\n    } else {\n        compute_unique_note_hash(nonce, inner_note_hash)\n    }\n}\n\npub fn compute_note_hash_for_read_request<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let inner_note_hash = compute_inner_note_hash(note);\n    let nonce = note.get_header().nonce;\n\n    compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, nonce)\n}\n\npub fn compute_note_hash_for_consumption<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    if (header.note_hash_counter != 0) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        inner_note_hash\n    } else {\n        // If a note is not transient, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the siloed_note_hash which has already been hashed with\n        // nonce and then contract address. This hash will match the existing leaf in the note hash\n        // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        let unique_note_hash = compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, header.nonce);\n        compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n        // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n        // nullification, it is not strictly necessary to silo the note hash before computing\n        // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n        // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n        // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n        // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n        // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n    }\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, N, M, S>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N, M> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n    let unique_note_hash = compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, note_header.nonce);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        let (_, nullifier) = note.compute_note_hash_and_nullifier_without_context();\n        nullifier\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [inner_note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"113":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_inner_note_hash, compute_note_hash_for_consumption}, note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N, M>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let inner_note_hash = compute_inner_note_hash(*note);\n\n    let serialized_note = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        inner_note_hash,\n        note_hash_counter\n    )\n        == 0\n    );\n\n    context.push_note_hash(inner_note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, N, M>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let inner_note_hash = compute_inner_note_hash(*note);\n\n    context.push_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N, M>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N, M> {\n    let (note_hash, nullifier) = note.compute_note_hash_and_nullifier(context);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let note_hash_for_consumption = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a non-transient note and we don't populate the note_hash with real\n        // value (if we did so the `notifyNullifiedNote` oracle would throw).\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a transient note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can find it and squash both\n        // the note and the nullifier.\n        note_hash\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    assert(notify_nullified_note(nullifier, note_hash_for_consumption, nullifier_counter) == 0);\n\n    context.push_nullifier(nullifier, note_hash_for_consumption)\n}\n"},"114":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\nstruct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting  \n * a change note in a token's transfer function only when there is \"change\" left).\n */\nstruct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(self) {}\n}\n"},"121":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH, MAX_ARGS_LENGTH\n},\n    traits::Hash, hash::{pedersen_hash, compute_siloed_nullifier, sha256_to_field}\n};\nuse crate::oracle::logs_traits::{LensForEncryptedLog, ToBytesForUnencryptedLog};\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    pedersen_hash([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, N, M>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes = (n as Field).to_be_bytes(4);\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    pedersen_hash(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<N>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() <= MAX_ARGS_LENGTH, \"Args length exceeds maximum\");\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..MAX_ARGS_LENGTH {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x11e40f2a780822f7971803048c9a2100579de352e7dadd99981760964da65b57);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"122":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::{compute_siloed_nullifier, pedersen_hash},\n    constants::GENERATOR_INDEX__CONSTRUCTOR, abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier, 0);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier, 0);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_contract_initialization_nullifier(context.this_address());\n    let header = context.get_header();\n    header.prove_nullifier_inclusion(init_nullifier);\n}\n\nfn compute_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    compute_siloed_nullifier(\n        address,\n        compute_unsiloed_contract_initialization_nullifier(address)\n    )\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    pedersen_hash(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"123":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr","source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, hash::pedersen_hash, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: Field = 24;\n\nstruct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nunconstrained fn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nunconstrained fn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n"},"124":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::{address::AztecAddress, point::Point};\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<M>(_note_hash_counter: u32, _encrypted_note: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_note_log<M>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<M>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32\n) {}\n\nunconstrained pub fn emit_encrypted_event_log<M>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedNoteLog)]\nunconstrained fn compute_encrypted_note_log_oracle<N, M>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_note_log<N, M>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_note_log_oracle(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        preimage\n    )\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedEventLog)]\nunconstrained fn compute_encrypted_event_log_oracle<N, M>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _event_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_event_log<N, M>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    event_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_event_log_oracle(\n        contract_address,\n        randomness,\n        event_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        preimage\n    )\n}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_oracle_private<T>(_contract_address: AztecAddress, _message: T, _counter: u32) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log_private_internal<T>(\n    contract_address: AztecAddress,\n    message: T,\n    counter: u32\n) -> Field {\n    emit_unencrypted_log_oracle_private(contract_address, message, counter)\n}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private<N>(contract_address: AztecAddress, message: [Field; N], counter: u32) -> Field {}\n\nunconstrained pub fn emit_contract_class_unencrypted_log_private_internal<N>(contract_address: AztecAddress, message: [Field; N], counter: u32) -> Field {\n    emit_contract_class_unencrypted_log_private(contract_address, message, counter)\n}\n"},"128":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, hash::pedersen_hash,\n    public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage, traits::{Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _leaf_slot: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, leaf_slot: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, leaf_slot);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"129":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub fn get_key_validation_request(pk_m_hash: Field, key_index: Field) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n\n"},"131":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_membership_witness.nr","source":"use dep::protocol_types::{constants::{ARCHIVE_HEIGHT, NOTE_HASH_TREE_HEIGHT}, utils::arr_copy_slice};\n\nglobal NOTE_HASH_TREE_ID = 1;\nglobal ARCHIVE_TREE_ID = 4;\n\n// Note: We have M here because we need to somehow set it when calling get_membership_witness function and one way to\n// do it is to set M here and then set type of the return param, e.g.:\n//\n// `let witness: MembershipWitness<NOTE_HASH_TREE_HEIGHT, NOTE_HASH_TREE_HEIGHT + 1> = get_membership_witness(...);`\n//\n// Another way to do it would be to add \"type_hint: [Field; T]\" as argument to `get_membership_witness` but that's\n// a bit too boilerplatey for my taste.\nstruct MembershipWitness<N, M> {\n    index: Field,\n    path: [Field; N],\n}\n\n#[oracle(getMembershipWitness)]\nunconstrained fn get_membership_witness_oracle<M>(\n    _block_number: u32,\n    _tree_id: Field,\n    _leaf_value: Field\n) -> [Field; M] {}\n\nunconstrained pub fn get_membership_witness<N, M>(\n    block_number: u32,\n    tree_id: Field,\n    leaf_value: Field\n) -> MembershipWitness<N, M> {\n    let fields: [Field; M] = get_membership_witness_oracle(block_number, tree_id, leaf_value);\n    MembershipWitness { index: fields[0], path: arr_copy_slice(fields, [0; N], 1) }\n}\n\n// Note: get_nullifier_membership_witness function is implemented in get_nullifier_membership_witness.nr\n\nunconstrained pub fn get_note_hash_membership_witness<N, M>(\n    block_number: u32,\n    leaf_value: Field\n) -> MembershipWitness<NOTE_HASH_TREE_HEIGHT, NOTE_HASH_TREE_HEIGHT + 1> {\n    get_membership_witness(block_number, NOTE_HASH_TREE_ID, leaf_value)\n}\n\n// There is no `get_public_data_membership_witness` function because it doesn't make sense to be getting a membership\n// witness for a value in the public data tree.\n\nunconstrained pub fn get_archive_membership_witness(\n    block_number: u32,\n    leaf_value: Field\n) -> MembershipWitness<ARCHIVE_HEIGHT, ARCHIVE_HEIGHT + 1> {\n    get_membership_witness(block_number, ARCHIVE_TREE_ID, leaf_value)\n}\n"},"132":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/storage.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<N>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field\n) -> [Field; N] {}\n\nunconstrained pub fn raw_storage_read<N>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> [Field; N] {\n    storage_read_oracle(address.to_field(), storage_slot, block_number as Field, N)\n}\n\nunconstrained pub fn storage_read<T, N>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> T where T: Deserialize<N> {\n    T::deserialize(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::address::AztecAddress;\n\n    use std::test::OracleMock;\n    use crate::test::mocks::mock_struct::MockStruct;\n\n    global address = AztecAddress::from_field(29);\n    global slot = 7;\n    global block_number = 17;\n\n    #[test]\n    fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"},"133":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/unsafe_rand.nr","source":"#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n\n// Called `unsafe_rand` because we do not constrain in circuit that we are dealing with an actual random value.\n// Instead we just trust our PXE.\nunconstrained pub fn unsafe_rand() -> Field {\n    rand_oracle()\n}\n"},"134":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/header.nr","source":"use std::merkle::compute_merkle_root;\nuse dep::protocol_types::{constants::HEADER_LENGTH, header::Header};\n\nuse crate::{context::PrivateContext, oracle::get_membership_witness::get_archive_membership_witness};\n\n#[oracle(getHeader)]\nunconstrained fn get_header_at_oracle(_block_number: u32) -> [Field; HEADER_LENGTH] {}\n\nunconstrained pub fn get_header_at_internal(block_number: u32) -> Header {\n    let header = get_header_at_oracle(block_number);\n    Header::deserialize(header)\n}\n\npub fn get_header_at(block_number: u32, context: PrivateContext) -> Header {\n    let historical_header_block_number = context.historical_header.global_variables.block_number as u32;\n\n    if (block_number == historical_header_block_number) {\n        // If the block number we want to prove against is the same as the block number in the historical header we\n        // skip the inclusion proofs and just return the historical header from context.\n        context.historical_header\n    } else {\n        // 1) Get block number corresponding to the last_archive root in the header\n        // Note: We subtract 1 because the last_archive root is the root of the archive after applying the previous block\n        let last_archive_block_number = historical_header_block_number - 1;\n\n        // 2) Check that the last archive block number is more than or equal to the block number we want to prove against\n        // We could not perform the proof otherwise because the last archive root from the header would not \"contain\"\n        // the header we want to prove against\n        assert(\n            last_archive_block_number >= block_number, \"Last archive block number is smaller than the block number we want to prove against\"\n        );\n\n        // 3) Get the header of a given block from oracle\n        let header = get_header_at_internal(block_number);\n\n        // 4) Compute the block hash from the block header\n        let block_hash = header.hash();\n\n        // 5) Get the membership witness of the block in the archive\n        let witness = get_archive_membership_witness(last_archive_block_number, block_hash);\n\n        // 6) Check that the block is in the archive (i.e. the witness is valid)\n        assert(\n            context.historical_header.last_archive.root\n            == compute_merkle_root(block_hash, witness.index, witness.path), \"Proving membership of a block in archive failed\"\n        );\n\n        // 7) Return the block header\n        header\n    }\n}\n"},"136":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::PublicKeys;\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained fn get_public_keys_and_partial_address_oracle_wrapper(address: AztecAddress) -> [Field; 13] {\n    get_public_keys_and_partial_address_oracle(address)\n}\n\nfn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle_wrapper(address);\n\n    let keys = PublicKeys {\n        npk_m: Point::new(result[0], result[1], result[2] as bool),\n        ivpk_m: Point::new(result[3], result[4], result[5] as bool),\n        ovpk_m: Point::new(result[6], result[7], result[8] as bool),\n        tpk_m: Point::new(result[9], result[10], result[11] as bool)\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"138":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _inner_note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    inner_note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        serialized_note,\n        inner_note_hash,\n        counter\n    )\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field, _counter: u32) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash, counter)\n}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, N, NB, M, S, NS>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N, NB> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n// Only ever use this in private!\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n// Only ever use this in private!\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n"},"139":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, utils::arr_copy_slice,\n    constants::CONTRACT_INSTANCE_LENGTH, utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"144":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{hash::pedersen_hash, storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"146":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::oracle::storage::storage_read;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UnconstrainedContext> {\n    unconstrained pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"153":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE, lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader, note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note> PrivateSet<Note, &mut PublicContext> {\n    // docs:start:insert_from_public\n    pub fn insert_from_public<N, M>(self, note: &mut Note) where Note: NoteInterface<N, M> {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note> PrivateSet<Note, &mut PrivateContext> {\n    // docs:start:insert\n    pub fn insert<N, M>(self, note: &mut Note) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    // docs:start:remove\n    pub fn remove<N, M>(self, note: Note) where Note: NoteInterface<N, M> {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read = self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(self.context, note);\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<N, M, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, M, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> where Note: NoteInterface<N, M> {\n        get_notes(self.context, self.storage_slot, options)\n    }\n    // docs:end:get_notes\n}\n\nimpl<Note> PrivateSet<Note, UnconstrainedContext> {\n    // docs:start:view_notes\n    unconstrained pub fn view_notes<N, M>(\n        self,\n        options: NoteViewerOptions<Note, N, M>\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N, M> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"155":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_delay_change.nr","source":"use dep::protocol_types::traits::{Serialize, Deserialize, FromField, ToField};\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to store the minimum delay with which a ScheduledValueChange object can\n// schedule a change.\n// This delay is initally equal to INITIAL_DELAY, and can be safely mutated to any other value over time. This mutation \n// is performed via `schedule_change` in order to satisfy ScheduleValueChange constraints: if e.g. we allowed for the \n// delay to be decreased immediately then it'd be possible for the state variable to schedule a value change with a \n// reduced delay, invalidating prior private reads.\nstruct ScheduledDelayChange<INITIAL_DELAY> {\n    // Both pre and post are stored in public storage, so by default they are zeroed. By wrapping them in an Option, \n    // they default to Option::none(), which we detect and replace with INITIAL_DELAY. The end result is that a\n    // ScheduledDelayChange that has not been initialized has a delay equal to INITIAL_DELAY, which is the desired\n    // effect. Once initialized, the Option will never be none again.\n    pre: Option<u32>,\n    post: Option<u32>,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n    // The _dummy variable forces INITIAL_DELAY to be interpreted as a numeric value. This is a workaround to\n    // https://github.com/noir-lang/noir/issues/4633. Remove once resolved.\n    _dummy: [Field; INITIAL_DELAY],\n}\n\nimpl<INITIAL_DELAY> ScheduledDelayChange<INITIAL_DELAY> {\n    pub fn new(pre: Option<u32>, post: Option<u32>, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change, _dummy: [0; INITIAL_DELAY] }\n    }\n\n    /// Returns the current value of the delay stored in the data structure.\n    /// This function only returns a meaningful value when called in public with the current block number - for\n    /// historical private reads use `get_effective_minimum_delay_at` instead.\n    pub fn get_current(self, current_block_number: u32) -> u32 {\n        // The post value becomes the current one at the block of change, so any transaction that is included in the\n        // block of change will use the post value.\n\n        if current_block_number < self.block_of_change {\n            self.pre.unwrap_or(INITIAL_DELAY)\n        } else {\n            self.post.unwrap_or(INITIAL_DELAY)\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change delay and the block at which it will become the current\n    /// delay. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (u32, u32) {\n        (self.post.unwrap_or(INITIAL_DELAY), self.block_of_change)\n    }\n\n    /// Mutates the delay change by scheduling a change at the current block number. This function is only meaningful\n    /// when called in public with the current block number.\n    /// The block at which the new delay will become effective is determined automatically:\n    ///  - when increasing the delay, the change is effective immediately\n    ///  - when reducing the delay, the change will take effect after a delay equal to the difference between old and\n    ///    new delay. For example, if reducing from 3 days to 1 day, the reduction will be scheduled to happen after 2\n    ///    days.\n    pub fn schedule_change(&mut self, new: u32, current_block_number: u32) {\n        let current = self.get_current(current_block_number);\n\n        // When changing the delay value we must ensure that it is not possible to produce a value change with a delay\n        // shorter than the current one.\n        let blocks_until_change = if new > current {\n            // Increasing the delay value can therefore be done immediately: this does not invalidate prior contraints\n            // about how quickly a value might be changed (indeed it strengthens them).\n            0\n        } else {\n            // Decreasing the delay requires waiting for the difference between current and new delay in order to ensure\n            // that overall the current delay is respected.\n            //\n            //      current                    delay              earliest value block of change\n            //       block                 block of change         if delay remained unchanged\n            //  =======N=========================|================================X=================>\n            //         ^                         ^                                ^\n            //         |-------------------------|--------------------------------|\n            //         |   blocks until change               new delay            |\n            //         ------------------------------------------------------------\n            //                            current delay\n            current - new\n        };\n\n        self.pre = Option::some(current);\n        self.post = Option::some(new);\n        self.block_of_change = current_block_number + blocks_until_change;\n    }\n\n    /// Returns the minimum delay before a value might mutate due to a scheduled change, from the perspective of some\n    /// historical block number. It only returns a meaningful value when called in private with historical blocks. This \n    /// function can be used alongside `ScheduledValueChange.get_block_horizon` to properly constrain the\n    /// `max_block_number` transaction property when reading mutable shared state.\n    /// This value typically equals the current delay at the block following the historical one (the earliest one in\n    /// which a value change could be scheduled), but it also considers scenarios in which a delay reduction is \n    /// scheduled to happen in the near future, resulting in a way to schedule a change with an overall delay lower than\n    /// the current one.\n    pub fn get_effective_minimum_delay_at(self, historical_block_number: u32) -> u32 {\n        if self.block_of_change <= historical_block_number {\n            // If no delay changes were scheduled, then the delay value at the historical block (post) is guaranteed to\n            // hold due to how further delay changes would be scheduled by `schedule_change`.\n            self.post.unwrap_or(INITIAL_DELAY)\n        } else {\n            // If a change is scheduled, then the effective delay might be lower than the current one (pre). At the\n            // block of change the current delay will be the scheduled one, with an overall delay from the historical\n            // block number equal to the number of blocks until the change plus the new delay. If this value is lower\n            // than the current delay, then that is the effective minimum delay.\n            //\n            //       historical\n            //         block                  delay                  actual earliest value\n            //           v                block of change              block of change\n            //  =========NS=====================|=============================X===========Y=====>\n            //            ^                     ^                             ^           ^\n            //     earliest block in            |                             |           |\n            //   which to schedule change       |                             |           |\n            //           |                      |                             |           |\n            //           |----------------------|------------------------------           |\n            //           |         blocks                  new delay                      |\n            //           |      until change                                              |\n            //           |                                                                |\n            //           |----------------------------------------------------------------|\n            //                        current delay at the earliest block in \n            //                             which to scheduled value change\n\n            let blocks_until_change = self.block_of_change - (historical_block_number + 1);\n\n            min(\n                self.pre.unwrap_or(INITIAL_DELAY),\n                blocks_until_change + self.post.unwrap_or(INITIAL_DELAY)\n            )\n        }\n    }\n}\n\nimpl<INITIAL_DELAY> Serialize<1> for ScheduledDelayChange<INITIAL_DELAY> {\n    fn serialize(self) -> [Field; 1] {\n        // We pack all three u32 values into a single U128, which is made up of two u64 limbs.\n        // Low limb: [ pre_inner: u32 | post_inner: u32 ]\n        // High limb: [ empty | pre_is_some: u8 |  post_is_some: u8 | block_of_change: u32 ]\n\n        let lo = ((self.pre.unwrap_unchecked() as u64) * (1 << 32))\n            + (self.post.unwrap_unchecked() as u64);\n\n        let hi = (self.pre.is_some() as u64) * (1 << 33) \n            + (self.post.is_some() as u64 * (1 << 32)) \n            + self.block_of_change as u64;\n\n        let packed = U128::from_u64s_le(lo, hi);\n\n        [packed.to_integer()]\n    }\n}\n\nimpl<INITIAL_DELAY> Deserialize<1> for ScheduledDelayChange<INITIAL_DELAY> {\n    fn deserialize(input: [Field; 1]) -> Self {\n        let packed = U128::from_integer(input[0]);\n\n        // We use division and modulo to clear the bits that correspond to other values when unpacking.\n\n        let pre_is_some = ((packed.hi as u64) / (1 << 33)) as bool;\n        let pre_inner = ((packed.lo as u64) / (1 << 32)) as u32;\n\n        let post_is_some = (((packed.hi as u64) / (1 << 32)) % (1 << 1)) as bool;\n        let post_inner = ((packed.lo as u64) % (1 << 32)) as u32;\n\n        let block_of_change = ((packed.hi as u64) % (1 << 32)) as u32;\n\n        Self {\n            pre: if pre_is_some { Option::some(pre_inner) } else { Option::none() },\n            post: if post_is_some { Option::some(post_inner) } else { Option::none() },\n            block_of_change,\n            _dummy: [0; INITIAL_DELAY],\n        }\n    }\n}\n\nimpl<INITIAL_DELAY> Eq for ScheduledDelayChange<INITIAL_DELAY> {\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre) & (self.post == other.post) & (self.block_of_change == other.block_of_change)\n    }\n}\n"},"157":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/shared_mutable_private_getter.nr","source":"use dep::protocol_types::{\n    hash::{pedersen_hash, poseidon2_hash}, traits::{FromField, ToField}, address::AztecAddress,\n    header::Header\n};\n\nuse crate::context::PrivateContext;\nuse crate::state_vars::{\n    storage::Storage,\n    shared_mutable::{\n    shared_mutable::SharedMutable, scheduled_delay_change::ScheduledDelayChange,\n    scheduled_value_change::ScheduledValueChange\n}\n};\n\nstruct SharedMutablePrivateGetter<T, INITIAL_DELAY> {\n    context: &mut PrivateContext,\n    // The contract address of the contract we want to read from\n    other_contract_address: AztecAddress,\n    // The storage slot where the SharedMutable is stored on the other contract\n    storage_slot: Field,\n    // The _dummy variable forces INITIAL_DELAY to be interpreted as a numberic value. This is a workaround to\n    // https://github.com/noir-lang/noir/issues/4633. Remove once resolved.\n    _dummy: [Field; INITIAL_DELAY],\n}\n\n// We have this as a view-only interface to reading Shared Mutables in other contracts.\n// Currently the Shared Mutable does not support this. We can adapt SharedMutable at a later date\nimpl<T, INITIAL_DELAY> SharedMutablePrivateGetter<T, INITIAL_DELAY> {\n    pub fn new(\n        context: &mut PrivateContext,\n        other_contract_address: AztecAddress,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        assert(other_contract_address.to_field() != 0, \"Other contract address cannot be 0\");\n        Self { context, other_contract_address, storage_slot, _dummy: [0; INITIAL_DELAY] }\n    }\n\n    pub fn get_value_in_private(self, header: Header) -> T where T: FromField + ToField + Eq {\n        // We create a dummy SharedMutable state variable so that we can reuse its historical_read_from_public_storage\n        // method, greatly reducing code duplication. \n        let dummy: SharedMutable<T, INITIAL_DELAY, ()> = SharedMutable::new((), self.storage_slot);\n        let (value_change, delay_change, historical_block_number) = dummy.historical_read_from_public_storage(header, self.other_contract_address);\n\n        let effective_minimum_delay = delay_change.get_effective_minimum_delay_at(historical_block_number);\n        let block_horizon = value_change.get_block_horizon(historical_block_number, effective_minimum_delay);\n\n        // If our context has the same header as the one we pass in via the parameter, we are trying to read the \"current\" value\n        // and thus need to set the tx max block number below. If the context header is not the same as the one we pass in, this means\n        // we are trying to read a historical value and thus have no constraint on the max block number that this transaction can be included in.\n        if (self.context.historical_header.global_variables.block_number.eq(header.global_variables.block_number)) {\n            self.context.set_tx_max_block_number(block_horizon);\n        }\n\n        value_change.get_current_at(historical_block_number)\n    }\n}\n"},"159":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_value_change.nr","source":"use dep::protocol_types::traits::{Serialize, Deserialize, FromField, ToField};\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to represent a value that changes from `pre` to `post` at some block\n// called the `block_of_change`. The value can only be made to change by scheduling a change event at some future block\n// of change after some minimum delay measured in blocks has elapsed. This means that at any given block number we know\n// both the current value and the smallest block number at which the value might change - this is called the\n// 'block horizon'.\nstruct ScheduledValueChange<T> {\n    pre: T,\n    post: T,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n}\n\nimpl<T> ScheduledValueChange<T> {\n    pub fn new(pre: T, post: T, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the value stored in the data structure at a given block. This function can be called both in public\n    /// (where `block_number` is simply the current block number, i.e. the number of the block in which the current\n    /// transaction will be included) and in private (where `block_number` is the historical block number that is used\n    /// to construct the proof).\n    /// Reading in private is only safe if the transaction's `max_block_number` property is set to a value lower or\n    /// equal to the block horizon (see `get_block_horizon()`).\n    pub fn get_current_at(self, block_number: u32) -> T {\n        // The post value becomes the current one at the block of change. This means different things in each realm:\n        // - in public, any transaction that is included in the block of change will use the post value\n        // - in private, any transaction that includes the block of change as part of the historical state will use the\n        //   post value (barring any follow-up changes)\n\n        if block_number < self.block_of_change {\n            self.pre\n        } else {\n            self.post\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change value and the block at which it will become the current\n    /// value. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (T, u32) {\n        (self.post, self.block_of_change)\n    }\n\n    /// Returns the largest block number at which the value returned by `get_current_at` is known to remain the current\n    /// value. This value is only meaningful in private when constructing a proof at some `historical_block_number`,\n    /// since due to its asynchronous nature private execution cannot know about any later scheduled changes.\n    /// The caller of this function must know how quickly the value can change due to a scheduled change in the form of\n    /// `minimum_delay`. If the delay itself is immutable, then this is just its duration. If the delay is mutable\n    /// however, then this value is the 'effective minimum delay' (obtained by calling\n    /// `ScheduledDelayChange.get_effective_minimum_delay_at`), which equals the minimum number of blocks that need to\n    /// elapse from the next block until the value changes, regardless of further delay changes.\n    /// The value returned by `get_current_at` in private when called with a historical block number is only safe to use\n    /// if the transaction's `max_block_number` property is set to a value lower or equal to the block horizon computed\n    /// using the same historical block number.\n    pub fn get_block_horizon(self, historical_block_number: u32, minimum_delay: u32) -> u32 {\n        // The block horizon is the very last block in which the current value is known. Any block past the horizon\n        // (i.e. with a block number larger than the block horizon) may have a different current value. Reading the\n        // current value in private typically requires constraining the maximum valid block number to be equal to the\n        // block horizon.\n\n        if historical_block_number >= self.block_of_change {\n            // Once the block of change has been mined, the current value (post) will not change unless a new value\n            // change is scheduled. This did not happen at the historical block number (or else it would not be\n            // greater or equal to the block of change), and therefore could only happen after the historical block\n            // number. The earliest would be the immediate next block, and so the smallest possible next block of change\n            // equals `historical_block_number + 1 + minimum_delay`. Our block horizon is simply the previous block to\n            // that one.\n            //\n            //      block of      historical\n            //       change         block            block horizon\n            //   =======|=============N===================H===========>\n            //                         ^                   ^\n            //                         ---------------------\n            //                             minimum delay\n\n            historical_block_number + minimum_delay\n        } else {\n            // If the block of change has not yet been mined however, then there are two possible scenarios.\n            //   a) It could be so far into the future that the block horizon is actually determined by the minimum\n            //      delay, because a new change could be scheduled and take place _before_ the currently scheduled one.\n            //      This is similar to the scenario where the block of change is in the past: the time horizon is the\n            //      block prior to the earliest one in which a new block of change might land.\n            //\n            //         historical\n            //           block                        block horizon      block of change\n            //        =====N=================================H=================|=========>\n            //              ^                                 ^\n            //              |                                 |\n            //              -----------------------------------\n            //                        minimum delay\n            //\n            //   b) It could be fewer than `minimum_delay` blocks away from the historical block number, in which case\n            //      the block of change would become the limiting factor for the time horizon, which would equal the\n            //      block right before the block of change (since by definition the value changes at the block of\n            //      change).\n            //\n            //           historical                         block horizon\n            //             block     block of change       if not scheduled\n            //        =======N=============|===================H=================>\n            //                ^           ^                     ^\n            //                |     actual horizon              |\n            //                -----------------------------------\n            //                          minimum delay\n            //\n            // Note that the current implementation does not allow the caller to set the block of change to an arbitrary\n            // value, and therefore scenario a) is not currently possible. However implementing #5501 would allow for\n            // this to happen.\n\n            // Because historical_block_number < self.block_of_change, then block_of_change > 0 and we can safely\n            // subtract 1.\n            min(\n                self.block_of_change - 1,\n                historical_block_number + minimum_delay\n            )\n        }\n    }\n\n    /// Mutates the value by scheduling a change at the current block number. This function is only meaningful when\n    /// called in public with the current block number.\n    pub fn schedule_change(\n        &mut self,\n        new_value: T,\n        current_block_number: u32,\n        minimum_delay: u32,\n        block_of_change: u32\n    ) {\n        assert(block_of_change >= current_block_number + minimum_delay);\n\n        self.pre = self.get_current_at(current_block_number);\n        self.post = new_value;\n        self.block_of_change = block_of_change;\n    }\n}\n\nimpl<T> Serialize<3> for ScheduledValueChange<T> {\n    fn serialize(self) -> [Field; 3] where T: ToField {\n        [self.pre.to_field(), self.post.to_field(), self.block_of_change.to_field()]\n    }\n}\n\nimpl<T> Deserialize<3> for ScheduledValueChange<T> {\n  fn deserialize(input: [Field; 3]) -> Self  where T: FromField {\n    Self {\n        pre: FromField::from_field(input[0]),\n        post: FromField::from_field(input[1]),\n        block_of_change: FromField::from_field(input[2]),\n    }\n  }\n}\n\nimpl<T> Eq for ScheduledValueChange<T>  {\n    fn eq(self, other: Self) -> bool where T: Eq {\n        (self.pre == other.pre) & (self.post == other.post) & (self.block_of_change == other.block_of_change)\n    }\n}\n"},"160":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/shared_mutable.nr","source":"use dep::protocol_types::{\n    hash::{pedersen_hash, poseidon2_hash}, header::Header, address::AztecAddress,\n    traits::{FromField, ToField}\n};\n\nuse crate::context::{PrivateContext, PublicContext};\nuse crate::state_vars::{\n    storage::Storage,\n    shared_mutable::{scheduled_value_change::ScheduledValueChange, scheduled_delay_change::ScheduledDelayChange}\n};\nuse crate::oracle::storage::storage_read;\nuse dep::std::unsafe::zeroed;\n\nmod test;\n\nstruct SharedMutable<T, INITIAL_DELAY, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n\n// This will make the Aztec macros require that T implements the Serialize<N> trait, and allocate N storage slots to\n// this state variable. This is incorrect, since what we actually store is:\n//  - a ScheduledValueChange<T>, which requires 1 + 2 * M storage slots, where M is the serialization length of T\n//  - a ScheduledDelayChange, which requires another storage slot\n//\n// TODO https://github.com/AztecProtocol/aztec-packages/issues/5736: change the storage allocation scheme so that we\n// can actually use it here\nimpl<T, INITIAL_DELAY, Context> Storage<T> for SharedMutable<T, INITIAL_DELAY, Context> {}\n\n// TODO: extract into a utils module once  we can do arithmetic on generics, i.e. https://github.com/noir-lang/noir/issues/4784\nfn concat_arrays<N, M, O>(arr_n: [Field; N], arr_m: [Field; M]) -> [Field; O] {\n    assert_eq(N + M, O);\n    let mut out: [Field; O] = [0; O];\n    for i in 0..N {\n        out[i] = arr_n[i];\n    }\n    for i in 0..M {\n        out[N+i] = arr_m[i];\n    }\n    out\n}\n\n// SharedMutable<T> stores a value of type T that is:\n//  - publicly known (i.e. unencrypted)\n//  - mutable in public\n//  - readable in private with no contention (i.e. multiple parties can all read the same value without blocking one\n//    another nor needing to coordinate)\n// This is famously a hard problem to solve. SharedMutable makes it work by introducing a delay to public mutation:\n// the value is not changed immediately but rather a value change is scheduled to happen in the future after some delay\n// measured in blocks. Reads in private are only valid as long as they are included in a block not too far into the\n// future, so that they can guarantee the value will not have possibly changed by then (because of the delay).\n// The delay for changing a value is initially equal to INITIAL_DELAY, but can be changed by calling\n// `schedule_delay_change`.\nimpl<T, INITIAL_DELAY, Context> SharedMutable<T, INITIAL_DELAY, Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n\n    fn hash_scheduled_data(\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>\n    ) -> Field where T: ToField {\n        // TODO(#5491 and https://github.com/noir-lang/noir/issues/4784): update this so that we don't need to rely on\n        // ScheduledValueChange serializing to 3 and ScheduledDelayChange serializing to 1\n        let concatenated: [Field; 4] = concat_arrays(value_change.serialize(), delay_change.serialize());\n        poseidon2_hash(concatenated)\n    }\n\n    // Since we can't rely on the native storage allocation scheme, we hash the storage slot to get a unique location in\n    // which we can safely store as much data as we need.\n    // See https://github.com/AztecProtocol/aztec-packages/issues/5492 and\n    // https://github.com/AztecProtocol/aztec-packages/issues/5736\n    // We store three things in public storage:\n    //  - a ScheduledValueChange\n    //  - a ScheduledDelaChange\n    //  - the hash of both of these (via `hash_scheduled_data`)\n    fn get_value_change_storage_slot(self) -> Field {\n        pedersen_hash([self.storage_slot, 0], 0)\n    }\n\n    fn get_delay_change_storage_slot(self) -> Field {\n        pedersen_hash([self.storage_slot, 1], 0)\n    }\n\n    fn get_hash_storage_slot(self) -> Field {\n        pedersen_hash([self.storage_slot, 2], 0)\n    }\n\n    // It may seem odd that we take a header and address instead of reading from e.g. a PrivateContext, but this lets us\n    // reuse this function in SharedMutablePrivateGetter.\n    fn historical_read_from_public_storage(\n        self,\n        header: Header,\n        address: AztecAddress\n    ) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>, u32) where T: FromField + ToField + Eq {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for both the ScheduledValueChange and\n        // ScheduledDelayChange, but that'd require one full sibling path per storage slot (since due to kernel siloing\n        // the storage is not contiguous), and in the best case in which T is a single field that'd be 4 slots.\n        // Instead, we get an oracle to provide us the correct values for both the value and delay changes, and instead\n        // prove inclusion of their hash, which is both a much smaller proof (a single slot), and also independent of\n        // the size of T.\n        let (value_change_hint, delay_change_hint) = get_public_storage_hints(address, self.storage_slot, historical_block_number);\n\n        // Ideally the following would be simply public_storage::read_historical, but we can't implement that yet.\n        let hash = header.public_storage_historical_read(self.get_hash_storage_slot(), address);\n\n        // @todo This is written strangely to bypass a formatting issue with the if that is breaking ci.\n        let (a, b, c) = if hash != 0 {\n            let a = SharedMutable::hash_scheduled_data(value_change_hint, delay_change_hint);\n            (a, value_change_hint, delay_change_hint)\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized, meaning no value or delay change was ever\n            // scheduled. Therefore, the hints must then correspond to uninitialized scheduled changes.\n            let b = ScheduledValueChange::deserialize(zeroed());\n            let c = ScheduledDelayChange::deserialize(zeroed());\n            (hash, b, c)\n        };\n\n        assert_eq(hash, a, \"Hint values do not match hash\");\n        assert_eq(value_change_hint, b, \"Non-zero value change for zero hash\");\n        assert_eq(delay_change_hint, c, \"Non-zero delay change for zero hash\");\n\n        (value_change_hint, delay_change_hint, historical_block_number)\n    }\n}\n\nimpl<T, INITIAL_DELAY> SharedMutable<T, INITIAL_DELAY, &mut PublicContext> {\n    pub fn schedule_value_change(self, new_value: T) where T: ToField {\n        let mut value_change = self.read_value_change();\n        let delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n        let current_delay = delay_change.get_current(block_number);\n\n        // TODO: make this configurable\n        // https://github.com/AztecProtocol/aztec-packages/issues/5501\n        let block_of_change = block_number + current_delay;\n        value_change.schedule_change(new_value, block_number, current_delay, block_of_change);\n\n        self.write(value_change, delay_change);\n    }\n\n    pub fn schedule_delay_change(self, new_delay: u32) where T: ToField {\n        let mut delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n\n        delay_change.schedule_change(new_delay, block_number);\n\n        self.write(self.read_value_change(), delay_change);\n    }\n\n    pub fn get_current_value_in_public(self) -> T {\n        let block_number = self.context.block_number() as u32;\n        self.read_value_change().get_current_at(block_number)\n    }\n\n    pub fn get_current_delay_in_public(self) -> u32 {\n        let block_number = self.context.block_number() as u32;\n        self.read_delay_change().get_current(block_number)\n    }\n\n    pub fn get_scheduled_value_in_public(self) -> (T, u32) {\n        self.read_value_change().get_scheduled()\n    }\n\n    pub fn get_scheduled_delay_in_public(self) -> (u32, u32) {\n        self.read_delay_change().get_scheduled()\n    }\n\n    fn read_value_change(self) -> ScheduledValueChange<T> {\n        self.context.storage_read(self.get_value_change_storage_slot())\n    }\n\n    fn read_delay_change(self) -> ScheduledDelayChange<INITIAL_DELAY> {\n        self.context.storage_read(self.get_delay_change_storage_slot())\n    }\n\n    fn write(\n        self,\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>\n    ) where T: ToField {\n        // Whenever we write to public storage, we write both the value change and delay change as well as the hash of\n        // them both. This guarantees that the hash is always kept up to date.\n        // While this makes for more costly writes, it also makes private proofs much simpler because they only need to\n        // produce a historical proof for the hash, which results in a single inclusion proof (as opposed to 4 in the\n        // best case scenario in which T is a single field). Private shared mutable reads are assumed to be much more\n        // frequent than public writes, so this tradeoff makes sense.\n        self.context.storage_write(self.get_value_change_storage_slot(), value_change);\n        self.context.storage_write(self.get_delay_change_storage_slot(), delay_change);\n        self.context.storage_write(\n            self.get_hash_storage_slot(),\n            SharedMutable::hash_scheduled_data(value_change, delay_change)\n        );\n    }\n}\n\nimpl<T, INITIAL_DELAY> SharedMutable<T, INITIAL_DELAY, &mut PrivateContext> {\n    pub fn get_current_value_in_private(self) -> T where T: FromField + ToField + Eq {\n        // When reading the current value in private we construct a historical state proof for the public value.\n        // However, since this value might change, we must constrain the maximum transaction block number as this proof\n        // will only be valid for however many blocks we can ensure the value will not change, which will depend on the\n        // current delay and any scheduled delay changes.\n\n        let (value_change, delay_change, historical_block_number) = self.historical_read_from_public_storage(self.context.get_header(), self.context.this_address());\n\n        // We use the effective minimum delay as opposed to the current delay at the historical block as this one also\n        // takes into consideration any scheduled delay changes.\n        // For example, consider a scenario in which at block 200 the current delay was 50. We may naively think that\n        // the earliest we could change the value would be at block 251 by scheduling immediately after the historical\n        // block, i.e. at block 201. But if there was a delay change scheduled for block 210 to reduce the delay to 20\n        // blocks, then if a value change was scheduled at block 210 it would go into effect at block 230, which is\n        // earlier than what we'd expect if we only considered the current delay.\n        let effective_minimum_delay = delay_change.get_effective_minimum_delay_at(historical_block_number);\n        let block_horizon = value_change.get_block_horizon(historical_block_number, effective_minimum_delay);\n\n        // We prevent this transaction from being included in any block after the block horizon, ensuring that the\n        // historical public value matches the current one, since it can only change after the horizon.\n        self.context.set_tx_max_block_number(block_horizon);\n        value_change.get_current_at(historical_block_number)\n    }\n}\n\nunconstrained fn get_public_storage_hints<T, INITIAL_DELAY>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>) {\n    // This function cannot be part of the &mut PrivateContext impl because that'd mean that by passing `self` we'd also\n    // be passing a mutable reference to an unconstrained function, which is not allowed. We therefore create a dummy\n    // state variable here so that we can access the methods to compute storage slots. This will all be removed in the\n    // future once we do proper storage slot allocation (#5492).\n    let dummy = SharedMutable::new((), storage_slot);\n\n    (\n        storage_read(address, dummy.get_value_change_storage_slot(), block_number), storage_read(address, dummy.get_delay_change_storage_slot(), block_number)\n    )\n}\n"},"170":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_fees.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::GAS_FEES_LENGTH, hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty},\n    abis::side_effect::Ordered, utils::reader::Reader\n};\n\nstruct GasFees {\n    fee_per_da_gas: Field,\n    fee_per_l2_gas: Field,\n}\n\nimpl GasFees {\n    pub fn new(fee_per_da_gas: Field, fee_per_l2_gas: Field) -> Self {\n        Self { fee_per_da_gas, fee_per_l2_gas }\n    }\n\n    pub fn default() -> Self {\n        GasFees::new(1, 1)\n    }\n\n    pub fn is_empty(self) -> bool {\n        (self.fee_per_da_gas == 0) & (self.fee_per_l2_gas == 0)\n    }\n}\n\nimpl Serialize<GAS_FEES_LENGTH> for GasFees {\n    fn serialize(self) -> [Field; GAS_FEES_LENGTH] {\n        [self.fee_per_da_gas, self.fee_per_l2_gas]\n    }\n}\n\nimpl Deserialize<GAS_FEES_LENGTH> for GasFees {\n    fn deserialize(serialized: [Field; GAS_FEES_LENGTH]) -> GasFees {\n        GasFees::new(serialized[0], serialized[1])\n    }\n}\n\nimpl Eq for GasFees {\n    fn eq(self, other : GasFees) -> bool {\n        (self.fee_per_da_gas == other.fee_per_da_gas) & (self.fee_per_l2_gas == other.fee_per_l2_gas)\n    }\n}\n\nimpl Empty for GasFees {\n    fn empty() -> Self {\n        GasFees::new(0, 0)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = GasFees::empty();\n    let serialized = item.serialize();\n    let deserialized = GasFees::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"175":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/global_variables.nr","source":"use crate::{\n    address::{AztecAddress, EthAddress}, abis::gas_fees::GasFees,\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}, utils::reader::Reader\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : u64,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n    gas_fees : GasFees\n}\n// docs:end:global-variables\n\nimpl GlobalVariables {\n    fn is_empty(self) -> bool {\n        (self.chain_id == 0)\n            & (self.version == 0)\n            & (self.block_number == 0)\n            & (self.timestamp == 0)\n            & (self.coinbase.is_zero())\n            & (self.fee_recipient.is_zero())\n            & (self.gas_fees.is_empty())\n    }\n}\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        let mut serialized: BoundedVec<Field, GLOBAL_VARIABLES_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.chain_id);\n        serialized.push(self.version);\n        serialized.push(self.block_number);\n        serialized.push(self.timestamp as Field);\n        serialized.push(self.coinbase.to_field());\n        serialized.push(self.fee_recipient.to_field());\n        serialized.extend_from_array(self.gas_fees.serialize());\n\n        serialized.storage\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        let mut reader = Reader::new(serialized);\n        GlobalVariables {\n            chain_id: reader.read(),\n            version: reader.read(),\n            block_number: reader.read(),\n            timestamp: reader.read() as u64,\n            coinbase: EthAddress::from_field(reader.read()),\n            fee_recipient: AztecAddress::from_field(reader.read()),\n            gas_fees: reader.read_struct(GasFees::deserialize)\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient) &\n        (self.gas_fees == other.gas_fees) \n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n            gas_fees: GasFees::empty()\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars = GlobalVariables::empty();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n"},"180":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{constants::KEY_VALIDATION_REQUEST_LENGTH, traits::{Empty, Serialize, Deserialize}, point::Point};\n\nstruct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m))\n            & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest {\n            pk_m: Point::empty(),\n            sk_app: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app,\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point::new(fields[0], fields[1], fields[2] as bool),\n            sk_app: fields[3],\n        }\n    }\n}\n\n"},"192":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr","source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u32 = 3;\n\nuse crate::{\n    abis::{read_request::ScopedReadRequest, side_effect::Readable}, hash::compute_siloed_nullifier,\n    merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}\n};\n\nstruct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u32,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            nullifier : 0,\n            next_nullifier : 0,\n            next_index : 0,\n        }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            std::hash::pedersen_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl Readable for NullifierLeafPreimage {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        let siloed_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.nullifier, siloed_value, \"Value of the nullifier leaf does not match read request\");\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u32 }\n    }\n}\n\nimpl Eq for NullifierLeafPreimage {\n  fn eq(self, other: Self) -> bool {\n    (self.nullifier == other.nullifier) &\n    (self.next_nullifier == other.next_nullifier) &\n    (self.next_index == other.next_index)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NullifierLeafPreimage::empty();\n    let serialized = item.serialize();\n    let deserialized = NullifierLeafPreimage::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"193":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"},"21":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\nstruct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    fn new(x: Field, y: Field, is_infinite: bool) -> Self {\n        Self { x, y, is_infinite }\n    }\n\n    fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    fn neg(self) -> EmbeddedCurvePoint { \n        EmbeddedCurvePoint {\n            x: self.x,\n            y: -self.y,\n            is_infinite: self.is_infinite\n        }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite) | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n// Scalar represented as low and high limbs\nstruct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    pub fn derive_public_key(self) -> EmbeddedCurvePoint {\n        let public_key = fixed_base_scalar_mul(self.lo, self.hi);\n        EmbeddedCurvePoint { x: public_key[0], y: public_key[1], is_infinite: false }\n    }\n\n    #[field(bn254)]\n    fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, key: EmbeddedCurveScalar) -> bool {\n        (key.hi == self.hi) & (key.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n#[foreign(multi_scalar_mul)]\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> [Field; 3]\n// docs:end:multi_scalar_mul\n{}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(\n    scalar_low: Field,\n    scalar_high: Field\n) -> [Field; 3]\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    let scalar = EmbeddedCurveScalar { lo: scalar_low, hi: scalar_high };\n    multi_scalar_mul([g1], [scalar])\n}\n\n// This is a hack as returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\nfn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint\n) -> EmbeddedCurvePoint\n// docs:end:embedded_curve_add\n{\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n    EmbeddedCurvePoint { x, y, is_infinite: point_array[2] == 1 }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n"},"215":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/append_only_tree_snapshot.nr","source":"struct AppendOnlyTreeSnapshot {\n    root : Field,\n    // TODO(Alvaro) change this to a u64\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: u32 = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n"},"217":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/max_block_number.nr","source":"use crate::{constants::MAX_BLOCK_NUMBER_LENGTH, traits::{Deserialize, Serialize, Empty}};\n\nstruct MaxBlockNumber {\n    _opt: Option<u32>\n}\n\nimpl Empty for MaxBlockNumber {\n    fn empty() -> Self {\n        Self { _opt: Option::none() }\n    }\n}\n\nimpl Eq for MaxBlockNumber {\n    fn eq(self, other: Self) -> bool {\n        self._opt == other._opt\n    }\n}\n\nimpl Serialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn serialize(self) -> [Field; MAX_BLOCK_NUMBER_LENGTH] {\n        [self._opt._is_some as Field, self._opt._value as Field]\n    }\n}\n\nimpl Deserialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn deserialize(serialized: [Field; MAX_BLOCK_NUMBER_LENGTH]) -> MaxBlockNumber {\n        MaxBlockNumber {\n            _opt: Option {\n                _is_some: serialized[0] as bool,\n                _value: serialized[1] as u32,\n            }\n        }\n    }\n}\n\nimpl MaxBlockNumber {\n    pub fn new(max_block_number: u32) -> Self {\n        Self { _opt: Option::some(max_block_number) }\n    }\n\n    pub fn is_none(self) -> bool {\n        self._opt.is_none()\n    }\n\n    pub fn is_some(self) -> bool {\n        self._opt.is_some()\n    }\n\n    pub fn unwrap(self) -> u32 {\n        self._opt.unwrap()\n    }\n\n    pub fn unwrap_unchecked(self) -> u32 {\n        self._opt.unwrap_unchecked()\n    }\n\n    pub fn min(lhs: MaxBlockNumber, rhs: MaxBlockNumber) -> MaxBlockNumber {\n        if rhs.is_none() {\n            lhs // lhs might also be none, but in that case both would be\n        } else {\n            MaxBlockNumber::min_with_u32(lhs, rhs.unwrap_unchecked())\n        }\n    }\n\n    pub fn min_with_u32(lhs: MaxBlockNumber, rhs: u32) -> MaxBlockNumber {\n        if lhs._opt.is_none() {\n            MaxBlockNumber::new(rhs)\n        } else {\n            let lhs_value = lhs._opt.unwrap_unchecked();\n\n            MaxBlockNumber::new(if lhs_value < rhs { lhs_value } else { rhs })\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = MaxBlockNumber::empty();\n    let serialized = item.serialize();\n    let deserialized = MaxBlockNumber::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn zeroed_is_none() {\n    // Large parts of the kernel rely on zeroed to initialize structs. This conveniently matches what `default` does,\n    // and though we should eventually move everything to use `default`, it's good to check for now that both are\n    // equivalent.\n    let a = MaxBlockNumber::empty();\n    assert(a.is_none());\n}\n\n#[test]\nfn serde_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert(b.is_none());\n}\n\n#[test]\nfn serde_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert_eq(b.unwrap(), 13);\n}\n\n#[test(should_fail)]\nfn default_unwrap_panics() {\n    let a = MaxBlockNumber::empty();\n    let _ = a.unwrap();\n}\n\n#[test]\nfn min_default_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::empty();\n\n    assert(MaxBlockNumber::min(a, b).is_none());\n}\n\n#[test]\nfn min_default_some() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::new(13);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_some_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::new(42);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_with_u32_default() {\n    let a = MaxBlockNumber::empty();\n    let b = 42;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 42);\n}\n\n#[test]\nfn min_with_u32_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = 42;\n    let c = 8;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min_with_u32(a, c).unwrap(), 8);\n}\n"},"22":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.to_le_radix(256, num_bytes);\n    let y_bytes = y.to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    let borrow = lte_16_hint(alo, blo);\n\n    let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n    let rhi = ahi - bhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Take hints of the decomposition\n        let (xlo, xhi) = decompose_hint(x);\n\n        // Range check the limbs\n        xlo.assert_max_bit_size(128);\n        xhi.assert_max_bit_size(128);\n\n        // Check that the decomposition is correct\n        assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n        // Assert that the decomposition of P is greater than the decomposition of x\n        assert_gt_limbs((PLO, PHI), (xlo, xhi));\n        (xlo, xhi)\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else  {\n        // Take a hint of the comparison and verify it\n        if lt_32_hint(a, b) {\n            assert_gt(b, a);\n            false\n        } else {\n            assert_gt(a, b);\n            true\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose_hint, decompose, compute_lt, assert_gt, gt, lt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"229":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::pedersen_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n"},"23":{"path":"std/field/mod.nr","source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n"},"235":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<N> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<N> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\nimpl<N> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let mut result = [0; N];\n        let bytes: [u8; N] = self.as_bytes();\n        for i in 0..N {\n            result[i] = field_from_bytes([bytes[i];1], true);\n        }\n        result\n    }\n}\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<N> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n"},"237":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/content_commitment.nr","source":"use crate::{\n    constants::CONTENT_COMMITMENT_LENGTH, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct ContentCommitment {\n  num_txs: Field,\n  txs_effects_hash: Field,\n  in_hash: Field,\n  out_hash: Field,\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new();\n\n    fields.push(self.num_txs);\n    fields.push(self.txs_effects_hash);\n    fields.push(self.in_hash);\n    fields.push(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let num_txs = serialized[0];\n\n    let txs_effects_hash = serialized[1];\n\n    let in_hash = serialized[2];\n\n    let out_hash = serialized[3];\n\n    Self {\n      num_txs,\n      txs_effects_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      num_txs: 0,\n      txs_effects_hash: 0,\n      in_hash: 0,\n      out_hash: 0,\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.num_txs == other.num_txs)\n      & (self.txs_effects_hash == other.txs_effects_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n"},"238":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            std::hash::pedersen_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"239":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/header.nr","source":"use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, STATE_REFERENCE_LENGTH, CONTENT_COMMITMENT_LENGTH},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n    total_fees: Field\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables) &\n        self.total_fees.eq(other.total_fees)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n        fields.push(self.total_fees);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n        offset = offset + GLOBAL_VARIABLES_LENGTH;\n\n        let total_fees = serialized[offset];\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n            total_fees\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n            total_fees: 0\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header = Header::empty();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header = Header::empty();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header = Header::empty();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x124e8c40a6eca2e3ad10c04050b01a3fad00df3cea47b13592c7571b6914c7a7;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"240":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path, messaging::l2_to_l1_message::ScopedL2ToL1Message,\n    recursion::verification_key::VerificationKey, traits::is_empty,\n    utils::field::field_from_bytes_32_trunc\n};\nuse std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    pedersen_hash(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, inner_note_hash: Field) -> Field {\n    let inputs = [nonce, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_encrypted_log_hash(address: AztecAddress, randomness: Field, log_hash: Field) -> Field {\n    // TODO: Using 0 GENERATOR_INDEX here as interim before we move to posiedon\n    // NB: A unique separator will be needed for masked_contract_address\n    let mut masked_contract_address = pedersen_hash([address.to_field(), randomness], 0);\n    if randomness == 0 {\n        // In some cases, we actually want to reveal the contract address we are siloing with:\n        // e.g. 'handshaking' contract w/ known address\n        // An app providing randomness = 0 signals to not mask the address.\n        masked_contract_address = address.to_field();\n    }\n    accumulate_sha256([masked_contract_address, log_hash])\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedEncryptedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_encrypted_log_hash(\n            log_hash.contract_address,\n            log_hash.log_hash.randomness,\n            log_hash.log_hash.value\n        )\n    }\n}\n\npub fn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly. \npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<N>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n"},"241":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/partial_state_reference.nr","source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0], \n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial = PartialStateReference::empty();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n"},"246":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: Field = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point {\n            x: 0,\n            y: 0,\n            is_infinite: false\n        }\n    }\n}\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn pub_key_to_bytes(pk: Point) -> [u8; 64] {\n    assert(!pk.is_infinite, \"Point at infinity is not a valid public key.\");\n    let mut result = [0 as u8; 64];\n    let x_bytes = pk.x.to_be_bytes(32);\n    let y_bytes = pk.y.to_be_bytes(32);\n    for i in 0..32 {\n        result[i] = x_bytes[i];\n        result[i + 32] = y_bytes[i];\n    }\n    result\n}\n"},"247":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"249":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/state_reference.nr","source":"use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state = StateReference::empty();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n"},"25":{"path":"std/hash/mod.nr","source":"mod poseidon;\nmod mimc;\nmod poseidon2;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::sha256::{digest, sha256_var};\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul};\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n#[no_predicates]\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    let value = pedersen_commitment_with_separator(input, 0);\n    if (value.x == 0) & (value.y == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value.x, y: value.y, is_infinite: false }\n    }\n}\n\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        points[i] = EmbeddedCurveScalar::from_field(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let values = multi_scalar_mul(generators, points);\n    EmbeddedCurvePoint { x: values[0], y: values[1], is_infinite: values[2] as bool }\n}\n\n#[no_predicates]\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    EmbeddedCurvePoint { x: values[0], y: values[1], is_infinite: false }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    crate::assert_constant(starting_index);\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let v1 = pedersen_commitment_with_separator(input, separator);\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    multi_scalar_mul(\n        [length_generator[0], v1],\n        [EmbeddedCurveScalar { lo: N as Field, hi: 0 }, EmbeddedCurveScalar { lo: 1, hi: 0 }]\n    )[0]\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes(32).as_array();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n#[test]\nfn assert_pedersen_noir() {\n    // TODO: make this a fuzzer test once fuzzer supports curve-specific blackbox functions.\n    let input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    assert_eq(pedersen_hash_with_separator(input, 4), pedersen_hash_with_separator_noir(input, 4));\n    assert_eq(pedersen_commitment_with_separator(input, 4), pedersen_commitment_with_separator_noir(input, 4));\n}\n"},"263":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"struct Reader<N> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"273":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes = field.to_be_bytes(31);\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2 = field.to_be_bytes(31);\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n"},"275":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"289":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr","source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n"},"290":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId, hash::poseidon2_hash,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash([pub_keys_hash.to_field(), partial_address.to_field(), GENERATOR_INDEX__CONTRACT_ADDRESS_V1])\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x1b6ead051e7b42665064ca6cf1ec77da0a36d86e00d1ff6e44077966c0c3a9fa;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"30":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\nglobal RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) -> [Field; RATE] {\n        // zero-pad the cache\n        for i in 0..RATE {\n            if i >= self.cache_size {\n                self.cache[i] = 0;\n            }\n        }\n        // add the cache into sponge state\n        for i in 0..RATE {\n            self.state[i] += self.cache[i];\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n        // return `RATE` number of field elements from the sponge state.\n        let mut result = [0; RATE];\n        for i in 0..RATE {\n            result[i] = self.state[i];\n        }\n        result\n    }\n\n    fn absorb(&mut self, input: Field) {\n        if (!self.squeeze_mode) & (self.cache_size == RATE) {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            let _ = self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else if (!self.squeeze_mode) & (self.cache_size != RATE) {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        } else if self.squeeze_mode {\n            // If we're in squeeze mode, switch to absorb mode and add the input into the cache.\n            // N.B. I don't think this code path can be reached?!\n            self.cache[0] = input;\n            self.cache_size = 1;\n            self.squeeze_mode = false;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        if self.squeeze_mode & (self.cache_size == 0) {\n            // If we're in squeze mode and the cache is empty, there is nothing left to squeeze out of the sponge!\n            // Switch to absorb mode.\n            self.squeeze_mode = false;\n            self.cache_size = 0;\n        }\n        if !self.squeeze_mode {\n            // If we're in absorb mode, apply sponge permutation to compress the cache, populate cache with compressed\n            // state and switch to squeeze mode. Note: this code block will execute if the previous `if` condition was\n            // matched\n            let new_output_elements = self.perform_duplex();\n            self.squeeze_mode = true;\n            for i in 0..RATE {\n                self.cache[i] = new_output_elements[i];\n            }\n            self.cache_size = RATE;\n        }\n        // By this point, we should have a non-empty cache. Pop one item off the top of the cache and return it.\n        let result = self.cache[0];\n        for i in 1..RATE {\n            if i < self.cache_size {\n                self.cache[i - 1] = self.cache[i];\n            }\n        }\n        self.cache_size -= 1;\n        self.cache[self.cache_size] = 0;\n        result\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n"},"32":{"path":"std/merkle.nr","source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<let N: u32>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n"},"330":{"path":"/usr/src/noir-projects/aztec-nr/value-note/src/value_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n    address::AztecAddress, traits::{Deserialize, Serialize}, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::poseidon2_hash\n},\n    note::{note_header::NoteHeader, note_interface::NoteInterface, utils::compute_note_hash_for_consumption},\n    oracle::unsafe_rand::unsafe_rand, keys::getters::get_nsk_app, context::PrivateContext\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n// VALUE_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal VALUE_NOTE_BYTES_LEN: Field = 3 * 32 + 64;\n\n// docs:start:value-note-def\n#[aztec(note)]\nstruct ValueNote {\n    value: Field,\n   // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NoteInterface<VALUE_NOTE_LEN, VALUE_NOTE_BYTES_LEN> for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_note_hash_and_nullifier(self, context: &mut PrivateContext) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n\n    // docs:end:nullifier\n\n    fn compute_note_hash_and_nullifier_without_context(self) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, npk_m_hash: Field) -> Self {\n        let randomness = unsafe_rand();\n        let header = NoteHeader::empty();\n        ValueNote { value, npk_m_hash, randomness, header }\n    }\n}\n\nimpl Serialize<7> for ValueNote {\n    fn serialize(self) -> [Field; 7] {\n        let header = self.header.serialize();\n\n        [self.value, self.npk_m_hash, self.randomness, header[0], header[1], header[2], header[3]]\n    }\n}\n"},"362":{"path":"/usr/src/noir-projects/noir-contracts/contracts/inclusion_proofs_contract/src/main.nr","source":"// A demonstration of inclusion and non-inclusion proofs.\ncontract InclusionProofs {\n    use dep::aztec::prelude::{\n        AztecAddress, EthAddress, FunctionSelector, NoteHeader, NoteGetterOptions, PrivateContext, Map,\n        PrivateSet, PublicMutable\n    };\n    use dep::aztec::encrypted_logs::encrypted_note_emission::encode_and_encrypt_note;\n\n    use dep::aztec::protocol_types::{contract_class_id::ContractClassId, header::Header};\n    use dep::aztec::{note::note_getter_options::NoteStatus};\n    // docs:start:imports\n    // Imports are not needed as inclusion / non_inclusion proofs are accessible on the header.\n    // docs:end:imports\n    // docs:start:value_note_imports\n    use dep::value_note::value_note::ValueNote;\n    // docs:end:value_note_imports\n    #[aztec(storage)]\n    struct Storage {\n        private_values: Map<AztecAddress, PrivateSet<ValueNote>>,\n        public_value: PublicMutable<Field>,\n        public_unused_value: PublicMutable<Field>,\n    }\n\n    #[aztec(public)]\n    #[aztec(initializer)]\n    fn constructor(public_value: Field) {\n        storage.public_value.write(public_value);\n    }\n\n    // docs:start:create_note\n    // Creates a value note owned by `owner`.\n    #[aztec(private)]\n    fn create_note(owner: AztecAddress, value: Field) {\n        let owner_private_values = storage.private_values.at(owner);\n        let header = context.get_header();\n        let owner_npk_m_hash = header.get_npk_m_hash(&mut context, owner);\n\n        let mut note = ValueNote::new(value, owner_npk_m_hash);\n        owner_private_values.insert(&mut note).emit(encode_and_encrypt_note(&mut context, context.msg_sender(), owner));\n    }\n    // docs:end:create_note\n\n    #[aztec(private)]\n    fn test_note_inclusion(\n        owner: AztecAddress,\n        use_block_number: bool,\n        block_number: u32, // The block at which we'll prove that the note exists\n        nullified: bool\n    ) {\n        // docs:start:get_note_from_pxe\n        // 1) Get the note from PXE.\n        let private_values = storage.private_values.at(owner);\n        let mut options = NoteGetterOptions::new();\n        options = options.set_limit(1);\n        if (nullified) {\n            options = options.set_status(NoteStatus.ACTIVE_OR_NULLIFIED);\n        }\n        let note = private_values.get_notes(options).get_unchecked(0);\n        // docs:end:get_note_from_pxe\n\n        // 2) Prove the note inclusion\n        let header = if (use_block_number) {\n            context.get_header_at(block_number)\n        } else {\n            context.get_header()\n        };\n        // docs:start:prove_note_inclusion\n        header.prove_note_inclusion(note);\n        // docs:end:prove_note_inclusion\n    }\n\n    #[aztec(private)]\n    fn test_note_inclusion_fail_case(\n        owner: AztecAddress,\n        use_block_number: bool,\n        block_number: u32 // The block at which we'll prove that the note exists\n    ) {\n        let header = context.get_header();\n        let owner_npk_m_hash = header.get_npk_m_hash(&mut context, owner);\n        let mut note = ValueNote::new(1, owner_npk_m_hash);\n\n        let header = if (use_block_number) {\n            context.get_header_at(block_number)\n        } else {\n            context.get_header()\n        };\n\n        header.prove_note_inclusion(note);\n    }\n\n    // Proves that the note was not yet nullified at block `block_number`.\n    #[aztec(private)]\n    fn test_note_not_nullified(\n        owner: AztecAddress,\n        use_block_number: bool,\n        block_number: u32, // The block at which we'll prove that the nullifier does not exists\n        // Value below is only used when the note is not found --> used to test the nullifier non-inclusion failure\n        // case (it allows me to pass in random value of note nullifier - I cannot add and fetch a random note from PXE\n        // because PXE performs note commitment inclusion check when you add a new note).\n        fail_case: bool\n    ) {\n        // 1) Get the note from PXE\n        let private_values = storage.private_values.at(owner);\n        let mut options = NoteGetterOptions::new();\n        options = options.set_limit(1);\n        if (fail_case) {\n            options = options.set_status(NoteStatus.ACTIVE_OR_NULLIFIED);\n        }\n        let note = private_values.get_notes(options).get_unchecked(0);\n\n        let header = if (use_block_number) {\n            context.get_header_at(block_number)\n        } else {\n            context.get_header()\n        };\n        // docs:start:prove_note_not_nullified\n        header.prove_note_not_nullified(note, &mut context);\n        // docs:end:prove_note_not_nullified\n    }\n\n    #[aztec(private)]\n    fn test_note_validity(\n        owner: AztecAddress,\n        use_block_number: bool,\n        block_number: u32, // The block at which we'll prove that the note exists and is not nullified\n        nullified: bool\n    ) {\n        // 1) Get the note from PXE.\n        let private_values = storage.private_values.at(owner);\n        let mut options = NoteGetterOptions::new();\n        options = options.set_limit(1);\n        if (nullified) {\n            options = options.set_status(NoteStatus.ACTIVE_OR_NULLIFIED);\n        }\n        let note = private_values.get_notes(options).get(0);\n\n        // 2) Prove the note validity\n        let header = if (use_block_number) {\n            context.get_header_at(block_number)\n        } else {\n            context.get_header()\n        };\n        // docs:start:prove_note_validity\n        header.prove_note_validity(note, &mut context);\n        // docs:end:prove_note_validity\n    }\n\n    // docs:start:nullify_note\n    #[aztec(private)]\n    fn nullify_note(owner: AztecAddress) {\n        let private_values = storage.private_values.at(owner);\n        let mut options = NoteGetterOptions::new();\n        options = options.set_limit(1);\n        let notes = private_values.get_notes(options);\n        let note = notes.get(0);\n\n        private_values.remove(note);\n    }\n    // docs:end:nullify_note\n\n    // Proves nullifier existed at block `block_number`.\n    // Note: I am not getting a nullifier of the note that was created in this contract in this function because it is\n    //       currently not possible to obtain a nullified note from PXE.\n    #[aztec(private)]\n    fn test_nullifier_inclusion(\n        nullifier: Field,\n        use_block_number: bool,\n        block_number: u32 // The block at which we'll prove that the nullifier exists in the nullifier tree\n    ) {\n        let header = if (use_block_number) {\n            context.get_header_at(block_number)\n        } else {\n            context.get_header()\n        };\n        // docs:start:prove_nullifier_inclusion\n        header.prove_nullifier_inclusion(nullifier);\n        // docs:end:prove_nullifier_inclusion\n    }\n\n    #[aztec(public)]\n    fn push_nullifier_public(nullifier: Field) {\n        context.push_nullifier(nullifier, 0);\n    }\n\n    // Proves nullifier existed at latest block\n    #[aztec(public)]\n    fn test_nullifier_inclusion_from_public(nullifier: Field) {\n        assert(context.nullifier_exists(nullifier, context.this_address()));\n    }\n\n    #[aztec(private)]\n    fn test_storage_historical_read_unset_slot(block_number: u32 // The block at which we'll read the public storage value\n    ) {\n        let header = context.get_header_at(block_number);\n\n        assert_eq(\n            // docs:start:public_storage_historical_read\n            header.public_storage_historical_read(\n                storage.public_unused_value.storage_slot,\n                context.this_address()\n            // docs:end:public_storage_historical_read\n            ), 0\n        );\n    }\n\n    #[aztec(private)]\n    fn test_storage_historical_read(\n        expected: Field,\n        use_block_number: bool,\n        block_number: u32 // The block at which we'll read the public storage value\n    ) {\n        let header = if (use_block_number) {\n            context.get_header_at(block_number)\n        } else {\n            context.get_header()\n        };\n\n        let actual = header.public_storage_historical_read(storage.public_value.storage_slot, context.this_address());\n\n        assert_eq(actual, expected, \"Actual public value does not match expected\");\n    }\n\n    // Proves that a contract was publicly deployed and/or initialized at block `block_number`.\n    #[aztec(private)]\n    fn test_contract_inclusion(\n        contract_address: AztecAddress,\n        block_number: u32,\n        test_deployment: bool,\n        test_initialization: bool\n    ) {\n        let header = context.get_header_at(block_number);\n\n        if test_deployment {\n            // docs:start:prove_contract_deployment\n            header.prove_contract_deployment(contract_address);\n            // docs:end:prove_contract_deployment\n        }\n        if test_initialization {\n            // docs:start:prove_contract_initialization\n            header.prove_contract_initialization(contract_address);\n            // docs:end:prove_contract_initialization\n        }\n    }\n\n    // Proves that a contract was NOT publicly deployed and/or initialized at block `block_number`.\n    #[aztec(private)]\n    fn test_contract_non_inclusion(\n        contract_address: AztecAddress,\n        block_number: u32,\n        test_deployment: bool,\n        test_initialization: bool\n    ) {\n        let header = context.get_header_at(block_number);\n\n        if test_deployment {\n            // docs:start:prove_contract_non_deployment\n            header.prove_contract_non_deployment(contract_address);\n            // docs:end:prove_contract_non_deployment\n        }\n        if test_initialization {\n            // docs:start:prove_contract_non_initialization\n            header.prove_contract_non_initialization(contract_address);\n            // docs:end:prove_contract_non_initialization\n        }\n    }\n}\n"},"38":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n"},"4":{"path":"std/cmp.nr","source":"// docs:start:eq-trait\ntrait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\nimpl Eq for Field { fn eq(self, other: Field) -> bool { self == other } }\n\nimpl Eq for u64 { fn eq(self, other: u64) -> bool { self == other } }\nimpl Eq for u32 { fn eq(self, other: u32) -> bool { self == other } }\nimpl Eq for u8 { fn eq(self, other: u8) -> bool { self == other } }\nimpl Eq for u1 { fn eq(self, other: u1) -> bool { self == other } }\n\nimpl Eq for i8 { fn eq(self, other: i8) -> bool { self == other } }\nimpl Eq for i32 { fn eq(self, other: i32) -> bool { self == other } }\nimpl Eq for i64 { fn eq(self, other: i64) -> bool { self == other } }\n\nimpl Eq for () { fn eq(_self: Self, _other: ()) -> bool { true } }\nimpl Eq for bool { fn eq(self, other: bool) -> bool { self == other } }\n\nimpl<T, let N: u32> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T] where T: Eq {\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3) & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\nstruct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n// docs:start:ord-trait\ntrait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v1 } else { v2 }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v2 } else { v1 }\n}\n\nmod cmp_tests {\n    use crate::cmp::{min, max};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"},"47":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\nuse crate::println;\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\nstruct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_be_bytes(8);\n        let hi = self.hi.to_be_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_le_bytes(8);\n        let hi = self.hi.to_le_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    fn decode_ascii(ascii: u8) -> Field {\n        if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (U128::uconstrained_check_is_upper_ascii(ascii) as u8);\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        } as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;  \n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi*b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo*b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo+self.hi)*(b.lo+b.hi) - low + carry\n        } else {\n            self.lo*b.hi + self.hi*b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        q\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        r\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n        \n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 { \n    fn not(self) -> U128 {\n        U128 {\n            lo: (!(self.lo as u64)) as Field,\n            hi: (!(self.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitOr for U128 { \n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 { \n    fn shl(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    } \n}\n\nimpl Shr for U128 { \n    fn shr(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    } \n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c= b.to_le_bytes(17);\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        let (q,r) = a.unconstrained_div(b);\n        assert_eq(q, c);\n        assert_eq(r, d);\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        let (c,d ) = a.unconstrained_div(b);\n        assert_eq((c, d), (a, U128::zero()));\n\n        // Check where b is a multiple of a\n        let (c,d) = b.unconstrained_div(a);\n        assert_eq((c, d), (U128::zero(), b));\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        let (c,d)= a.unconstrained_div(b);\n        assert_eq((c, d), (U128::zero(), U128::zero()));\n\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        let (c,d )= a.unconstrained_div(b);\n        assert_eq((c, d), (U128::one(), U128::zero()));\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"5":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\nstruct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Get an element from the vector at the given index.\n    /// Panics if the given index points beyond the end of the vector (`self.len()`).\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len);\n        self.get_unchecked(index)\n    }\n\n    /// Get an element from the vector at the given index.\n    /// Responds with undefined data for `index` where `self.len < index < self.max_len()`.\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Write an element to the vector at the given index.\n    /// Panics if the given index points beyond the end of the vector (`self.len()`).\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Write an element to the vector at the given index.\n    /// Does not check whether the passed `index` is a valid index within the vector.\n    ///\n    /// Silently writes past the end of the vector for `index` where `self.len < index < self.max_len()`\n    /// Panics if the given index points beyond the maximum length of the vector (`self.max_len()`).\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        \n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen>  {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n    // TODO: Allow imports from \"super\"\n    use crate::collections::bounded_vec::BoundedVec;\n\n    #[test]\n    fn empty_equality() {\n        let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n        let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n        assert_eq(bounded_vec1, bounded_vec2);\n    }\n\n    #[test]\n    fn inequality() {\n        let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n        let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n        bounded_vec1.push(1);\n        bounded_vec2.push(2);\n\n        assert(bounded_vec1 != bounded_vec2);\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n}\n"},"64":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::{Point, pub_key_to_bytes},\n    utils::arr_copy_slice\n};\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret_fields = multi_scalar_mul([point], [secret]);\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/6061): make the func return Point struct directly\n    let shared_secret = pub_key_to_bytes(Point::new(shared_secret_fields[0], shared_secret_fields[1], false));\n    let mut shared_secret_bytes_with_separator = [0 as u8; 65];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[64] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nfn check_point_to_symmetric_key() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar::new(\n        0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    );\n    let point = Point::new(\n        0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        false\n    );\n\n    let key = point_to_symmetric_key(secret, point);\n    // The following value gets updated when running encrypt_buffer.test.ts with AZTEC_GENERATE_TEST_DATA=1\n    let expected_key = [\n        49, 167, 146, 222, 151, 129, 138, 184, 87, 210, 245, 249, 99, 100, 1, 59, 223, 180, 5, 99, 14, 7, 177, 236, 159, 203, 231, 72, 220, 180, 241, 23\n    ];\n    assert_eq(key, expected_key);\n}\n"},"65":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/getters.nr","source":"use dep::protocol_types::{\n    header::Header, abis::validation_requests::KeyValidationRequest, address::AztecAddress,\n    constants::CANONICAL_KEY_REGISTRY_ADDRESS, point::Point, storage::map::derive_storage_slot_in_map,\n    traits::is_empty\n};\nuse crate::{\n    context::PrivateContext,\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX, TAGGING_INDEX}},\n    state_vars::{shared_mutable::shared_mutable_private_getter::SharedMutablePrivateGetter}\n};\n\nglobal DELAY = 5;\n\n// docs:start:key-getters\ntrait KeyGetters {\n  fn get_npk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_ivpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_ovpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_tpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_npk_m_hash(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Field;\n}\n\nimpl KeyGetters for Header {\n    fn get_npk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, NULLIFIER_INDEX, self)\n    }\n\n    fn get_ivpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, INCOMING_INDEX, self)\n    }\n\n    fn get_ovpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, OUTGOING_INDEX, self)\n    }\n\n    fn get_tpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, TAGGING_INDEX, self)\n    }\n\n    fn get_npk_m_hash(self, context: &mut PrivateContext, address: AztecAddress) -> Field {\n        get_master_key(context, address, NULLIFIER_INDEX, self).hash()\n    }\n}\n// docs:end:key-getters\n\nfn get_master_key(\n    context: &mut PrivateContext,\n    address: AztecAddress,\n    key_index: Field,\n    header: Header\n) -> Point {\n    let key = fetch_key_from_registry(context, key_index, address, header);\n    if is_empty(key) {\n        // Keys were not registered in registry yet --> fetch key from PXE\n        let keys = fetch_and_constrain_keys(address);\n        // Return the corresponding to index\n        keys.get_key_by_index(key_index)\n    } else {\n        // Keys were registered --> return the key\n        key\n    }\n}\n\nfn fetch_key_from_registry(\n    context: &mut PrivateContext,\n    key_index: Field,\n    address: AztecAddress,\n    header: Header\n) -> Point {\n    let x_coordinate_map_slot = key_index * 2 + 1;\n    let y_coordinate_map_slot = x_coordinate_map_slot + 1;\n    let x_coordinate_derived_slot = derive_storage_slot_in_map(x_coordinate_map_slot, address);\n    let y_coordinate_derived_slot = derive_storage_slot_in_map(y_coordinate_map_slot, address);\n\n    let x_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        x_coordinate_derived_slot\n    );\n    let y_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        y_coordinate_derived_slot\n    );\n    let x_coordinate = x_coordinate_registry.get_value_in_private(header);\n    let y_coordinate = y_coordinate_registry.get_value_in_private(header);\n\n    Point::new(x_coordinate, y_coordinate, false)\n}\n\n// Passes only when keys were not rotated - is expected to be called only when keys were not registered yet\nfn fetch_and_constrain_keys(address: AztecAddress) -> PublicKeys {\n    let (public_keys, partial_address) = get_public_keys_and_partial_address(address);\n\n    let computed_address = AztecAddress::compute(public_keys.hash(), partial_address);\n\n    assert(computed_address.eq(address));\n\n    public_keys\n}\n\n// A helper function since requesting nsk_app is very common\n// TODO(#6543)\npub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n"},"66":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH, hash::poseidon2_hash,\n    point::Point, traits::{Deserialize, Serialize, Empty, is_empty}\n};\nuse crate::keys::constants::{NUM_KEY_TYPES, NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX};\n\nglobal PUBLIC_KEYS_LENGTH = 12;\n\nstruct PublicKeys {\n    npk_m: Point,\n    ivpk_m: Point,\n    ovpk_m: Point,\n    tpk_m: Point,\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m : Point::empty(),\n            ivpk_m : Point::empty(),\n            ovpk_m : Point::empty(),\n            tpk_m : Point::empty()\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        ( self.npk_m == other.npk_m ) &\n        ( self.ivpk_m == other.ivpk_m ) &\n        ( self.ovpk_m == other.ovpk_m ) &\n        ( self.tpk_m == other.tpk_m )\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash(\n                [\n                self.npk_m.x,\n                self.npk_m.y,\n                self.npk_m.is_infinite as Field,\n                self.ivpk_m.x,\n                self.ivpk_m.y,\n                self.ivpk_m.is_infinite as Field,\n                self.ovpk_m.x,\n                self.ovpk_m.y,\n                self.ovpk_m.is_infinite as Field,\n                self.tpk_m.x,\n                self.tpk_m.y,\n                self.tpk_m.is_infinite as Field,\n                GENERATOR_INDEX__PUBLIC_KEYS_HASH\n            ]\n            )\n        }\n        )\n    }\n\n    pub fn get_key_by_index(self, index: Field) -> Point {\n        assert(index as u8 < NUM_KEY_TYPES, \"Invalid key index\");\n        if index == NULLIFIER_INDEX {\n            self.npk_m\n        } else if index == INCOMING_INDEX {\n            self.ivpk_m\n        } else if index == OUTGOING_INDEX {\n            self.ovpk_m\n        } else {\n            self.tpk_m\n        }\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.x,\n            self.npk_m.y,\n            self.npk_m.is_infinite as Field,\n            self.ivpk_m.x,\n            self.ivpk_m.y,\n            self.ivpk_m.is_infinite as Field,\n            self.ovpk_m.x,\n            self.ovpk_m.y,\n            self.ovpk_m.is_infinite as Field,\n            self.tpk_m.x,\n            self.tpk_m.y,\n            self.tpk_m.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: Point::new(serialized[0], serialized[1], serialized[2] as bool),\n            ivpk_m: Point::new(serialized[3], serialized[4], serialized[5] as bool),\n            ovpk_m: Point::new(serialized[6], serialized[7], serialized[8] as bool),\n            tpk_m: Point::new(serialized[9], serialized[10], serialized[11] as bool)\n        }\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: Point { x: 1, y: 2, is_infinite: false },\n        ivpk_m: Point { x: 3, y: 4, is_infinite: false },\n        ovpk_m: Point { x: 5, y: 6, is_infinite: false },\n        tpk_m: Point { x: 7, y: 8, is_infinite: false }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x146f68c0e0ba4067d61a3304bbfdec0797d5df1357db6c01247c48bfb345c7d7;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nfn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nfn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: Point { x: 1, y: 2, is_infinite: false },\n        ivpk_m: Point { x: 3, y: 4, is_infinite: false },\n        ovpk_m: Point { x: 5, y: 6, is_infinite: false },\n        tpk_m: Point { x: 7, y: 8, is_infinite: false }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.x, deserialized.npk_m.x);\n    assert_eq(keys.npk_m.y, deserialized.npk_m.y);\n    assert_eq(keys.ivpk_m.x, deserialized.ivpk_m.x);\n    assert_eq(keys.ivpk_m.y, deserialized.ivpk_m.y);\n    assert_eq(keys.ovpk_m.x, deserialized.ovpk_m.x);\n    assert_eq(keys.ovpk_m.y, deserialized.ovpk_m.y);\n    assert_eq(keys.tpk_m.x, deserialized.tpk_m.x);\n    assert_eq(keys.tpk_m.y, deserialized.tpk_m.y);\n}\n"},"79":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/history/note_inclusion.nr","source":"use std::merkle::compute_merkle_root;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    note::{utils::compute_note_hash_for_consumption, note_interface::NoteInterface},\n    oracle::get_membership_witness::get_note_hash_membership_witness\n};\n\ntrait ProveNoteInclusion {\n    fn prove_note_inclusion<Note, N, M>(header: Header, note: Note) where Note: NoteInterface<N, M>;\n}\n\nimpl ProveNoteInclusion for Header {\n    fn prove_note_inclusion<Note, N, M>(self, note: Note) where Note: NoteInterface<N, M> {\n        // 1) Compute note_hash\n        let note_hash = compute_note_hash_for_consumption(note);\n\n        // 2) Get the membership witness of the note in the note hash tree\n        let witness = get_note_hash_membership_witness(self.global_variables.block_number as u32, note_hash);\n\n        // 3) Prove that the commitment is in the note hash tree\n        assert_eq(\n            self.state.partial.note_hash_tree.root, compute_merkle_root(note_hash, witness.index, witness.path), \"Proving note inclusion failed\"\n        );\n    }\n}\n"},"80":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::pedersen_hash, address::AztecAddress,\n    header::Header, utils::field::full_field_less_than\n};\nuse std::merkle::compute_merkle_root;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header { \n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf slot by siloing the storage slot with the contract address\n        let public_value_leaf_slot = pedersen_hash(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness of the slot\n        let witness = get_public_data_witness(\n            self.global_variables.block_number as u32,\n            public_value_leaf_slot\n        );\n\n        // 3) Extract the value from the witness leaf and check that the storage slot is correct\n        let preimage = witness.leaf_preimage;\n\n        // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n        // 1. The value is the same as the one in the witness\n        // 2. The value was never initialized and is zero\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_value_leaf_slot);\n        let is_next_greater_than = full_field_less_than(public_value_leaf_slot, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_value_leaf_slot, \"Public data slot doesn't match witness\");\n            preimage.value\n        };\n\n        // 4) Prove that the leaf exists in the public data tree. Note that `hash` returns not just the hash of the value\n        // but also the metadata (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == compute_merkle_root(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        value\n    }\n}\n"},"81":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr","source":"use std::merkle::compute_merkle_root;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::NoteInterface}\n};\n\ntrait ProveNullifierInclusion {\n    fn prove_nullifier_inclusion(header: Header, nullifier: Field);\n}\n\nimpl ProveNullifierInclusion for Header {\n    fn prove_nullifier_inclusion(self, nullifier: Field) {\n        // 1) Get the membership witness of the nullifier\n        let witness = get_nullifier_membership_witness(self.global_variables.block_number as u32, nullifier);\n\n        // 2) Check that the witness we obtained matches the nullifier\n        assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n\n        // 3) Compute the nullifier tree leaf\n        let nullifier_leaf = witness.leaf_preimage.hash();\n\n        // 4) Prove that the nullifier is in the nullifier tree\n        assert(\n            self.state.partial.nullifier_tree.root\n            == compute_merkle_root(nullifier_leaf, witness.index, witness.path), \"Proving nullifier inclusion failed\"\n        );\n        // --> Now we have traversed the trees all the way up to archive root and verified that the nullifier\n        //     was included in the nullifier tree.\n    }\n}\n\ntrait ProveNoteIsNullified {\n    fn prove_note_is_nullified<Note, N, M>(header: Header, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N, M>;\n}\n\nimpl ProveNoteIsNullified for Header {\n    // docs:start:prove_note_is_nullified\n    fn prove_note_is_nullified<Note, N, M>(self, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N, M> {\n        let nullifier = compute_siloed_nullifier(note, context);\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n    // docs:end:prove_note_is_nullified\n}\n"},"82":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/history/note_validity.nr","source":"use crate::{context::PrivateContext, note::note_interface::NoteInterface};\n\nuse dep::protocol_types::header::Header;\n\ntrait ProveNoteValidity {\n    fn prove_note_validity<Note, N, M>(header: Header, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N, M>;\n}\n\nimpl ProveNoteValidity for Header {\n    fn prove_note_validity<Note, N, M>(self, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N, M> {\n        self.prove_note_inclusion(note);\n        self.prove_note_not_nullified(note, context);\n    }\n}\n\n"},"83":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/history/contract_inclusion.nr","source":"use dep::protocol_types::{\n    header::Header, address::AztecAddress, hash::compute_siloed_nullifier,\n    constants::DEPLOYER_CONTRACT_ADDRESS\n};\n\ntrait ProveContractDeployment {\n    fn prove_contract_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractDeployment for Header {\n    fn prove_contract_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(\n            AztecAddress::from_field(DEPLOYER_CONTRACT_ADDRESS),\n            contract_address.to_field()\n        );\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonDeployment {\n    fn prove_contract_non_deployment(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonDeployment for Header {\n    fn prove_contract_non_deployment(self, contract_address: AztecAddress) {\n        // Compute deployment nullifier\n        let nullifier = compute_siloed_nullifier(\n            AztecAddress::from_field(DEPLOYER_CONTRACT_ADDRESS),\n            contract_address.to_field()\n        );\n\n        // docs:start:prove_nullifier_non_inclusion\n        self.prove_nullifier_non_inclusion(nullifier);\n        // docs:end:prove_nullifier_non_inclusion\n    }\n}\n\ntrait ProveContractInitialization {\n    fn prove_contract_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractInitialization for Header {\n    fn prove_contract_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n}\n\ntrait ProveContractNonInitialization {\n    fn prove_contract_non_initialization(header: Header, contract_address: AztecAddress);\n}\n\nimpl ProveContractNonInitialization for Header {\n    fn prove_contract_non_initialization(self, contract_address: AztecAddress) {\n        // Compute initialization nullifier\n        let nullifier = compute_siloed_nullifier(contract_address, contract_address.to_field());\n\n        self.prove_nullifier_non_inclusion(nullifier);\n    }\n}\n"},"84":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/history/nullifier_non_inclusion.nr","source":"use std::merkle::compute_merkle_root;\nuse dep::protocol_types::{header::Header, utils::field::{full_field_less_than, full_field_greater_than}};\nuse crate::{\n    context::PrivateContext, note::{utils::compute_siloed_nullifier, note_interface::NoteInterface},\n    oracle::get_nullifier_membership_witness::get_low_nullifier_membership_witness\n};\n\ntrait ProveNullifierNonInclusion {\n    fn prove_nullifier_non_inclusion(header: Header, nullifier: Field);\n}\n\nimpl ProveNullifierNonInclusion for Header {\n    fn prove_nullifier_non_inclusion(self, nullifier: Field) {\n        // 1) Get the membership witness of a low nullifier of the nullifier\n        let witness = get_low_nullifier_membership_witness(self.global_variables.block_number as u32, nullifier);\n\n        // 2) Prove that the nullifier is not included in the nullifier tree\n\n        // 2.a) Compute the low nullifier leaf and prove that it is in the nullifier tree\n        let low_nullifier_leaf = witness.leaf_preimage.hash();\n        assert(\n            self.state.partial.nullifier_tree.root\n            == compute_merkle_root(low_nullifier_leaf, witness.index, witness.path), \"Proving nullifier non-inclusion failed: Could not prove low nullifier inclusion\"\n        );\n\n        // 2.b) Prove that the low nullifier is smaller than the nullifier\n        assert(\n            full_field_less_than(witness.leaf_preimage.nullifier, nullifier), \"Proving nullifier non-inclusion failed: low_nullifier.value < nullifier.value check failed\"\n        );\n\n        // 2.c) Prove that the low nullifier is pointing \"over\" the nullifier to prove that the nullifier is not\n        // included in the nullifier tree (or to 0 if the to-be-inserted nullifier is the largest of all)\n        assert(\n            full_field_greater_than(witness.leaf_preimage.next_nullifier, nullifier)\n            | (witness.leaf_preimage.next_index == 0), \"Proving nullifier non-inclusion failed: low_nullifier.next_value > nullifier.value check failed\"\n        );\n        // --> Now we have traversed the trees all the way up to archive root and verified that the nullifier\n        //     was not yet included in the nullifier tree.\n    }\n}\n\ntrait ProveNoteNotNullified {\n    fn prove_note_not_nullified<Note, N, M>(header: Header, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N, M>;\n}\n\nimpl ProveNoteNotNullified for Header {\n    // docs:start:prove_note_not_nullified\n    fn prove_note_not_nullified<Note, N, M>(self, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N, M> {\n        let nullifier = compute_siloed_nullifier(note, context);\n\n        self.prove_nullifier_non_inclusion(nullifier);\n    }\n    // docs:end:prove_note_not_nullified\n}\n"},"94":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, set_public_teardown_function_call_internal,\n    parse_public_call_stack_item_from_oracle\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    caller_context::CallerContext, function_selector::FunctionSelector,\n    max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_function_hash: Field,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    // TODO(#7112): This function is called with non-zero note hash only in 1 of 25 cases in aztec-packages repo\n    // - consider creating a separate function with 1 arg for the zero note hash case.\n    fn push_nullifier(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            public_teardown_function_hash: self.public_teardown_function_hash,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one \n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<M>(&mut self, randomness: Field, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<M>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.start_side_effect_counter, start_side_effect_counter);\n        let end_side_effect_counter = item.public_inputs.end_side_effect_counter;\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        let mut caller_context = CallerContext::empty();\n        caller_context.is_static_call = self.inputs.call_context.is_static_call;\n        if is_delegate_call {\n            caller_context.msg_sender = self.inputs.call_context.msg_sender;\n            caller_context.storage_contract_address = self.inputs.call_context.storage_contract_address;\n        }\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            target: item.contract_address,\n            call_context: item.public_inputs.call_context,\n            function_data: item.function_data,\n            args_hash: item.public_inputs.args_hash,\n            returns_hash: item.public_inputs.returns_hash,\n            caller_context,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(item.public_inputs.returns_hash)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_call_stack_hashes.push(item.get_compressed().hash());\n    }\n\n    pub fn set_public_teardown_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_teardown_function_hash = item.get_compressed().hash();\n    }\n\n    fn validate_call_stack_item_from_oracle(\n        self,\n        item: PublicCallStackItem,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"95":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::inputs::public_context_inputs::PublicContextInputs;\nuse crate::context::gas::GasOpts;\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs) -> Self {\n        PublicContext { inputs }\n    }\n\n    pub fn emit_unencrypted_log<T, N>(&mut self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0);\n    }\n\n    fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        assert(false, \"'delegate_call_public_function' not implemented!\");\n        FunctionReturns::new([0; RETURNS_COUNT])\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        // Cannot nullify pending commitments in AVM, so `nullified_commitment` is not used\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(self) -> AztecAddress {\n        sender()\n    }\n    fn selector(self) -> FunctionSelector {\n        FunctionSelector::from_u32(function_selector())\n    }\n    fn get_args_hash(self) -> Field {\n        self.inputs.args_hash\n    }\n    fn transaction_fee(self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(self) -> Field {\n        chain_id()\n    }\n    fn version(self) -> Field {\n        version()\n    }\n    fn block_number(self) -> Field {\n        block_number()\n    }\n    fn timestamp(self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(self) -> Field {\n        da_gas_left()\n    }\n\n    fn raw_storage_read<N>(_self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(storage_slot)\n    }\n\n    fn storage_read<T, N>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<N>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        storage_write(storage_slot, values);\n    }\n\n    fn storage_write<T, N>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    let MAX_POSSIBLE_FIELD: Field = 0 - 1;\n    [\n        user_gas.l2_gas.unwrap_or(MAX_POSSIBLE_FIELD),\n        user_gas.da_gas.unwrap_or(MAX_POSSIBLE_FIELD)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/6420): reconsider.\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\nunconstrained fn function_selector() -> u32 {\n    function_selector_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<RET_SIZE>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<RET_SIZE>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_opcode(storage_slot, N)\n}\n\nunconstrained fn storage_write<N>(storage_slot: Field, values: [Field; N]) {\n    storage_write_opcode(storage_slot, values);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(PublicContextInputs::empty())\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n#[oracle(avmOpcodeFunctionSelector)]\nunconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<RET_SIZE>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<RET_SIZE>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode<N>(storage_slot: Field, length: Field) -> [Field; N] {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode<N>(storage_slot: Field, values: [Field; N]) {}\n\nstruct FunctionReturns<N> {\n    values: [Field; N]\n}\n\nimpl<N> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn assert_empty(returns: FunctionReturns<0>) {\n        assert(returns.values.len() == 0);\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n"}}}