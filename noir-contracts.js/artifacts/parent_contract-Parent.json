{"transpiled":true,"noir_version":"0.31.0+6237d96a0bc23a5ed656e7ba172fb57facd9c807","name":"Parent","functions":[{"name":"enqueue_call_to_pub_entry_point","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"target_value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"7ZxhT9swEIb/Sz4j5DuffTZ/ZZqmAmWqhAqiZdJU8d/ndIlT0qwekNGzbp9o6Dm552mavI7k7prb5fXz92+r9d3Dprn6smvuH24W29XDOm3tGnD7/20eF+t2c7NdPG2bK3PRLNe36e/LRXO3ul82V5bT66M69BC7UvQEuRoQJqotE3bVNphYqI4UqauOztlcjWRevl404GttnD+vcQKGrprQwgcbDx9p3AY02aHzuTrSft/x3+0bzdS+KXjbjXGGYuEIECEfIr0+EJ+OMdGQcb1Ja4L5zNMLQTjtrOck4iy0uSOIaML4/LGzHMOFU8egOY6B+doA0aI9/akhWN+rRXARxi25M7TkweaWvC+ddzR87ckP+waa6oW5p+UwXCJSV3tYrwmWNcEGTbBREaw1mmBBEyxqgrWaYEk8rMu9WG+4CMtdcYCDcNpKOu7bc26bEYdq8G/WKD+bVaFRfuqrQqP8PFmFRvlJtQqN8jNwDRpJfrquQqP83F6FRvkzgio0yp9rVKGRFGvk/LAfmN0rja0azTOTghrNs42CGs0ziIIazbOCghrNSf+0Gqc5vRfUaE7kBTWaU3ZBjebkHIzr2w7oj9TQfzV/UqM5DRfUaE7DBTWa03BBjeY0XFCjOQ2fVuM1p+GCGs1puKBGcxouqJGfhj2FrMa7ghpLg0d4paaFJU2w8hPrjLDyM+iMsPJT5Yyw8nPijLDyk998sCw/y80IKz+dzQgrP2/NCHuWBJXXOSGEgIVyG8D35Ta48ZIlpgoIeCCI6MYETj5BtH1oRzJw9Bl48QRkrB8ImMcELJ8ADWYCZDMmCBUQhJAJrMMxQZRPEH0+i1I3dkQQjHgCZ0I+ixzw+JscznGnj3ldR3pNRy2hvJbOcdeMMUeEdCUoRIRDAAMHq5t5f9sPVDkA4uXk1cLbfpQ/XCGU7rntILqcXoYJDPkxUxw9wOrGxfeNm14c+Bfj4J3j8M3j0taPxdNqcX2/bH+Ko33zeX3T/zJH2tz+fPz9Tqr9BQ=="},{"name":"enqueue_calls_to_pub_entry_point","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"target_value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"7ZzbbuIwEIbfJddV5RmPT32V1WpFTyukCqpCV1pVffcNLDE00Mw29TZjDVclxU7m+wj4dyT7pbm9u37++WO+uF+umqtvL83D8ma2ni8X7dFLA277v9XjbLE5XK1nT+vmylw0d4vb9u/rRXM/f7hrrmxoXx+1Qw9p1xQ9QW4NCCda20C4a22jSUzrRIl2rZNzNrdGMq/fLxrwtRYevq5wggC71oQWPll4/EzhNqLJDp3PrRNtz53+37nRnDq3c67r44L1zBUgQb5E+/pAfHuNEwUZ15m0JpqvvL0QhNMWvScRi9DmiiChif37xxa5hotD16AS18D82wDJoh3+1BCs79QiuAT9ktwEJXmwuSTvufuO9l978vtzA52qJYSONsR93W1VW1ivCTZogo2aYJMiWGs0wYImWNQEazXBknhY57vW1pvAwoZd4wgH4XQj6bhuH3LZAXHfGvyHNcrPZlVolJ/6qtAoP09WoVF+Uq1Co/wMXINGkp+uq9AoP7dXoVH+jKAKjfLnGlVoJMUaQ37YDyG4Nxo3ajTPTBg1mmcbjBrNMwhGjeZZAaNGc9IfVuM0p3dGjeZEzqjRnLIZNZqTczSuKzuiP1JDZzXvqdGchhk1mtMwo0ZzGmbUaE7DjBrNaXhYjdechhk1mtMwo0ZzGmbUyE/DnmJW4x2jxtLeI7xRs4ElTbDyE2tBWPkZtCCs/FRZEFZ+TiwIKz/5lYMN8rNcQVj56awgrPy8VRB2kgSV1zkhxIhMcxvBd81tdP0lS4EqIAh7goSuT+DkEyTbhXYkA0efgRdPQMb6PUEIfYIgnwANZgIMpk8QKyCIMRNYh32CJJ8g+XwXOUO2RxCNeAJnYr6LHIT+NzlOMdKnvK6jfU1HJaG8kqYYNVPKEaH9JWAiwiGAgYPVzWE77EeqHeD0mBmoG6ZcO2KxALUspo9eFW0QTlt064AYi9AObh0QU5FrDG4dkEyJaxTdOiDBBCVNtaQxoSZYqwmWNME6TbBeE2zQBBs1wSZFsGCMeNoaFi+BkZ/O6vAoP/jV4VF+pqzDI509FvEoPwnX4VF+yK7Do/z8XodH+VODOjzKn3VU4RE0z2eGV9sBaJ6jcG40zzs4N5rnEpwbOrt5143mzM+50ZzjOTeasznnRnPe5txoztDDa8sANedizo3mXMy50ZyLOTeaczHnhs5u3nWjORdzbjTnYs6N5lzMudGcizk38nNxuTWAYOUn3ZK08rNrSVr5abQkrfx8WZKWVNHKz4AlaeWnupK08nNaSVr5yask7SRZquQWA0CmAoTBPQaAQD7C8CYDQCgegdllAMjKRxjeZgCIKkAY3GcAyMlHGN5oAMiLR2B2GgCaYswfXtcPFAXWNMX4WXKtPuLlSQRvu17+cElOO3ZtOtHl6QdUECA/ukm9h0K7fmlcv9OPQf6hH4zshyP6xThCZjLjZG76pXH9Rsnc9IOR/T4usz36NXuaz64f7lZtn82bz4ub9Xy52B2ufz/+fadt+wc="},{"name":"pub_entry_point_twice","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"init_value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAC/72WvW4TQRDH9xzbsbF9lmzH8ffX3TnxR0hiRBokGhQpVYSoaCgQAQmJAgENZR4B8QIU1Eg0CCSegLdIR0lDz87M7v3vbGTpXPik8+3N/H87M7uXnfhqR6lcVumrq8yV0RblKm3MOXTfV3akByl9O65yrMnlCfgOSEcTpAJDKLERk+bRDk3Po7T+yY70jxsomTaXuUuOjATISiJq16cAHDYfRDLcMcM8/YiGAuZ8eHyVObm6fHNz+mny/eH5t+vrx0+0uSBzF+jWisM7vy/e/3j94cHN349/BCyKoki3z0koM7u9SqIo0Z0Kp6PXwtKrCl+Lce6WlJAxJZSClBhVCcWURJM3SH4DBJ7IsBguZAkLWYwvZAEL6YqoJENV5rhURxnysmhcGSoXnkoYzEWwSjxYebFnCkubQEUzmWPEuxBnZZryahKrHofM1Uw4TZVcAtCwHuZWQ271eG57WIi6nvBSP/dFXDPiBi/IPo2ANURTlyGjz2G2aJNREjSBNoE2DfoWZou2GCVBC2gLaMug72C2aJtRErSBtoG25bmKNNYjOtoVzBbtMEqCDtAO0I5BBzBbtMsoCbpAu0C7Bn0Gs0V7jJKgB7QHtGfQpzBbtM8oCfpA+0D7Bn0Fs0UHjJJgAHQAdLC6shsjnfWITvAFzBYdMkqCIdAh0OFqtGG4HGsQHe0lzBYdMUqCEdAR0NFqtFG4HAmRRnKkvR7RNQ1htqjHKAk8oB5Qj57Eqa84bGoMKpww9kghtQrssaNnTEfajM+h/HioQGDPcB5OswCiAxxah1keHhr9xByKU4eFUzLRzRl/kTebMTHTwMrGCCyOlBjJaSMc0JO+rs+RtJYSPnNMtbVIk8DJXYmf6Uk9CotOIl+qz9p15DJ/hmmYy7auLG+T2VBVwb8e2Lvy0t4hlOtHPTY1L9xH6tR+JDMsi78hEvGE+XnIz4/nV0d+S1sy5mC0iGPIzXYHZpMjH9ckDBYg2CQebMwdvWw6us04sDPEO7rZyfFqEsueTIhXsUFV/hptTmnkNI3ntOtHPTsmNxLNwg4+g3wmmqkM/480kiPN5EhrK4m1kyOd5Eg3OdJLjvS3gmxQ/mAr5Q+3Uv52vrHReoRKdS5wGNQYVPG/c2XU0mmnMmO008451Dwe6kjgmQyth06bI4iOcaicSK85MfpT02kX0mkXZKKbMz6XN1suMYvAym4jsDhSYiSnjXBMT/01OfciaS0lfGZbd6TTTnCiTuJn7SaeCtornc9zru0RjZbba2Bkc65yHrYRnpBHNH2KG23jF93/AGSVPNWbEAAA","debug_symbols":"zdztaptHEMXxe9FnU3ZednfGt1JKURKnCIwcYqVQjO+9Ui25hth9KDz+e77FyZpzIPmdBDzxw+bLzacff/y+23+9u99c//qwub37vD3s7vbHjx427Rfxf372/tt2f/qJ+8P2+2FzLW7tanOz/3L8Yc/+eLX5uru92VzbbI9XP73WoXZ+raPL8+vTJ/70OGY/v43056eS9vjb1alPX6FPV3nuM5b6iMelkGS8fPxUaFQrNKsVimqFslghbdUKabVCXq1QNfZajb1WY6/V2Fs19ibVClXbIbNqhaoNo1X7B5pVW2qrttRWbamt2lJ7taX2akvt1Zbaqy21V1tqr7bUXm2pvdpSe7Wl9mpL3astda+21L3aUvf3XeqnDAcyOpAxgIw1Vm/OvGTMfCUjgIx8/4zRgAwBMhTIMCDDgYwOZAwgA3A+AOcDcD4B5xNwPgHnE3A+AecTcD4B5xNwPgHnE3AegPMAnAfgPADnATgPwHkAzgNwHoDzAJwn4DwB5wk4T8B5As4TcJ6A8wScJ+A8AefSGhEiRIgSIUaEOBHSiZBBhEwiJIgQQrwQ4oUQL4R4IcQLIV4I8UKIF0K8EOKFEK+EeCXEKyFeCfFKiFdCvBLilRCvhHglxBsh3gjxRog3QrwR4o0Qb4R4I8QbId4I8U6Id0K8E+KdEO+EeCfEOyHeCfFOiHdCfCfEd0J8J8R3QnwnxHdCfCfEE5d0QpzSCXFLJ8QxnRDXdEKc0wlxTyfEQZ0QF3VCnNQJcVMnxFGdEFd1QpzVCXFXJ8RhnRCXdUKc1glxWyfEcZ2scl0XOi4hMfRlyP96fG4U5RpltUar3Pmt22hxpYb4QqPjFynG83OV05v/6nR8Yv3F81f+dC/fEX5IK1ul1dsxrzxPv/z+SfZ//2io+aWUVyzVK5YaFUvNiqWiYqksWOqNg86hfvm8l397vzHo636TKSnXSMs1snKNvFyjXq7RKNdolmsU5RplsUbaqm22tmqbra3aZmurttnaqm22tmqbra3aZmurttnaqm22tnKbLeU2W8pttpTbbCm32VJus6XcZku5zZb33exzSBAhCYRoI0LW2L+Fr3KoKhFiRIgTIZ0IGUTIJEKCCEkgxBoRQog3QrwR4o0Qb4R4I8QbId4I8UaId0K8E+KdEO+EeCfEOyHeCfFOiHdCvBPiOyG+E+I7Ib4T4jshvhPiOyG+E+I7Ib4T4gchfhDiByF+EOIHIX4Q4gchfhDiByF+EOInIX4S4ichfhLiJyF+EuInIX4S4ichfhLigxAfhPggxAchPgjxQYgPQnwQ4oMQH4T4JMQnIT4J8UmIT0J8EuKTEJ+E+CTEJyDeWiNChAhRIsSIECdCOhEyiJBJhAQRQogXQrwQ4oUQL4R4IcQLIV4I8UKIF0K8EOKVEE/c3Blxc2fEzZ0RN3dG3NwZcXNnxM2drXJzt+Z3QLBVDvRWbbTKNd+6jaRco8WVCmkLjVb/DhG2fFj4Ia18lVar/s95W75c/IhSo2KpWbFUVCyVtUodP/pz+323/XR7c3/8nNMv/th/Puzu9ucPD399e/qV49u/AQ=="},{"name":"private_static_call","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"enqueue_calls_to_child_with_nested_last","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":""},{"name":"enqueue_static_call_to_pub_function","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"7ZxhT9swEIb/Sz4j5Duf72z+yjRNBcpUCRUEZdKE+O9LWOyENOABHr3I/dSkPSfv8zaxX6dyH5vL9fnDzx+b7dXNfXP27bG5vrlY7TY323bvsQF+fu/+drXtdu93q7tdc2ZOmvX2sn19OmmuNtfr5sxKu71XhwyhL0UmSNWAMFNthbCvtt6ETHWgQH11cM6maiTz9P2kAVmqcP91wgkE+mpCC58UHj4j3Ho0yUPHqTpQd2w0//HYMHfs4MVF2OByZ4DOkL683RYan2NGkOHopDXy8oLpFKE6RfYAitygyJvcLehYYvX40FE/KddPxsdqAvfJOxGddtqS/Q5yCVo2lGjHHWffR0gRRwO8dQ5fhMNhOoc49/a3hmDTbY/QyptKCgeQxGCTJGbIXHc0dO3Ew7UBNKdFJNKKH4YBCLaDtaYmWKgJFmuCtTXBUk2wriZYrglWaoL1NcHqT1COY7VlI1nYOM3yMErinUn7ulniswgQxKEa+L02kv5stggb9ae+RdioP08uwkb9SXURNtLRxhI26k/Xi7BRf25fhI36ZwSLsFH/XGMRNtY8i5H0ywaIuBc2tta4mmcmGWtqnm1krKl5BpGxpuZZQcYaOlrzmjU1p/eMNTUn8ow1NafsjDU1J2dvIiV45D1rak7Db1vDNafhjDU1p+GMNTWn4Yw1NafhjDV0tOY1a2pOwxlrak7DGWv0p2Emn6xhl7HG0uAjvLCmg9WfbwvC6k+s5WBFfwYtCKs/VRaE1Z8TC8LqT34FYakmWP3prCCs/rxVEPYgCSqtpULwHjPl1gPHcuudH5d3BH4BBDIQBHRTgqCfINgY2pEMTL8Db9QTkLE8EIhMCUA/ARpMBChmSoALIPA+EViHUwKrnyBwuoqcITslIPUEzvh0FTmQvTv5ECN9SIsX2m3ak8T6JB1i1AwhRYS2J8hEhDGAgdF6ZXke9r1fOADy6eyoyTa24vEymHbM7Rr50/klyyCQHjOFyQOsvl34WLv5Jbr/0A4+2A7f3a7d+7W626zOr9fdH6h0Hz5sL+L/qbS7u9+3fz9pa/8A"},{"name":"enqueue_call_to_child_twice","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"target_value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"7Zxvb9owEIe/S15Xk+98/tevMk0TbemEVEFV6KSp6ndfYMTQQHNr6i1nHa8K7Znc8xDIz6nsl+ZufvP84/tieb9aN9dfX5qH1e1ss1gt22cvDbjd79aPs+X26Xoze9o01+aqmS/v2p+vV8394mHeXNvQPj6pQw9pX4qeIFcDwplqGwj31TaaxFQnSrSvTs7ZXI1kXr9dNeBrbTz8v8YJAuyrCS18svH4mcZtRJMdOp+rE+1eO/2710Zz7rUJyGY1CMwRIEE+RPv4SHx7jDMNGdeZtCYa7l0ysasmcJ98lxCk05Y8JxGL0OaOIKGJ/fPHFjmGi0PHoBLHwPzdAMmiHX7XEKzv1CK4BP2W3AQtebC5Je+5844OH3vyh9cGOtdLCB1tiIeviLarHazXBBs0wUZNsEkRrDWaYEETLGqCtZpgSROs/ATlfFdtvQksbNgXRzhK4ltJp337kNsOiIdq8B/WKD+bVaFRfuqrQqP8PFmFRvlJtQaNJD8DV6FRfrquQqP83F6FRvkzgio00kVjCY2aZzEh/2cDQnBvNG7VaJ6ZMGo0zzYYNZpnEIwazbOCYTVOc9Jn1GhO74wazYmcUaM5ZTNqSLGaaFzXdkR/okZzGmbUaE7DjBrNaZhRozkNM2o0p+FhNV5zGmbUaE7DjBrNaZhRozkNM2pIvBpPMavxjlFj6eAR3qjZwsrPtwVh5SfWgrDyM2hBWPmpsiCs/JxYDjbIT34FYeVnuYKw8tNZQVj5easgLE0Bmxd1IcSITLmN4LtyG11/fVZwFRCEA0FC1yfw8gmS7UI7koGT9yCIJyBj/YEghD5BlE+ABjMBBtMnSBUQxJgJrMMeQTTyCZLPZ5EzZPsEIJ7AmZjPIgeh/0mOU1zpU17X0T6mk5asvJamuGqmlCNC+03ARIRjAANHS7nD7rIfz180MWQA6xwLUMvC++hV0QbptCW3GYixCO3gNgMxFTnG4DYDyZQ4RtFtBhJM0NJUKwITaoK1mmBJE6zTBOs1wQZNsFETbFIEC8aoopWfoWpY6QRGfjyrw6P85FeHR7p4LOJRfl6tw6P8KFyHR/kpuw6P8gN8HR7lzw2q8AjyZx11eNQ8nxlemgegeY7CudE87+Dc0MXNu240zw84N5ozP+dGc47n3GjO5pwbzXmbcYOaM/TwQjRAzbmYc6M5F3NuNOdizg1d3LzrRnMu5txozsWcG825mHOjORdzbjTnYsaNlZ+Lyy0YBCs/6ZaklZ9dS9LKT6MlaUkVrfzEWJJWfgYsSSs/1ZWklZ/TStLKT14FaWmSLFVyPwIgqABhcEMCIJSPMLwjAZAVj8BsSQBE8hGG9yQAchUgDG5KAOTlIwzvSgAUxCMw2xIATXHNH94EACjJ68lNcf0suTMB4pezWr3tRvnjJTnttWs7iL6cv3kHAfKtm9S7KbQfl8aNO3/T5y/GwchxOGJcjCNkJjNO5nZcGjdulMztOBg57uMy22c/Z0+L2c3DfN2O2f7xeXm7WayW+6ebX49//tLW/gY="},{"name":"public_nested_static_call","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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"},{"name":"entry_point","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":""},{"name":"pub_entry_point","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"init_value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAC/52Vu47TQBSGx1nbSYjtSFlv7hcnsUPouAhKGoREtaKkoUAsSEgUCGgo9xEQL0BBjUSDQOIJeIvtKGnomXMZ//ZGipS1NM7xmf87t0gzuTkyphUa+8yMPoH1mMRYZ8ujdd84yxoNu7zEeM6VcABeBekoQKNQwoiPGJ+tIwrPlm9f4cq+ksJI2FZwlzYCSRBKIaaZUwJO2y4qFR6p2aaXaChhK8dOboKbZ6dvL259vvHj8cPv5+dPnlp3R2J3aFnF9s6fRx9+vvn44OLfp78CRqKIaOVchNHo7olFEdNqlOHos3Pp05SfUZ27Ji0E2kJcNMRpYjQTi6atSPsKCHYqZlQOMsYgo/ogOxhkIqJYTNPlvNRHF/KuaBIxTYKdXpksQbJePVn39ok25muiSIN5Km5C3JQwXTGrRezueOT2gzKMj1DHdqVlbSFqS+u1HWMQqQ14an9PRByquM8DoQ76wPqiScVk9AXcDh0wSoIB0AHQgaLv4HbokFESDIEOgQ4VfQ+3Q0eMkmAEdAR0JL+7SH8/YrOdwe3QMaMkGAMdAx0rmsHt0AmjJJgAnQCdKPocbodOGSXBFOgU6FTRZ3A7dMYoCWZAZ0Bnir6G26FzRkkwBzoHOt+d7JWR8X7EFvgSbocuGCXBAugC6GI326Icxx7EZnsFt0MzRkmQAc2AZrvZsnIcByL9w5HRfsT2tITboUtGSbAEugRKSEov8w2HjYAGJ4w7UlhYuGPHRvQr18yKU63qqdYCL8V0O3SarSEqcGhtQjY3qr+uh+LWY+GWXLS4kK/y5dolZls4WY7EstEQJ226DNTJhmbzpVLWpYLvedptWrkkcHL36mf6oTumflmspPummyO3+assQx93dTX5b9I/VG8ujs0WZWqsyRz+pvUfORMiZjwJAAA=","debug_symbols":"zdzvahpREAXwd9nPUnb+3TvXVymlmMQUQTREUyjiu3etrgi1lRDnZD6uTnIOJL8hkMFd9zR/ePvxfbF6Xm+66dddt1w/zraL9Wp42nX9F9I/r25eZqvDC5vt7HXbTb36pJuvnrop9Sr7Sfe8WM67qdR+P/lrmAvLaZqL0Xm62ZVhr3aa9abnUWqy/zY51LGP1zGmc51yqw7p+K2dml8OH/uUZH1qsj6erE/L1Yf7ZH04WR9N1ieZd07mnZN552TeJZl3oWR9ku0fkWR9ku1DSfb3mCTbz5JsP0uy/SzJ9rMm28+abD9rsv2syfazJtvPmmw/a7L9rMn2sybbz5psP1uy/WzJ9rMl288Wup+PERofYfERJT7iDruu1jZG1HYlwuMjWnhE6eMjKD6C4yMkPkLjIyw+osRHxOsu8bpLvO4ar7vG667xumu87hqvu8brrvG6a7zuGq+7xuv2eN0er9vjdXu8bo/X7fG6PV63x+v2eN0er7vF627xulu87havu8XrbvG6W7zuFq+7xetu8bqp7wEZBMhgQIYAMhSQYYCMAsiogAwHZACcE8A5AZwTwDkBnBPAOQGcE8A5AZwTwDkBnDPAOQOcM8A5A5wzwDkDnDPAOQOcM8A5A5wLwLkAnAvAuQCcC8C5AJwLwLkAnAvAuQCcK8C5ApwrwLkCnCvAuQKcK8C5ApwrwLkCnBvAuQGcG8C5AZwbwLkBnBvAOeDKjQBnbgS4cyPAoRsBLt0IcOpGgFs3Ahy7EeDajQDnbgS4dyPAwRsBLt4IcPJGgJs3Ahy9EeDqjQBnbwS4eyPA4Rvd4/LNuYwZXvgy413Dp0KerVBLVugeN3j3LXRzN1181fVCw/8ZSj+OMx1m/ldpGBG7GL/yi337xu8zSsk9Sv075cp40/GHR83sPMyiYydN2MkSdioJO9WEnTxhp5aq0/D0c/a6mD0s54fPATu8+bZ6HD8WbHjc/no5vjPM/gY="},{"name":"public_static_call","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAC/52Wu47TQBSGx9k4yW6CNyabxLHj3DZOoAOtoKRBSFQrShoKxIKERIGAhnIfAfECPAWCV6ClRmI7JBoaeuY/c/lzWSJ5LTk+c+b/zjkz43hmrvaUatSUvnJlr1B7VKS0sxHgvqecpY2KvoNIBc4VSQC5C+gQoFJYQhkfmKpYewg/F6SqzZqYCKbq6EdO1RALgWoz/RNLU4dohHfgDwGQa9G8FopZh6nvaAqwB2uifxKfYB/NZeGGu68Ew9XCDwO2574nrokZW9H1uQqg6AQi7MCFW1IuTGvPpgPTKZzs0HTs+46KcaLTZWjjiSKHrBRZD1ha0zsbslJYNFU3/YjYKlZW8z/Dq3F4ehbDW2enby5uf7r55dGDz+fnj5+gLhMb5R1qxY2TXw/ff3394f7F349/DNg2iraZrdCGCxSvOPKzEFd8ODQPN5rKN9vrXGSGENohxDJnESwOJjaaFhepNHLpS9XxExlzIjsb78lJ1+aq2qU9sDHdqtdXVs6EaRvTvWOX98g7dhD6MAjbNEDq/zMb73B9vbYqF1kXEZzq5xFfQYi7MjdHsIh1lf8vdS36nG6H9gSFoEe0R7Rn0bd0O7QvKAR9on2ifYu+o9uhiaAQJEQTool5biPd3YjOdka3QweCQjAgOiA6sOiEboemgkKQEk2JptuFpn5aSiL93Ygu8CndDs0EhSAjmhHNtrNlPtsORGd7SbdDh4JCMCQ6JDq06DO6HZoLCkFONCeabxea+8kviVwhS7ob0WN6RbdDR4JCMCI6IjraznZlZLAb0QW+oNuhY0EhGBMdEx1vZxv76SiJZOWRvDzSLY8kuxE9c1O6HToRFIIJ0QlRfCvqclb4yS96JqDiZ9x9t6FWhfu264jVle11Kqmm66lmBp4Y0/VgWWYUzbkzFOZ0U1j9wu48S3O6WdozzUIq/mFabriFnFCc7JiJTUfFONHpMszxhOL7SlkbBd8N3OdkZSfm9thZ3zjL9ihOOkRTM/qmm0cZ5m9fhr3c4awpy2QX1B4PJLZYyFQ5hpl8w/0PI6S3GGALAAA=","debug_symbols":"zZzdSltREEbf5VyHcuZnzz7bVymlRI0lIFE0For47k2qJ1WaVrvRxdwZnc33XcwavFjkfjhfnd59+7reXFzdDief74fLq7Pldn212X26H8ZPUn/99vZ6udn/4na7vNkOJ3XyaTGsNuf7H8MeFsPF+nI1nFgdH74s9s+mvmet65mOfc+k75n2PbO+Z973rPQ9i75nfVuifVuifVtifVtifVtifVtifVtifVtifVtifVtifVtifVtifVvifVvifVvix7ekuszP2lhePFv8MW02ztNm2g7TrRwZnmp5mp2aH0al2VMfe4c+0vTQx17rY3Uenvxl+cdCnq1QyVYoshWq2QpNyQqVMVshzVYoG/YlG/YlG/YlG/YlHfYtWaHIdodCshXKdhgj2z9oke1SR7ZLHdkudWS71JHtUke2S12zXeqa7VLXj73UjxkGZDiQUYCM97h6VuohI45kVCBjAjLax2dMI5AhQIYCGQZkOJBRgAyA8wngfAI4nwDOG8B5AzhvAOcN4LwBnDeA8wZw3gDOG8B5AziXcSRChAhRIsSIECdCChESREglQiYihCBeCOKFIF4I4oUgXgjihSBeCOKFIF4I4oUgXgnilSBeCeKVIF4J4pUgXgnilSBeCeKVIN4I4o0g3gjijSDeCOKNIN4I4o0g3gjijSDeCeKdIN4J4p0g3gninSDeCeKdIN4J4p0gvhDEF4L4QhBfCOILQXwhiC8E8YUgvhDEF4L4IIgPgvggiA+C+CCID4L4IIgPgvggiA+C+EoQXwniK0F8JYivBPGVIJ6Q64Sw64TQ64Tw64QQ7IQw7IRQ7IRw7ISQ7ISw7ITQ7ITw7IQQ7YQw7YRQ7YRw7YSQ7YSw7YTQ7YTw7YQQ7oQw7oRQ7oRw7pRw7pRw7pRw7pRw7nR0IqQQIUGEVCJkIkII4gnnTgnnTgnnTgnnTgnnTgnnTgnnTgnnTgnnTgnnTgnnTgnnTgnnTgnnTt/FuXMZ5xD3eB7yX8NPjUq6RpGuUU3X6PUrpf5KI9ld7Tll9/N+5l+ddiNWno3LkVYtY6s3mIhvafX3mCPjzWOebuX3aqj5XEoyltKMpSxjKc9YqmQsFblK7T59X96sl6eXq/03A+//eLc5m78oePdx++P68S+72Z8="},{"name":"enqueue_static_nested_call_to_pub_function","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"7ZxvT9swEIe/S14j5DuffTZfZZqmAmWqVLWIlklTxXdf0iVOSLN6QEbPur0ioefknqf583Ok9FDdL2+fv39bbR62u+rmy6Fab+8W+9V2U68dKnDH/+0eF5tmdbdfPO2rG3NVLTf39d+Xq+phtV5WN5br5ZM69BDbUvQEqRoQJqotE7bVNpiYqY4Uqa2OztlUjWRevl5V4EttnD+vcQKGtprQwgcbDx9p3AY0yaHzqTrScdvx320bzdS2ozWug6VoM3uARkhbXi8zDfcx0ZBxnUlrgvnMwwtBOO2sxyTiHLTeUKIdnlTt8WNnMRrh3D5oFg6HaR/s3PlvDcH6Dhuhbm/ckrtASx5sasl7yBx31J/25PtegKZ6Ye5oOfSXCKgZGlivCZY1wQZNsFERrDWaYEETLGqCtZpgSTys81219YazsNwWBxiE00bSad+eu6kbMGJfDf7NGuVnsyI0yk99RWiUnyeL0Cg/qRahUX4GLkEjyU/XRWiUn9uL0Ch/RlCERvlzjSI0kmKNnB72A7N7pbFRo3lmklGjebaRUaN5BpFRo3lWkFGjOemfV+M0p/eMGs2JPKNGc8rOqNGcnEOihID+RA39V/MnNZrTcEaN5jScUaM5DWfUaE7DGTWa0/B5NV5zGs6o0ZyGM2rkp2FPIanxLqPGUu8RXqlpYOXn2xlhSROs/Aw6I6z8VDkjrPycOCOs/OQ3I6z8LDcfLMtPZzPCys9bM8JeJEGl14sQQsBMuQ3gu3IbXBiWNwS2AALuCSK6MQHJJ4i2C+1IBk6+AyeegIz1PQHzmMDLJ0CDiQDZjAm4AIIQEoF1OCYI8gmiT0eRM2THBFE8gTMhHUUOeHwmh0vc6WN6eaFeppOWQF5Ll7hrxpgiQn0lyESEIYCBwSu8fLztB1s6ABUOgHg9ebHwthvlh+/x1KGhGUTX0y9LAkN6ThZHT+DacfF946Zf4fuLcfDOcfjmcfXaj8XTanG7XjY/mNF8+Ly5634/o17d/3z8/Uld+ws="},{"name":"enqueue_calls_to_child_with_nested_first","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"private_call","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"private_nested_static_call","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"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","debug_symbols":""},{"name":"enqueue_call_to_child","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"target_value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"7Zxhb9owEIb/Sz5Xle989tn8lWmaaEsnJARVoZMm1P++hCYODRFeizcuun4qKWfnnichvAGZffWwuHv5+WO5ftxsq9m3fbXa3M93y8263tpX4A7/2z7N183mdjd/3lUzc1Mt1g/139eb6nG5WlQzy/Xjkzr0ENtS9ASpGhBGqi0TttU2mJipjhSprY7O2VSNZF6/31Tgp9o4/7/GCRjaakILFzYeLmncBjTJofOpOtJh7vjv5kYzNjcCdGMQQsjsASKkXdSPj8TX+xhpyLjOpDXB5I6SCV01gbvwKCFIpy15TiIWoU0dQUQThuePLbIPF87tg0rsA9O1AaJFe/6oIVhPaXYXYdiSu0JLHmya3fvceUf9y558PzfQWC/MHS2H/hJRd3WA9ZpgWRNs0AQbFcFaowkWNMGiJlirCZY0wcpPUM531dYbzsJyWxzgKIk3kk779pzaZsS+GvyHNcrPZpPQKD/1TUKj/Dw5CY3yk+oUNJL8DDwJjfLT9SQ0ys/tk9Ao/45gEhrpS2MJjZrvYjh9swHM7p3GRo3mO5OMGs13Gxk1mu8gMmo03xWcV+M0J/2MGs3pPaNGcyLPqNGcsjNqSLGaYFzXdkB/okZzGs6o0ZyGM2o0p+GMGs1pOKNGcxo+r8ZrTsMZNZrTcEaN5jScUaM5DWfUkHg1nkJS411GjaXeI7xT08DKz7cFYeUn1oKw8jNoQVj5qbIgrPycWA6W5Se/grDys1xBWPnprCCs/LxVEJauAZsWdTWzY6bcBvBduQ1uuD6L3QQIuCeI6IYEXj5BtF1oRzJwcgxYPAEZ63sC5iFBkE+ABhMBshkSxAkQhJAIrMMBQTDyCaJPZ5EzZIcEIJ7AmZDOIgc8fCWHa7zTR+xnj3TSkpXX0jXeNWNMEaG+EmQiwjGAgaOl3Py2GhFvRy8X3naj/PECm/otqxlEt+NLNoEhfUoTB5//tOPi58aNLyT8i3HwyXH44XH11q/583J+t1o0P9vRPPmyvu9+xaPe3P1+enumrv0D"}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000071421477"},{"kind":"string","value":"ValueNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000071421477"},{"kind":"string","value":"ValueNote"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"current_value","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"a_map_with_private_values","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}}],"kind":"struct","path":"Parent::enqueue_calls_to_child_with_nested_first_parameters"}}],"kind":"struct","path":"Parent::enqueue_calls_to_child_with_nested_first_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}}}],"kind":"struct","path":"Parent::public_nested_static_call_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Parent::public_nested_static_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}}}],"kind":"struct","path":"Parent::enqueue_static_nested_call_to_pub_function_parameters"}}],"kind":"struct","path":"Parent::enqueue_static_nested_call_to_pub_function_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"init_value","type":{"kind":"field"}}],"kind":"struct","path":"Parent::pub_entry_point_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Parent::pub_entry_point_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_value","type":{"kind":"field"}}],"kind":"struct","path":"Parent::enqueue_calls_to_pub_entry_point_parameters"}}],"kind":"struct","path":"Parent::enqueue_calls_to_pub_entry_point_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}}],"kind":"struct","path":"Parent::entry_point_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Parent::entry_point_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_value","type":{"kind":"field"}}],"kind":"struct","path":"Parent::enqueue_call_to_pub_entry_point_parameters"}}],"kind":"struct","path":"Parent::enqueue_call_to_pub_entry_point_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}}}],"kind":"struct","path":"Parent::public_static_call_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Parent::public_static_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_value","type":{"kind":"field"}}],"kind":"struct","path":"Parent::enqueue_call_to_child_twice_parameters"}}],"kind":"struct","path":"Parent::enqueue_call_to_child_twice_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}}],"kind":"struct","path":"Parent::enqueue_calls_to_child_with_nested_last_parameters"}}],"kind":"struct","path":"Parent::enqueue_calls_to_child_with_nested_last_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"init_value","type":{"kind":"field"}}],"kind":"struct","path":"Parent::pub_entry_point_twice_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Parent::pub_entry_point_twice_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}}}],"kind":"struct","path":"Parent::private_call_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Parent::private_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}}}],"kind":"struct","path":"Parent::enqueue_static_call_to_pub_function_parameters"}}],"kind":"struct","path":"Parent::enqueue_static_call_to_pub_function_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"target_value","type":{"kind":"field"}}],"kind":"struct","path":"Parent::enqueue_call_to_child_parameters"}}],"kind":"struct","path":"Parent::enqueue_call_to_child_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}}}],"kind":"struct","path":"Parent::private_static_call_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Parent::private_static_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}}}],"kind":"struct","path":"Parent::private_nested_static_call_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Parent::private_nested_static_call_abi"}]}},"file_map":{"112":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    constants::GENERATOR_INDEX__INNER_NOTE_HASH,\n    hash::{\n    pedersen_hash, compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_inner_note_hash_from_preimage(storage_slot: Field, note_content_hash: Field) -> Field {\n    pedersen_hash(\n        [storage_slot, note_content_hash],\n        GENERATOR_INDEX__INNER_NOTE_HASH\n    )\n}\n\nfn compute_inner_note_hash<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    compute_inner_note_hash_from_preimage(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N, M>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note_with_header.get_header();\n    let (_, inner_nullifier) = note_with_header.compute_note_hash_and_nullifier(context);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\nfn compute_note_hash_for_read_request_from_innter_and_nonce(\n    inner_note_hash: Field,\n    nonce: Field\n) -> Field {\n    // TODO(#1386): This if-else can be nuked once we have nonces injected from public\n    if (nonce == 0) {\n        // If nonce is zero, that means we are reading a public note.\n        inner_note_hash\n    } else {\n        compute_unique_note_hash(nonce, inner_note_hash)\n    }\n}\n\npub fn compute_note_hash_for_read_request<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let inner_note_hash = compute_inner_note_hash(note);\n    let nonce = note.get_header().nonce;\n\n    compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, nonce)\n}\n\npub fn compute_note_hash_for_consumption<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    if (header.note_hash_counter != 0) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        inner_note_hash\n    } else {\n        // If a note is not transient, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the siloed_note_hash which has already been hashed with\n        // nonce and then contract address. This hash will match the existing leaf in the note hash\n        // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        let unique_note_hash = compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, header.nonce);\n        compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n        // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n        // nullification, it is not strictly necessary to silo the note hash before computing\n        // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n        // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n        // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n        // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n        // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n    }\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, N, M, S>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N, M> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n    let unique_note_hash = compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, note_header.nonce);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        let (_, nullifier) = note.compute_note_hash_and_nullifier_without_context();\n        nullifier\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [inner_note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"121":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH, MAX_ARGS_LENGTH\n},\n    traits::Hash, hash::{pedersen_hash, compute_siloed_nullifier, sha256_to_field}\n};\nuse crate::oracle::logs_traits::{LensForEncryptedLog, ToBytesForUnencryptedLog};\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    pedersen_hash([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, N, M>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes = (n as Field).to_be_bytes(4);\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    pedersen_hash(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<N>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() <= MAX_ARGS_LENGTH, \"Args length exceeds maximum\");\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..MAX_ARGS_LENGTH {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x11e40f2a780822f7971803048c9a2100579de352e7dadd99981760964da65b57);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"125":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<N>(_args: [Field; N]) -> Field {}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n/// - Pack arguments (array version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments_array<N>(args: [Field; N]) -> Field {\n    pack_arguments_array_oracle(args)\n}\n\n/// - Pack arguments (slice version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments(args: [Field]) -> Field {\n    pack_arguments_oracle(args)\n}\n\n"},"127":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle<N>(_returns: [Field]) -> Field {}\n\nunconstrained pub fn pack_returns(returns: [Field]) {\n    let _unused = pack_returns_oracle(returns);\n}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<N>(_return_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn unpack_returns<N>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n"},"129":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub fn get_key_validation_request(pk_m_hash: Field, key_index: Field) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n\n"},"135":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n"},"140":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{\n    abis::{\n    function_selector::FunctionSelector, public_call_stack_item::PublicCallStackItem,\n    function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs,\n    call_context::CallContext, read_request::ReadRequest, note_hash::NoteHash, nullifier::Nullifier,\n    log_hash::LogHash, global_variables::GlobalVariables, gas::Gas\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    messaging::l2_to_l1_message::L2ToL1Message, header::Header, address::AztecAddress,\n    utils::reader::Reader,\n    constants::{\n    MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n}\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn parse_public_call_stack_item_from_oracle(fields: [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH]) -> PublicCallStackItem {\n    let mut reader = Reader::new(fields);\n\n    // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n    // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n    // WARNING: if updating, see comment in public_call_stack_item.ts's PublicCallStackItem.hash()\n    let item = PublicCallStackItem {\n        contract_address: AztecAddress::from_field(reader.read()),\n        function_data: FunctionData { selector: FunctionSelector::from_field(reader.read()), is_private: false },\n        public_inputs: PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            start_side_effect_counter: reader.read_u32(),\n            args_hash: reader.read(),\n            returns_hash: 0,\n            note_hash_read_requests: [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n            l1_to_l2_msg_read_requests: [ReadRequest::empty(); MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL],\n            contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n            contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            note_hashes: [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL],\n            nullifiers: [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL],\n            l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL],\n            end_side_effect_counter: 0,\n            unencrypted_logs_hashes: [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL],\n            historical_header: Header::empty(),\n            global_variables: GlobalVariables::empty(),\n            prover_address: AztecAddress::zero(),\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty(),\n            transaction_fee: 0\n        },\n        is_execution_request: true\n    };\n    reader.finish();\n\n    item\n}\n"},"167":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{GAS_LENGTH, FIXED_DA_GAS, FIXED_L2_GAS}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered, utils::reader::Reader,\n    abis::gas_fees::GasFees\n};\nuse std::ops::{Add, Sub};\n\nstruct Gas {\n    da_gas: u32,\n    l2_gas: u32,\n}\n\nimpl Gas {\n    pub fn new(da_gas: u32, l2_gas: u32) -> Self {\n        Self { da_gas, l2_gas }\n    }\n\n    pub fn tx_overhead() -> Self {\n        Self { da_gas: FIXED_DA_GAS, l2_gas: FIXED_L2_GAS }\n    }\n\n    pub fn compute_fee(self, fees: GasFees) -> Field {\n        (self.da_gas as Field) * fees.fee_per_da_gas + (self.l2_gas as Field) * fees.fee_per_l2_gas\n    }\n\n    pub fn is_empty(self) -> bool {\n        (self.da_gas == 0) & (self.l2_gas == 0)\n    }\n\n    pub fn within(self, limits: Gas) -> bool {\n        (self.da_gas <= limits.da_gas) & (self.l2_gas <= limits.l2_gas)\n    }\n}\n\nimpl Add for Gas {\n    fn add(self, other: Gas) -> Self {\n        Gas::new(self.da_gas + other.da_gas, self.l2_gas + other.l2_gas)\n    }\n}\n\nimpl Sub for Gas {\n    fn sub(self, other: Gas) -> Self {\n        Gas::new(self.da_gas - other.da_gas, self.l2_gas - other.l2_gas)\n    }\n}\n\nimpl Serialize<GAS_LENGTH> for Gas {\n    fn serialize(self) -> [Field; GAS_LENGTH] {\n        [self.da_gas as Field, self.l2_gas as Field]\n    }\n}\n\nimpl Deserialize<GAS_LENGTH> for Gas {\n    fn deserialize(serialized: [Field; GAS_LENGTH]) -> Gas {\n        Gas::new(serialized[0] as u32, serialized[1] as u32)\n    }\n}\n\nimpl Eq for Gas {\n    fn eq(self, other : Gas) -> bool {\n        (self.da_gas == other.da_gas) & (self.l2_gas == other.l2_gas)\n    }\n}\n\nimpl Empty for Gas {\n    fn empty() -> Self {\n        Gas::new(0, 0)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = Gas::empty();\n    let serialized = item.serialize();\n    let deserialized = Gas::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n"},"169":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/note_hash.nr","source":"use crate::{\n    abis::read_request::ScopedReadRequest, address::AztecAddress,\n    abis::side_effect::{Ordered, OrderedValue, Readable, Scoped},\n    constants::{NOTE_HASH_LENGTH, SCOPED_NOTE_HASH_LENGTH}, traits::{Empty, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct NoteHash {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for NoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for NoteHash {\n    fn eq(self, other: NoteHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter) \n    }\n}\n\nimpl Empty for NoteHash {\n    fn empty() -> Self {\n        NoteHash {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<NOTE_HASH_LENGTH> for NoteHash {\n    fn serialize(self) -> [Field; NOTE_HASH_LENGTH] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<NOTE_HASH_LENGTH> for NoteHash {\n    fn deserialize(values: [Field; NOTE_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl NoteHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedNoteHash {\n        ScopedNoteHash { note_hash: self, contract_address }\n    }\n}\n\nstruct ScopedNoteHash {\n    note_hash: NoteHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<NoteHash> for ScopedNoteHash {\n    fn inner(self) -> NoteHash {\n        self.note_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedNoteHash {\n    fn counter(self) -> u32 {\n        self.note_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedNoteHash {\n    fn value(self) -> Field {\n        self.note_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.note_hash.counter\n    }\n}\n\nimpl Eq for ScopedNoteHash {\n    fn eq(self, other: ScopedNoteHash) -> bool {\n        (self.note_hash == other.note_hash)\n            & (self.contract_address == other.contract_address)\n    }\n}\n\nimpl Empty for ScopedNoteHash {\n    fn empty() -> Self {\n        ScopedNoteHash {\n            note_hash: NoteHash::empty(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_NOTE_HASH_LENGTH> for ScopedNoteHash {\n    fn serialize(self) -> [Field; SCOPED_NOTE_HASH_LENGTH] {\n        array_concat(self.note_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_NOTE_HASH_LENGTH> for ScopedNoteHash {\n    fn deserialize(values: [Field; SCOPED_NOTE_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            note_hash: reader.read_struct(NoteHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl Readable for ScopedNoteHash {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        assert_eq(self.note_hash.value, read_request.value(), \"Value of the note hash does not match read request\");\n        assert_eq(self.contract_address, read_request.contract_address, \"Contract address of the note hash does not match read request\");\n        assert(\n            read_request.counter() > self.note_hash.counter, \"Read request counter must be greater than the counter of the note hash\"\n        );\n    }\n}\n\nimpl ScopedNoteHash {\n    pub fn expose_to_public(self) -> NoteHash {\n        // Hide the actual counter when exposing it to the public kernel.\n        NoteHash { value: self.note_hash.value, counter: 0 }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NoteHash::empty();\n    let serialized = item.serialize();\n    let deserialized = NoteHash::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedNoteHash::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedNoteHash::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"170":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_fees.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::GAS_FEES_LENGTH, hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty},\n    abis::side_effect::Ordered, utils::reader::Reader\n};\n\nstruct GasFees {\n    fee_per_da_gas: Field,\n    fee_per_l2_gas: Field,\n}\n\nimpl GasFees {\n    pub fn new(fee_per_da_gas: Field, fee_per_l2_gas: Field) -> Self {\n        Self { fee_per_da_gas, fee_per_l2_gas }\n    }\n\n    pub fn default() -> Self {\n        GasFees::new(1, 1)\n    }\n\n    pub fn is_empty(self) -> bool {\n        (self.fee_per_da_gas == 0) & (self.fee_per_l2_gas == 0)\n    }\n}\n\nimpl Serialize<GAS_FEES_LENGTH> for GasFees {\n    fn serialize(self) -> [Field; GAS_FEES_LENGTH] {\n        [self.fee_per_da_gas, self.fee_per_l2_gas]\n    }\n}\n\nimpl Deserialize<GAS_FEES_LENGTH> for GasFees {\n    fn deserialize(serialized: [Field; GAS_FEES_LENGTH]) -> GasFees {\n        GasFees::new(serialized[0], serialized[1])\n    }\n}\n\nimpl Eq for GasFees {\n    fn eq(self, other : GasFees) -> bool {\n        (self.fee_per_da_gas == other.fee_per_da_gas) & (self.fee_per_l2_gas == other.fee_per_l2_gas)\n    }\n}\n\nimpl Empty for GasFees {\n    fn empty() -> Self {\n        GasFees::new(0, 0)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = GasFees::empty();\n    let serialized = item.serialize();\n    let deserialized = GasFees::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"172":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_circuit_public_inputs.nr","source":"use crate::{\n    abis::{\n    call_context::CallContext, max_block_number::MaxBlockNumber, gas_settings::GasSettings,\n    validation_requests::KeyValidationRequestAndGenerator, note_hash::NoteHash, nullifier::Nullifier,\n    private_call_request::PrivateCallRequest, read_request::ReadRequest,\n    log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_L2_TO_L1_MSGS_PER_CALL, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS, MAX_ENCRYPTED_LOGS_PER_CALL,\n    MAX_UNENCRYPTED_LOGS_PER_CALL, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, hash::pedersen_hash, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader,\n    transaction::tx_context::TxContext, utils::arrays::validate_array\n};\n\nstruct PrivateCircuitPublicInputsArrayLengths {\n    note_hash_read_requests: u32,\n    nullifier_read_requests: u32,\n    key_validation_requests_and_generators: u32,\n    note_hashes: u32,\n    nullifiers: u32,\n    l2_to_l1_msgs: u32,\n    private_call_requests: u32,\n    public_call_stack_hashes: u32,\n    note_encrypted_logs_hashes: u32,\n    encrypted_logs_hashes: u32,\n    unencrypted_logs_hashes: u32,\n}\n\nimpl PrivateCircuitPublicInputsArrayLengths {\n    pub fn new(public_inputs: PrivateCircuitPublicInputs) -> Self {\n        PrivateCircuitPublicInputsArrayLengths {\n            note_hash_read_requests: validate_array(public_inputs.note_hash_read_requests),\n            nullifier_read_requests: validate_array(public_inputs.nullifier_read_requests),\n            key_validation_requests_and_generators: validate_array(public_inputs.key_validation_requests_and_generators),\n            note_hashes: validate_array(public_inputs.note_hashes),\n            nullifiers: validate_array(public_inputs.nullifiers),\n            l2_to_l1_msgs: validate_array(public_inputs.l2_to_l1_msgs),\n            private_call_requests: validate_array(public_inputs.private_call_requests),\n            public_call_stack_hashes: validate_array(public_inputs.public_call_stack_hashes),\n            note_encrypted_logs_hashes: validate_array(public_inputs.note_encrypted_logs_hashes),\n            encrypted_logs_hashes: validate_array(public_inputs.encrypted_logs_hashes),\n            unencrypted_logs_hashes: validate_array(public_inputs.unencrypted_logs_hashes)\n        }\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    returns_hash: Field,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: [ReadRequest; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    key_validation_requests_and_generators: [KeyValidationRequestAndGenerator; MAX_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    note_hashes: [NoteHash; MAX_NOTE_HASHES_PER_CALL],\n    nullifiers: [Nullifier; MAX_NULLIFIERS_PER_CALL],\n    private_call_requests: [PrivateCallRequest; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    public_teardown_function_hash: Field,\n    l2_to_l1_msgs: [L2ToL1Message; MAX_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter : u32,\n    end_side_effect_counter : u32,\n    note_encrypted_logs_hashes: [NoteLogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_CALL],\n    encrypted_logs_hashes: [EncryptedLogHash; MAX_ENCRYPTED_LOGS_PER_CALL],\n    unencrypted_logs_hashes: [LogHash; MAX_UNENCRYPTED_LOGS_PER_CALL],\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // Note: The chain_id and version here are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    tx_context: TxContext,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.returns_hash == other.returns_hash) &\n        (self.min_revertible_side_effect_counter == other.min_revertible_side_effect_counter) &\n        (self.is_fee_payer == other.is_fee_payer) &\n        (self.max_block_number == other.max_block_number) &\n        (self.note_hash_read_requests == other.note_hash_read_requests) &\n        (self.nullifier_read_requests == other.nullifier_read_requests) &\n        (self.key_validation_requests_and_generators == other.key_validation_requests_and_generators) &\n        (self.note_hashes == other.note_hashes) &\n        (self.nullifiers == other.nullifiers) &\n        (self.private_call_requests == other.private_call_requests) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.l2_to_l1_msgs == other.l2_to_l1_msgs) &\n        (self.start_side_effect_counter == other.start_side_effect_counter) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.note_encrypted_logs_hashes == other.note_encrypted_logs_hashes) &\n        (self.encrypted_logs_hashes == other.encrypted_logs_hashes) &\n        (self.unencrypted_logs_hashes == other.unencrypted_logs_hashes) &\n        self.historical_header.eq(other.historical_header) &\n        self.tx_context.eq(other.tx_context)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n\n        fields.push(self.min_revertible_side_effect_counter as Field);\n        fields.push(if self.is_fee_payer { 1 } else { 0 } as Field);\n\n        fields.extend_from_array(self.max_block_number.serialize());\n\n        for i in 0..self.note_hash_read_requests.len() {\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..self.nullifier_read_requests.len() {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..self.key_validation_requests_and_generators.len() {\n            fields.extend_from_array(self.key_validation_requests_and_generators[i].serialize());\n        }\n        for i in 0..self.note_hashes.len() {\n            fields.extend_from_array(self.note_hashes[i].serialize());\n        }\n        for i in 0..self.nullifiers.len() {\n            fields.extend_from_array(self.nullifiers[i].serialize());\n        }\n        for i in 0..self.private_call_requests.len() {\n            fields.extend_from_array(self.private_call_requests[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n        fields.push(self.public_teardown_function_hash);\n        for i in 0..self.l2_to_l1_msgs.len() {\n            fields.extend_from_array(self.l2_to_l1_msgs[i].serialize());\n        }\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n        for i in 0..self.note_encrypted_logs_hashes.len() {\n            fields.extend_from_array(self.note_encrypted_logs_hashes[i].serialize());\n        }\n        for i in 0..self.encrypted_logs_hashes.len() {\n            fields.extend_from_array(self.encrypted_logs_hashes[i].serialize());\n        }\n        for i in 0..self.unencrypted_logs_hashes.len() {\n            fields.extend_from_array(self.unencrypted_logs_hashes[i].serialize());\n        }\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.extend_from_array(self.tx_context.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            min_revertible_side_effect_counter: reader.read() as u32,\n            is_fee_payer: reader.read() == 1,\n            max_block_number: reader.read_struct(MaxBlockNumber::deserialize),\n            note_hash_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            key_validation_requests_and_generators: reader.read_struct_array(KeyValidationRequestAndGenerator::deserialize, [KeyValidationRequestAndGenerator::empty(); MAX_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            note_hashes: reader.read_struct_array(NoteHash::deserialize, [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL]),\n            nullifiers: reader.read_struct_array(Nullifier::deserialize, [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL]),\n            private_call_requests: reader.read_struct_array(PrivateCallRequest::deserialize, [PrivateCallRequest::empty(); MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            public_teardown_function_hash: reader.read(),\n            l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            note_encrypted_logs_hashes: reader.read_struct_array(NoteLogHash::deserialize, [NoteLogHash::empty(); MAX_NOTE_ENCRYPTED_LOGS_PER_CALL]),\n            encrypted_logs_hashes: reader.read_struct_array(EncryptedLogHash::deserialize, [EncryptedLogHash::empty(); MAX_ENCRYPTED_LOGS_PER_CALL]),\n            unencrypted_logs_hashes: reader.read_struct_array(LogHash::deserialize, [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL]),\n            historical_header: reader.read_struct(Header::deserialize),\n            tx_context: reader.read_struct(TxContext::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\nimpl Empty for PrivateCircuitPublicInputs {\n    fn empty() -> Self {\n        PrivateCircuitPublicInputs {\n            call_context: CallContext::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            key_validation_requests_and_generators: [KeyValidationRequestAndGenerator::empty(); MAX_KEY_VALIDATION_REQUESTS_PER_CALL],\n            note_hashes: [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL],\n            nullifiers: [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL],\n            private_call_requests: [PrivateCallRequest::empty(); MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL],\n            start_side_effect_counter : 0 as u32,\n            end_side_effect_counter : 0 as u32,\n            note_encrypted_logs_hashes: [NoteLogHash::empty(); MAX_NOTE_ENCRYPTED_LOGS_PER_CALL],\n            encrypted_logs_hashes: [EncryptedLogHash::empty(); MAX_ENCRYPTED_LOGS_PER_CALL],\n            unencrypted_logs_hashes: [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL],\n            historical_header: Header::empty(),\n            tx_context: TxContext::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi = PrivateCircuitPublicInputs::empty();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs = PrivateCircuitPublicInputs::empty();\n    let hash = inputs.hash();\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x15c9b0a92b9b541598e24c9f0b0b4b04b7f2408599751c45aa12de671fd9b363;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"173":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item_compressed.nr","source":"use crate::abis::{call_context::CallContext, function_data::FunctionData, gas::Gas};\nuse crate::address::AztecAddress;\nuse crate::constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH};\nuse crate::traits::{Hash, Empty, Serialize, Deserialize};\nuse crate::utils::reader::Reader;\n\n/**\n * A compressed version of the PublicCallStackItem struct used to compute the \"hash\"\n * of a PublicCallStackItem.\n * \n * Historically, we have been zeroing most values in the PublicCallStackItem struct\n * to compute the hash involved when adding a PublicCallStackItem to the PublicCallStack.\n * \n * This struct is used to store the values that we did not zero out, and allow us to hash\n * only these, thereby skipping a lot of computation and saving us a lot of constraints\n * \n * Essentially this struct exists such that we don't have a `hash` function in the \n * PublicCallStackItem struct that practically throws away some values of the struct\n * without clearly indicating that it does so.\n */\nstruct PublicCallStackItemCompressed {\n    contract_address: AztecAddress,\n    call_context: CallContext,\n    function_data: FunctionData,\n    args_hash: Field,\n    returns_hash: Field,\n    revert_code: u8,\n    start_gas_left: Gas,\n    end_gas_left: Gas,\n}\n\nimpl Eq for PublicCallStackItemCompressed {\n    fn eq(self, other: PublicCallStackItemCompressed) -> bool {\n        (self.contract_address == other.contract_address)\n            & (self.call_context == other.call_context)\n            & (self.function_data == other.function_data)\n            & (self.args_hash == other.args_hash)\n            & (self.returns_hash == other.returns_hash)\n            & (self.revert_code == other.revert_code)\n            & (self.start_gas_left == other.start_gas_left)\n            & (self.end_gas_left == other.end_gas_left)\n    }\n}\n\nimpl Hash for PublicCallStackItemCompressed {\n    fn hash(self) -> Field {\n        std::hash::pedersen_hash_with_separator(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl Empty for PublicCallStackItemCompressed {\n    fn empty() -> Self {\n        PublicCallStackItemCompressed {\n            contract_address: AztecAddress::empty(),\n            call_context: CallContext::empty(),\n            function_data: FunctionData::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty(),\n        }\n    }\n}\n\nimpl Serialize<PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> for PublicCallStackItemCompressed {\n    fn serialize(self) -> [Field; PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.call_context.serialize());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n        fields.push(self.revert_code as Field);\n        fields.extend_from_array(self.start_gas_left.serialize());\n        fields.extend_from_array(self.end_gas_left.serialize());\n\n        assert_eq(fields.len(), PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> for PublicCallStackItemCompressed {\n  fn deserialize(fields: [Field; PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH]) -> PublicCallStackItemCompressed {\n    let mut reader = Reader::new(fields);\n\n    let item = PublicCallStackItemCompressed {\n      contract_address: reader.read_struct(AztecAddress::deserialize),\n      call_context: reader.read_struct(CallContext::deserialize),\n      function_data: reader.read_struct(FunctionData::deserialize),\n      args_hash: reader.read(),\n      returns_hash: reader.read(),\n      revert_code: reader.read() as u8,\n      start_gas_left: reader.read_struct(Gas::deserialize),\n      end_gas_left: reader.read_struct(Gas::deserialize),\n    };\n    reader.finish();\n    item\n  }\n}\n"},"175":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/global_variables.nr","source":"use crate::{\n    address::{AztecAddress, EthAddress}, abis::gas_fees::GasFees,\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}, utils::reader::Reader\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : u64,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n    gas_fees : GasFees\n}\n// docs:end:global-variables\n\nimpl GlobalVariables {\n    fn is_empty(self) -> bool {\n        (self.chain_id == 0)\n            & (self.version == 0)\n            & (self.block_number == 0)\n            & (self.timestamp == 0)\n            & (self.coinbase.is_zero())\n            & (self.fee_recipient.is_zero())\n            & (self.gas_fees.is_empty())\n    }\n}\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        let mut serialized: BoundedVec<Field, GLOBAL_VARIABLES_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.chain_id);\n        serialized.push(self.version);\n        serialized.push(self.block_number);\n        serialized.push(self.timestamp as Field);\n        serialized.push(self.coinbase.to_field());\n        serialized.push(self.fee_recipient.to_field());\n        serialized.extend_from_array(self.gas_fees.serialize());\n\n        serialized.storage\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        let mut reader = Reader::new(serialized);\n        GlobalVariables {\n            chain_id: reader.read(),\n            version: reader.read(),\n            block_number: reader.read(),\n            timestamp: reader.read() as u64,\n            coinbase: EthAddress::from_field(reader.read()),\n            fee_recipient: AztecAddress::from_field(reader.read()),\n            gas_fees: reader.read_struct(GasFees::deserialize)\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient) &\n        (self.gas_fees == other.gas_fees) \n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n            gas_fees: GasFees::empty()\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars = GlobalVariables::empty();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n"},"176":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/read_request.nr","source":"use crate::{\n    abis::side_effect::{Ordered, Scoped}, traits::{Empty, Serialize, Deserialize},\n    address::AztecAddress, constants::{READ_REQUEST_LENGTH, SCOPED_READ_REQUEST_LEN},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct ReadRequest {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for ReadRequest {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for ReadRequest {\n    fn eq(self, read_request: ReadRequest) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n    }\n}\n\nimpl Empty for ReadRequest {\n    fn empty() -> Self {\n        ReadRequest {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_LENGTH> for ReadRequest {\n    fn serialize(self) -> [Field; READ_REQUEST_LENGTH] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_LENGTH> for ReadRequest {\n    fn deserialize(values: [Field; READ_REQUEST_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl ReadRequest {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedReadRequest {\n        ScopedReadRequest { read_request: self, contract_address }\n    }\n}\n\nstruct ScopedReadRequest {\n    read_request: ReadRequest,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<ReadRequest> for ScopedReadRequest {\n    fn inner(self) -> ReadRequest {\n        self.read_request\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Eq for ScopedReadRequest {\n    fn eq(self, other: ScopedReadRequest) -> bool {\n        (self.read_request == other.read_request)\n        & (self.contract_address.eq(other.contract_address))\n    }\n}\n\nimpl Empty for ScopedReadRequest {\n    fn empty() -> Self {\n        ScopedReadRequest {\n            read_request: ReadRequest::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_READ_REQUEST_LEN> for ScopedReadRequest {\n    fn serialize(self) -> [Field; SCOPED_READ_REQUEST_LEN] {\n        array_concat(self.read_request.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_READ_REQUEST_LEN> for ScopedReadRequest {\n    fn deserialize(values: [Field; SCOPED_READ_REQUEST_LEN]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            read_request: reader.read_struct(ReadRequest::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl ScopedReadRequest {\n    pub fn value(self) -> Field {\n        self.read_request.value\n    }\n    pub fn counter(self) -> u32 {\n        self.read_request.counter\n    }\n}\n\n#[test]\nfn serialization_of_empty_read() {\n    let item = ReadRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ReadRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedReadRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedReadRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"179":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request_and_generator.nr","source":"use crate::{\n    address::AztecAddress,\n    abis::validation_requests::{\n    key_validation_request::KeyValidationRequest,\n    scoped_key_validation_request_and_generator::ScopedKeyValidationRequestAndGenerator\n},\n    constants::KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH, traits::{Empty, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct KeyValidationRequestAndGenerator {\n    request: KeyValidationRequest,\n    sk_app_generator: Field,\n}\n\nimpl Eq for KeyValidationRequestAndGenerator {\n    fn eq(self, other: KeyValidationRequestAndGenerator) -> bool {\n        (self.request == other.request) & (self.sk_app_generator == other.sk_app_generator)\n    }\n}\n\nimpl Empty for KeyValidationRequestAndGenerator {\n    fn empty() -> Self {\n        KeyValidationRequestAndGenerator {\n            request: KeyValidationRequest::empty(),\n            sk_app_generator: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH> for KeyValidationRequestAndGenerator {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH] {\n        array_concat(self.request.serialize(), [self.sk_app_generator])\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH> for KeyValidationRequestAndGenerator {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH]) -> Self {\n        let mut reader = Reader::new(fields);\n        let res = Self {\n            request: reader.read_struct(KeyValidationRequest::deserialize),\n            sk_app_generator: reader.read(),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl KeyValidationRequestAndGenerator {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedKeyValidationRequestAndGenerator {\n        ScopedKeyValidationRequestAndGenerator { request: self, contract_address }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = KeyValidationRequestAndGenerator::empty();\n    let serialized = item.serialize();\n    let deserialized = KeyValidationRequestAndGenerator::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"180":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{constants::KEY_VALIDATION_REQUEST_LENGTH, traits::{Empty, Serialize, Deserialize}, point::Point};\n\nstruct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m))\n            & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest {\n            pk_m: Point::empty(),\n            sk_app: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app,\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point::new(fields[0], fields[1], fields[2] as bool),\n            sk_app: fields[3],\n        }\n    }\n}\n\n"},"184":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier.nr","source":"use crate::{\n    abis::{side_effect::{Ordered, OrderedValue, Readable, Scoped}, read_request::ScopedReadRequest},\n    address::AztecAddress, constants::{NULLIFIER_LENGTH, SCOPED_NULLIFIER_LENGTH},\n    hash::compute_siloed_nullifier, traits::{Empty, Hash, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct Nullifier {\n    value: Field,\n    counter: u32,\n    note_hash: Field,\n}\n\nimpl Ordered for Nullifier {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for Nullifier {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for Nullifier {\n    fn eq(self, other: Nullifier) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.note_hash == other.note_hash) \n    }\n}\n\nimpl Empty for Nullifier {\n    fn empty() -> Self {\n        Nullifier {\n            value: 0,\n            counter: 0,\n            note_hash: 0,\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_LENGTH> for Nullifier {\n    fn serialize(self) -> [Field; NULLIFIER_LENGTH] {\n        [self.value, self.counter as Field, self.note_hash]\n    }\n}\n\nimpl Deserialize<NULLIFIER_LENGTH> for Nullifier {\n    fn deserialize(values: [Field; NULLIFIER_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            note_hash: values[2],\n        }\n    }\n}\n\nimpl Readable for Nullifier {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        // Public kernels output Nullifier instead of ScopedNullifier.\n        // The nullifier value has been siloed.\n        let siloed_request_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.value, siloed_request_value, \"Value of the nullifier does not match read request\");\n        assert(\n            read_request.counter() > self.counter, \"Read request counter must be greater than the counter of the nullifier\"\n        );\n    }\n}\n\nimpl Nullifier {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedNullifier {\n        ScopedNullifier { nullifier: self, contract_address }\n    }\n}\n\nstruct ScopedNullifier {\n    nullifier: Nullifier,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<Nullifier> for ScopedNullifier {\n    fn inner(self) -> Nullifier {\n        self.nullifier\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedNullifier {\n    fn counter(self) -> u32 {\n        self.nullifier.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedNullifier {\n    fn value(self) -> Field {\n        self.nullifier.value\n    }\n    fn counter(self) -> u32 {\n        self.nullifier.counter\n    }\n}\n\nimpl Eq for ScopedNullifier {\n    fn eq(self, other: ScopedNullifier) -> bool {\n        (self.nullifier == other.nullifier)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedNullifier {\n    fn empty() -> Self {\n        ScopedNullifier {\n            nullifier: Nullifier::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_NULLIFIER_LENGTH> for ScopedNullifier {\n    fn serialize(self) -> [Field; SCOPED_NULLIFIER_LENGTH] {\n        array_concat(self.nullifier.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_NULLIFIER_LENGTH> for ScopedNullifier {\n    fn deserialize(values: [Field; SCOPED_NULLIFIER_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            nullifier: reader.read_struct(Nullifier::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl Readable for ScopedNullifier {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        assert_eq(self.nullifier.value, read_request.value(), \"Value of the nullifier does not match read request\");\n        assert_eq(self.contract_address, read_request.contract_address, \"Contract address of the nullifier does not match read request\");\n        assert(\n            read_request.counter() > self.nullifier.counter, \"Read request counter must be greater than the counter of the nullifier\"\n        );\n    }\n}\n\nimpl ScopedNullifier {\n    pub fn nullified_note_hash(self) -> Field {\n        self.nullifier.note_hash\n    }\n\n    pub fn expose_to_public(self) -> Nullifier {\n        // Hide the actual counter and note hash when exposing it to the public kernel.\n        Nullifier { value: self.nullifier.value, counter: 0, note_hash: 0 }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = Nullifier::empty();\n    let serialized = item.serialize();\n    let deserialized = Nullifier::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedNullifier::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedNullifier::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"193":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"},"194":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_request.nr","source":"use crate::{\n    abis::{\n    private_call_stack_item::PrivateCallStackItem, call_context::CallContext,\n    function_data::FunctionData, caller_context::CallerContext,\n    side_effect::{Ordered, RangeOrdered, Scoped}\n},\n    address::AztecAddress, constants::{PRIVATE_CALL_REQUEST_LENGTH, SCOPED_PRIVATE_CALL_REQUEST_LENGTH},\n    traits::{Empty, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PrivateCallRequest {\n    target: AztecAddress,\n    call_context: CallContext,\n    function_data: FunctionData,\n    args_hash: Field,\n    returns_hash: Field,\n    caller_context: CallerContext,\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n}\n\nimpl Ordered for PrivateCallRequest {\n    fn counter(self) -> u32 {\n        self.start_side_effect_counter\n    }\n}\n\nimpl RangeOrdered for PrivateCallRequest {\n    fn counter_start(self) -> u32 {\n        self.start_side_effect_counter\n    }\n    fn counter_end(self) -> u32 {\n        self.end_side_effect_counter\n    }\n}\n\nimpl Eq for PrivateCallRequest {\n    fn eq(self, other: PrivateCallRequest) -> bool {\n        (self.target == other.target) \n            & (self.call_context == other.call_context) \n            & (self.function_data == other.function_data) \n            & (self.args_hash == other.args_hash) \n            & (self.returns_hash == other.returns_hash)\n            & (self.caller_context == other.caller_context)\n            & (self.start_side_effect_counter == other.start_side_effect_counter)\n            & (self.end_side_effect_counter == other.end_side_effect_counter)\n    }\n}\n\nimpl Empty for PrivateCallRequest {\n    fn empty() -> Self {\n        PrivateCallRequest {\n            target: AztecAddress::empty(),\n            call_context: CallContext::empty(),\n            function_data: FunctionData::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            caller_context: CallerContext::empty(),\n            start_side_effect_counter: 0,\n            end_side_effect_counter: 0,\n        }\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_REQUEST_LENGTH> for PrivateCallRequest {\n    fn serialize(self) -> [Field; PRIVATE_CALL_REQUEST_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_REQUEST_LENGTH> = BoundedVec::new();\n\n        fields.push(self.target.to_field());\n        fields.extend_from_array(self.call_context.serialize());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n        fields.extend_from_array(self.caller_context.serialize());\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        assert_eq(fields.len(), PRIVATE_CALL_REQUEST_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_REQUEST_LENGTH> for PrivateCallRequest {\n    fn deserialize(fields: [Field; PRIVATE_CALL_REQUEST_LENGTH]) -> PrivateCallRequest {\n        let mut reader = Reader::new(fields);\n        let item = PrivateCallRequest {\n            target: reader.read_struct(AztecAddress::deserialize),\n            call_context: reader.read_struct(CallContext::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            caller_context: reader.read_struct(CallerContext::deserialize),\n            start_side_effect_counter: reader.read_u32(),\n            end_side_effect_counter: reader.read_u32(),\n        };\n        reader.finish();\n        item\n    }\n}\n\nimpl PrivateCallRequest {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedPrivateCallRequest {\n        ScopedPrivateCallRequest { call_request: self, contract_address }\n    }\n\n    pub fn matches_stack_item(self, stack_item: PrivateCallStackItem) -> bool {\n        (self.target == stack_item.contract_address)\n            & (self.call_context == stack_item.public_inputs.call_context)\n            & (self.function_data == stack_item.function_data)\n            & (self.args_hash == stack_item.public_inputs.args_hash)\n            & (self.returns_hash == stack_item.public_inputs.returns_hash)\n            & (self.start_side_effect_counter\n                                == stack_item.public_inputs.start_side_effect_counter)\n            & (self.end_side_effect_counter\n                                    == stack_item.public_inputs.end_side_effect_counter)\n    }\n}\n\nstruct ScopedPrivateCallRequest {\n    call_request: PrivateCallRequest,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<PrivateCallRequest> for ScopedPrivateCallRequest {\n    fn inner(self) -> PrivateCallRequest {\n        self.call_request\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedPrivateCallRequest {\n    fn counter(self) -> u32 {\n        self.call_request.counter_start()\n    }\n}\n\nimpl RangeOrdered for ScopedPrivateCallRequest {\n    fn counter_start(self) -> u32 {\n        self.call_request.counter_start()\n    }\n    fn counter_end(self) -> u32 {\n        self.call_request.counter_end()\n    }\n}\n\nimpl Eq for ScopedPrivateCallRequest {\n    fn eq(self, other: ScopedPrivateCallRequest) -> bool {\n        (self.call_request == other.call_request)\n            & (self.contract_address == other.contract_address)\n    }\n}\n\nimpl Empty for ScopedPrivateCallRequest {\n    fn empty() -> Self {\n        ScopedPrivateCallRequest {\n            call_request: PrivateCallRequest::empty(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_PRIVATE_CALL_REQUEST_LENGTH> for ScopedPrivateCallRequest {\n    fn serialize(self) -> [Field; SCOPED_PRIVATE_CALL_REQUEST_LENGTH] {\n        let mut fields: BoundedVec<Field, SCOPED_PRIVATE_CALL_REQUEST_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.call_request.serialize());\n        fields.extend_from_array(self.contract_address.serialize());\n\n        assert_eq(fields.len(), SCOPED_PRIVATE_CALL_REQUEST_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<SCOPED_PRIVATE_CALL_REQUEST_LENGTH> for ScopedPrivateCallRequest {\n    fn deserialize(fields: [Field; SCOPED_PRIVATE_CALL_REQUEST_LENGTH]) -> ScopedPrivateCallRequest {\n        let mut reader = Reader::new(fields);\n        let item = ScopedPrivateCallRequest {\n            call_request: reader.read_struct(PrivateCallRequest::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        item\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = ScopedPrivateCallRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedPrivateCallRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"199":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_settings.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress}, abis::gas::Gas,\n    abis::gas_fees::GasFees,\n    constants::{\n    GAS_SETTINGS_LENGTH, DEFAULT_GAS_LIMIT, DEFAULT_TEARDOWN_GAS_LIMIT, DEFAULT_MAX_FEE_PER_GAS,\n    DEFAULT_INCLUSION_FEE\n},\n    hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered,\n    utils::reader::Reader\n};\n\nstruct GasSettings {\n    gas_limits: Gas,\n    teardown_gas_limits: Gas,\n    max_fees_per_gas: GasFees,\n    inclusion_fee: Field,\n}\n\nimpl GasSettings {\n    pub fn new(\n        gas_limits: Gas,\n        teardown_gas_limits: Gas,\n        max_fees_per_gas: GasFees,\n        inclusion_fee: Field\n    ) -> Self {\n        Self { gas_limits, teardown_gas_limits, max_fees_per_gas, inclusion_fee }\n    }\n\n    pub fn default() -> Self {\n        GasSettings::new(\n            Gas::new(DEFAULT_GAS_LIMIT, DEFAULT_GAS_LIMIT),\n            Gas::new(DEFAULT_TEARDOWN_GAS_LIMIT, DEFAULT_TEARDOWN_GAS_LIMIT),\n            GasFees::new(DEFAULT_MAX_FEE_PER_GAS, DEFAULT_MAX_FEE_PER_GAS),\n            DEFAULT_INCLUSION_FEE\n        )\n    }\n}\n\nimpl Eq for GasSettings {\n    fn eq(self, other: Self) -> bool {\n        (self.gas_limits == other.gas_limits) & (self.teardown_gas_limits == other.teardown_gas_limits) & (self.max_fees_per_gas == other.max_fees_per_gas) & (self.inclusion_fee == other.inclusion_fee)\n    }\n}\n\nimpl Empty for GasSettings {\n    fn empty() -> Self {\n        GasSettings::new(\n            Gas::empty(), Gas::empty(), GasFees::empty(), 0\n        )\n    }\n}\n\nimpl Serialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn serialize(self) -> [Field; GAS_SETTINGS_LENGTH] {\n        let mut serialized: BoundedVec<Field, GAS_SETTINGS_LENGTH> = BoundedVec::new();\n\n        serialized.extend_from_array(self.gas_limits.serialize());\n        serialized.extend_from_array(self.teardown_gas_limits.serialize());\n        serialized.extend_from_array(self.max_fees_per_gas.serialize());\n        serialized.push(self.inclusion_fee);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn deserialize(serialized: [Field; GAS_SETTINGS_LENGTH]) -> GasSettings {\n        let mut reader = Reader::new(serialized);\n        GasSettings::new(reader.read_struct(Gas::deserialize), reader.read_struct(Gas::deserialize), reader.read_struct(GasFees::deserialize), reader.read())\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = GasSettings::empty();\n    let serialized = item.serialize();\n    let deserialized = GasSettings::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"208":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_stack_item.nr","source":"use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl Empty for PrivateCallStackItem {\n    fn empty() -> Self {\n        PrivateCallStackItem {\n            contract_address: AztecAddress::empty(),\n            function_data: FunctionData::empty(),\n            public_inputs: PrivateCircuitPublicInputs::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = PrivateCallStackItem::empty();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item = PrivateCallStackItem::empty();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x065f2831db9ac0db5e710bd3a865b5facd8cf83f1585e1af8fd1d6ce9c47f685;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"209":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/caller_context.nr","source":"use crate::address::AztecAddress;\nuse crate::traits::{Empty, Serialize, Deserialize};\nuse crate::constants::CALLER_CONTEXT_LENGTH;\nuse crate::utils::reader::Reader;\n\nstruct CallerContext {\n    msg_sender: AztecAddress,\n    storage_contract_address: AztecAddress,\n    is_static_call: bool,\n}\n\nimpl Eq for CallerContext {\n    fn eq(self, other: CallerContext) -> bool {\n        other.msg_sender.eq(self.msg_sender)\n            & other.storage_contract_address.eq(self.storage_contract_address)\n            & other.is_static_call == self.is_static_call\n    }\n}\n\nimpl Empty for CallerContext {\n    fn empty() -> Self {\n        CallerContext {\n            msg_sender: AztecAddress::zero(),\n            storage_contract_address: AztecAddress::zero(),\n            is_static_call: false,\n        }\n    }\n}\n\nimpl CallerContext {\n    pub fn is_empty(self) -> bool {\n        self.msg_sender.is_zero() & self.storage_contract_address.is_zero() & !self.is_static_call\n    }\n\n    // Different to an empty context, a hidden context won't reveal the caller's msg_sender and storage_contract_address,\n    // but will still propagate the is_static_call flag.\n    pub fn is_hidden(self) -> bool {\n        self.msg_sender.is_zero() & self.storage_contract_address.is_zero()\n    }\n}\n\nimpl Serialize<CALLER_CONTEXT_LENGTH> for CallerContext {\n  fn serialize(self) -> [Field; CALLER_CONTEXT_LENGTH] {\n    let mut fields: BoundedVec<Field, CALLER_CONTEXT_LENGTH> = BoundedVec::new();\n\n    fields.extend_from_array(self.msg_sender.serialize());\n    fields.extend_from_array(self.storage_contract_address.serialize());\n    fields.push(self.is_static_call as Field);\n\n    assert_eq(fields.len(), CALLER_CONTEXT_LENGTH);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CALLER_CONTEXT_LENGTH> for CallerContext {\n  fn deserialize(fields: [Field; CALLER_CONTEXT_LENGTH]) -> CallerContext {\n    let mut reader = Reader::new(fields);\n\n    let item = CallerContext {\n      msg_sender: reader.read_struct(AztecAddress::deserialize),\n      storage_contract_address: reader.read_struct(AztecAddress::deserialize),\n      is_static_call: reader.read_bool(),\n    };\n    reader.finish();\n    item\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = CallerContext::empty();\n    let serialized = item.serialize();\n    let deserialized = CallerContext::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"211":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/log_hash.nr","source":"use crate::{\n    abis::side_effect::{Ordered, OrderedValue, Scoped}, address::AztecAddress,\n    constants::{\n    LOG_HASH_LENGTH, NOTE_LOG_HASH_LENGTH, ENCRYPTED_LOG_HASH_LENGTH, SCOPED_LOG_HASH_LENGTH,\n    SCOPED_ENCRYPTED_LOG_HASH_LENGTH\n},\n    traits::{Empty, Serialize, Deserialize}, utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct LogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n}\n\nimpl Ordered for LogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for LogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for LogHash {\n    fn eq(self, other: LogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n    }\n}\n\nimpl Empty for LogHash {\n    fn empty() -> Self {\n        LogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n        }\n    }\n}\n\nimpl Serialize<LOG_HASH_LENGTH> for LogHash {\n    fn serialize(self) -> [Field; LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length]\n    }\n}\n\nimpl Deserialize<LOG_HASH_LENGTH> for LogHash {\n    fn deserialize(values: [Field; LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n        }\n    }\n}\n\nimpl LogHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedLogHash {\n        ScopedLogHash { log_hash: self, contract_address }\n    }\n}\n\nstruct ScopedLogHash {\n    log_hash: LogHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<LogHash> for ScopedLogHash {\n    fn inner(self) -> LogHash {\n        self.log_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedLogHash {\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedLogHash {\n    fn value(self) -> Field {\n        self.log_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl Eq for ScopedLogHash {\n    fn eq(self, other: ScopedLogHash) -> bool {\n        (self.log_hash == other.log_hash)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedLogHash {\n    fn empty() -> Self {\n        ScopedLogHash {\n            log_hash: LogHash::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_LOG_HASH_LENGTH> for ScopedLogHash {\n    fn serialize(self) -> [Field; SCOPED_LOG_HASH_LENGTH] {\n       array_concat(self.log_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_LOG_HASH_LENGTH> for ScopedLogHash {\n    fn deserialize(values: [Field; SCOPED_LOG_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            log_hash: reader.read_struct(LogHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl ScopedLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the counter when exposing to public.\n        // The log hash must already be siloed when we call this.\n        LogHash { value: self.log_hash.value, counter: 0, length: self.log_hash.length }\n    }\n}\n\nstruct EncryptedLogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n    randomness: Field,\n}\n\nimpl Ordered for EncryptedLogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for EncryptedLogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for EncryptedLogHash {\n    fn eq(self, other: EncryptedLogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n            & (self.randomness == other.randomness) \n    }\n}\n\nimpl Empty for EncryptedLogHash {\n    fn empty() -> Self {\n        EncryptedLogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n            randomness: 0,\n        }\n    }\n}\n\nimpl Serialize<ENCRYPTED_LOG_HASH_LENGTH> for EncryptedLogHash {\n    fn serialize(self) -> [Field; ENCRYPTED_LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length, self.randomness]\n    }\n}\n\nimpl Deserialize<ENCRYPTED_LOG_HASH_LENGTH> for EncryptedLogHash {\n    fn deserialize(values: [Field; ENCRYPTED_LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n            randomness: values[3],\n        }\n    }\n}\n\nimpl EncryptedLogHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedEncryptedLogHash {\n        ScopedEncryptedLogHash { log_hash: self, contract_address }\n    }\n}\n\nstruct ScopedEncryptedLogHash {\n    log_hash: EncryptedLogHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<EncryptedLogHash> for ScopedEncryptedLogHash {\n    fn inner(self) -> EncryptedLogHash {\n        self.log_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl ScopedEncryptedLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the secret randomness and counter when exposing to public\n        // Expose as a LogHash rather than EncryptedLogHash to avoid bringing an unnec. 0 value around\n        // The log hash will already be silo'd when we call this\n        LogHash { value: self.log_hash.value, counter: 0, length: self.log_hash.length }\n    }\n}\n\nimpl Ordered for ScopedEncryptedLogHash {\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedEncryptedLogHash {\n    fn value(self) -> Field {\n        self.log_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl Eq for ScopedEncryptedLogHash {\n    fn eq(self, other: ScopedEncryptedLogHash) -> bool {\n        (self.log_hash == other.log_hash)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedEncryptedLogHash {\n    fn empty() -> Self {\n        ScopedEncryptedLogHash {\n            log_hash: EncryptedLogHash::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_ENCRYPTED_LOG_HASH_LENGTH> for ScopedEncryptedLogHash {\n    fn serialize(self) -> [Field; SCOPED_ENCRYPTED_LOG_HASH_LENGTH] {\n       array_concat(self.log_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_ENCRYPTED_LOG_HASH_LENGTH> for ScopedEncryptedLogHash {\n    fn deserialize(values: [Field; SCOPED_ENCRYPTED_LOG_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            log_hash: reader.read_struct(EncryptedLogHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nstruct NoteLogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n    note_hash_counter: u32,\n}\n\nimpl NoteLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the actual counter and note hash counter when exposing it to the public kernel.\n        // The counter is usually note_hash.counter + 1, so it can be revealing.\n        // Expose as a LogHash rather than NoteLogHash to avoid bringing an unnec. 0 value around\n        LogHash { value: self.value, counter: 0, length: self.length }\n    }\n}\n\nimpl Ordered for NoteLogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for NoteLogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for NoteLogHash {\n    fn eq(self, other: NoteLogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n            & (self.note_hash_counter == other.note_hash_counter) \n    }\n}\n\nimpl Empty for NoteLogHash {\n    fn empty() -> Self {\n        NoteLogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n            note_hash_counter: 0,\n        }\n    }\n}\n\nimpl Serialize<NOTE_LOG_HASH_LENGTH> for NoteLogHash {\n    fn serialize(self) -> [Field; NOTE_LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length, self.note_hash_counter as Field]\n    }\n}\n\nimpl Deserialize<NOTE_LOG_HASH_LENGTH> for NoteLogHash {\n    fn deserialize(values: [Field; NOTE_LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n            note_hash_counter: values[3] as u32,\n        }\n    }\n}\n"},"215":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/append_only_tree_snapshot.nr","source":"struct AppendOnlyTreeSnapshot {\n    root : Field,\n    // TODO(Alvaro) change this to a u64\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: u32 = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n"},"216":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n}\n// docs:end:call-context\n\nimpl Eq for CallContext {\n    fn eq(self, other: CallContext) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        let mut serialized: BoundedVec<Field, CALL_CONTEXT_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.msg_sender.to_field());\n        serialized.push(self.storage_contract_address.to_field());\n        serialized.push(self.function_selector.to_field());\n        serialized.push(self.is_delegate_call as Field);\n        serialized.push(self.is_static_call as Field);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        let mut reader = Reader::new(serialized);\n        CallContext {\n            msg_sender: AztecAddress::from_field(reader.read()),\n            storage_contract_address: AztecAddress::from_field(reader.read()),\n            function_selector: FunctionSelector::from_field(reader.read()),\n            is_delegate_call: reader.read() as bool,\n            is_static_call: reader.read() as bool,\n        }\n    }\n}\n\nimpl Empty for CallContext {\n    fn empty() -> Self {\n        CallContext {\n            msg_sender: AztecAddress::empty(),\n            storage_contract_address: AztecAddress::empty(),\n            function_selector: FunctionSelector::empty(),\n            is_delegate_call: false,\n            is_static_call: false,\n        }\n    }\n}\n\n#[test]\nfn serialize_deserialize_of_empty() {\n    let context = CallContext::empty();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = true;\n\n    let address: AztecAddress = AztecAddress::from_field(69420);\n    context1.msg_sender = address;\n    context2.msg_sender = address;\n\n    assert(context1.eq(context2));\n}\n\n#[test(should_fail)]\nfn not_eq_test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = false;\n\n    let address1: AztecAddress = AztecAddress::from_field(69420);\n    let address2: AztecAddress = AztecAddress::from_field(42069);\n\n    context1.msg_sender = address1;\n    context2.msg_sender = address2;\n\n    assert(context1.eq(context2));\n}\n\n#[test]\nfn hash_smoke() {\n    let context = CallContext::empty();\n    let _hashed = context.hash();\n}\n"},"217":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/max_block_number.nr","source":"use crate::{constants::MAX_BLOCK_NUMBER_LENGTH, traits::{Deserialize, Serialize, Empty}};\n\nstruct MaxBlockNumber {\n    _opt: Option<u32>\n}\n\nimpl Empty for MaxBlockNumber {\n    fn empty() -> Self {\n        Self { _opt: Option::none() }\n    }\n}\n\nimpl Eq for MaxBlockNumber {\n    fn eq(self, other: Self) -> bool {\n        self._opt == other._opt\n    }\n}\n\nimpl Serialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn serialize(self) -> [Field; MAX_BLOCK_NUMBER_LENGTH] {\n        [self._opt._is_some as Field, self._opt._value as Field]\n    }\n}\n\nimpl Deserialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn deserialize(serialized: [Field; MAX_BLOCK_NUMBER_LENGTH]) -> MaxBlockNumber {\n        MaxBlockNumber {\n            _opt: Option {\n                _is_some: serialized[0] as bool,\n                _value: serialized[1] as u32,\n            }\n        }\n    }\n}\n\nimpl MaxBlockNumber {\n    pub fn new(max_block_number: u32) -> Self {\n        Self { _opt: Option::some(max_block_number) }\n    }\n\n    pub fn is_none(self) -> bool {\n        self._opt.is_none()\n    }\n\n    pub fn is_some(self) -> bool {\n        self._opt.is_some()\n    }\n\n    pub fn unwrap(self) -> u32 {\n        self._opt.unwrap()\n    }\n\n    pub fn unwrap_unchecked(self) -> u32 {\n        self._opt.unwrap_unchecked()\n    }\n\n    pub fn min(lhs: MaxBlockNumber, rhs: MaxBlockNumber) -> MaxBlockNumber {\n        if rhs.is_none() {\n            lhs // lhs might also be none, but in that case both would be\n        } else {\n            MaxBlockNumber::min_with_u32(lhs, rhs.unwrap_unchecked())\n        }\n    }\n\n    pub fn min_with_u32(lhs: MaxBlockNumber, rhs: u32) -> MaxBlockNumber {\n        if lhs._opt.is_none() {\n            MaxBlockNumber::new(rhs)\n        } else {\n            let lhs_value = lhs._opt.unwrap_unchecked();\n\n            MaxBlockNumber::new(if lhs_value < rhs { lhs_value } else { rhs })\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = MaxBlockNumber::empty();\n    let serialized = item.serialize();\n    let deserialized = MaxBlockNumber::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn zeroed_is_none() {\n    // Large parts of the kernel rely on zeroed to initialize structs. This conveniently matches what `default` does,\n    // and though we should eventually move everything to use `default`, it's good to check for now that both are\n    // equivalent.\n    let a = MaxBlockNumber::empty();\n    assert(a.is_none());\n}\n\n#[test]\nfn serde_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert(b.is_none());\n}\n\n#[test]\nfn serde_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert_eq(b.unwrap(), 13);\n}\n\n#[test(should_fail)]\nfn default_unwrap_panics() {\n    let a = MaxBlockNumber::empty();\n    let _ = a.unwrap();\n}\n\n#[test]\nfn min_default_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::empty();\n\n    assert(MaxBlockNumber::min(a, b).is_none());\n}\n\n#[test]\nfn min_default_some() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::new(13);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_some_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::new(42);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_with_u32_default() {\n    let a = MaxBlockNumber::empty();\n    let b = 42;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 42);\n}\n\n#[test]\nfn min_with_u32_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = 42;\n    let c = 8;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min_with_u32(a, c).unwrap(), 8);\n}\n"},"220":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize, Empty}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        (self.is_private == other.is_private)\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nimpl Empty for FunctionData {\n    fn empty() -> Self {\n        FunctionData {\n            selector: FunctionSelector::empty(),\n            is_private: false\n        }\n    }\n\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data = FunctionData::empty();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data = FunctionData::empty();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty function data hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"227":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/messaging/l2_to_l1_message.nr","source":"use crate::{\n    address::{AztecAddress, EthAddress},\n    constants::{L2_TO_L1_MESSAGE_LENGTH, SCOPED_L2_TO_L1_MESSAGE_LENGTH},\n    abis::side_effect::{Ordered, Scoped}, traits::{Deserialize, Empty, Serialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\n// Note: Not to be confused with L2ToL1Msg in Solidity\nstruct L2ToL1Message {\n    recipient: EthAddress,\n    content: Field,\n    counter: u32,\n}\n\nimpl Ordered for L2ToL1Message {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Empty for L2ToL1Message {\n    fn empty() -> Self {\n        Self {\n            recipient: EthAddress::empty(),\n            content: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Eq for L2ToL1Message {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient) & (self.content == other.content) & (self.counter == other.counter)\n    }\n}\n\nimpl Serialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn serialize(self) -> [Field; L2_TO_L1_MESSAGE_LENGTH] {\n        [self.recipient.to_field(), self.content, self.counter as Field]\n    }\n}\n\nimpl Deserialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn deserialize(values: [Field; L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        Self {\n            recipient: EthAddress::from_field(values[0]),\n            content: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n\nimpl L2ToL1Message {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedL2ToL1Message {\n        ScopedL2ToL1Message { message: self, contract_address }\n    }\n}\n\nstruct ScopedL2ToL1Message {\n    message: L2ToL1Message,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<L2ToL1Message> for ScopedL2ToL1Message {\n    fn inner(self) -> L2ToL1Message {\n        self.message\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedL2ToL1Message {\n    fn counter(self) -> u32 {\n        self.message.counter\n    }\n}\n\nimpl Eq for ScopedL2ToL1Message {\n    fn eq(self, other: ScopedL2ToL1Message) -> bool {\n        (self.message == other.message)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedL2ToL1Message {\n    fn empty() -> Self {\n        ScopedL2ToL1Message {\n            message: L2ToL1Message::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_L2_TO_L1_MESSAGE_LENGTH> for ScopedL2ToL1Message {\n    fn serialize(self) -> [Field; SCOPED_L2_TO_L1_MESSAGE_LENGTH] {\n        array_concat(self.message.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_L2_TO_L1_MESSAGE_LENGTH> for ScopedL2ToL1Message {\n    fn deserialize(values: [Field; SCOPED_L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            message: reader.read_struct(L2ToL1Message::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\n#[test]\nfn serialization_of_empty_l2() {\n    let item = L2ToL1Message::empty();\n    let serialized = item.serialize();\n    let deserialized = L2ToL1Message::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped_l2() {\n    let item = ScopedL2ToL1Message::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedL2ToL1Message::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"23":{"path":"std/field/mod.nr","source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n"},"234":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U64_SERIALIZED_LEN: Field = 1;\nglobal U128_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n"},"237":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/content_commitment.nr","source":"use crate::{\n    constants::CONTENT_COMMITMENT_LENGTH, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct ContentCommitment {\n  num_txs: Field,\n  txs_effects_hash: Field,\n  in_hash: Field,\n  out_hash: Field,\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new();\n\n    fields.push(self.num_txs);\n    fields.push(self.txs_effects_hash);\n    fields.push(self.in_hash);\n    fields.push(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let num_txs = serialized[0];\n\n    let txs_effects_hash = serialized[1];\n\n    let in_hash = serialized[2];\n\n    let out_hash = serialized[3];\n\n    Self {\n      num_txs,\n      txs_effects_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      num_txs: 0,\n      txs_effects_hash: 0,\n      in_hash: 0,\n      out_hash: 0,\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.num_txs == other.num_txs)\n      & (self.txs_effects_hash == other.txs_effects_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n"},"239":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/header.nr","source":"use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, STATE_REFERENCE_LENGTH, CONTENT_COMMITMENT_LENGTH},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n    total_fees: Field\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables) &\n        self.total_fees.eq(other.total_fees)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n        fields.push(self.total_fees);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n        offset = offset + GLOBAL_VARIABLES_LENGTH;\n\n        let total_fees = serialized[offset];\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n            total_fees\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n            total_fees: 0\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header = Header::empty();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header = Header::empty();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header = Header::empty();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x124e8c40a6eca2e3ad10c04050b01a3fad00df3cea47b13592c7571b6914c7a7;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"240":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path, messaging::l2_to_l1_message::ScopedL2ToL1Message,\n    recursion::verification_key::VerificationKey, traits::is_empty,\n    utils::field::field_from_bytes_32_trunc\n};\nuse std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    pedersen_hash(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, inner_note_hash: Field) -> Field {\n    let inputs = [nonce, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_encrypted_log_hash(address: AztecAddress, randomness: Field, log_hash: Field) -> Field {\n    // TODO: Using 0 GENERATOR_INDEX here as interim before we move to posiedon\n    // NB: A unique separator will be needed for masked_contract_address\n    let mut masked_contract_address = pedersen_hash([address.to_field(), randomness], 0);\n    if randomness == 0 {\n        // In some cases, we actually want to reveal the contract address we are siloing with:\n        // e.g. 'handshaking' contract w/ known address\n        // An app providing randomness = 0 signals to not mask the address.\n        masked_contract_address = address.to_field();\n    }\n    accumulate_sha256([masked_contract_address, log_hash])\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedEncryptedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_encrypted_log_hash(\n            log_hash.contract_address,\n            log_hash.log_hash.randomness,\n            log_hash.log_hash.value\n        )\n    }\n}\n\npub fn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly. \npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<N>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n"},"241":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/partial_state_reference.nr","source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0], \n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial = PartialStateReference::empty();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n"},"243":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/transaction/tx_context.nr","source":"use crate::{\n    constants::{GENERATOR_INDEX__TX_CONTEXT, TX_CONTEXT_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader,\n    abis::gas_settings::GasSettings\n};\n\n// docs:start:tx-context\nstruct TxContext {\n    chain_id : Field,\n    version : Field,\n    gas_settings: GasSettings,\n}\n// docs:end:tx-context\n\nimpl TxContext {\n    pub fn new(chain_id: Field, version: Field, gas_settings: GasSettings) -> Self {\n        TxContext { chain_id, version, gas_settings }\n    }\n}\n\nimpl Eq for TxContext {\n    fn eq(self, other: Self) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.gas_settings.eq(other.gas_settings))\n    }\n}\n\nimpl Empty for TxContext {\n    fn empty() -> Self {\n        TxContext {\n            chain_id: 0,\n            version: 0,\n            gas_settings: GasSettings::empty(),\n        }\n    }\n}\n\nimpl Serialize<TX_CONTEXT_LENGTH> for TxContext {\n    fn serialize(self) -> [Field; TX_CONTEXT_LENGTH] {\n        let mut fields: BoundedVec<Field, TX_CONTEXT_LENGTH> = BoundedVec::new();\n\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.extend_from_array(self.gas_settings.serialize());\n\n        assert_eq(fields.len(), TX_CONTEXT_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<TX_CONTEXT_LENGTH> for TxContext {\n    fn deserialize(serialized: [Field; TX_CONTEXT_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let context = Self {\n            chain_id: reader.read(),\n            version: reader.read(),\n            gas_settings: reader.read_struct(GasSettings::deserialize),\n        };\n\n        reader.finish();\n        context\n    }\n}\n\nimpl Hash for TxContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__TX_CONTEXT)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context = TxContext::empty();\n    let serialized = context.serialize();\n    let deserialized = TxContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let context = TxContext::empty();\n    let hash = context.hash();\n\n    // Value from tx_context.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x17e4357684c5a4349b4587c95b0b6161dcb4a3c5b02d4eb2ecc3b02c80193261;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"249":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/state_reference.nr","source":"use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state = StateReference::empty();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n"},"263":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"struct Reader<N> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"273":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes = field.to_be_bytes(31);\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2 = field.to_be_bytes(31);\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n"},"275":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"289":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr","source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n"},"290":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId, hash::poseidon2_hash,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash([pub_keys_hash.to_field(), partial_address.to_field(), GENERATOR_INDEX__CONTRACT_ADDRESS_V1])\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x1b6ead051e7b42665064ca6cf1ec77da0a36d86e00d1ff6e44077966c0c3a9fa;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"30":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\nglobal RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) -> [Field; RATE] {\n        // zero-pad the cache\n        for i in 0..RATE {\n            if i >= self.cache_size {\n                self.cache[i] = 0;\n            }\n        }\n        // add the cache into sponge state\n        for i in 0..RATE {\n            self.state[i] += self.cache[i];\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n        // return `RATE` number of field elements from the sponge state.\n        let mut result = [0; RATE];\n        for i in 0..RATE {\n            result[i] = self.state[i];\n        }\n        result\n    }\n\n    fn absorb(&mut self, input: Field) {\n        if (!self.squeeze_mode) & (self.cache_size == RATE) {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            let _ = self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else if (!self.squeeze_mode) & (self.cache_size != RATE) {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        } else if self.squeeze_mode {\n            // If we're in squeeze mode, switch to absorb mode and add the input into the cache.\n            // N.B. I don't think this code path can be reached?!\n            self.cache[0] = input;\n            self.cache_size = 1;\n            self.squeeze_mode = false;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        if self.squeeze_mode & (self.cache_size == 0) {\n            // If we're in squeze mode and the cache is empty, there is nothing left to squeeze out of the sponge!\n            // Switch to absorb mode.\n            self.squeeze_mode = false;\n            self.cache_size = 0;\n        }\n        if !self.squeeze_mode {\n            // If we're in absorb mode, apply sponge permutation to compress the cache, populate cache with compressed\n            // state and switch to squeeze mode. Note: this code block will execute if the previous `if` condition was\n            // matched\n            let new_output_elements = self.perform_duplex();\n            self.squeeze_mode = true;\n            for i in 0..RATE {\n                self.cache[i] = new_output_elements[i];\n            }\n            self.cache_size = RATE;\n        }\n        // By this point, we should have a non-empty cache. Pop one item off the top of the cache and return it.\n        let result = self.cache[0];\n        for i in 1..RATE {\n            if i < self.cache_size {\n                self.cache[i - 1] = self.cache[i];\n            }\n        }\n        self.cache_size -= 1;\n        self.cache[self.cache_size] = 0;\n        result\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n"},"330":{"path":"/usr/src/noir-projects/aztec-nr/value-note/src/value_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n    address::AztecAddress, traits::{Deserialize, Serialize}, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::poseidon2_hash\n},\n    note::{note_header::NoteHeader, note_interface::NoteInterface, utils::compute_note_hash_for_consumption},\n    oracle::unsafe_rand::unsafe_rand, keys::getters::get_nsk_app, context::PrivateContext\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n// VALUE_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal VALUE_NOTE_BYTES_LEN: Field = 3 * 32 + 64;\n\n// docs:start:value-note-def\n#[aztec(note)]\nstruct ValueNote {\n    value: Field,\n   // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NoteInterface<VALUE_NOTE_LEN, VALUE_NOTE_BYTES_LEN> for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_note_hash_and_nullifier(self, context: &mut PrivateContext) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n\n    // docs:end:nullifier\n\n    fn compute_note_hash_and_nullifier_without_context(self) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, npk_m_hash: Field) -> Self {\n        let randomness = unsafe_rand();\n        let header = NoteHeader::empty();\n        ValueNote { value, npk_m_hash, randomness, header }\n    }\n}\n\nimpl Serialize<7> for ValueNote {\n    fn serialize(self) -> [Field; 7] {\n        let header = self.header.serialize();\n\n        [self.value, self.npk_m_hash, self.randomness, header[0], header[1], header[2], header[3]]\n    }\n}\n"},"370":{"path":"/usr/src/noir-projects/noir-contracts/contracts/parent_contract/src/main.nr","source":"\n// A contract used along with `Child` contract to test nested calls.\ncontract Parent {\n    use dep::aztec::prelude::{AztecAddress, FunctionSelector, Deserialize};\n    use dep::aztec::context::gas::GasOpts;\n    // Private function to call another private function in the target_contract using the provided selector\n    #[aztec(private)]\n    fn entry_point(target_contract: AztecAddress, target_selector: FunctionSelector) -> Field {\n        // Call the target private function\n        context.call_private_function(target_contract, target_selector, [0]).unpack_into()\n    }\n\n    // Public function to directly call another public function to the target_contract using the selector and value provided\n    #[aztec(public)]\n    fn pub_entry_point(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        init_value: Field\n    ) -> Field {\n        context.call_public_function(\n            target_contract,\n            target_selector,\n            [init_value].as_slice(),\n            GasOpts::default()\n        ).deserialize_into()\n    }\n\n    // Same as pub_entry_point, but calls the target contract twice, using the return value from the first invocation as the argument for the second.\n    #[aztec(public)]\n    fn pub_entry_point_twice(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        init_value: Field\n    ) -> Field {\n        let return_value: Field = context.call_public_function(\n            target_contract,\n            target_selector,\n            [init_value].as_slice(),\n            GasOpts::default()\n        ).deserialize_into();\n        context.call_public_function(\n            target_contract,\n            target_selector,\n            [return_value].as_slice(),\n            GasOpts::default()\n        ).deserialize_into()\n    }\n\n    // Private function to enqueue a call to the target_contract address using the selector and argument provided\n    #[aztec(private)]\n    fn enqueue_call_to_child(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        target_value: Field\n    ) {\n        context.call_public_function(target_contract, target_selector, [target_value]);\n    }\n\n    // Private function that enqueues two calls to a child contract: \n    // - one through a nested call to enqueue_call_to_child with value 10,\n    // - followed by one issued directly from this function with value 20.\n    #[aztec(private)]\n    fn enqueue_calls_to_child_with_nested_first(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector\n    ) {\n        let enqueue_call_to_child_selector = FunctionSelector::from_signature(\"enqueue_call_to_child((Field),(u32),Field)\");\n        let _ret = context.call_private_function(\n            context.this_address(),\n            enqueue_call_to_child_selector,\n            [target_contract.to_field(), target_selector.to_field(), 10]\n        );\n        context.call_public_function(target_contract, target_selector, [20]);\n    }\n\n    // Private function that enqueues two calls to a child contract: \n    // - one issued directly from this function with value 20,\n    // - followed by one through a nested call to enqueue_call_to_child with value 10.\n    #[aztec(private)]\n    fn enqueue_calls_to_child_with_nested_last(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector\n    ) {\n        context.call_public_function(target_contract, target_selector, [20]);\n        let enqueue_call_to_child_selector = FunctionSelector::from_signature(\"enqueue_call_to_child((Field),(u32),Field)\");\n        let _ret = context.call_private_function(\n            context.this_address(),\n            enqueue_call_to_child_selector,\n            [target_contract.to_field(), target_selector.to_field(), 10]\n        );\n    }\n\n    // Private function to enqueue a call to the target_contract address using the selector and argument provided\n    #[aztec(private)]\n    fn enqueue_call_to_child_twice(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        target_value: Field\n    ) {\n        // Enqueue the first public call\n        context.call_public_function(target_contract, target_selector, [target_value]);\n        // Enqueue the second public call\n        context.call_public_function(target_contract, target_selector, [target_value + 1]);\n    }\n\n    // Private function to enqueue a call to the pub_entry_point function of this same contract, passing the target arguments provided\n    #[aztec(private)]\n    fn enqueue_call_to_pub_entry_point(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        target_value: Field\n    ) {\n        let pub_entry_point_selector = FunctionSelector::from_signature(\"pub_entry_point((Field),(u32),Field)\");\n        let this_address = context.this_address();\n        let _void = context.call_public_function(\n            this_address,\n            pub_entry_point_selector,\n            [target_contract.to_field(), target_selector.to_field(), target_value]\n        );\n    }\n\n    // Private function to enqueue two calls to the pub_entry_point function of this same contract, passing the target arguments provided\n    #[aztec(private)]\n    fn enqueue_calls_to_pub_entry_point(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        target_value: Field\n    ) {\n        let pub_entry_point_selector = FunctionSelector::from_signature(\"pub_entry_point((Field),(u32),Field)\");\n        let this_address = context.this_address();\n\n        context.call_public_function(\n            this_address,\n            pub_entry_point_selector,\n            [target_contract.to_field(), target_selector.to_field(), target_value]\n        );\n\n        context.call_public_function(\n            this_address,\n            pub_entry_point_selector,\n            [target_contract.to_field(), target_selector.to_field(), target_value + 1]\n        );\n    }\n\n    #[aztec(private)]\n    fn private_static_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 2]\n    ) -> Field {\n        // Call the target private function\n        context.static_call_private_function(target_contract, target_selector, args).unpack_into()\n    }\n\n    #[aztec(private)]\n    fn private_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 2]\n    ) -> Field {\n        // Call the target private function\n        context.call_private_function(target_contract, target_selector, args).unpack_into()\n    }\n\n    // Private function to set a static context and verify correct propagation for nested private calls\n    #[aztec(private)]\n    fn private_nested_static_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 2]\n    ) -> Field {\n        // Call the target private function statically\n        let private_call_selector = FunctionSelector::from_signature(\"private_call((Field),(u32),[Field;2])\");\n        let this_address = context.this_address();\n        let return_value: Field = context.static_call_private_function(\n            this_address,\n            private_call_selector,\n            [target_contract.to_field(), target_selector.to_field(), args[0], args[1]]\n        ).unpack_into();\n\n        // Copy the return value from the call to this function's return values\n        return_value\n    }\n\n    // Public function to directly call another public function to the target_contract using the selector and value provided\n    #[aztec(public)]\n    fn public_static_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 1]\n    ) -> Field {\n        context.static_call_public_function(\n            target_contract,\n            target_selector,\n            args.as_slice(),\n            GasOpts::default()\n        ).deserialize_into()\n    }\n\n    // Public function to set a static context and verify correct propagation for nested public calls\n    #[aztec(public)]\n    fn public_nested_static_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 1]\n    ) -> Field {\n        // Call the target public function through the pub entrypoint statically\n        let pub_entry_point_selector = FunctionSelector::from_signature(\"pub_entry_point((Field),(u32),Field)\");\n        let this_address = context.this_address();\n        context.static_call_public_function(\n            this_address,\n            pub_entry_point_selector,\n            [target_contract.to_field(), target_selector.to_field(), args[0]].as_slice(),\n            GasOpts::default()\n        ).deserialize_into()\n    }\n\n    // Private function to enqueue a static call to the pub_entry_point function of another contract, passing the target arguments provided\n    #[aztec(private)]\n    fn enqueue_static_nested_call_to_pub_function(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 1]\n    ) {\n        // Call the target public function through the pub entrypoint statically\n        let pub_entry_point_selector = FunctionSelector::from_signature(\"pub_entry_point((Field),(u32),Field)\");\n        let this_address = context.this_address();\n        context.static_call_public_function(\n            this_address,\n            pub_entry_point_selector,\n            [target_contract.to_field(), target_selector.to_field(), args[0]]\n        );\n    }\n\n    // Private function to enqueue a static call to the pub_entry_point function of another contract, passing the target arguments provided\n    #[aztec(private)]\n    fn enqueue_static_call_to_pub_function(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 1]\n    ) {\n        // Call the target private function\n        context.static_call_public_function(target_contract, target_selector, args);\n    }\n\n    use dep::aztec::test::{helpers::{cheatcodes, test_environment::TestEnvironment}};\n    use dep::aztec::protocol_types::storage::map::derive_storage_slot_in_map;\n    use dep::aztec::note::note_getter::{MAX_NOTES_PER_PAGE, view_notes};\n    use dep::aztec::note::note_viewer_options::NoteViewerOptions;\n    use dep::child_contract::Child;\n    use dep::value_note::value_note::ValueNote;\n\n    #[test]\n    fn test_private_call() {\n        // Setup env, generate keys\n        let mut env = TestEnvironment::new();\n        let owner = env.create_account();\n\n        // Deploy child contract\n        let child_contract = env.deploy(\"@aztec/noir-contracts.js/Child\").without_initializer();\n        let child_contract_address = child_contract.to_address();\n        cheatcodes::advance_blocks_by(1);\n\n        // Set value in child through parent\n        let value_to_set = 7;\n        let parent_private_set_call_interface = Parent::interface().private_call(\n            child_contract_address,\n            FunctionSelector::from_signature(\"private_set_value(Field,(Field))\"),\n            [value_to_set, owner.to_field()]\n        );\n        let result: Field = env.call_private(parent_private_set_call_interface);\n        assert(result == value_to_set);\n        // Read the stored value in the note. We have to change the contract address to the child contract in order to read its notes\n        env.impersonate(child_contract_address);\n        let counter_slot = Child::storage().a_map_with_private_values.slot;\n        let owner_slot = derive_storage_slot_in_map(counter_slot, owner);\n        let mut options = NoteViewerOptions::new();\n        let notes: BoundedVec<ValueNote, MAX_NOTES_PER_PAGE> = view_notes(owner_slot, options);\n        let note_value = notes.get(0).value;\n        assert(note_value == value_to_set);\n        assert(note_value == result);\n        // Get value from child through parent\n        let parent_private_get_call_interface = Parent::interface().private_call(\n            child_contract_address,\n            FunctionSelector::from_signature(\"private_get_value(Field,(Field))\"),\n            [7, owner.to_field()]\n        );\n        let read_result: Field = env.call_private(parent_private_get_call_interface);\n        assert(note_value == read_result);\n    }\n}\n"},"65":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/getters.nr","source":"use dep::protocol_types::{\n    header::Header, abis::validation_requests::KeyValidationRequest, address::AztecAddress,\n    constants::CANONICAL_KEY_REGISTRY_ADDRESS, point::Point, storage::map::derive_storage_slot_in_map,\n    traits::is_empty\n};\nuse crate::{\n    context::PrivateContext,\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX, TAGGING_INDEX}},\n    state_vars::{shared_mutable::shared_mutable_private_getter::SharedMutablePrivateGetter}\n};\n\nglobal DELAY = 5;\n\n// docs:start:key-getters\ntrait KeyGetters {\n  fn get_npk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_ivpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_ovpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_tpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_npk_m_hash(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Field;\n}\n\nimpl KeyGetters for Header {\n    fn get_npk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, NULLIFIER_INDEX, self)\n    }\n\n    fn get_ivpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, INCOMING_INDEX, self)\n    }\n\n    fn get_ovpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, OUTGOING_INDEX, self)\n    }\n\n    fn get_tpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, TAGGING_INDEX, self)\n    }\n\n    fn get_npk_m_hash(self, context: &mut PrivateContext, address: AztecAddress) -> Field {\n        get_master_key(context, address, NULLIFIER_INDEX, self).hash()\n    }\n}\n// docs:end:key-getters\n\nfn get_master_key(\n    context: &mut PrivateContext,\n    address: AztecAddress,\n    key_index: Field,\n    header: Header\n) -> Point {\n    let key = fetch_key_from_registry(context, key_index, address, header);\n    if is_empty(key) {\n        // Keys were not registered in registry yet --> fetch key from PXE\n        let keys = fetch_and_constrain_keys(address);\n        // Return the corresponding to index\n        keys.get_key_by_index(key_index)\n    } else {\n        // Keys were registered --> return the key\n        key\n    }\n}\n\nfn fetch_key_from_registry(\n    context: &mut PrivateContext,\n    key_index: Field,\n    address: AztecAddress,\n    header: Header\n) -> Point {\n    let x_coordinate_map_slot = key_index * 2 + 1;\n    let y_coordinate_map_slot = x_coordinate_map_slot + 1;\n    let x_coordinate_derived_slot = derive_storage_slot_in_map(x_coordinate_map_slot, address);\n    let y_coordinate_derived_slot = derive_storage_slot_in_map(y_coordinate_map_slot, address);\n\n    let x_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        x_coordinate_derived_slot\n    );\n    let y_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        y_coordinate_derived_slot\n    );\n    let x_coordinate = x_coordinate_registry.get_value_in_private(header);\n    let y_coordinate = y_coordinate_registry.get_value_in_private(header);\n\n    Point::new(x_coordinate, y_coordinate, false)\n}\n\n// Passes only when keys were not rotated - is expected to be called only when keys were not registered yet\nfn fetch_and_constrain_keys(address: AztecAddress) -> PublicKeys {\n    let (public_keys, partial_address) = get_public_keys_and_partial_address(address);\n\n    let computed_address = AztecAddress::compute(public_keys.hash(), partial_address);\n\n    assert(computed_address.eq(address));\n\n    public_keys\n}\n\n// A helper function since requesting nsk_app is very common\n// TODO(#6543)\npub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n"},"89":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\nstruct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<N>(self) -> [Field; N] {\n        let unpacked: [Field; N] = unpack_returns(self.packed_returns);\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, N>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"94":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, set_public_teardown_function_call_internal,\n    parse_public_call_stack_item_from_oracle\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    caller_context::CallerContext, function_selector::FunctionSelector,\n    max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_function_hash: Field,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    // TODO(#7112): This function is called with non-zero note hash only in 1 of 25 cases in aztec-packages repo\n    // - consider creating a separate function with 1 arg for the zero note hash case.\n    fn push_nullifier(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            public_teardown_function_hash: self.public_teardown_function_hash,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one \n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<M>(&mut self, randomness: Field, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<M>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.start_side_effect_counter, start_side_effect_counter);\n        let end_side_effect_counter = item.public_inputs.end_side_effect_counter;\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        let mut caller_context = CallerContext::empty();\n        caller_context.is_static_call = self.inputs.call_context.is_static_call;\n        if is_delegate_call {\n            caller_context.msg_sender = self.inputs.call_context.msg_sender;\n            caller_context.storage_contract_address = self.inputs.call_context.storage_contract_address;\n        }\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            target: item.contract_address,\n            call_context: item.public_inputs.call_context,\n            function_data: item.function_data,\n            args_hash: item.public_inputs.args_hash,\n            returns_hash: item.public_inputs.returns_hash,\n            caller_context,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(item.public_inputs.returns_hash)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_call_stack_hashes.push(item.get_compressed().hash());\n    }\n\n    pub fn set_public_teardown_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_teardown_function_hash = item.get_compressed().hash();\n    }\n\n    fn validate_call_stack_item_from_oracle(\n        self,\n        item: PublicCallStackItem,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"95":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::inputs::public_context_inputs::PublicContextInputs;\nuse crate::context::gas::GasOpts;\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs) -> Self {\n        PublicContext { inputs }\n    }\n\n    pub fn emit_unencrypted_log<T, N>(&mut self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0);\n    }\n\n    fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        assert(false, \"'delegate_call_public_function' not implemented!\");\n        FunctionReturns::new([0; RETURNS_COUNT])\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        // Cannot nullify pending commitments in AVM, so `nullified_commitment` is not used\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(self) -> AztecAddress {\n        sender()\n    }\n    fn selector(self) -> FunctionSelector {\n        FunctionSelector::from_u32(function_selector())\n    }\n    fn get_args_hash(self) -> Field {\n        self.inputs.args_hash\n    }\n    fn transaction_fee(self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(self) -> Field {\n        chain_id()\n    }\n    fn version(self) -> Field {\n        version()\n    }\n    fn block_number(self) -> Field {\n        block_number()\n    }\n    fn timestamp(self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(self) -> Field {\n        da_gas_left()\n    }\n\n    fn raw_storage_read<N>(_self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(storage_slot)\n    }\n\n    fn storage_read<T, N>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<N>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        storage_write(storage_slot, values);\n    }\n\n    fn storage_write<T, N>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    let MAX_POSSIBLE_FIELD: Field = 0 - 1;\n    [\n        user_gas.l2_gas.unwrap_or(MAX_POSSIBLE_FIELD),\n        user_gas.da_gas.unwrap_or(MAX_POSSIBLE_FIELD)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/6420): reconsider.\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\nunconstrained fn function_selector() -> u32 {\n    function_selector_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<RET_SIZE>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<RET_SIZE>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_opcode(storage_slot, N)\n}\n\nunconstrained fn storage_write<N>(storage_slot: Field, values: [Field; N]) {\n    storage_write_opcode(storage_slot, values);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(PublicContextInputs::empty())\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n#[oracle(avmOpcodeFunctionSelector)]\nunconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<RET_SIZE>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<RET_SIZE>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode<N>(storage_slot: Field, length: Field) -> [Field; N] {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode<N>(storage_slot: Field, values: [Field; N]) {}\n\nstruct FunctionReturns<N> {\n    values: [Field; N]\n}\n\nimpl<N> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn assert_empty(returns: FunctionReturns<0>) {\n        assert(returns.values.len() == 0);\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n"}}}