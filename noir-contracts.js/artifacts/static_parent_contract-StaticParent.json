{"transpiled":true,"noir_version":"0.31.0+6237d96a0bc23a5ed656e7ba172fb57facd9c807","name":"StaticParent","functions":[{"name":"private_nested_static_call","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"public_call","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"arg","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAC/52Vu47TQBSGx1nbSYjtSFlv7hcnsUPouAhKGoREtaKkoUAsSEgUCGgo9xEQL0BBjUSDQOIJeIvtKGnomXMZ//ZGipS1NM7xmf87t0gzuTkyphUa+8yMPoH1mMRYZ8ujdd84yxoNu7zEeM6VcABeBekoQKNQwoiPGJ+tIwrPlm9f4cq+ksJI2FZwlzYCSRBKIaaZUwJO2y4qFR6p2aaXaChhK8dOboKbZ6dvL259vvHj8cPv5+dPnlp3R2J3aFnF9s6fRx9+vvn44OLfp78CRqKIaOVchNHo7olFEdNqlOHos3Pp05SfUZ27Ji0E2kJcNMRpYjQTi6atSPsKCHYqZlQOMsYgo/ogOxhkIqJYTNPlvNRHF/KuaBIxTYKdXpksQbJePVn39ok25muiSIN5Km5C3JQwXTGrRezueOT2gzKMj1DHdqVlbSFqS+u1HWMQqQ14an9PRByquM8DoQ76wPqiScVk9AXcDh0wSoIB0AHQgaLv4HbokFESDIEOgQ4VfQ+3Q0eMkmAEdAR0JL+7SH8/YrOdwe3QMaMkGAMdAx0rmsHt0AmjJJgAnQCdKPocbodOGSXBFOgU6FTRZ3A7dMYoCWZAZ0Bnir6G26FzRkkwBzoHOt+d7JWR8X7EFvgSbocuGCXBAugC6GI326Icxx7EZnsFt0MzRkmQAc2AZrvZsnIcByL9w5HRfsT2tITboUtGSbAEugRKSEov8w2HjYAGJ4w7UlhYuGPHRvQr18yKU63qqdYCL8V0O3SarSEqcGhtQjY3qr+uh+LWY+GWXLS4kK/y5dolZls4WY7EstEQJ226DNTJhmbzpVLWpYLvedptWrkkcHL36mf6oTumflmspPummyO3+assQx93dTX5b9I/VG8ujs0WZWqsyRz+pvUfORMiZjwJAAA=","debug_symbols":"zdzbSlthEIbhe1nHoazZ/ZvcSiklaiwBiaKxUMR770qzIdC0oZiXzpkrGfg+0GcQMuRtuFvevH77ulrfP74M889vw8Pj7WKzelxPT2/D+En816svT4v19oWXzeJ5M8yjyGxYru+GeZX+PhvuVw/LYe7j+D77bVaL2n5YS8hxuseZ4VZjP9u6H0el2/uX2bZNfLhNqBzblEttxNuhjvR2OryrU3LVqbnqtFx1eqo6Ouaqo7nqeK46uaBrLuiaC7rmgm65oJvkqpNr75jlqpNrDVquf78s11a2XFvZcm1ly7WVPddW9lxb2XNtZc+1lT3XVvZcW9lzbWXPtZU911b2XFs5cm3lyLWVI9dWDnIr7xIcTwg8oeAJH99wtfZDQu1nEhqe0OmEMuIJgiconmB4guMJgScUPAE3XXDTBTddcdMVN11x0xU3XXHTFTddcdMVN11x0xU33XDTDTfdcNMNN91w0w033XDTDTfdcNMNN91x0x033XHTHTfdcdMdN91x0x033XHTHTct48hHCB+hfITxEc5HBB9R+IjKRzQ+gtctvG7hdQuvW3jdwusWXrfwuoXXLbxu4XUrr1t53crrVl638rqV1628buV1K69bed3G6zZet/G6jddtvG7jdRuv23jdxus2Xrfzup3X7bxu53U7r9t53c7rdl6387qd1x287uB1B687eN3B6w5ed/C6+Qs04U/QhL9BE/4ITfgrNOHP0IS/QxP+EE34SzThT9GEv0UT/hhN+Gs04c/RhL9HE/4gTfiLNOFP0oS/SRP+KE2ucJXWtBwiWtHTiH8a3vdpyfr0XH2ucB933T6XNpK1C32mjwrKuJ+efq7j3xtNIxYn42f+pi/e3/2PTnaFTn8OOTPe/fCbkx5xHFbzQyXPVynyVSr5KtV8lVq+Sj1Tpenp++J5tbh5WG6/Wmv75uv69vBNW9Pj5sfT7p1p9ic="},{"name":"private_call","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":""},{"name":"enqueue_call","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"7ZzdbuIwEIXfJddV5RmPPXZfZbVa0ZaukCqoCl1phfru62yJA+HHavEuEw1XJDCOz3dInGOQs24ep/dvP3/M5k+LZXP3bd08Lx4mq9linvbWDfi/7y1fJvN2d7mavK6aO3PTTOeP6fX9pnmaPU+bOzJpe68OPcRNKXqCXA0IB6otE26qbTCxUB0p0qY6OmdzNZJ5/37TAI9VePh/wgkYNtWEFs4UHs8RbgOa7KHzuTpSe2w0//DYcOjYwBQ2bSCAL/QAEXIXaXvL+NTHAUHGd05aw7snTKsIxSmyF1DkekXBlC5B57mrdkx7+km4fjKhqyZwZ16J6KTT1hx30FehzYogognDMYKr9OHCqT5CjT4wj/8QLdrT3xqCzZc9goswlBQvIMmDzZK8L5131A/t5PtjAx3SwtzRcuh1J1UtrDWaYEETLGqCtZpgSROs0wTrNcGyJtigCVZ+gnK+q7becBG2m2YF2ErirUn7uj1n2YzYV7fEn7OR5GezUdgoP/WNwkb5eXIUNspPqqOwka421rBRfroehY3yc/sobJQ/IxiFjfLnGqOwUfMshvM/G8DsdmxM1jjNM5OCNZpnGwVrNM8gCtZonhUUrKGrNces0ZzeC9ZoTuQFazSn7II1mpNzMC5Tot+zRnMaPm2N15yGC9ZoTsMFazSn4YI1mtNwwRq6WnPMGs1puGCN5jRcsEZzGi5YIz8N+6zFeu8K1ljqfYQda1pY+fm2HizLT6wVYeVn0Iqw8lNlRVj5ObEiLGmClZ/lKsLKT2cVYeXnrYqwF0lQeVEXQghYKLdJQVdugxuuz+I4AgLuCSK6AUEw8gmi7UI7koHhdxBAPAEZ63sC5iEByidAg5kA2QwJ7AgIQsgE1uGQgOQTRJ/PImfIDgmceAJnQj6LHPDelXyJO33M6zrSNu1JYnmSLnHXjDFHhDQSFCLCNoCBraXcbD8WZ98evG1627Xy2wts0i2rbRRujy2GhvwrTRz8/rNpF7/W7tji32I7+GI7/HS7tPdr8jqb3D9P20eztB++zR+6J7Wk3dXvl49PUu0f"},{"name":"enqueue_static_nested_call_to_pub_function","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"7Zxhb9owEIb/Sz5Xle98Ptv8lWmaaEsnJARVoZMm1P++hCYOhAivbcrOun2CwNl+3wdHeR3h7KuHxd3Lzx/L9eNmW82+7avV5n6+W27W9dG+Anf4bPs0XzeH2938eVfNzE21WD/Ur6831eNytahmZOr3Z3XIENtSZIJUDQgj1dYTttU2mJipjhSprY7O2VSNZF6/31TApQr31xNO4KGtJrTwSeHhM8JtQJMYOk7VkQ59x6/rG81Y3y76ziybyJkRvEPXVntHrh/BfvV0Qbiy+knnDOIU6n1Sz8Ycq29GsFOMwHhhBJpgBIYOqg9gL/8CCJa7vhFchOGEdlcXxGCTIOYTQSPzn/rTkbjvG2hUSZLtQ68aWvasx6rXYzXosRrVWLVGj1XQYxX1WLV6rJJwq467asvGZ636tvhYB/KYEGDfLaDAI/bVwO+GKD2HFQFResIrAqL07FgEROmptAiI0vNuCRBJepIuAqL0jF4EROnpvwiI0tcVRUAktRDre/YJoncnEBswelchGTB6VxYZMHpXCxkwelcAGTB6U/1lME5vUs+A0Zu+M2D0JuoMGL0pOZjuDw4QkM/A0H8w42D0Jt8MGL3JNwNGb/LNgNGbfDNg9Cbfy2BYb/LNgNGbfDNgpCdfppDAsMuAsdRThBMwjVXpWXZCq6THqvS8OaFV6QlyQqvSM+GEVqWnvAmtSs9t01n10pPYhFalZ6sJrf6DtJQ2/iCEgJetog3AXbkNLhyXN/qteP2+1x/RDfWTdP3RdtEcycAZfydcPxnLvX7vh/pZun40mPSjN0P9Xrz+EJJ+63CoP0jXHznNH2fIDvVH4fqdCWn+OPDD8zdc/6oe0/aC+j2dCQJpgq5/hYwxhYH67M+EgWP5Bo420vrDBT7YsuVT0fIRb2H0B4D+tAQ42bzt3jYD347vXgQP6eZXHNxWa9vFj7Ub31f3F+3gg+3w3e3qo1/z5+X8brVonirRfPmyvu8eMlEf7n4/vX1T1/4B"},{"name":"private_get_value_from_child","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"value","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"private_static_call","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"public_static_call","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAC/52Wu47TQBSGx9k4yW6CNyabxLHj3DZOoAOtoKRBSFQrShoKxIKERIGAhnIfAfECPAWCV6ClRmI7JBoaeuY/c/lzWSJ5LTk+c+b/zjkz43hmrvaUatSUvnJlr1B7VKS0sxHgvqecpY2KvoNIBc4VSQC5C+gQoFJYQhkfmKpYewg/F6SqzZqYCKbq6EdO1RALgWoz/RNLU4dohHfgDwGQa9G8FopZh6nvaAqwB2uifxKfYB/NZeGGu68Ew9XCDwO2574nrokZW9H1uQqg6AQi7MCFW1IuTGvPpgPTKZzs0HTs+46KcaLTZWjjiSKHrBRZD1ha0zsbslJYNFU3/YjYKlZW8z/Dq3F4ehbDW2enby5uf7r55dGDz+fnj5+gLhMb5R1qxY2TXw/ff3394f7F349/DNg2iraZrdCGCxSvOPKzEFd8ODQPN5rKN9vrXGSGENohxDJnESwOJjaaFhepNHLpS9XxExlzIjsb78lJ1+aq2qU9sDHdqtdXVs6EaRvTvWOX98g7dhD6MAjbNEDq/zMb73B9vbYqF1kXEZzq5xFfQYi7MjdHsIh1lf8vdS36nG6H9gSFoEe0R7Rn0bd0O7QvKAR9on2ifYu+o9uhiaAQJEQTool5biPd3YjOdka3QweCQjAgOiA6sOiEboemgkKQEk2JptuFpn5aSiL93Ygu8CndDs0EhSAjmhHNtrNlPtsORGd7SbdDh4JCMCQ6JDq06DO6HZoLCkFONCeabxea+8kviVwhS7ob0WN6RbdDR4JCMCI6IjraznZlZLAb0QW+oNuhY0EhGBMdEx1vZxv76SiJZOWRvDzSLY8kuxE9c1O6HToRFIIJ0QlRfCvqclb4yS96JqDiZ9x9t6FWhfu264jVle11Kqmm66lmBp4Y0/VgWWYUzbkzFOZ0U1j9wu48S3O6WdozzUIq/mFabriFnFCc7JiJTUfFONHpMszxhOL7SlkbBd8N3OdkZSfm9thZ3zjL9ihOOkRTM/qmm0cZ5m9fhr3c4awpy2QX1B4PJLZYyFQ5hpl8w/0PI6S3GGALAAA=","debug_symbols":"zZzdShtRFEbfJdehzP47Z46vUkqJGktAomgsFPHdO6lOUJqiPcTFvssk5/B9F3ttcrGYx8Xl+vzhx/fN9urmfnH29XFxfXOx2m1uttPT42L4IvXPt/e3q+3+i/vd6m63OPMhYrlYby/3H+vwtFxcba7X+4fh6dtyf23su9a6runQd036rmnfNeu75n3Xou9a6bvWNyXaNyXaNyXWNyXWNyXWNyXWNyXWNyXWNyXWNyXWNyXWNyXWNyXeNyXeNyV+dEqs+ThfE9E315Z/n7ZBXk6baTucbnHk8FjnQmPzw1Fp9tLHTtBHmh762Ht9rM6HR39b/rmQZysU2QqVbIVqtkJjskIxZCuk2Qplwz6yYR/ZsI9s2Ec67FuyQiXbHiqSrVC2xViy/UEr2TZ1ybapS7ZNXbJt6pJtU5dsm7pm29Q126aun7upnzMMyHAgI4CMU2w9i3rIKEcyKpAxAhnt8zPGAcgQIEOBDAMyHMgIIAPgfAQ4HwHOR4DzBnDeAM4bwHkDOG8A5w3gvAGcN4DzBnDeAM5lGIgQIUKUCDEixImQIEIKEVKJkJEIIYgXgnghiBeCeCGIF4J4IYgXgnghiBeCeCGIV4J4JYhXgngliFeCeCWIV4J4JYhXgngliDeCeCOIN4J4I4g3gngjiDeCeCOIN4J4I4h3gngniHeCeCeId4J4J4h3gngniHeCeCeID4L4IIgPgvggiA+C+CCID4L4IIgPgvggiC8E8YUgvhDEF4L4QhBfCOILQXwhiC8E8YUgvhLEV4L4ShBfCeIrQXwliCfkOiHsOiH0OiH8OiEEOyEMOyEUOyEcOyEkOyEsOyE0OyE8OyFEOyFMOyFUOyFcOyFkOyFsOyF0OyF8OyGEOyGMOyGUOyGcOyWcOyWcOyWcOyWcOx2cCAkipBAhlQgZiRCCeMK5U8K5U8K5U8K5U8K5U8K5U8K5U8K5U8K5U8K5U8K5U8K5U8K5U8K505M4dy7DHOJeXof81+GXRpGuUUnXqKZr9P6WMnmnkUxbe06ZPr96q9vRTtMRi1fH5UirlrHVB0zEj7T6d8yR483LfLpFHA6r+VxKMpbSjKUsYynPWCoyliq5Sk1PP1d3m9X59Xr/ZuD9jw/bi/lFwdPj7tft8y/T2d8="},{"name":"private_call_3_args","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"enqueue_public_get_value_from_child","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"7ZzdTuMwEEbfJdcIecbjP15ltVoVKKtKqCBaVlpVvPs6JXHaNNQLGDrW9IqETuI5Jwn5jORumtv59fPvX4vl3cOqufqxae4fbmbrxcMy7m0aoO3vVo+zZbu7Ws+e1s2Vumjmy9v48+WiuVvcz5srUnH7oA4thK4ULUGqBoSJau0Iu2rtVchUBwrUVQdjdKpGUi8/LxowtTZuv69xAgddNaGGTzbuPtO49qiSQ2NTdaDtuf0XnjtMndtQ0N0xxjidGQHAhN47QLwGwxj6q28YVN/ef9H7BqFE/5Z2+ne02387BhYZQ9tjY+giY3iTxvDeHb8OCNr2ajFeQhjd2kgnaMmCTi1Zu9fSxJNAw6NJdugFaKoX53pa54fHGDr/RhKslQTrJMF6SbBBEKxWkmBBEixKgtXsYY3tq7VVLgvrumIPO+HUTjUSY1+KmQ5xqAb7bo101lhCI//UV4VG/nmyCo38k2oVGvln4Co08k/XNWgk/rm9Co38ZwRVaOQ/16hCo+RZjDOUNDqzp7FVQ2c1b6mRPNvIqJE8g8iokTwryKiRnPQzaiSn9+NqjOREnlEjOWVn1EhOzl6ltj3aAzWS03BGDZ3VvKVGchrOqJGchjNqJKfhjBrJaTijRnIaPq7GSk7DGTX807Aln9RYk1GjafAIe2paWP75tiAs/8RaEJYkwfJPlQVh+efEgrD8k19BWP5ZriAs/3RWDtbxz1sFYU+SoNLyIozleBwWtYd+XU7cNn63vCXACgjcQBDQjAk0f4Kg+9COpODgGhB7AlJpdVfcdm5MYPgToMJEgE6NCWwFBN4nAm1wTOD4EwSb7iKjSI8JPHsCo3y6iwy4gyf5FG/6kBYvxG0at+QVv5ZO8dYM6ewY/xJkIsIugIKdJbxu+9r3WDuArhwA4RImGWB4QAH2Fo+b12XIl9NLCMFBggmjf8J1x4WPHTe9sO0/joMPHofvPi7u/Zk9LWbX9/P2ey3aD5+XN/3XXMTd9d/H109i7T8="},{"name":"private_static_call_3_args","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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7vluNfd8t5p7vlvNPd+t5p7vVnPPd6u557vV3PPdau75bjX3fLeae75bzT3freae71Zzz3eruee71dzz3Wru+W4193y3mnu+W809363mnu9Wc893q7nnu9Xc891q7vluNfd8t5p7vlvNPd+t5p7vVnPPd6u557vV3PPdau75bjX3fLeae75bzT3freae71Zzz3eruee71dzz3Wru+W4193y3mnu+W809363mnu9Wc893q7nnu9Xc891q7vluNfd8t5p7vlvNPd+t5p7vVnPPd6u557vV3PPdau75YTX3/LCae35YzT0/rOaeH7dqVa2Tlzqs5p4fVnPPD6u554fV3PPDau75YTX3/LCae35YzT0/rOaeH1Zzzw+rueeH1dzzw2ru+WE19/ywmnt+WM09P6zmnh9Wc88Pq7nnh9Xc88Nq7vlhNff8sJp7fljNPT+s5p4fVnPPD6u554fV3PPDau75YTX3/LCae35YzT0/rOaeH1Zzzw+rueeH1dzzw2ru+WE19/ywmnt+WM09P6zmnh9Wc88Pq7nnh9Xc88Nq7vlhNff8sJp7fljNPT+s5p4fVnPPD6u554fV3PPDau75YTX3/LCae35YzT0/rOaeH1Zzzw+rueeH1dzzw2ru+WE19/ywmnt+WM09P6zmnh9Wc88Pq7nnh9Xc88Nq7vlhNff8sJp7fljNPT+s5p4fVnPPD6u554fV3PPDau75YTX3/LCae35YzT0/rOaeH1Zzzw+rueeH1dzzw2ru+WE19/ywmnt+WM09P6zmnh9Wc88Pq7nnh9Xc88Nq7vnhNPd8uznNPb9Xa+Sl7tUaeal7tUZe6l5ttarWyEvdqzXyUvdqjbzUvVojL3Wv1spLOc09v1dr5aWc5p7fq7XyUk5zz+/VWnkpp7nn92qtvJTT3PN7tVZeymnu+b1aKy/lNPf8Xq2Vl3Kae36v1spLOc09v1dr5aWc5p7fq7XyUk5zz+/VWnkpp7nn92qtvJTT3PN7tVZeymnu+b1aKy/lNPf8Xq2Vl3Kae36v1spLOc09v1dr5aWc5p7fq7XyUk5zz+/VWnkpp7nn92qtvJTT3PN7tVZeymnu+b1aKy/lNPf8Xq2Vl3Kae36v1spLOc09v1dr5aWc5p7fq7XyUk5zz+/VWnkpp7nn92qtvJTT3PN7tVZeymnu+b1aKy/lNPf8Xq2Vl3Kae36v1spLOc09v1dr5aWc5p7fq7XyUk5zz+/VWnkpp7nn92qtvJTT3PN7tVZeymnu+b1aKy/lNPf8Xq2Vl3Kae36v1spLOc09v1dr5aWc5p7fq7XyUk5zz+/VWnkpp7nn92qtvJTT3PN7tU5eqljNPS9Wc8+L1dzzYjX3/F6LVbVOXqpYzT0vVnPPi9Xc82I197xYzT0vVnPPi9Xc82I197xYzT0vVnPPi9Xc82I197xYzT0vVnPPi9Xc82I197xYzT0vVnPPi9Xc82I197xYzT0vVnPPi9Xc82I197xYzT0vVnPPi9Xc82I197xYzT0vVnPPi9Xc82I197xYzT0vVnPPi9Xc82I197xYzT0vVnPPi9Xc82I197xYzT0vVnPPi9Xc82I197xYzT0vVnPPi9Xc82I197xYzT0vVnPPi9Xc82I197xYzT0vVnPPi9Xc82I197xYzT0vVnPPi9Xc82I197xYzT0vVnPPi9Xc82I197xYzT0vVnPPi9Xc82I197xYzT0vVnPPi9Xc82I197xYzT0vVnPPi9Xc82I197xYzT0vVnPPi9Xc82I197xYzT0vVnPPi9Xc85JpNvb91Lfnqaej8d3vnGOe5+XXh+d5L1/nOOrf/ObpNj0+PN227+yOV9+8H89vnhrfvNTp12eXOr/WPpH7QPs3tU/kxdD+Te0r2ttqn8ino/2b2idKLWj/pvaJMhzav6l9okSL9m9qn+i3ErR/S/sp02YStH9Te/p6vtrT18uq/f6AsRzLa+3p6/lqX9HeVnv6er7a09fLqv32pf36Wnv6er7a09fz1Z6+nq32mbbkof2b2tPX89Wevl5W7ZfH3+ku6/Zae/p6vtpXtLfVnr6er/b09Xy1p6/nqz19PV/t6evZap9pYzPav6k9fT1f7enr+WpPX89X+4r2ttrT1/PVnr6er/b09Xy1p6/nqz19PVvtZ/p6vtrT1/PVnr6er/b09Xy1r2hvqz19PV/t6ev5ak9fz1d7+nq+2tPXs9W+0tfz1Z6+nq/29PV8taev56t9RXtb7enr+WpPX89Xe/p6vtrT1/PVnr6erfYLfT1f7cn3Q7W/f8NDonIcs1L75t6MpaK9rfbke1/tyfe+2pPvfbUn3/tqT7631X4l3/tqz9/t+GrP3+34ak9fz1f7ivZJtW/uRlzp6/lqT1/PV3v6er7a09fLqn1zR9pK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92/7/LHv3/b5Y9+/7fPHvn+b56+x79/2+WPfv+3zx75/2+ePff+2zx/7/m2f/+L3b734/Vsvfv/Wi9+/9eL373Lx+3e5+P27XPz+XS5+/w6Y8a49/8Xv3+Xi9+9y8ft3ufj9u1z8/l0vfv+uF79/14vfv+vF798B86W157/4/bte/P5dL37/rhe/f9eL37/bxe/f7eL373bx+3e7+P2rmVNaHkeaylqV52/+/ZVmmujA8+8XP/9x7fNr5mcOPH+5+Pmni59/vvj568XPv1z8/Be/f/fY92/z71f32Pdv+/yx79/m+Y/Y92/7/LHv3+bfTx6x79/2+WPfv+3zx75/2+ePff+2zx/7/m2fP/b92+w/HLHv3/b5Y9+/rfMvt9j3b/v8se/f9vlj37/t88e+f9vnj33/ts8f+/5tnz/2/ds+/7Xv3+V27ft3uV38/i0Xv3/Lxe/fcvH7t1z8/tXMXxp4/ovfv+Xi92+5+P1bLn7/lovfv9PF79/p4vfvdPH7d7r4/auZvzTw/Be/f6eL37/Txe/f6eL373Tx+3e++P07X/z+nS9+/84Xv38185cGnv/i969k/s+tLo/z346b8vytv79aJPN/Bp5fMv9n5PnLxc8/Xfz888XPXy9+/uXi518vfv7t4ue/+P1bY9+/rb9fXZbY92/7/LHv3/b5Y9+/7fPHvn9bfz+5SOb/jDx/7Pu3ff7Y92/7/LHv3/b5Y9+/7fPHvn+b/Yc19v3bPn/s+7d9/tj3b/v8se/f9vlj37/t88e+f9vnj33/ts8f+/5tnz/2/ds+/8Xv3+3i9+928ft3u/j9u138/t0ufv9uF79/t4vfv9vF79/t4vfvdvH7d7/4/btf/P7dL37/7he/fyXzl0ae/+L3737x+3e/+P27X/z+3S9+/x4Xv3+Pi9+/x8Xv3+Pi969k/tLI81/8/j0ufv8e171/p7L/x9evb8774zy1HF+Hn7bHP/b6rcn2P1b+2j82/bV/bH7/H5vW/3gyEWDdHoJ++0uY//mP3f+3/98//x//8s//y3/9L//9/k/84//x//zX//Xf/uW//euv//Xf/v//+//9/3L/7P8F"},{"name":"public_nested_static_call","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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"},{"name":"enqueue_static_call_to_pub_function","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"7ZxhT9swEIb/Sz4j5DufzzZ/ZZqmAmWqhAqCMmlC/PclLHZCGuoBHr3o+ERCz8n7vHXs163cx+Zyff7w88dme3Vz35x9e2yuby5Wu83Ntj17bICf/3d/u9p2p/e71d2uOTMnzXp72f59OmmuNtfr5oxMe7xXhwyxL0UmyNWAMFNtPWFfbYOJhepIkfrq6JzN1Ujm6ftJA36pwsPnCSfw0FcTWvig8PgR4TagyR46ztWRumuj+Y/XhrlrO8xGOmwLD98BOkP68vbY0/geM4IMJyet8S87TKcIxSmyR1DkBkXBlB5Bxz5Vjy+d9JNw/WRCqiZwH3wS0UmnrTnuINegZUOZdjxw9mOEr+JohEP3CFU4HOZ7eOcOv2sINj/2CK28qaR4BEkMNktihkK/o2FoJx76BtCcFu8TrQ/DNADRdrDWaIIFTbCoCdZqgiVNsE4TLGuC9ZpggyZY+QnKcaq2bHwRNi2zAoySeGfSvm72iRI84lAN/FYbSX42W4SN8lPfImyUnycXYaP8pLoIG+nLxho2yk/Xi7BRfm5fhI3yVwSLsFH+WmMRNmpexfj8zQZ4717Y2FrjNK9MCtZoXm0UrNG8gihYo3lVULCGvqx5zRrN6b1gjeZEXrBGc8ouWKM5OQfjkuyAvGeN5jR82BrWnIYL1mhOwwVrNKfhgjWa03DBGvqy5jVrNKfhgjWa03DBGvlpmClka9gVrLE0+AgvrOlg5efbirDyE2s9WC8/g1aElZ8qK8LKz4kVYeUnv4qwpAlWfjqrCCs/b1WEPUqCynupEELAQrkNwKncBhfG5R1BWACBHwgiuilBlE8QbQrtSAam70Ew4gnIWB4IvJ8SgHwCNJgJ0JspAS6AIIRMYB1OCax8gsi5FzlDdkpA4gmcCbkXOfB7T/IxZvqYNy+0x7QnieVJOsasGWOOCO1IUIgIYwADo/3K/nnaD2HhAMins7Mm29SKx9tg2jm3axRO57csg4f8MVOcfIDVt4vvaze/Rfcf2sE72+Gb27Vnv1Z3m9X59br7AZXuxYftRfo9lfZ09/v27ytt7R8="},{"name":"private_nested_static_call_3_args","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"},"visibility":"private"},{"name":"args","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"public_get_value_from_child","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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"}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000071421477"},{"kind":"string","value":"ValueNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000071421477"},{"kind":"string","value":"ValueNote"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"current_value","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"a_private_value","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}}}],"kind":"struct","path":"StaticParent::private_static_call_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::private_static_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"arg","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::public_call_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::public_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"value","type":{"kind":"field"}},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"StaticParent::private_get_value_from_child_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::private_get_value_from_child_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":3,"type":{"kind":"field"}}}],"kind":"struct","path":"StaticParent::private_call_3_args_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::private_call_3_args_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}}}],"kind":"struct","path":"StaticParent::public_static_call_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::public_static_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}}}],"kind":"struct","path":"StaticParent::public_nested_static_call_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::public_nested_static_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}}}],"kind":"struct","path":"StaticParent::private_nested_static_call_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::private_nested_static_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":2,"type":{"kind":"field"}}}],"kind":"struct","path":"StaticParent::private_call_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::private_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}}}],"kind":"struct","path":"StaticParent::enqueue_static_call_to_pub_function_parameters"}}],"kind":"struct","path":"StaticParent::enqueue_static_call_to_pub_function_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}}}],"kind":"struct","path":"StaticParent::enqueue_call_parameters"}}],"kind":"struct","path":"StaticParent::enqueue_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::enqueue_public_get_value_from_child_parameters"}}],"kind":"struct","path":"StaticParent::enqueue_public_get_value_from_child_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":3,"type":{"kind":"field"}}}],"kind":"struct","path":"StaticParent::private_nested_static_call_3_args_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::private_nested_static_call_3_args_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::public_get_value_from_child_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::public_get_value_from_child_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":3,"type":{"kind":"field"}}}],"kind":"struct","path":"StaticParent::private_static_call_3_args_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"StaticParent::private_static_call_3_args_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target_contract","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"target_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"args","type":{"kind":"array","length":1,"type":{"kind":"field"}}}],"kind":"struct","path":"StaticParent::enqueue_static_nested_call_to_pub_function_parameters"}}],"kind":"struct","path":"StaticParent::enqueue_static_nested_call_to_pub_function_abi"}]}},"file_map":{"112":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    constants::GENERATOR_INDEX__INNER_NOTE_HASH,\n    hash::{\n    pedersen_hash, compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_inner_note_hash_from_preimage(storage_slot: Field, note_content_hash: Field) -> Field {\n    pedersen_hash(\n        [storage_slot, note_content_hash],\n        GENERATOR_INDEX__INNER_NOTE_HASH\n    )\n}\n\nfn compute_inner_note_hash<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    compute_inner_note_hash_from_preimage(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N, M>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note_with_header.get_header();\n    let (_, inner_nullifier) = note_with_header.compute_note_hash_and_nullifier(context);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\nfn compute_note_hash_for_read_request_from_innter_and_nonce(\n    inner_note_hash: Field,\n    nonce: Field\n) -> Field {\n    // TODO(#1386): This if-else can be nuked once we have nonces injected from public\n    if (nonce == 0) {\n        // If nonce is zero, that means we are reading a public note.\n        inner_note_hash\n    } else {\n        compute_unique_note_hash(nonce, inner_note_hash)\n    }\n}\n\npub fn compute_note_hash_for_read_request<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let inner_note_hash = compute_inner_note_hash(note);\n    let nonce = note.get_header().nonce;\n\n    compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, nonce)\n}\n\npub fn compute_note_hash_for_consumption<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    if (header.note_hash_counter != 0) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        inner_note_hash\n    } else {\n        // If a note is not transient, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the siloed_note_hash which has already been hashed with\n        // nonce and then contract address. This hash will match the existing leaf in the note hash\n        // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        let unique_note_hash = compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, header.nonce);\n        compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n        // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n        // nullification, it is not strictly necessary to silo the note hash before computing\n        // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n        // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n        // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n        // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n        // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n    }\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, N, M, S>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N, M> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n    let unique_note_hash = compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, note_header.nonce);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        let (_, nullifier) = note.compute_note_hash_and_nullifier_without_context();\n        nullifier\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [inner_note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"121":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH, MAX_ARGS_LENGTH\n},\n    traits::Hash, hash::{pedersen_hash, compute_siloed_nullifier, sha256_to_field}\n};\nuse crate::oracle::logs_traits::{LensForEncryptedLog, ToBytesForUnencryptedLog};\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    pedersen_hash([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, N, M>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes = (n as Field).to_be_bytes(4);\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    pedersen_hash(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<N>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() <= MAX_ARGS_LENGTH, \"Args length exceeds maximum\");\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..MAX_ARGS_LENGTH {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x11e40f2a780822f7971803048c9a2100579de352e7dadd99981760964da65b57);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"125":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<N>(_args: [Field; N]) -> Field {}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n/// - Pack arguments (array version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments_array<N>(args: [Field; N]) -> Field {\n    pack_arguments_array_oracle(args)\n}\n\n/// - Pack arguments (slice version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments(args: [Field]) -> Field {\n    pack_arguments_oracle(args)\n}\n\n"},"127":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle<N>(_returns: [Field]) -> Field {}\n\nunconstrained pub fn pack_returns(returns: [Field]) {\n    let _unused = pack_returns_oracle(returns);\n}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<N>(_return_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn unpack_returns<N>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n"},"129":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub fn get_key_validation_request(pk_m_hash: Field, key_index: Field) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n\n"},"135":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n"},"140":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{\n    abis::{\n    function_selector::FunctionSelector, public_call_stack_item::PublicCallStackItem,\n    function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs,\n    call_context::CallContext, read_request::ReadRequest, note_hash::NoteHash, nullifier::Nullifier,\n    log_hash::LogHash, global_variables::GlobalVariables, gas::Gas\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    messaging::l2_to_l1_message::L2ToL1Message, header::Header, address::AztecAddress,\n    utils::reader::Reader,\n    constants::{\n    MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n}\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn parse_public_call_stack_item_from_oracle(fields: [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH]) -> PublicCallStackItem {\n    let mut reader = Reader::new(fields);\n\n    // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n    // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n    // WARNING: if updating, see comment in public_call_stack_item.ts's PublicCallStackItem.hash()\n    let item = PublicCallStackItem {\n        contract_address: AztecAddress::from_field(reader.read()),\n        function_data: FunctionData { selector: FunctionSelector::from_field(reader.read()), is_private: false },\n        public_inputs: PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            start_side_effect_counter: reader.read_u32(),\n            args_hash: reader.read(),\n            returns_hash: 0,\n            note_hash_read_requests: [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n            l1_to_l2_msg_read_requests: [ReadRequest::empty(); MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL],\n            contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n            contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            note_hashes: [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL],\n            nullifiers: [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL],\n            l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL],\n            end_side_effect_counter: 0,\n            unencrypted_logs_hashes: [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL],\n            historical_header: Header::empty(),\n            global_variables: GlobalVariables::empty(),\n            prover_address: AztecAddress::zero(),\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty(),\n            transaction_fee: 0\n        },\n        is_execution_request: true\n    };\n    reader.finish();\n\n    item\n}\n"},"167":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{GAS_LENGTH, FIXED_DA_GAS, FIXED_L2_GAS}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered, utils::reader::Reader,\n    abis::gas_fees::GasFees\n};\nuse std::ops::{Add, Sub};\n\nstruct Gas {\n    da_gas: u32,\n    l2_gas: u32,\n}\n\nimpl Gas {\n    pub fn new(da_gas: u32, l2_gas: u32) -> Self {\n        Self { da_gas, l2_gas }\n    }\n\n    pub fn tx_overhead() -> Self {\n        Self { da_gas: FIXED_DA_GAS, l2_gas: FIXED_L2_GAS }\n    }\n\n    pub fn compute_fee(self, fees: GasFees) -> Field {\n        (self.da_gas as Field) * fees.fee_per_da_gas + (self.l2_gas as Field) * fees.fee_per_l2_gas\n    }\n\n    pub fn is_empty(self) -> bool {\n        (self.da_gas == 0) & (self.l2_gas == 0)\n    }\n\n    pub fn within(self, limits: Gas) -> bool {\n        (self.da_gas <= limits.da_gas) & (self.l2_gas <= limits.l2_gas)\n    }\n}\n\nimpl Add for Gas {\n    fn add(self, other: Gas) -> Self {\n        Gas::new(self.da_gas + other.da_gas, self.l2_gas + other.l2_gas)\n    }\n}\n\nimpl Sub for Gas {\n    fn sub(self, other: Gas) -> Self {\n        Gas::new(self.da_gas - other.da_gas, self.l2_gas - other.l2_gas)\n    }\n}\n\nimpl Serialize<GAS_LENGTH> for Gas {\n    fn serialize(self) -> [Field; GAS_LENGTH] {\n        [self.da_gas as Field, self.l2_gas as Field]\n    }\n}\n\nimpl Deserialize<GAS_LENGTH> for Gas {\n    fn deserialize(serialized: [Field; GAS_LENGTH]) -> Gas {\n        Gas::new(serialized[0] as u32, serialized[1] as u32)\n    }\n}\n\nimpl Eq for Gas {\n    fn eq(self, other : Gas) -> bool {\n        (self.da_gas == other.da_gas) & (self.l2_gas == other.l2_gas)\n    }\n}\n\nimpl Empty for Gas {\n    fn empty() -> Self {\n        Gas::new(0, 0)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = Gas::empty();\n    let serialized = item.serialize();\n    let deserialized = Gas::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n"},"169":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/note_hash.nr","source":"use crate::{\n    abis::read_request::ScopedReadRequest, address::AztecAddress,\n    abis::side_effect::{Ordered, OrderedValue, Readable, Scoped},\n    constants::{NOTE_HASH_LENGTH, SCOPED_NOTE_HASH_LENGTH}, traits::{Empty, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct NoteHash {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for NoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for NoteHash {\n    fn eq(self, other: NoteHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter) \n    }\n}\n\nimpl Empty for NoteHash {\n    fn empty() -> Self {\n        NoteHash {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<NOTE_HASH_LENGTH> for NoteHash {\n    fn serialize(self) -> [Field; NOTE_HASH_LENGTH] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<NOTE_HASH_LENGTH> for NoteHash {\n    fn deserialize(values: [Field; NOTE_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl NoteHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedNoteHash {\n        ScopedNoteHash { note_hash: self, contract_address }\n    }\n}\n\nstruct ScopedNoteHash {\n    note_hash: NoteHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<NoteHash> for ScopedNoteHash {\n    fn inner(self) -> NoteHash {\n        self.note_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedNoteHash {\n    fn counter(self) -> u32 {\n        self.note_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedNoteHash {\n    fn value(self) -> Field {\n        self.note_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.note_hash.counter\n    }\n}\n\nimpl Eq for ScopedNoteHash {\n    fn eq(self, other: ScopedNoteHash) -> bool {\n        (self.note_hash == other.note_hash)\n            & (self.contract_address == other.contract_address)\n    }\n}\n\nimpl Empty for ScopedNoteHash {\n    fn empty() -> Self {\n        ScopedNoteHash {\n            note_hash: NoteHash::empty(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_NOTE_HASH_LENGTH> for ScopedNoteHash {\n    fn serialize(self) -> [Field; SCOPED_NOTE_HASH_LENGTH] {\n        array_concat(self.note_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_NOTE_HASH_LENGTH> for ScopedNoteHash {\n    fn deserialize(values: [Field; SCOPED_NOTE_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            note_hash: reader.read_struct(NoteHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl Readable for ScopedNoteHash {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        assert_eq(self.note_hash.value, read_request.value(), \"Value of the note hash does not match read request\");\n        assert_eq(self.contract_address, read_request.contract_address, \"Contract address of the note hash does not match read request\");\n        assert(\n            read_request.counter() > self.note_hash.counter, \"Read request counter must be greater than the counter of the note hash\"\n        );\n    }\n}\n\nimpl ScopedNoteHash {\n    pub fn expose_to_public(self) -> NoteHash {\n        // Hide the actual counter when exposing it to the public kernel.\n        NoteHash { value: self.note_hash.value, counter: 0 }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NoteHash::empty();\n    let serialized = item.serialize();\n    let deserialized = NoteHash::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedNoteHash::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedNoteHash::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"170":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_fees.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::GAS_FEES_LENGTH, hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty},\n    abis::side_effect::Ordered, utils::reader::Reader\n};\n\nstruct GasFees {\n    fee_per_da_gas: Field,\n    fee_per_l2_gas: Field,\n}\n\nimpl GasFees {\n    pub fn new(fee_per_da_gas: Field, fee_per_l2_gas: Field) -> Self {\n        Self { fee_per_da_gas, fee_per_l2_gas }\n    }\n\n    pub fn default() -> Self {\n        GasFees::new(1, 1)\n    }\n\n    pub fn is_empty(self) -> bool {\n        (self.fee_per_da_gas == 0) & (self.fee_per_l2_gas == 0)\n    }\n}\n\nimpl Serialize<GAS_FEES_LENGTH> for GasFees {\n    fn serialize(self) -> [Field; GAS_FEES_LENGTH] {\n        [self.fee_per_da_gas, self.fee_per_l2_gas]\n    }\n}\n\nimpl Deserialize<GAS_FEES_LENGTH> for GasFees {\n    fn deserialize(serialized: [Field; GAS_FEES_LENGTH]) -> GasFees {\n        GasFees::new(serialized[0], serialized[1])\n    }\n}\n\nimpl Eq for GasFees {\n    fn eq(self, other : GasFees) -> bool {\n        (self.fee_per_da_gas == other.fee_per_da_gas) & (self.fee_per_l2_gas == other.fee_per_l2_gas)\n    }\n}\n\nimpl Empty for GasFees {\n    fn empty() -> Self {\n        GasFees::new(0, 0)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = GasFees::empty();\n    let serialized = item.serialize();\n    let deserialized = GasFees::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"172":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_circuit_public_inputs.nr","source":"use crate::{\n    abis::{\n    call_context::CallContext, max_block_number::MaxBlockNumber, gas_settings::GasSettings,\n    validation_requests::KeyValidationRequestAndGenerator, note_hash::NoteHash, nullifier::Nullifier,\n    private_call_request::PrivateCallRequest, read_request::ReadRequest,\n    log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_L2_TO_L1_MSGS_PER_CALL, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS, MAX_ENCRYPTED_LOGS_PER_CALL,\n    MAX_UNENCRYPTED_LOGS_PER_CALL, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, hash::pedersen_hash, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader,\n    transaction::tx_context::TxContext, utils::arrays::validate_array\n};\n\nstruct PrivateCircuitPublicInputsArrayLengths {\n    note_hash_read_requests: u32,\n    nullifier_read_requests: u32,\n    key_validation_requests_and_generators: u32,\n    note_hashes: u32,\n    nullifiers: u32,\n    l2_to_l1_msgs: u32,\n    private_call_requests: u32,\n    public_call_stack_hashes: u32,\n    note_encrypted_logs_hashes: u32,\n    encrypted_logs_hashes: u32,\n    unencrypted_logs_hashes: u32,\n}\n\nimpl PrivateCircuitPublicInputsArrayLengths {\n    pub fn new(public_inputs: PrivateCircuitPublicInputs) -> Self {\n        PrivateCircuitPublicInputsArrayLengths {\n            note_hash_read_requests: validate_array(public_inputs.note_hash_read_requests),\n            nullifier_read_requests: validate_array(public_inputs.nullifier_read_requests),\n            key_validation_requests_and_generators: validate_array(public_inputs.key_validation_requests_and_generators),\n            note_hashes: validate_array(public_inputs.note_hashes),\n            nullifiers: validate_array(public_inputs.nullifiers),\n            l2_to_l1_msgs: validate_array(public_inputs.l2_to_l1_msgs),\n            private_call_requests: validate_array(public_inputs.private_call_requests),\n            public_call_stack_hashes: validate_array(public_inputs.public_call_stack_hashes),\n            note_encrypted_logs_hashes: validate_array(public_inputs.note_encrypted_logs_hashes),\n            encrypted_logs_hashes: validate_array(public_inputs.encrypted_logs_hashes),\n            unencrypted_logs_hashes: validate_array(public_inputs.unencrypted_logs_hashes)\n        }\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    returns_hash: Field,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: [ReadRequest; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    key_validation_requests_and_generators: [KeyValidationRequestAndGenerator; MAX_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    note_hashes: [NoteHash; MAX_NOTE_HASHES_PER_CALL],\n    nullifiers: [Nullifier; MAX_NULLIFIERS_PER_CALL],\n    private_call_requests: [PrivateCallRequest; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    public_teardown_function_hash: Field,\n    l2_to_l1_msgs: [L2ToL1Message; MAX_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter : u32,\n    end_side_effect_counter : u32,\n    note_encrypted_logs_hashes: [NoteLogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_CALL],\n    encrypted_logs_hashes: [EncryptedLogHash; MAX_ENCRYPTED_LOGS_PER_CALL],\n    unencrypted_logs_hashes: [LogHash; MAX_UNENCRYPTED_LOGS_PER_CALL],\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // Note: The chain_id and version here are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    tx_context: TxContext,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.returns_hash == other.returns_hash) &\n        (self.min_revertible_side_effect_counter == other.min_revertible_side_effect_counter) &\n        (self.is_fee_payer == other.is_fee_payer) &\n        (self.max_block_number == other.max_block_number) &\n        (self.note_hash_read_requests == other.note_hash_read_requests) &\n        (self.nullifier_read_requests == other.nullifier_read_requests) &\n        (self.key_validation_requests_and_generators == other.key_validation_requests_and_generators) &\n        (self.note_hashes == other.note_hashes) &\n        (self.nullifiers == other.nullifiers) &\n        (self.private_call_requests == other.private_call_requests) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.l2_to_l1_msgs == other.l2_to_l1_msgs) &\n        (self.start_side_effect_counter == other.start_side_effect_counter) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.note_encrypted_logs_hashes == other.note_encrypted_logs_hashes) &\n        (self.encrypted_logs_hashes == other.encrypted_logs_hashes) &\n        (self.unencrypted_logs_hashes == other.unencrypted_logs_hashes) &\n        self.historical_header.eq(other.historical_header) &\n        self.tx_context.eq(other.tx_context)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n\n        fields.push(self.min_revertible_side_effect_counter as Field);\n        fields.push(if self.is_fee_payer { 1 } else { 0 } as Field);\n\n        fields.extend_from_array(self.max_block_number.serialize());\n\n        for i in 0..self.note_hash_read_requests.len() {\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..self.nullifier_read_requests.len() {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..self.key_validation_requests_and_generators.len() {\n            fields.extend_from_array(self.key_validation_requests_and_generators[i].serialize());\n        }\n        for i in 0..self.note_hashes.len() {\n            fields.extend_from_array(self.note_hashes[i].serialize());\n        }\n        for i in 0..self.nullifiers.len() {\n            fields.extend_from_array(self.nullifiers[i].serialize());\n        }\n        for i in 0..self.private_call_requests.len() {\n            fields.extend_from_array(self.private_call_requests[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n        fields.push(self.public_teardown_function_hash);\n        for i in 0..self.l2_to_l1_msgs.len() {\n            fields.extend_from_array(self.l2_to_l1_msgs[i].serialize());\n        }\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n        for i in 0..self.note_encrypted_logs_hashes.len() {\n            fields.extend_from_array(self.note_encrypted_logs_hashes[i].serialize());\n        }\n        for i in 0..self.encrypted_logs_hashes.len() {\n            fields.extend_from_array(self.encrypted_logs_hashes[i].serialize());\n        }\n        for i in 0..self.unencrypted_logs_hashes.len() {\n            fields.extend_from_array(self.unencrypted_logs_hashes[i].serialize());\n        }\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.extend_from_array(self.tx_context.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            min_revertible_side_effect_counter: reader.read() as u32,\n            is_fee_payer: reader.read() == 1,\n            max_block_number: reader.read_struct(MaxBlockNumber::deserialize),\n            note_hash_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            key_validation_requests_and_generators: reader.read_struct_array(KeyValidationRequestAndGenerator::deserialize, [KeyValidationRequestAndGenerator::empty(); MAX_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            note_hashes: reader.read_struct_array(NoteHash::deserialize, [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL]),\n            nullifiers: reader.read_struct_array(Nullifier::deserialize, [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL]),\n            private_call_requests: reader.read_struct_array(PrivateCallRequest::deserialize, [PrivateCallRequest::empty(); MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            public_teardown_function_hash: reader.read(),\n            l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            note_encrypted_logs_hashes: reader.read_struct_array(NoteLogHash::deserialize, [NoteLogHash::empty(); MAX_NOTE_ENCRYPTED_LOGS_PER_CALL]),\n            encrypted_logs_hashes: reader.read_struct_array(EncryptedLogHash::deserialize, [EncryptedLogHash::empty(); MAX_ENCRYPTED_LOGS_PER_CALL]),\n            unencrypted_logs_hashes: reader.read_struct_array(LogHash::deserialize, [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL]),\n            historical_header: reader.read_struct(Header::deserialize),\n            tx_context: reader.read_struct(TxContext::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\nimpl Empty for PrivateCircuitPublicInputs {\n    fn empty() -> Self {\n        PrivateCircuitPublicInputs {\n            call_context: CallContext::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            key_validation_requests_and_generators: [KeyValidationRequestAndGenerator::empty(); MAX_KEY_VALIDATION_REQUESTS_PER_CALL],\n            note_hashes: [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL],\n            nullifiers: [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL],\n            private_call_requests: [PrivateCallRequest::empty(); MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL],\n            start_side_effect_counter : 0 as u32,\n            end_side_effect_counter : 0 as u32,\n            note_encrypted_logs_hashes: [NoteLogHash::empty(); MAX_NOTE_ENCRYPTED_LOGS_PER_CALL],\n            encrypted_logs_hashes: [EncryptedLogHash::empty(); MAX_ENCRYPTED_LOGS_PER_CALL],\n            unencrypted_logs_hashes: [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL],\n            historical_header: Header::empty(),\n            tx_context: TxContext::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi = PrivateCircuitPublicInputs::empty();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs = PrivateCircuitPublicInputs::empty();\n    let hash = inputs.hash();\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x15c9b0a92b9b541598e24c9f0b0b4b04b7f2408599751c45aa12de671fd9b363;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"173":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item_compressed.nr","source":"use crate::abis::{call_context::CallContext, function_data::FunctionData, gas::Gas};\nuse crate::address::AztecAddress;\nuse crate::constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH};\nuse crate::traits::{Hash, Empty, Serialize, Deserialize};\nuse crate::utils::reader::Reader;\n\n/**\n * A compressed version of the PublicCallStackItem struct used to compute the \"hash\"\n * of a PublicCallStackItem.\n * \n * Historically, we have been zeroing most values in the PublicCallStackItem struct\n * to compute the hash involved when adding a PublicCallStackItem to the PublicCallStack.\n * \n * This struct is used to store the values that we did not zero out, and allow us to hash\n * only these, thereby skipping a lot of computation and saving us a lot of constraints\n * \n * Essentially this struct exists such that we don't have a `hash` function in the \n * PublicCallStackItem struct that practically throws away some values of the struct\n * without clearly indicating that it does so.\n */\nstruct PublicCallStackItemCompressed {\n    contract_address: AztecAddress,\n    call_context: CallContext,\n    function_data: FunctionData,\n    args_hash: Field,\n    returns_hash: Field,\n    revert_code: u8,\n    start_gas_left: Gas,\n    end_gas_left: Gas,\n}\n\nimpl Eq for PublicCallStackItemCompressed {\n    fn eq(self, other: PublicCallStackItemCompressed) -> bool {\n        (self.contract_address == other.contract_address)\n            & (self.call_context == other.call_context)\n            & (self.function_data == other.function_data)\n            & (self.args_hash == other.args_hash)\n            & (self.returns_hash == other.returns_hash)\n            & (self.revert_code == other.revert_code)\n            & (self.start_gas_left == other.start_gas_left)\n            & (self.end_gas_left == other.end_gas_left)\n    }\n}\n\nimpl Hash for PublicCallStackItemCompressed {\n    fn hash(self) -> Field {\n        std::hash::pedersen_hash_with_separator(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl Empty for PublicCallStackItemCompressed {\n    fn empty() -> Self {\n        PublicCallStackItemCompressed {\n            contract_address: AztecAddress::empty(),\n            call_context: CallContext::empty(),\n            function_data: FunctionData::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty(),\n        }\n    }\n}\n\nimpl Serialize<PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> for PublicCallStackItemCompressed {\n    fn serialize(self) -> [Field; PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.call_context.serialize());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n        fields.push(self.revert_code as Field);\n        fields.extend_from_array(self.start_gas_left.serialize());\n        fields.extend_from_array(self.end_gas_left.serialize());\n\n        assert_eq(fields.len(), PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> for PublicCallStackItemCompressed {\n  fn deserialize(fields: [Field; PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH]) -> PublicCallStackItemCompressed {\n    let mut reader = Reader::new(fields);\n\n    let item = PublicCallStackItemCompressed {\n      contract_address: reader.read_struct(AztecAddress::deserialize),\n      call_context: reader.read_struct(CallContext::deserialize),\n      function_data: reader.read_struct(FunctionData::deserialize),\n      args_hash: reader.read(),\n      returns_hash: reader.read(),\n      revert_code: reader.read() as u8,\n      start_gas_left: reader.read_struct(Gas::deserialize),\n      end_gas_left: reader.read_struct(Gas::deserialize),\n    };\n    reader.finish();\n    item\n  }\n}\n"},"175":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/global_variables.nr","source":"use crate::{\n    address::{AztecAddress, EthAddress}, abis::gas_fees::GasFees,\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}, utils::reader::Reader\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : u64,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n    gas_fees : GasFees\n}\n// docs:end:global-variables\n\nimpl GlobalVariables {\n    fn is_empty(self) -> bool {\n        (self.chain_id == 0)\n            & (self.version == 0)\n            & (self.block_number == 0)\n            & (self.timestamp == 0)\n            & (self.coinbase.is_zero())\n            & (self.fee_recipient.is_zero())\n            & (self.gas_fees.is_empty())\n    }\n}\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        let mut serialized: BoundedVec<Field, GLOBAL_VARIABLES_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.chain_id);\n        serialized.push(self.version);\n        serialized.push(self.block_number);\n        serialized.push(self.timestamp as Field);\n        serialized.push(self.coinbase.to_field());\n        serialized.push(self.fee_recipient.to_field());\n        serialized.extend_from_array(self.gas_fees.serialize());\n\n        serialized.storage\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        let mut reader = Reader::new(serialized);\n        GlobalVariables {\n            chain_id: reader.read(),\n            version: reader.read(),\n            block_number: reader.read(),\n            timestamp: reader.read() as u64,\n            coinbase: EthAddress::from_field(reader.read()),\n            fee_recipient: AztecAddress::from_field(reader.read()),\n            gas_fees: reader.read_struct(GasFees::deserialize)\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient) &\n        (self.gas_fees == other.gas_fees) \n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n            gas_fees: GasFees::empty()\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars = GlobalVariables::empty();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n"},"176":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/read_request.nr","source":"use crate::{\n    abis::side_effect::{Ordered, Scoped}, traits::{Empty, Serialize, Deserialize},\n    address::AztecAddress, constants::{READ_REQUEST_LENGTH, SCOPED_READ_REQUEST_LEN},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct ReadRequest {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for ReadRequest {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for ReadRequest {\n    fn eq(self, read_request: ReadRequest) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n    }\n}\n\nimpl Empty for ReadRequest {\n    fn empty() -> Self {\n        ReadRequest {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_LENGTH> for ReadRequest {\n    fn serialize(self) -> [Field; READ_REQUEST_LENGTH] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_LENGTH> for ReadRequest {\n    fn deserialize(values: [Field; READ_REQUEST_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl ReadRequest {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedReadRequest {\n        ScopedReadRequest { read_request: self, contract_address }\n    }\n}\n\nstruct ScopedReadRequest {\n    read_request: ReadRequest,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<ReadRequest> for ScopedReadRequest {\n    fn inner(self) -> ReadRequest {\n        self.read_request\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Eq for ScopedReadRequest {\n    fn eq(self, other: ScopedReadRequest) -> bool {\n        (self.read_request == other.read_request)\n        & (self.contract_address.eq(other.contract_address))\n    }\n}\n\nimpl Empty for ScopedReadRequest {\n    fn empty() -> Self {\n        ScopedReadRequest {\n            read_request: ReadRequest::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_READ_REQUEST_LEN> for ScopedReadRequest {\n    fn serialize(self) -> [Field; SCOPED_READ_REQUEST_LEN] {\n        array_concat(self.read_request.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_READ_REQUEST_LEN> for ScopedReadRequest {\n    fn deserialize(values: [Field; SCOPED_READ_REQUEST_LEN]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            read_request: reader.read_struct(ReadRequest::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl ScopedReadRequest {\n    pub fn value(self) -> Field {\n        self.read_request.value\n    }\n    pub fn counter(self) -> u32 {\n        self.read_request.counter\n    }\n}\n\n#[test]\nfn serialization_of_empty_read() {\n    let item = ReadRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ReadRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedReadRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedReadRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"179":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request_and_generator.nr","source":"use crate::{\n    address::AztecAddress,\n    abis::validation_requests::{\n    key_validation_request::KeyValidationRequest,\n    scoped_key_validation_request_and_generator::ScopedKeyValidationRequestAndGenerator\n},\n    constants::KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH, traits::{Empty, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct KeyValidationRequestAndGenerator {\n    request: KeyValidationRequest,\n    sk_app_generator: Field,\n}\n\nimpl Eq for KeyValidationRequestAndGenerator {\n    fn eq(self, other: KeyValidationRequestAndGenerator) -> bool {\n        (self.request == other.request) & (self.sk_app_generator == other.sk_app_generator)\n    }\n}\n\nimpl Empty for KeyValidationRequestAndGenerator {\n    fn empty() -> Self {\n        KeyValidationRequestAndGenerator {\n            request: KeyValidationRequest::empty(),\n            sk_app_generator: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH> for KeyValidationRequestAndGenerator {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH] {\n        array_concat(self.request.serialize(), [self.sk_app_generator])\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH> for KeyValidationRequestAndGenerator {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH]) -> Self {\n        let mut reader = Reader::new(fields);\n        let res = Self {\n            request: reader.read_struct(KeyValidationRequest::deserialize),\n            sk_app_generator: reader.read(),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl KeyValidationRequestAndGenerator {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedKeyValidationRequestAndGenerator {\n        ScopedKeyValidationRequestAndGenerator { request: self, contract_address }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = KeyValidationRequestAndGenerator::empty();\n    let serialized = item.serialize();\n    let deserialized = KeyValidationRequestAndGenerator::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"180":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{constants::KEY_VALIDATION_REQUEST_LENGTH, traits::{Empty, Serialize, Deserialize}, point::Point};\n\nstruct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m))\n            & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest {\n            pk_m: Point::empty(),\n            sk_app: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app,\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point::new(fields[0], fields[1], fields[2] as bool),\n            sk_app: fields[3],\n        }\n    }\n}\n\n"},"184":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier.nr","source":"use crate::{\n    abis::{side_effect::{Ordered, OrderedValue, Readable, Scoped}, read_request::ScopedReadRequest},\n    address::AztecAddress, constants::{NULLIFIER_LENGTH, SCOPED_NULLIFIER_LENGTH},\n    hash::compute_siloed_nullifier, traits::{Empty, Hash, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct Nullifier {\n    value: Field,\n    counter: u32,\n    note_hash: Field,\n}\n\nimpl Ordered for Nullifier {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for Nullifier {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for Nullifier {\n    fn eq(self, other: Nullifier) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.note_hash == other.note_hash) \n    }\n}\n\nimpl Empty for Nullifier {\n    fn empty() -> Self {\n        Nullifier {\n            value: 0,\n            counter: 0,\n            note_hash: 0,\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_LENGTH> for Nullifier {\n    fn serialize(self) -> [Field; NULLIFIER_LENGTH] {\n        [self.value, self.counter as Field, self.note_hash]\n    }\n}\n\nimpl Deserialize<NULLIFIER_LENGTH> for Nullifier {\n    fn deserialize(values: [Field; NULLIFIER_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            note_hash: values[2],\n        }\n    }\n}\n\nimpl Readable for Nullifier {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        // Public kernels output Nullifier instead of ScopedNullifier.\n        // The nullifier value has been siloed.\n        let siloed_request_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.value, siloed_request_value, \"Value of the nullifier does not match read request\");\n        assert(\n            read_request.counter() > self.counter, \"Read request counter must be greater than the counter of the nullifier\"\n        );\n    }\n}\n\nimpl Nullifier {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedNullifier {\n        ScopedNullifier { nullifier: self, contract_address }\n    }\n}\n\nstruct ScopedNullifier {\n    nullifier: Nullifier,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<Nullifier> for ScopedNullifier {\n    fn inner(self) -> Nullifier {\n        self.nullifier\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedNullifier {\n    fn counter(self) -> u32 {\n        self.nullifier.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedNullifier {\n    fn value(self) -> Field {\n        self.nullifier.value\n    }\n    fn counter(self) -> u32 {\n        self.nullifier.counter\n    }\n}\n\nimpl Eq for ScopedNullifier {\n    fn eq(self, other: ScopedNullifier) -> bool {\n        (self.nullifier == other.nullifier)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedNullifier {\n    fn empty() -> Self {\n        ScopedNullifier {\n            nullifier: Nullifier::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_NULLIFIER_LENGTH> for ScopedNullifier {\n    fn serialize(self) -> [Field; SCOPED_NULLIFIER_LENGTH] {\n        array_concat(self.nullifier.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_NULLIFIER_LENGTH> for ScopedNullifier {\n    fn deserialize(values: [Field; SCOPED_NULLIFIER_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            nullifier: reader.read_struct(Nullifier::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl Readable for ScopedNullifier {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        assert_eq(self.nullifier.value, read_request.value(), \"Value of the nullifier does not match read request\");\n        assert_eq(self.contract_address, read_request.contract_address, \"Contract address of the nullifier does not match read request\");\n        assert(\n            read_request.counter() > self.nullifier.counter, \"Read request counter must be greater than the counter of the nullifier\"\n        );\n    }\n}\n\nimpl ScopedNullifier {\n    pub fn nullified_note_hash(self) -> Field {\n        self.nullifier.note_hash\n    }\n\n    pub fn expose_to_public(self) -> Nullifier {\n        // Hide the actual counter and note hash when exposing it to the public kernel.\n        Nullifier { value: self.nullifier.value, counter: 0, note_hash: 0 }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = Nullifier::empty();\n    let serialized = item.serialize();\n    let deserialized = Nullifier::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedNullifier::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedNullifier::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"193":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"},"194":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_request.nr","source":"use crate::{\n    abis::{\n    private_call_stack_item::PrivateCallStackItem, call_context::CallContext,\n    function_data::FunctionData, caller_context::CallerContext,\n    side_effect::{Ordered, RangeOrdered, Scoped}\n},\n    address::AztecAddress, constants::{PRIVATE_CALL_REQUEST_LENGTH, SCOPED_PRIVATE_CALL_REQUEST_LENGTH},\n    traits::{Empty, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PrivateCallRequest {\n    target: AztecAddress,\n    call_context: CallContext,\n    function_data: FunctionData,\n    args_hash: Field,\n    returns_hash: Field,\n    caller_context: CallerContext,\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n}\n\nimpl Ordered for PrivateCallRequest {\n    fn counter(self) -> u32 {\n        self.start_side_effect_counter\n    }\n}\n\nimpl RangeOrdered for PrivateCallRequest {\n    fn counter_start(self) -> u32 {\n        self.start_side_effect_counter\n    }\n    fn counter_end(self) -> u32 {\n        self.end_side_effect_counter\n    }\n}\n\nimpl Eq for PrivateCallRequest {\n    fn eq(self, other: PrivateCallRequest) -> bool {\n        (self.target == other.target) \n            & (self.call_context == other.call_context) \n            & (self.function_data == other.function_data) \n            & (self.args_hash == other.args_hash) \n            & (self.returns_hash == other.returns_hash)\n            & (self.caller_context == other.caller_context)\n            & (self.start_side_effect_counter == other.start_side_effect_counter)\n            & (self.end_side_effect_counter == other.end_side_effect_counter)\n    }\n}\n\nimpl Empty for PrivateCallRequest {\n    fn empty() -> Self {\n        PrivateCallRequest {\n            target: AztecAddress::empty(),\n            call_context: CallContext::empty(),\n            function_data: FunctionData::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            caller_context: CallerContext::empty(),\n            start_side_effect_counter: 0,\n            end_side_effect_counter: 0,\n        }\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_REQUEST_LENGTH> for PrivateCallRequest {\n    fn serialize(self) -> [Field; PRIVATE_CALL_REQUEST_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_REQUEST_LENGTH> = BoundedVec::new();\n\n        fields.push(self.target.to_field());\n        fields.extend_from_array(self.call_context.serialize());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n        fields.extend_from_array(self.caller_context.serialize());\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        assert_eq(fields.len(), PRIVATE_CALL_REQUEST_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_REQUEST_LENGTH> for PrivateCallRequest {\n    fn deserialize(fields: [Field; PRIVATE_CALL_REQUEST_LENGTH]) -> PrivateCallRequest {\n        let mut reader = Reader::new(fields);\n        let item = PrivateCallRequest {\n            target: reader.read_struct(AztecAddress::deserialize),\n            call_context: reader.read_struct(CallContext::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            caller_context: reader.read_struct(CallerContext::deserialize),\n            start_side_effect_counter: reader.read_u32(),\n            end_side_effect_counter: reader.read_u32(),\n        };\n        reader.finish();\n        item\n    }\n}\n\nimpl PrivateCallRequest {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedPrivateCallRequest {\n        ScopedPrivateCallRequest { call_request: self, contract_address }\n    }\n\n    pub fn matches_stack_item(self, stack_item: PrivateCallStackItem) -> bool {\n        (self.target == stack_item.contract_address)\n            & (self.call_context == stack_item.public_inputs.call_context)\n            & (self.function_data == stack_item.function_data)\n            & (self.args_hash == stack_item.public_inputs.args_hash)\n            & (self.returns_hash == stack_item.public_inputs.returns_hash)\n            & (self.start_side_effect_counter\n                                == stack_item.public_inputs.start_side_effect_counter)\n            & (self.end_side_effect_counter\n                                    == stack_item.public_inputs.end_side_effect_counter)\n    }\n}\n\nstruct ScopedPrivateCallRequest {\n    call_request: PrivateCallRequest,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<PrivateCallRequest> for ScopedPrivateCallRequest {\n    fn inner(self) -> PrivateCallRequest {\n        self.call_request\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedPrivateCallRequest {\n    fn counter(self) -> u32 {\n        self.call_request.counter_start()\n    }\n}\n\nimpl RangeOrdered for ScopedPrivateCallRequest {\n    fn counter_start(self) -> u32 {\n        self.call_request.counter_start()\n    }\n    fn counter_end(self) -> u32 {\n        self.call_request.counter_end()\n    }\n}\n\nimpl Eq for ScopedPrivateCallRequest {\n    fn eq(self, other: ScopedPrivateCallRequest) -> bool {\n        (self.call_request == other.call_request)\n            & (self.contract_address == other.contract_address)\n    }\n}\n\nimpl Empty for ScopedPrivateCallRequest {\n    fn empty() -> Self {\n        ScopedPrivateCallRequest {\n            call_request: PrivateCallRequest::empty(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_PRIVATE_CALL_REQUEST_LENGTH> for ScopedPrivateCallRequest {\n    fn serialize(self) -> [Field; SCOPED_PRIVATE_CALL_REQUEST_LENGTH] {\n        let mut fields: BoundedVec<Field, SCOPED_PRIVATE_CALL_REQUEST_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.call_request.serialize());\n        fields.extend_from_array(self.contract_address.serialize());\n\n        assert_eq(fields.len(), SCOPED_PRIVATE_CALL_REQUEST_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<SCOPED_PRIVATE_CALL_REQUEST_LENGTH> for ScopedPrivateCallRequest {\n    fn deserialize(fields: [Field; SCOPED_PRIVATE_CALL_REQUEST_LENGTH]) -> ScopedPrivateCallRequest {\n        let mut reader = Reader::new(fields);\n        let item = ScopedPrivateCallRequest {\n            call_request: reader.read_struct(PrivateCallRequest::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        item\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = ScopedPrivateCallRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedPrivateCallRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"199":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_settings.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress}, abis::gas::Gas,\n    abis::gas_fees::GasFees,\n    constants::{\n    GAS_SETTINGS_LENGTH, DEFAULT_GAS_LIMIT, DEFAULT_TEARDOWN_GAS_LIMIT, DEFAULT_MAX_FEE_PER_GAS,\n    DEFAULT_INCLUSION_FEE\n},\n    hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered,\n    utils::reader::Reader\n};\n\nstruct GasSettings {\n    gas_limits: Gas,\n    teardown_gas_limits: Gas,\n    max_fees_per_gas: GasFees,\n    inclusion_fee: Field,\n}\n\nimpl GasSettings {\n    pub fn new(\n        gas_limits: Gas,\n        teardown_gas_limits: Gas,\n        max_fees_per_gas: GasFees,\n        inclusion_fee: Field\n    ) -> Self {\n        Self { gas_limits, teardown_gas_limits, max_fees_per_gas, inclusion_fee }\n    }\n\n    pub fn default() -> Self {\n        GasSettings::new(\n            Gas::new(DEFAULT_GAS_LIMIT, DEFAULT_GAS_LIMIT),\n            Gas::new(DEFAULT_TEARDOWN_GAS_LIMIT, DEFAULT_TEARDOWN_GAS_LIMIT),\n            GasFees::new(DEFAULT_MAX_FEE_PER_GAS, DEFAULT_MAX_FEE_PER_GAS),\n            DEFAULT_INCLUSION_FEE\n        )\n    }\n}\n\nimpl Eq for GasSettings {\n    fn eq(self, other: Self) -> bool {\n        (self.gas_limits == other.gas_limits) & (self.teardown_gas_limits == other.teardown_gas_limits) & (self.max_fees_per_gas == other.max_fees_per_gas) & (self.inclusion_fee == other.inclusion_fee)\n    }\n}\n\nimpl Empty for GasSettings {\n    fn empty() -> Self {\n        GasSettings::new(\n            Gas::empty(), Gas::empty(), GasFees::empty(), 0\n        )\n    }\n}\n\nimpl Serialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn serialize(self) -> [Field; GAS_SETTINGS_LENGTH] {\n        let mut serialized: BoundedVec<Field, GAS_SETTINGS_LENGTH> = BoundedVec::new();\n\n        serialized.extend_from_array(self.gas_limits.serialize());\n        serialized.extend_from_array(self.teardown_gas_limits.serialize());\n        serialized.extend_from_array(self.max_fees_per_gas.serialize());\n        serialized.push(self.inclusion_fee);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn deserialize(serialized: [Field; GAS_SETTINGS_LENGTH]) -> GasSettings {\n        let mut reader = Reader::new(serialized);\n        GasSettings::new(reader.read_struct(Gas::deserialize), reader.read_struct(Gas::deserialize), reader.read_struct(GasFees::deserialize), reader.read())\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = GasSettings::empty();\n    let serialized = item.serialize();\n    let deserialized = GasSettings::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"208":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_stack_item.nr","source":"use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl Empty for PrivateCallStackItem {\n    fn empty() -> Self {\n        PrivateCallStackItem {\n            contract_address: AztecAddress::empty(),\n            function_data: FunctionData::empty(),\n            public_inputs: PrivateCircuitPublicInputs::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = PrivateCallStackItem::empty();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item = PrivateCallStackItem::empty();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x065f2831db9ac0db5e710bd3a865b5facd8cf83f1585e1af8fd1d6ce9c47f685;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"209":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/caller_context.nr","source":"use crate::address::AztecAddress;\nuse crate::traits::{Empty, Serialize, Deserialize};\nuse crate::constants::CALLER_CONTEXT_LENGTH;\nuse crate::utils::reader::Reader;\n\nstruct CallerContext {\n    msg_sender: AztecAddress,\n    storage_contract_address: AztecAddress,\n    is_static_call: bool,\n}\n\nimpl Eq for CallerContext {\n    fn eq(self, other: CallerContext) -> bool {\n        other.msg_sender.eq(self.msg_sender)\n            & other.storage_contract_address.eq(self.storage_contract_address)\n            & other.is_static_call == self.is_static_call\n    }\n}\n\nimpl Empty for CallerContext {\n    fn empty() -> Self {\n        CallerContext {\n            msg_sender: AztecAddress::zero(),\n            storage_contract_address: AztecAddress::zero(),\n            is_static_call: false,\n        }\n    }\n}\n\nimpl CallerContext {\n    pub fn is_empty(self) -> bool {\n        self.msg_sender.is_zero() & self.storage_contract_address.is_zero() & !self.is_static_call\n    }\n\n    // Different to an empty context, a hidden context won't reveal the caller's msg_sender and storage_contract_address,\n    // but will still propagate the is_static_call flag.\n    pub fn is_hidden(self) -> bool {\n        self.msg_sender.is_zero() & self.storage_contract_address.is_zero()\n    }\n}\n\nimpl Serialize<CALLER_CONTEXT_LENGTH> for CallerContext {\n  fn serialize(self) -> [Field; CALLER_CONTEXT_LENGTH] {\n    let mut fields: BoundedVec<Field, CALLER_CONTEXT_LENGTH> = BoundedVec::new();\n\n    fields.extend_from_array(self.msg_sender.serialize());\n    fields.extend_from_array(self.storage_contract_address.serialize());\n    fields.push(self.is_static_call as Field);\n\n    assert_eq(fields.len(), CALLER_CONTEXT_LENGTH);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CALLER_CONTEXT_LENGTH> for CallerContext {\n  fn deserialize(fields: [Field; CALLER_CONTEXT_LENGTH]) -> CallerContext {\n    let mut reader = Reader::new(fields);\n\n    let item = CallerContext {\n      msg_sender: reader.read_struct(AztecAddress::deserialize),\n      storage_contract_address: reader.read_struct(AztecAddress::deserialize),\n      is_static_call: reader.read_bool(),\n    };\n    reader.finish();\n    item\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = CallerContext::empty();\n    let serialized = item.serialize();\n    let deserialized = CallerContext::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"211":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/log_hash.nr","source":"use crate::{\n    abis::side_effect::{Ordered, OrderedValue, Scoped}, address::AztecAddress,\n    constants::{\n    LOG_HASH_LENGTH, NOTE_LOG_HASH_LENGTH, ENCRYPTED_LOG_HASH_LENGTH, SCOPED_LOG_HASH_LENGTH,\n    SCOPED_ENCRYPTED_LOG_HASH_LENGTH\n},\n    traits::{Empty, Serialize, Deserialize}, utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct LogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n}\n\nimpl Ordered for LogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for LogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for LogHash {\n    fn eq(self, other: LogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n    }\n}\n\nimpl Empty for LogHash {\n    fn empty() -> Self {\n        LogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n        }\n    }\n}\n\nimpl Serialize<LOG_HASH_LENGTH> for LogHash {\n    fn serialize(self) -> [Field; LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length]\n    }\n}\n\nimpl Deserialize<LOG_HASH_LENGTH> for LogHash {\n    fn deserialize(values: [Field; LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n        }\n    }\n}\n\nimpl LogHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedLogHash {\n        ScopedLogHash { log_hash: self, contract_address }\n    }\n}\n\nstruct ScopedLogHash {\n    log_hash: LogHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<LogHash> for ScopedLogHash {\n    fn inner(self) -> LogHash {\n        self.log_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedLogHash {\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedLogHash {\n    fn value(self) -> Field {\n        self.log_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl Eq for ScopedLogHash {\n    fn eq(self, other: ScopedLogHash) -> bool {\n        (self.log_hash == other.log_hash)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedLogHash {\n    fn empty() -> Self {\n        ScopedLogHash {\n            log_hash: LogHash::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_LOG_HASH_LENGTH> for ScopedLogHash {\n    fn serialize(self) -> [Field; SCOPED_LOG_HASH_LENGTH] {\n       array_concat(self.log_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_LOG_HASH_LENGTH> for ScopedLogHash {\n    fn deserialize(values: [Field; SCOPED_LOG_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            log_hash: reader.read_struct(LogHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl ScopedLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the counter when exposing to public.\n        // The log hash must already be siloed when we call this.\n        LogHash { value: self.log_hash.value, counter: 0, length: self.log_hash.length }\n    }\n}\n\nstruct EncryptedLogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n    randomness: Field,\n}\n\nimpl Ordered for EncryptedLogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for EncryptedLogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for EncryptedLogHash {\n    fn eq(self, other: EncryptedLogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n            & (self.randomness == other.randomness) \n    }\n}\n\nimpl Empty for EncryptedLogHash {\n    fn empty() -> Self {\n        EncryptedLogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n            randomness: 0,\n        }\n    }\n}\n\nimpl Serialize<ENCRYPTED_LOG_HASH_LENGTH> for EncryptedLogHash {\n    fn serialize(self) -> [Field; ENCRYPTED_LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length, self.randomness]\n    }\n}\n\nimpl Deserialize<ENCRYPTED_LOG_HASH_LENGTH> for EncryptedLogHash {\n    fn deserialize(values: [Field; ENCRYPTED_LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n            randomness: values[3],\n        }\n    }\n}\n\nimpl EncryptedLogHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedEncryptedLogHash {\n        ScopedEncryptedLogHash { log_hash: self, contract_address }\n    }\n}\n\nstruct ScopedEncryptedLogHash {\n    log_hash: EncryptedLogHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<EncryptedLogHash> for ScopedEncryptedLogHash {\n    fn inner(self) -> EncryptedLogHash {\n        self.log_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl ScopedEncryptedLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the secret randomness and counter when exposing to public\n        // Expose as a LogHash rather than EncryptedLogHash to avoid bringing an unnec. 0 value around\n        // The log hash will already be silo'd when we call this\n        LogHash { value: self.log_hash.value, counter: 0, length: self.log_hash.length }\n    }\n}\n\nimpl Ordered for ScopedEncryptedLogHash {\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedEncryptedLogHash {\n    fn value(self) -> Field {\n        self.log_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl Eq for ScopedEncryptedLogHash {\n    fn eq(self, other: ScopedEncryptedLogHash) -> bool {\n        (self.log_hash == other.log_hash)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedEncryptedLogHash {\n    fn empty() -> Self {\n        ScopedEncryptedLogHash {\n            log_hash: EncryptedLogHash::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_ENCRYPTED_LOG_HASH_LENGTH> for ScopedEncryptedLogHash {\n    fn serialize(self) -> [Field; SCOPED_ENCRYPTED_LOG_HASH_LENGTH] {\n       array_concat(self.log_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_ENCRYPTED_LOG_HASH_LENGTH> for ScopedEncryptedLogHash {\n    fn deserialize(values: [Field; SCOPED_ENCRYPTED_LOG_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            log_hash: reader.read_struct(EncryptedLogHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nstruct NoteLogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n    note_hash_counter: u32,\n}\n\nimpl NoteLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the actual counter and note hash counter when exposing it to the public kernel.\n        // The counter is usually note_hash.counter + 1, so it can be revealing.\n        // Expose as a LogHash rather than NoteLogHash to avoid bringing an unnec. 0 value around\n        LogHash { value: self.value, counter: 0, length: self.length }\n    }\n}\n\nimpl Ordered for NoteLogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for NoteLogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for NoteLogHash {\n    fn eq(self, other: NoteLogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n            & (self.note_hash_counter == other.note_hash_counter) \n    }\n}\n\nimpl Empty for NoteLogHash {\n    fn empty() -> Self {\n        NoteLogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n            note_hash_counter: 0,\n        }\n    }\n}\n\nimpl Serialize<NOTE_LOG_HASH_LENGTH> for NoteLogHash {\n    fn serialize(self) -> [Field; NOTE_LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length, self.note_hash_counter as Field]\n    }\n}\n\nimpl Deserialize<NOTE_LOG_HASH_LENGTH> for NoteLogHash {\n    fn deserialize(values: [Field; NOTE_LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n            note_hash_counter: values[3] as u32,\n        }\n    }\n}\n"},"215":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/append_only_tree_snapshot.nr","source":"struct AppendOnlyTreeSnapshot {\n    root : Field,\n    // TODO(Alvaro) change this to a u64\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: u32 = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n"},"216":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n}\n// docs:end:call-context\n\nimpl Eq for CallContext {\n    fn eq(self, other: CallContext) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        let mut serialized: BoundedVec<Field, CALL_CONTEXT_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.msg_sender.to_field());\n        serialized.push(self.storage_contract_address.to_field());\n        serialized.push(self.function_selector.to_field());\n        serialized.push(self.is_delegate_call as Field);\n        serialized.push(self.is_static_call as Field);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        let mut reader = Reader::new(serialized);\n        CallContext {\n            msg_sender: AztecAddress::from_field(reader.read()),\n            storage_contract_address: AztecAddress::from_field(reader.read()),\n            function_selector: FunctionSelector::from_field(reader.read()),\n            is_delegate_call: reader.read() as bool,\n            is_static_call: reader.read() as bool,\n        }\n    }\n}\n\nimpl Empty for CallContext {\n    fn empty() -> Self {\n        CallContext {\n            msg_sender: AztecAddress::empty(),\n            storage_contract_address: AztecAddress::empty(),\n            function_selector: FunctionSelector::empty(),\n            is_delegate_call: false,\n            is_static_call: false,\n        }\n    }\n}\n\n#[test]\nfn serialize_deserialize_of_empty() {\n    let context = CallContext::empty();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = true;\n\n    let address: AztecAddress = AztecAddress::from_field(69420);\n    context1.msg_sender = address;\n    context2.msg_sender = address;\n\n    assert(context1.eq(context2));\n}\n\n#[test(should_fail)]\nfn not_eq_test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = false;\n\n    let address1: AztecAddress = AztecAddress::from_field(69420);\n    let address2: AztecAddress = AztecAddress::from_field(42069);\n\n    context1.msg_sender = address1;\n    context2.msg_sender = address2;\n\n    assert(context1.eq(context2));\n}\n\n#[test]\nfn hash_smoke() {\n    let context = CallContext::empty();\n    let _hashed = context.hash();\n}\n"},"217":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/max_block_number.nr","source":"use crate::{constants::MAX_BLOCK_NUMBER_LENGTH, traits::{Deserialize, Serialize, Empty}};\n\nstruct MaxBlockNumber {\n    _opt: Option<u32>\n}\n\nimpl Empty for MaxBlockNumber {\n    fn empty() -> Self {\n        Self { _opt: Option::none() }\n    }\n}\n\nimpl Eq for MaxBlockNumber {\n    fn eq(self, other: Self) -> bool {\n        self._opt == other._opt\n    }\n}\n\nimpl Serialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn serialize(self) -> [Field; MAX_BLOCK_NUMBER_LENGTH] {\n        [self._opt._is_some as Field, self._opt._value as Field]\n    }\n}\n\nimpl Deserialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn deserialize(serialized: [Field; MAX_BLOCK_NUMBER_LENGTH]) -> MaxBlockNumber {\n        MaxBlockNumber {\n            _opt: Option {\n                _is_some: serialized[0] as bool,\n                _value: serialized[1] as u32,\n            }\n        }\n    }\n}\n\nimpl MaxBlockNumber {\n    pub fn new(max_block_number: u32) -> Self {\n        Self { _opt: Option::some(max_block_number) }\n    }\n\n    pub fn is_none(self) -> bool {\n        self._opt.is_none()\n    }\n\n    pub fn is_some(self) -> bool {\n        self._opt.is_some()\n    }\n\n    pub fn unwrap(self) -> u32 {\n        self._opt.unwrap()\n    }\n\n    pub fn unwrap_unchecked(self) -> u32 {\n        self._opt.unwrap_unchecked()\n    }\n\n    pub fn min(lhs: MaxBlockNumber, rhs: MaxBlockNumber) -> MaxBlockNumber {\n        if rhs.is_none() {\n            lhs // lhs might also be none, but in that case both would be\n        } else {\n            MaxBlockNumber::min_with_u32(lhs, rhs.unwrap_unchecked())\n        }\n    }\n\n    pub fn min_with_u32(lhs: MaxBlockNumber, rhs: u32) -> MaxBlockNumber {\n        if lhs._opt.is_none() {\n            MaxBlockNumber::new(rhs)\n        } else {\n            let lhs_value = lhs._opt.unwrap_unchecked();\n\n            MaxBlockNumber::new(if lhs_value < rhs { lhs_value } else { rhs })\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = MaxBlockNumber::empty();\n    let serialized = item.serialize();\n    let deserialized = MaxBlockNumber::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn zeroed_is_none() {\n    // Large parts of the kernel rely on zeroed to initialize structs. This conveniently matches what `default` does,\n    // and though we should eventually move everything to use `default`, it's good to check for now that both are\n    // equivalent.\n    let a = MaxBlockNumber::empty();\n    assert(a.is_none());\n}\n\n#[test]\nfn serde_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert(b.is_none());\n}\n\n#[test]\nfn serde_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert_eq(b.unwrap(), 13);\n}\n\n#[test(should_fail)]\nfn default_unwrap_panics() {\n    let a = MaxBlockNumber::empty();\n    let _ = a.unwrap();\n}\n\n#[test]\nfn min_default_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::empty();\n\n    assert(MaxBlockNumber::min(a, b).is_none());\n}\n\n#[test]\nfn min_default_some() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::new(13);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_some_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::new(42);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_with_u32_default() {\n    let a = MaxBlockNumber::empty();\n    let b = 42;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 42);\n}\n\n#[test]\nfn min_with_u32_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = 42;\n    let c = 8;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min_with_u32(a, c).unwrap(), 8);\n}\n"},"220":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize, Empty}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        (self.is_private == other.is_private)\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nimpl Empty for FunctionData {\n    fn empty() -> Self {\n        FunctionData {\n            selector: FunctionSelector::empty(),\n            is_private: false\n        }\n    }\n\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data = FunctionData::empty();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data = FunctionData::empty();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty function data hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"227":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/messaging/l2_to_l1_message.nr","source":"use crate::{\n    address::{AztecAddress, EthAddress},\n    constants::{L2_TO_L1_MESSAGE_LENGTH, SCOPED_L2_TO_L1_MESSAGE_LENGTH},\n    abis::side_effect::{Ordered, Scoped}, traits::{Deserialize, Empty, Serialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\n// Note: Not to be confused with L2ToL1Msg in Solidity\nstruct L2ToL1Message {\n    recipient: EthAddress,\n    content: Field,\n    counter: u32,\n}\n\nimpl Ordered for L2ToL1Message {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Empty for L2ToL1Message {\n    fn empty() -> Self {\n        Self {\n            recipient: EthAddress::empty(),\n            content: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Eq for L2ToL1Message {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient) & (self.content == other.content) & (self.counter == other.counter)\n    }\n}\n\nimpl Serialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn serialize(self) -> [Field; L2_TO_L1_MESSAGE_LENGTH] {\n        [self.recipient.to_field(), self.content, self.counter as Field]\n    }\n}\n\nimpl Deserialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn deserialize(values: [Field; L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        Self {\n            recipient: EthAddress::from_field(values[0]),\n            content: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n\nimpl L2ToL1Message {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedL2ToL1Message {\n        ScopedL2ToL1Message { message: self, contract_address }\n    }\n}\n\nstruct ScopedL2ToL1Message {\n    message: L2ToL1Message,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<L2ToL1Message> for ScopedL2ToL1Message {\n    fn inner(self) -> L2ToL1Message {\n        self.message\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedL2ToL1Message {\n    fn counter(self) -> u32 {\n        self.message.counter\n    }\n}\n\nimpl Eq for ScopedL2ToL1Message {\n    fn eq(self, other: ScopedL2ToL1Message) -> bool {\n        (self.message == other.message)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedL2ToL1Message {\n    fn empty() -> Self {\n        ScopedL2ToL1Message {\n            message: L2ToL1Message::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_L2_TO_L1_MESSAGE_LENGTH> for ScopedL2ToL1Message {\n    fn serialize(self) -> [Field; SCOPED_L2_TO_L1_MESSAGE_LENGTH] {\n        array_concat(self.message.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_L2_TO_L1_MESSAGE_LENGTH> for ScopedL2ToL1Message {\n    fn deserialize(values: [Field; SCOPED_L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            message: reader.read_struct(L2ToL1Message::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\n#[test]\nfn serialization_of_empty_l2() {\n    let item = L2ToL1Message::empty();\n    let serialized = item.serialize();\n    let deserialized = L2ToL1Message::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped_l2() {\n    let item = ScopedL2ToL1Message::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedL2ToL1Message::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"23":{"path":"std/field/mod.nr","source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n"},"234":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U64_SERIALIZED_LEN: Field = 1;\nglobal U128_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n"},"237":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/content_commitment.nr","source":"use crate::{\n    constants::CONTENT_COMMITMENT_LENGTH, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct ContentCommitment {\n  num_txs: Field,\n  txs_effects_hash: Field,\n  in_hash: Field,\n  out_hash: Field,\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new();\n\n    fields.push(self.num_txs);\n    fields.push(self.txs_effects_hash);\n    fields.push(self.in_hash);\n    fields.push(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let num_txs = serialized[0];\n\n    let txs_effects_hash = serialized[1];\n\n    let in_hash = serialized[2];\n\n    let out_hash = serialized[3];\n\n    Self {\n      num_txs,\n      txs_effects_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      num_txs: 0,\n      txs_effects_hash: 0,\n      in_hash: 0,\n      out_hash: 0,\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.num_txs == other.num_txs)\n      & (self.txs_effects_hash == other.txs_effects_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n"},"239":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/header.nr","source":"use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, STATE_REFERENCE_LENGTH, CONTENT_COMMITMENT_LENGTH},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n    total_fees: Field\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables) &\n        self.total_fees.eq(other.total_fees)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n        fields.push(self.total_fees);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n        offset = offset + GLOBAL_VARIABLES_LENGTH;\n\n        let total_fees = serialized[offset];\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n            total_fees\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n            total_fees: 0\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header = Header::empty();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header = Header::empty();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header = Header::empty();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x124e8c40a6eca2e3ad10c04050b01a3fad00df3cea47b13592c7571b6914c7a7;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"240":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path, messaging::l2_to_l1_message::ScopedL2ToL1Message,\n    recursion::verification_key::VerificationKey, traits::is_empty,\n    utils::field::field_from_bytes_32_trunc\n};\nuse std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    pedersen_hash(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, inner_note_hash: Field) -> Field {\n    let inputs = [nonce, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_encrypted_log_hash(address: AztecAddress, randomness: Field, log_hash: Field) -> Field {\n    // TODO: Using 0 GENERATOR_INDEX here as interim before we move to posiedon\n    // NB: A unique separator will be needed for masked_contract_address\n    let mut masked_contract_address = pedersen_hash([address.to_field(), randomness], 0);\n    if randomness == 0 {\n        // In some cases, we actually want to reveal the contract address we are siloing with:\n        // e.g. 'handshaking' contract w/ known address\n        // An app providing randomness = 0 signals to not mask the address.\n        masked_contract_address = address.to_field();\n    }\n    accumulate_sha256([masked_contract_address, log_hash])\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedEncryptedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_encrypted_log_hash(\n            log_hash.contract_address,\n            log_hash.log_hash.randomness,\n            log_hash.log_hash.value\n        )\n    }\n}\n\npub fn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly. \npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<N>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n"},"241":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/partial_state_reference.nr","source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0], \n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial = PartialStateReference::empty();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n"},"243":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/transaction/tx_context.nr","source":"use crate::{\n    constants::{GENERATOR_INDEX__TX_CONTEXT, TX_CONTEXT_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader,\n    abis::gas_settings::GasSettings\n};\n\n// docs:start:tx-context\nstruct TxContext {\n    chain_id : Field,\n    version : Field,\n    gas_settings: GasSettings,\n}\n// docs:end:tx-context\n\nimpl TxContext {\n    pub fn new(chain_id: Field, version: Field, gas_settings: GasSettings) -> Self {\n        TxContext { chain_id, version, gas_settings }\n    }\n}\n\nimpl Eq for TxContext {\n    fn eq(self, other: Self) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.gas_settings.eq(other.gas_settings))\n    }\n}\n\nimpl Empty for TxContext {\n    fn empty() -> Self {\n        TxContext {\n            chain_id: 0,\n            version: 0,\n            gas_settings: GasSettings::empty(),\n        }\n    }\n}\n\nimpl Serialize<TX_CONTEXT_LENGTH> for TxContext {\n    fn serialize(self) -> [Field; TX_CONTEXT_LENGTH] {\n        let mut fields: BoundedVec<Field, TX_CONTEXT_LENGTH> = BoundedVec::new();\n\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.extend_from_array(self.gas_settings.serialize());\n\n        assert_eq(fields.len(), TX_CONTEXT_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<TX_CONTEXT_LENGTH> for TxContext {\n    fn deserialize(serialized: [Field; TX_CONTEXT_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let context = Self {\n            chain_id: reader.read(),\n            version: reader.read(),\n            gas_settings: reader.read_struct(GasSettings::deserialize),\n        };\n\n        reader.finish();\n        context\n    }\n}\n\nimpl Hash for TxContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__TX_CONTEXT)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context = TxContext::empty();\n    let serialized = context.serialize();\n    let deserialized = TxContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let context = TxContext::empty();\n    let hash = context.hash();\n\n    // Value from tx_context.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x17e4357684c5a4349b4587c95b0b6161dcb4a3c5b02d4eb2ecc3b02c80193261;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"249":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/state_reference.nr","source":"use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state = StateReference::empty();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n"},"263":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"struct Reader<N> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"273":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes = field.to_be_bytes(31);\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2 = field.to_be_bytes(31);\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n"},"275":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"289":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr","source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n"},"290":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId, hash::poseidon2_hash,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash([pub_keys_hash.to_field(), partial_address.to_field(), GENERATOR_INDEX__CONTRACT_ADDRESS_V1])\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x1b6ead051e7b42665064ca6cf1ec77da0a36d86e00d1ff6e44077966c0c3a9fa;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"30":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\nglobal RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) -> [Field; RATE] {\n        // zero-pad the cache\n        for i in 0..RATE {\n            if i >= self.cache_size {\n                self.cache[i] = 0;\n            }\n        }\n        // add the cache into sponge state\n        for i in 0..RATE {\n            self.state[i] += self.cache[i];\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n        // return `RATE` number of field elements from the sponge state.\n        let mut result = [0; RATE];\n        for i in 0..RATE {\n            result[i] = self.state[i];\n        }\n        result\n    }\n\n    fn absorb(&mut self, input: Field) {\n        if (!self.squeeze_mode) & (self.cache_size == RATE) {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            let _ = self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else if (!self.squeeze_mode) & (self.cache_size != RATE) {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        } else if self.squeeze_mode {\n            // If we're in squeeze mode, switch to absorb mode and add the input into the cache.\n            // N.B. I don't think this code path can be reached?!\n            self.cache[0] = input;\n            self.cache_size = 1;\n            self.squeeze_mode = false;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        if self.squeeze_mode & (self.cache_size == 0) {\n            // If we're in squeze mode and the cache is empty, there is nothing left to squeeze out of the sponge!\n            // Switch to absorb mode.\n            self.squeeze_mode = false;\n            self.cache_size = 0;\n        }\n        if !self.squeeze_mode {\n            // If we're in absorb mode, apply sponge permutation to compress the cache, populate cache with compressed\n            // state and switch to squeeze mode. Note: this code block will execute if the previous `if` condition was\n            // matched\n            let new_output_elements = self.perform_duplex();\n            self.squeeze_mode = true;\n            for i in 0..RATE {\n                self.cache[i] = new_output_elements[i];\n            }\n            self.cache_size = RATE;\n        }\n        // By this point, we should have a non-empty cache. Pop one item off the top of the cache and return it.\n        let result = self.cache[0];\n        for i in 1..RATE {\n            if i < self.cache_size {\n                self.cache[i - 1] = self.cache[i];\n            }\n        }\n        self.cache_size -= 1;\n        self.cache[self.cache_size] = 0;\n        result\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n"},"330":{"path":"/usr/src/noir-projects/aztec-nr/value-note/src/value_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n    address::AztecAddress, traits::{Deserialize, Serialize}, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::poseidon2_hash\n},\n    note::{note_header::NoteHeader, note_interface::NoteInterface, utils::compute_note_hash_for_consumption},\n    oracle::unsafe_rand::unsafe_rand, keys::getters::get_nsk_app, context::PrivateContext\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n// VALUE_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal VALUE_NOTE_BYTES_LEN: Field = 3 * 32 + 64;\n\n// docs:start:value-note-def\n#[aztec(note)]\nstruct ValueNote {\n    value: Field,\n   // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NoteInterface<VALUE_NOTE_LEN, VALUE_NOTE_BYTES_LEN> for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_note_hash_and_nullifier(self, context: &mut PrivateContext) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n\n    // docs:end:nullifier\n\n    fn compute_note_hash_and_nullifier_without_context(self) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, npk_m_hash: Field) -> Self {\n        let randomness = unsafe_rand();\n        let header = NoteHeader::empty();\n        ValueNote { value, npk_m_hash, randomness, header }\n    }\n}\n\nimpl Serialize<7> for ValueNote {\n    fn serialize(self) -> [Field; 7] {\n        let header = self.header.serialize();\n\n        [self.value, self.npk_m_hash, self.randomness, header[0], header[1], header[2], header[3]]\n    }\n}\n"},"399":{"path":"/usr/src/noir-projects/noir-contracts/contracts/static_child_contract/src/main.nr","source":"// A contract used along with `StaticParent` contract to test static calls.\ncontract StaticChild {\n    use dep::aztec::prelude::{AztecAddress, FunctionSelector, PublicMutable, PrivateSet, PrivateContext, Deserialize};\n\n    use dep::aztec::{\n        context::{PublicContext, gas::GasOpts}, protocol_types::{abis::{call_context::CallContext}},\n        note::{note_getter_options::NoteGetterOptions, note_header::NoteHeader},\n        encrypted_logs::encrypted_note_emission::encode_and_encrypt_note\n    };\n    use dep::value_note::value_note::ValueNote;\n\n    #[aztec(storage)]\n    struct Storage {\n        current_value: PublicMutable<Field>,\n        a_private_value: PrivateSet<ValueNote>,\n    }\n\n    // Returns base_value + chain_id + version + block_number + timestamp statically\n    #[aztec(public)]\n    #[aztec(view)]\n    fn pub_get_value(base_value: Field) -> Field {\n        let return_value = base_value\n            + context.chain_id()\n            + context.version()\n            + context.block_number()\n            + context.timestamp() as Field;\n\n        return_value\n    }\n\n    // Sets `current_value` to `new_value`\n    #[aztec(public)]\n    fn pub_set_value(new_value: Field) -> Field {\n        storage.current_value.write(new_value);\n        context.emit_unencrypted_log(new_value);\n        new_value\n    }\n\n    // View function that attempts to modify state. Should always fail regardless how it's called.\n    #[aztec(private)]\n    #[aztec(view)]\n    fn private_illegal_set_value(new_value: Field, owner: AztecAddress) -> Field {\n        let header = context.get_header();\n        let owner_npk_m_hash = header.get_npk_m_hash(&mut context, owner);\n        let mut note = ValueNote::new(new_value, owner_npk_m_hash);\n        storage.a_private_value.insert(&mut note).emit(encode_and_encrypt_note(&mut context, context.msg_sender(), owner));\n        new_value\n    }\n\n    // Modify a note\n    #[aztec(private)]\n    fn private_set_value(\n        new_value: Field,\n        owner: AztecAddress,\n        outgoing_viewer: AztecAddress\n    ) -> Field {\n        let header = context.get_header();\n        let owner_npk_m_hash = header.get_npk_m_hash(&mut context, owner);\n        let mut note = ValueNote::new(new_value, owner_npk_m_hash);\n        storage.a_private_value.insert(&mut note).emit(encode_and_encrypt_note(&mut context, outgoing_viewer, owner));\n        new_value\n    }\n\n    // Retrieve note value statically\n    #[aztec(private)]\n    #[aztec(view)]\n    fn private_get_value(amount: Field, owner: AztecAddress) -> Field {\n        let owner_npk_m_hash = context.get_header().get_npk_m_hash(&mut context, owner);\n        let mut options = NoteGetterOptions::new();\n        options = options.select(ValueNote::properties().value, amount, Option::none()).select(\n            ValueNote::properties().npk_m_hash,\n            owner_npk_m_hash,\n            Option::none()\n        ).set_limit(1);\n        let notes = storage.a_private_value.get_notes(options);\n        notes.get_unchecked(0).value\n    }\n\n    // Increments `current_value` by `new_value`\n    #[aztec(public)]\n    fn pub_inc_value(new_value: Field) -> Field {\n        let old_value = storage.current_value.read();\n        storage.current_value.write(old_value + new_value);\n        context.emit_unencrypted_log(new_value);\n        new_value\n    }\n\n    // View function that attempts to modify state. Should always fail regardless how it's called.\n    #[aztec(public)]\n    #[aztec(view)]\n    fn pub_illegal_inc_value(new_value: Field) -> Field {\n        let old_value = storage.current_value.read();\n        storage.current_value.write(old_value + new_value);\n        context.emit_unencrypted_log(new_value);\n        new_value\n    }\n}\n"},"400":{"path":"/usr/src/noir-projects/noir-contracts/contracts/static_parent_contract/src/main.nr","source":"\n// A contract used along with `StaticChild` contract to test static calls.\ncontract StaticParent {\n    use dep::aztec::prelude::{AztecAddress, FunctionSelector, Deserialize};\n    use dep::aztec::context::gas::GasOpts;\n    use dep::static_child_contract::StaticChild;\n\n    // Public function to directly call another public function to the target_contract using the selector and value provided\n    #[aztec(public)]\n    fn public_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        arg: Field\n    ) -> Field {\n        context.call_public_function(\n            target_contract,\n            target_selector,\n            [arg].as_slice(),\n            GasOpts::default()\n        ).deserialize_into()\n    }\n\n    // Private function to directly call another private function to the target_contract using the selector and args provided\n    #[aztec(private)]\n    fn private_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 2]\n    ) -> Field {\n        context.call_private_function(target_contract, target_selector, args).unpack_into()\n    }\n\n    // Just like function above but with 3 args.\n    #[aztec(private)]\n    fn private_call_3_args(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 3]\n    ) -> Field {\n        context.call_private_function(target_contract, target_selector, args).unpack_into()\n    }\n\n    // Private function to enqueue a call to a public function of another contract, passing the target arguments provided\n    #[aztec(private)]\n    fn enqueue_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 1]\n    ) {\n        context.call_public_function(target_contract, target_selector, args);\n    }\n\n    #[aztec(private)]\n    fn private_static_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 2]\n    ) -> Field {\n        context.static_call_private_function(target_contract, target_selector, args).unpack_into()\n    }\n\n    // Private function to statically call another private function to the target_contract using the selector and values provided\n    #[aztec(private)]\n    fn private_static_call_3_args(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 3]\n    ) -> Field {\n        context.static_call_private_function(target_contract, target_selector, args).unpack_into()\n    }\n\n    // Same as above but using a specific function from the interface\n    #[aztec(private)]\n    fn private_get_value_from_child(\n        target_contract: AztecAddress,\n        value: Field,\n        owner: AztecAddress\n    ) -> Field {\n        StaticChild::at(target_contract).private_get_value(value, owner).view(&mut context)\n    }\n\n    // Private function to set a static context and verify correct propagation for nested private calls\n    #[aztec(private)]\n    fn private_nested_static_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 2]\n    ) -> Field {\n        StaticParent::at(context.this_address()).private_call(target_contract, target_selector, args).view(&mut context)\n    }\n\n    // Just like function above but with 3 args.\n    #[aztec(private)]\n    fn private_nested_static_call_3_args(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 3]\n    ) -> Field {\n        StaticParent::at(context.this_address()).private_call_3_args(target_contract, target_selector, args).view(&mut context)\n    }\n\n    // Public function to statically call another public function to the target_contract using the selector and value provided\n    #[aztec(public)]\n    fn public_static_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 1]\n    ) -> Field {\n        context.static_call_public_function(\n            target_contract,\n            target_selector,\n            args.as_slice(),\n            GasOpts::default()\n        ).deserialize_into()\n    }\n\n    // Same as above but using a specific function from the interface\n    #[aztec(public)]\n    fn public_get_value_from_child(target_contract: AztecAddress, value: Field) -> Field {\n        StaticChild::at(target_contract).pub_get_value(value).view(&mut context)\n    }\n\n    // Public function to set a static context and verify correct propagation for nested public calls\n    #[aztec(public)]\n    fn public_nested_static_call(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 1]\n    ) -> Field {\n        // Call the target public function through the pub entrypoint statically\n        StaticParent::at(context.this_address()).public_call(target_contract, target_selector, args[0]).view(&mut context)\n    }\n\n    // Private function to enqueue a static call to a public function of another contract, passing the target arguments provided\n    #[aztec(private)]\n    fn enqueue_static_call_to_pub_function(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 1]\n    ) {\n        context.static_call_public_function(target_contract, target_selector, args);\n    }\n\n    // Same as above but using a specific function from the interface\n    #[aztec(private)]\n    fn enqueue_public_get_value_from_child(target_contract: AztecAddress, value: Field) {\n        StaticChild::at(target_contract).pub_get_value(value).enqueue_view(&mut context);\n    }\n\n    // Private function to set a static context and verify correct propagation of nested enqueuing of public calls\n    #[aztec(private)]\n    fn enqueue_static_nested_call_to_pub_function(\n        target_contract: AztecAddress,\n        target_selector: FunctionSelector,\n        args: [Field; 1]\n    ) {\n        // Call the target public function through the pub entrypoint statically\n        StaticParent::at(context.this_address()).public_call(target_contract, target_selector, args[0]).enqueue_view(&mut context)\n    }\n}\n"},"44":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    // Append each element of the `other` slice to the end of `self`.\n    // This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::unsafe::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T where T: Append {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"65":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/getters.nr","source":"use dep::protocol_types::{\n    header::Header, abis::validation_requests::KeyValidationRequest, address::AztecAddress,\n    constants::CANONICAL_KEY_REGISTRY_ADDRESS, point::Point, storage::map::derive_storage_slot_in_map,\n    traits::is_empty\n};\nuse crate::{\n    context::PrivateContext,\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX, TAGGING_INDEX}},\n    state_vars::{shared_mutable::shared_mutable_private_getter::SharedMutablePrivateGetter}\n};\n\nglobal DELAY = 5;\n\n// docs:start:key-getters\ntrait KeyGetters {\n  fn get_npk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_ivpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_ovpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_tpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_npk_m_hash(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Field;\n}\n\nimpl KeyGetters for Header {\n    fn get_npk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, NULLIFIER_INDEX, self)\n    }\n\n    fn get_ivpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, INCOMING_INDEX, self)\n    }\n\n    fn get_ovpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, OUTGOING_INDEX, self)\n    }\n\n    fn get_tpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, TAGGING_INDEX, self)\n    }\n\n    fn get_npk_m_hash(self, context: &mut PrivateContext, address: AztecAddress) -> Field {\n        get_master_key(context, address, NULLIFIER_INDEX, self).hash()\n    }\n}\n// docs:end:key-getters\n\nfn get_master_key(\n    context: &mut PrivateContext,\n    address: AztecAddress,\n    key_index: Field,\n    header: Header\n) -> Point {\n    let key = fetch_key_from_registry(context, key_index, address, header);\n    if is_empty(key) {\n        // Keys were not registered in registry yet --> fetch key from PXE\n        let keys = fetch_and_constrain_keys(address);\n        // Return the corresponding to index\n        keys.get_key_by_index(key_index)\n    } else {\n        // Keys were registered --> return the key\n        key\n    }\n}\n\nfn fetch_key_from_registry(\n    context: &mut PrivateContext,\n    key_index: Field,\n    address: AztecAddress,\n    header: Header\n) -> Point {\n    let x_coordinate_map_slot = key_index * 2 + 1;\n    let y_coordinate_map_slot = x_coordinate_map_slot + 1;\n    let x_coordinate_derived_slot = derive_storage_slot_in_map(x_coordinate_map_slot, address);\n    let y_coordinate_derived_slot = derive_storage_slot_in_map(y_coordinate_map_slot, address);\n\n    let x_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        x_coordinate_derived_slot\n    );\n    let y_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        y_coordinate_derived_slot\n    );\n    let x_coordinate = x_coordinate_registry.get_value_in_private(header);\n    let y_coordinate = y_coordinate_registry.get_value_in_private(header);\n\n    Point::new(x_coordinate, y_coordinate, false)\n}\n\n// Passes only when keys were not rotated - is expected to be called only when keys were not registered yet\nfn fetch_and_constrain_keys(address: AztecAddress) -> PublicKeys {\n    let (public_keys, partial_address) = get_public_keys_and_partial_address(address);\n\n    let computed_address = AztecAddress::compute(public_keys.hash(), partial_address);\n\n    assert(computed_address.eq(address));\n\n    public_keys\n}\n\n// A helper function since requesting nsk_app is very common\n// TODO(#6543)\npub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n"},"89":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\nstruct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<N>(self) -> [Field; N] {\n        let unpacked: [Field; N] = unpack_returns(self.packed_returns);\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, N>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"93":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    public_context::FunctionReturns, inputs::{PrivateContextInputs, PublicContextInputs}\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\ntrait CallInterface<N, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateStaticCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateStaticVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> T {\n        self.original\n    }\n}\n\nstruct PublicCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](PublicContextInputs) -> T,\n    is_static: bool\n}\n\nimpl<N, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> () {\n        self.original\n    }\n}\n\nstruct PublicVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<N, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> T {\n        self.original\n    }\n}\n\nstruct PublicStaticCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<N, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> () {\n        self.original\n    }\n}\n\nstruct PublicStaticVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<N, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"94":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, set_public_teardown_function_call_internal,\n    parse_public_call_stack_item_from_oracle\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    caller_context::CallerContext, function_selector::FunctionSelector,\n    max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_function_hash: Field,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    // TODO(#7112): This function is called with non-zero note hash only in 1 of 25 cases in aztec-packages repo\n    // - consider creating a separate function with 1 arg for the zero note hash case.\n    fn push_nullifier(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            public_teardown_function_hash: self.public_teardown_function_hash,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one \n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<M>(&mut self, randomness: Field, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<M>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.start_side_effect_counter, start_side_effect_counter);\n        let end_side_effect_counter = item.public_inputs.end_side_effect_counter;\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        let mut caller_context = CallerContext::empty();\n        caller_context.is_static_call = self.inputs.call_context.is_static_call;\n        if is_delegate_call {\n            caller_context.msg_sender = self.inputs.call_context.msg_sender;\n            caller_context.storage_contract_address = self.inputs.call_context.storage_contract_address;\n        }\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            target: item.contract_address,\n            call_context: item.public_inputs.call_context,\n            function_data: item.function_data,\n            args_hash: item.public_inputs.args_hash,\n            returns_hash: item.public_inputs.returns_hash,\n            caller_context,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(item.public_inputs.returns_hash)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_call_stack_hashes.push(item.get_compressed().hash());\n    }\n\n    pub fn set_public_teardown_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_teardown_function_hash = item.get_compressed().hash();\n    }\n\n    fn validate_call_stack_item_from_oracle(\n        self,\n        item: PublicCallStackItem,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"95":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::inputs::public_context_inputs::PublicContextInputs;\nuse crate::context::gas::GasOpts;\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs) -> Self {\n        PublicContext { inputs }\n    }\n\n    pub fn emit_unencrypted_log<T, N>(&mut self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0);\n    }\n\n    fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        assert(false, \"'delegate_call_public_function' not implemented!\");\n        FunctionReturns::new([0; RETURNS_COUNT])\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        // Cannot nullify pending commitments in AVM, so `nullified_commitment` is not used\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(self) -> AztecAddress {\n        sender()\n    }\n    fn selector(self) -> FunctionSelector {\n        FunctionSelector::from_u32(function_selector())\n    }\n    fn get_args_hash(self) -> Field {\n        self.inputs.args_hash\n    }\n    fn transaction_fee(self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(self) -> Field {\n        chain_id()\n    }\n    fn version(self) -> Field {\n        version()\n    }\n    fn block_number(self) -> Field {\n        block_number()\n    }\n    fn timestamp(self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(self) -> Field {\n        da_gas_left()\n    }\n\n    fn raw_storage_read<N>(_self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(storage_slot)\n    }\n\n    fn storage_read<T, N>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<N>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        storage_write(storage_slot, values);\n    }\n\n    fn storage_write<T, N>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    let MAX_POSSIBLE_FIELD: Field = 0 - 1;\n    [\n        user_gas.l2_gas.unwrap_or(MAX_POSSIBLE_FIELD),\n        user_gas.da_gas.unwrap_or(MAX_POSSIBLE_FIELD)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/6420): reconsider.\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\nunconstrained fn function_selector() -> u32 {\n    function_selector_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<RET_SIZE>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<RET_SIZE>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_opcode(storage_slot, N)\n}\n\nunconstrained fn storage_write<N>(storage_slot: Field, values: [Field; N]) {\n    storage_write_opcode(storage_slot, values);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(PublicContextInputs::empty())\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n#[oracle(avmOpcodeFunctionSelector)]\nunconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<RET_SIZE>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<RET_SIZE>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode<N>(storage_slot: Field, length: Field) -> [Field; N] {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode<N>(storage_slot: Field, values: [Field; N]) {}\n\nstruct FunctionReturns<N> {\n    values: [Field; N]\n}\n\nimpl<N> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn assert_empty(returns: FunctionReturns<0>) {\n        assert(returns.values.len() == 0);\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n"}}}