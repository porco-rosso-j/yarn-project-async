{"transpiled":true,"noir_version":"0.24.0+78ef0134b82e76a73dadb6c7975def22290e3a1a","name":"AvmTest","functions":[{"name":"avm_getFeePerL2Gas","function_type":"Open","is_internal":false,"abi":{"param_witnesses":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"JwADAAAEAQAAAAAfAAAAAAAAAAAAAAAEACUAAAAFKAAAAAACAAAEADcAAAAEAAAAAAEUAAAAAAIoAAAAAAIAAAADKAAAAAADAAAAAiY=","debug_symbols":"JcxBCoAgFEXRvbxxhJRRuZVo8CsDQVT0E4S495Rm90xuhvUnsfEuQWWIfoLaMlIg15yYIkMNyyw6aHe1XGXpcBuroeRY9oqHoqHD6rao5Df8WT4="},{"name":"avm_pedersen_hash","function_type":"Open","is_internal":false,"abi":{"param_witnesses":{"data":[{"end":3,"start":0}]},"parameters":[{"name":"data","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[3]},"bytecode":"JwADAAAEBAAAAAAfAAAAAAAAAAADAAAEACcAAwAABAAAAAACJwADAAAAAQAAAAMlAAAABygAAAAAAgAABAM3AAAABAMAAAABJwADAAAAAQAAAAQAAAMAAAADAAAABAAAAAMnAAMAAAABAAAABAAAAwAAAAMAAAAEAAAAAycAAwAAAAAAAAAEJwADAAAAAwAAAAY8AQAAAAUAAAACAAAABigAAAAABQAAAAcoAAAAAAcAAAACJg==","debug_symbols":"tZJBCsIwEEXvMusgSaqmk6uIi1EjBEJamiBIyN1NqVSh3RSa1cyH93mbn8B1d4q28wF0An5QoC8JQk9+zCHSEEFzBsY/ys0MntYZ0McmX1nB2204ruECT+rbEIjyv8SWMMcZ5tjOsFSTQfD6CrGD4ix+ClwqZH1FU1VRwosGSzdnxmWVGN/99OYP"},{"name":"avm_getSender","function_type":"Open","is_internal":false,"abi":{"param_witnesses":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"JwADAAAEAQAAAAAfAAAAAAAAAAAAAAAEACUAAAAFKAAAAAACAAAEADcAAAAEAAAAAAERAAAAAAIoAAAAAAIAAAADKAAAAAADAAAAAiY=","debug_symbols":"JcxBCoAgFEXRvbxxhJRFuZVo8CsDQVT0E4S495Rm90xuhvUnsfEuQWWIfoLaMlIg15yYIkMNchEdtLtarnPpcBuroeRY9oqHoqHD6rao5Df8WT4="},{"name":"avm_setOpcodeUint8","function_type":"Open","is_internal":false,"abi":{"param_witnesses":{},"parameters":[],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"public"},"return_witnesses":[0]},"bytecode":"JwADAAAEAQAAAAAfAAAAAAAAAAAAAAAEACUAAAAFKAAAAAACAAAEADcAAAAEAAAAAAEnAAEIAAAAAigAAAAAAgAAAAMoAAAAAAMAAAACJg==","debug_symbols":"q1bKyU9OLMnMzytWsqqu1VEqSyzKTEzKSYVySyoLIMxaAA=="},{"name":"avm_keccak_hash","function_type":"Open","is_internal":false,"abi":{"param_witnesses":{"data":[{"end":3,"start":0}]},"parameters":[{"name":"data","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[3,4]},"bytecode":"JwADAAAEBQAAAAAfAAAAAAAAAAADAAAEACcAAwAABAAAAAACJwADAAAAAQAAAAMlAAAAFCcAAwAABAMAAAAEJwADAAAAAgAAAAUnAAMAAAAAAAAABwUAAwAAAAcAAAAFAAAACCcAAQEAAAAJAQABAAAACQAAAAgAAAAIJAAAAAATAAAACAAABgAAAAIAAAAHAAAACSgBAAAACQAAAAYAAAYAAAAEAAAABwAAAAkoAgAAAAYAAAAJJwADAAAAAQAAAAkAAAMAAAAHAAAACQAAAAcjAAAACDcAAAAEAwAAAAInAAMAAAABAAAABAAAAwAAAAMAAAAEAAAAAycAAwAAAAIAAAAGKAAAAAAAAAAABAAAAwAAAAAAAAAGAAAAACcAAwAAAAEAAAAFOQMAAAAEAAAAAgAAAAMoAAAAAAQAAAAGKAAAAAAFAAAABygAAAAABgAAAAIoAAAAAAcAAAADJg==","debug_symbols":"ndBBCsMgEAXQu/y1FI3WhVcpXUxbC4KYECUQxLtHSXbJJq5m/vDfZjL8+KXkxhBhMvhj4DCvjDhRaIeYaE4wnMGGX52F4e+8hVGyvFnri5v94aovtBQHEVrps5JdSnWpZ5fSd1UNC82OPt6239eY1mlfywY="},{"name":"avm_sha256_hash","function_type":"Open","is_internal":false,"abi":{"param_witnesses":{"data":[{"end":3,"start":0}]},"parameters":[{"name":"data","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[3,4]},"bytecode":"JwADAAAEBQAAAAAfAAAAAAAAAAADAAAEACcAAwAABAAAAAACJwADAAAAAQAAAAMlAAAAFCcAAwAABAMAAAAEJwADAAAAAgAAAAUnAAMAAAAAAAAABwUAAwAAAAcAAAAFAAAACCcAAQEAAAAJAQABAAAACQAAAAgAAAAIJAAAAAATAAAACAAABgAAAAIAAAAHAAAACSgBAAAACQAAAAYAAAYAAAAEAAAABwAAAAkoAgAAAAYAAAAJJwADAAAAAQAAAAkAAAMAAAAHAAAACQAAAAcjAAAACDcAAAAEAwAAAAInAAMAAAABAAAABAAAAwAAAAMAAAAEAAAAAycAAwAAAAIAAAAGKAAAAAAAAAAABAAAAwAAAAAAAAAGAAAAACcAAwAAAAEAAAAFOwMAAAAEAAAAAgAAAAMoAAAAAAQAAAAGKAAAAAAFAAAABygAAAAABgAAAAIoAAAAAAcAAAADJg==","debug_symbols":"ndDBCoQgEAbgd/nPsmhWhK+y7GF210AQi5QgxHdPqVtd8jTzD/93mQg7/SiYyXmoCP5qONQ7ws/kysEHWgIUZ9Dun2diGI3VUK1MH1b64mG/ueuLoRMnEUMvr0pWqbZKdVWqf6pyWGkx9LW6/D7HsM3HmnY="},{"name":"avm_getStorageAddress","function_type":"Open","is_internal":false,"abi":{"param_witnesses":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"JwADAAAEAQAAAAAfAAAAAAAAAAAAAAAEACUAAAAFKAAAAAACAAAEADcAAAAEAAAAAAEPAAAAAAIoAAAAAAIAAAADKAAAAAADAAAAAiY=","debug_symbols":"JcxBCoAgFEXRvbxxRKQRupVo8CsDQVT0E4S495Rm90xugQsnsQ0+QxdM4wK9FeRIvjszJYaexSoHGH/1VKoOuK0z0FLUveGhZOlwpi8a+Y1/1g8="},{"name":"avm_getPortal","function_type":"Open","is_internal":false,"abi":{"param_witnesses":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"JwADAAAEAQAAAAAfAAAAAAAAAAAAAAAEACUAAAAFKAAAAAACAAAEADcAAAAEAAAAAAESAAAAAAIoAAAAAAIAAAADKAAAAAADAAAAAiY=","debug_symbols":"JcxLCoAgFEbhvfzjiLCXuJVocCsDQVT0EoS495Rm55ucDOtPYuNdgsoY+hlqy0iBXHNiigwlllV00O5qKWXpcBuroaax7BUPRUOH1W1RyW/4s3w="},{"name":"avm_getChainId","function_type":"Open","is_internal":false,"abi":{"param_witnesses":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"JwADAAAEAQAAAAAfAAAAAAAAAAAAAAAEACUAAAAFKAAAAAACAAAEADcAAAAEAAAAAAEXAAAAAAIoAAAAAAIAAAADKAAAAAADAAAAAiY=","debug_symbols":"JcxBCoAgFEXRvbyxhGQRuZVo8CsDQVT0E4S495Rm90xugQsnsQ0+QxfIYYbeCnIk352ZEkMruYwCxl89V1kFbusM9KTq3vBQsnQ40xeN/MY/6wc="},{"name":"avm_getVersion","function_type":"Open","is_internal":false,"abi":{"param_witnesses":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"JwADAAAEAQAAAAAfAAAAAAAAAAAAAAAEACUAAAAFKAAAAAACAAAEADcAAAAEAAAAAAEYAAAAAAIoAAAAAAIAAAADKAAAAAADAAAAAiY=","debug_symbols":"JcxBCoAgFEXRvbxxRGVGuJVo8CsDQVT0E4S495Rm90xuhvUnsfEuQWUMvYTaMlIg15yYIkOJcZEdtLtarlPpcBuroWZR9oqHoqHD6rao5Df8WT4="},{"name":"compute_note_hash_and_nullifier","function_type":"Unconstrained","is_internal":false,"abi":{"param_witnesses":{"contract_address":[{"end":1,"start":0}],"nonce":[{"end":2,"start":1}],"note_type_id":[{"end":4,"start":3}],"serialized_note":[{"end":24,"start":4}],"storage_slot":[{"end":3,"start":2}]},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[24,25,26,27]},"bytecode":"H4sIAAAAAAAA/+2YS1KEQAyG09C8wefooLPhCFCycOldvP8VLIl25AedlelFqiZVXfQDOl9CV0g4EZGjb0mXltFvkfW3cB3/J5PiXmNMTmeEMzHCmSpyMtuB4p5TH8Gv2oyZAcbcAGNhgLE0wFgZYKwNMDYGGFsDjJ0BxisDjNcGGG8MMN4aYLwzwHhvgPFggPHBAOOjAcajIqMDRh/6/dKelva8tNPSXsJ8SasMWgzz9M45uyjvaSucmyQy8OtcKtwwJ/wJzMk/htSvNuTqNowz71to7xtqhR787/X9/1qCnxTZY/nk68zKWczD3qInA19Voa/4b2VC3S60CnRSeEfSP9IqFfTlTAt3S+u5rM4843fPdLCe/2H3oGx3ASwDjEVfFuxg4fyo91tuZqv12eaGtrGJxe3GA/TryL6KZOfI+zZhrw/S/U614J9y56cO1hu4p43gOwd6ZW8ZI+OF98KLDPWOtYH1CuaSnS2YS+D9+/ihapAoxGTHBThe44DJwZSDekFroKrBMH4JXMxzsczBlos9Lqa4WOFigJNtTmbxA3QuwfuRT4hpJ8qiGQAA","debug_symbols":"q1bKyU9OLMnMzytWsqqu1VEqSyzKTEzKSYVySyoLIMxaAA=="},{"name":"avm_addArgsReturn","function_type":"Open","is_internal":false,"abi":{"param_witnesses":{"argA":[{"end":1,"start":0}],"argB":[{"end":2,"start":1}]},"parameters":[{"name":"argA","type":{"kind":"field"},"visibility":"private"},{"name":"argB","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[2]},"bytecode":"JwADAAAEAwAAAAAfAAAAAAAAAAACAAAEACgAAAAEAAAAAAIoAAAABAEAAAADJQAAAAcoAAAAAAIAAAQCNwAAAAQCAAAAAQAABgAAAAIAAAADAAAABCgAAAAABAAAAAUoAAAAAAUAAAACJg==","debug_symbols":"JcxBCoAgFIThu8xaQtCIvEq0eJWBICr6CEK8e0q7+WbxV/h4ErsYCkyFnBaYraIkCsOFKTOMXpWADRfMLHUTuJ23/VVt73goOzq8HYFOftM/2wc="},{"name":"avm_getFeePerDaGas","function_type":"Open","is_internal":false,"abi":{"param_witnesses":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"JwADAAAEAQAAAAAfAAAAAAAAAAAAAAAEACUAAAAFKAAAAAACAAAEADcAAAAEAAAAAAEVAAAAAAIoAAAAAAIAAAADKAAAAAADAAAAAiY=","debug_symbols":"JcxBCoAgFEXRvbxxRGQhupVo8CsDQVT0E4S495Rm90xugQsnsQ0+QxdM4wq9FeRIvjszJYaelRQDjL96KlkH3NYZ6EXUveGhZOlwpi8a+Y1/1g8="},{"name":"avm_getOrigin","function_type":"Open","is_internal":false,"abi":{"param_witnesses":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"JwADAAAEAQAAAAAfAAAAAAAAAAAAAAAEACUAAAAFKAAAAAACAAAEADcAAAAEAAAAAAEQAAAAAAIoAAAAAAIAAAADKAAAAAADAAAAAiY=","debug_symbols":"JcxBCoAgFEXRvbxxRGQiuZVo8CsDQVT0E4S495Rm90xugQsnsQ0+QxdMo4TeCnIk352ZEkPPUqkBxl89V1EH3NYZ6EXUveGhZOlwpi8a+Y1/1g8="},{"name":"avm_getTimestamp","function_type":"Open","is_internal":false,"abi":{"param_witnesses":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"JwADAAAEAQAAAAAfAAAAAAAAAAAAAAAEACUAAAAFKAAAAAACAAAEADcAAAAEAAAAAAEaAAAAAAIoAAAAAAIAAAADKAAAAAADAAAAAiY=","debug_symbols":"JcxLCoAgFEbhvfxjCcEe5Faiwa0MBFHRSxDi3lOanW9yClw4iW3wGbpADhP0VpAj+e7MlBhaqVkKGH/1XNYqcFtnoEdV94aHkqXDmb5o5Df+WT8="},{"name":"avm_getFeePerL1Gas","function_type":"Open","is_internal":false,"abi":{"param_witnesses":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"JwADAAAEAQAAAAAfAAAAAAAAAAAAAAAEACUAAAAFKAAAAAACAAAEADcAAAAEAAAAAAETAAAAAAIoAAAAAAIAAAADKAAAAAADAAAAAiY=","debug_symbols":"JcxLCoAgFEbhvfzjiN6SW4kGtzIQREUvQYh7T2l2vslJMO4k1s5GyISunSG3hOjJVkemwJCDWEQDZa+aa58b3NooyGnMe8FDQdNhVF0U8uv/zB8="},{"name":"avm_getBlockNumber","function_type":"Open","is_internal":false,"abi":{"param_witnesses":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"JwADAAAEAQAAAAAfAAAAAAAAAAAAAAAEACUAAAAFKAAAAAACAAAEADcAAAAEAAAAAAEZAAAAAAIoAAAAAAIAAAADKAAAAAADAAAAAiY=","debug_symbols":"JcxBCoAgFEXRvbyxRGVFuJVo8CsDQVT0E4S495Rm90xuhvUnsfEuQWX03Qy1ZaRArjkxRYaS4zIIaHe1XGURuI3VUJMse8VD0dBhdVtU8hv+LB8="},{"name":"avm_poseidon_hash","function_type":"Open","is_internal":false,"abi":{"param_witnesses":{"data":[{"end":3,"start":0}]},"parameters":[{"name":"data","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[3]},"bytecode":"JwADAAAEBAAAAAAfAAAAAAAAAAADAAAEACcAAwAABAAAAAACJwADAAAAAQAAAAMlAAAABygAAAAAAgAABAM3AAAABAMAAAABJwADAAAAAQAAAAQAAAMAAAADAAAABAAAAAM6AQAAAAQAAAACAAAAAygAAAAABAAAAAUoAAAAAAUAAAACJg==","debug_symbols":"lY5BCoAgFETvMmuJIsPyKtHiVwaCWKQEId49JVoEbVrNPHgDE2DWibxerYMMKAsB2Qe4jWxm52n3kCWDsnPKyLBooyB5HQeW9Paf3n3pleDPohINf40SHLRrGo3KBxP6c7trvAA="},{"name":"avm_getAddress","function_type":"Open","is_internal":false,"abi":{"param_witnesses":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"JwADAAAEAQAAAAAfAAAAAAAAAAAAAAAEACUAAAAFKAAAAAACAAAEADcAAAAEAAAAAAEOAAAAAAIoAAAAAAIAAAADKAAAAAADAAAAAiY=","debug_symbols":"JcxBCoAgFEXRvbxxRFiGuJVo8CsDQVT0E4S495Rm90xugQsnsQ0+QxdMo4TeCnIk352ZEkMLsaoBxl89lawDbusM9DLXveGhZOlwpi8a+Y1/1g8="},{"name":"avm_setOpcodeUint64","function_type":"Open","is_internal":false,"abi":{"param_witnesses":{},"parameters":[],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"public"},"return_witnesses":[0]},"bytecode":"JwADAAAEAQAAAAAfAAAAAAAAAAAAAAAEACUAAAAFKAAAAAACAAAEADcAAAAEAAAAAAEnAAQQAAAAAAAAAAAAAAIoAAAAAAIAAAADKAAAAAADAAAAAiY=","debug_symbols":"q1bKyU9OLMnMzytWsqqu1VEqSyzKTEzKSYVySyoLIMxaAA=="},{"name":"constructor","function_type":"Secret","is_internal":false,"abi":{"param_witnesses":{"inputs":[{"end":41,"start":0}]},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"portal_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"contract_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"contract_deployment_data","type":{"fields":[{"name":"public_key","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint"}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId"}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}}],"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData"}},{"name":"private_global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}],"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables"}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"portal_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect"}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"fields":[{"name":"public_key","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint"}},{"name":"secret_key","type":{"fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect"}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash"}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"contract_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"contract_deployment_data","type":{"fields":[{"name":"public_key","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint"}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId"}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}}],"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData"}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"},"return_witnesses":[46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259]},"bytecode":"H4sIAAAAAAAA/+XdZZRUZRwG8IkNMBEREWttmsmdGXLp7m522Fm6uxFbUbFbEVtRsVsRu7GwFTGwuwN9nsPFM+e63/jvh/c895zn7N4DDPd37+zsvW/9w8FAYFtgx4ZvAyEkjJTk7Rd43+/cL/TtF/n2i33/vqZvv7Zvv45vv65vv55vv763n7+FvK9l3td4pDSRyKViuWg8Wh6JZbLpZCSRzJamo+loMp2siKXj8Vw6kU5lsplUJBNNxHPRymQmXhnZsRUbvlbDvNeK7NoWC3vnwb8Fff7Irm1Rw2OO5B9vI+/9E/DeN/7j37mFq/i+Rt7f225o9f+//mOpVcVx/u8alBkeTHVczEbV8LqNA3Y/JNXlbmx/jSKBKt4QVuehifFxWp/TYu+cWrubVtP1CRn7Lc3NHDEHDc3NHTGHDM0RR8xhQ3PUEXOBoTnmiLnQ0Bx3xFxkaE44YrZ8iEk6Ym5iaC4VNKcEzWlBc0bQ3MIRc1NDc0vB69xK0Nxa0NxG0NxW0FwmaG4naG4vaO4gaO4oaO4kaO4saO4iaO4qaO4maO4uaO4haO4paO4laO4taO4jaO4raO4naO4vaB4gaB4oaB4kaB4saB4iaB4qaB4maB4uaB4haB4paB4laB4taB4jaB4raC4XNGcFzeMEzRWC5pyguVLQPF7QPEHQPFHQPEnQPFnQPEXQPFXQPE3QPF3QPEPQPFPQPEvQPFvQPEfQPFfQPE/QPF/QvEDQvFDQvEjQvFjQvETQvFTQvEzQvFzQvELQfKygeaWg+ThB8/GC5hMEzScKmk8SNJ8saD5F0HyqoPk0QfMqQfPpguYzBM1nCppXC5rPEjSfLWg+R9B8rqD5PEHz+YLmCwTNFwqaLxI0XyxovkTQfKmg+TJB8+WC5isEzWsEzVcKmtcKmq8SNF8taL5G0HytoPk6QfP1guYbBM03CppvEjSvEzTfLGi+RdB8q6B5vaD5NkHz7YLmOwTNdwqa7xI03y1ovkfQfK+g+T5B8/2C5gcEzQ8Kmh8SND8saH5E0LxB0PyooHmjoPkxQfPjguYnBM1PCpqfEjQ/LWh+RtD8rKD5OUHz84LmFwTNLwqaXxI0bxI0vyxofkXQ/Kqg+TVB8+uC5s2C5jcEzW8Kmt8SNL8taH7HEXOxofldwev8nqD5fUHzB4LmLYLmDwXNWx0x1zA0f+SIuaah+WNHzLsZmj9xxLy7oflTR8x7GJq3OWLe09D8mSPmvQzNnzti3tvQ/IUj5lqG5i8dMe9jaP7KEXNtQ/PXjpj3NTR/44i5jqH5W0fM+xmav3PEXNfQ/L0j5v0NzT84Yq5naP7REfMBhuafHDHXNzT/7Ij5QEPzL46YDzI0/+qI+WBD82+OmA8xNP/uiPlQQ/MfjphLDM1/OmI+zND8lyPmww3NfztiPsLQvN0R85GG5n8cMR9laA4E3TAfbWgOOmI+xtAccsTcwNAcNjTjpQJh77Ua5vmD3jngnxUghUgRwjFf7Etn3zL7Wtn3yL449k2xr4Z9F2zLZ9s223rZ9sm2QLaNsa2IbSdsS+CzNZ81+ezFZxHem/NelfduJQh/t/N3HT/7+VnIzwb+rPC90yDvODd7X5shzXk+kCgS43lGEkgSKUVSSBrJIC2QlkgrpDXSBmnrXaN2SHukA9IR6YR0RrogXZFuSHekB9IT6YX0RvogfZF+SH9kADIQGYQMRoYgQ5FhyHBkBDISGYWMRsYgY5FyJIuMQyqQHFKJjEcmIBORSchkZAoyFZmGTEdmIDORWchsZA4yF5mHzEcWIAuRRchiZAmyFFmGLEdWIKwjvxJhnXHW3WYdatZlZp1i1u1lHVvWdWWd01UI62CyLiTrJK5GWEePdeVYZ411x1iHi3WpWKeJdYtYx4d1bVjnhXVPWAeEdTFYJ2INwjoCaxGuM89117kOOdfl5jrVXLeZ6xhzXV+uc7sO4TqoXBeU62SuR7iOItcV5Dp7XHeO67BxXTKu08V1q7iOE9c14jo/XPeG68BwXRSuE7IB4ToSGxGuM8B595yHznnZnKfMebucx8p5nZznyHl/nAfHeWGcJ7UJ4TwazivhPAvOO+A4fL5POU6b45Y5jpfjWjnOk+MeOQ6Q4+I4TmwLwnFEWxGOM+G4C45DYL88+6nZb8t+TPbrsZ+L/T7sB2G/ANvJ2W7MdlS2K7Kdje1ObIdhuwSf0/ncyuc4PtfwPp/3vbwP5H0R7xP4g8/fI/xc5efMf9u/czkChPbWAAA=","debug_symbols":"tZBBCoUgFEX3cscO8ms/civR4FUGglikBCHuPaNo0tjRewcOZ3Aj7DJSMIvzUBGcQ3URfiV3oQ+0BaiKQbsp38QwG6uhpEjsowlZ148pZNO+8r9KPQP/lUuLcmlZKJ1hp83QYPW1fMZwrPebTg=="},{"name":"avm_setOpcodeUint32","function_type":"Open","is_internal":false,"abi":{"param_witnesses":{},"parameters":[],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"},"return_witnesses":[0]},"bytecode":"JwADAAAEAQAAAAAfAAAAAAAAAAAAAAAEACUAAAAFKAAAAAACAAAEADcAAAAEAAAAAAEnAANAAAAAAAAAAigAAAAAAgAAAAMoAAAAAAMAAAACJg==","debug_symbols":"q1bKyU9OLMnMzytWsqqu1VEqSyzKTEzKSYVySyoLIMxaAA=="},{"name":"avm_setOpcodeSmallField","function_type":"Open","is_internal":false,"abi":{"param_witnesses":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"JwADAAAEAQAAAAAfAAAAAAAAAAAAAAAEACUAAAAFKAAAAAACAAAEADcAAAAEAAAAAAEnAAUAAAAAAAAAAAAAAAAAAADIAAAAAg0ABgAAAAIAAAACKAAAAAACAAAAAygAAAAAAwAAAAIm","debug_symbols":"q1bKyU9OLMnMzytWsqqu1VEqSyzKTEzKSYVySyoLIMxaAA=="}],"events":[],"file_map":{"27":{"path":"std/hash.nr","source":"mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint\n// docs:end:pedersen_commitment\n{\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\npub fn hash_to_field<N>(input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [u8; N], _state_length: u32) -> [u8; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n"},"43":{"path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-contracts/contracts/avm_test_contract/src/main.nr","source":"contract AvmTest {\n    // Libs\n    use dep::aztec::protocol_types::address::{AztecAddress, EthAddress};\n\n    // avm lib\n    use dep::aztec::avm::{\n        context::AvmContext,\n        hash::{\n            keccak256,\n            poseidon,\n            sha256\n        }\n    };\n\n    #[aztec(private)]\n    fn constructor() {}\n\n    // Public-vm macro will prefix avm to the function name for transpilation\n    #[aztec(public-vm)]\n    fn addArgsReturn(argA: Field, argB: Field) -> pub Field {\n        argA + argB\n    }\n\n    #[aztec(public-vm)]\n    fn setOpcodeUint8() -> pub u8 {\n        8 as u8\n    }\n\n    // Bit size 16 in Noir is deprecated.\n    // #[aztec(public-vm)]\n    // fn setOpcodeUint16() -> pub u16 {\n    //     60000 as u16\n    // }\n\n    #[aztec(public-vm)]\n    fn setOpcodeUint32() -> pub u32 {\n        1 << 30 as u32\n    }\n\n    #[aztec(public-vm)]\n    fn setOpcodeUint64() -> pub u64 {\n        1 << 60 as u64\n    }\n\n    // Can't return this since it doesn't fit in a Noir field.\n    // #[aztec(public-vm)]\n    // fn setOpcodeUint128() -> pub u128 {\n    //     1 << 120 as u128\n    // }\n\n    // Field should fit in 128 bits\n    // ACIR only supports fields of up to 126 bits!\n    // Same with internal fields for unconstrained functions, apprently.\n    #[aztec(public-vm)]\n    fn setOpcodeSmallField() -> pub Field {\n        200 as Field\n    }\n\n    // /************************************************************************\n    //  * Hashing functions\n    //  ************************************************************************/\n    #[aztec(public-vm)]\n    fn keccak_hash(data: [Field; 3]) -> pub [Field; 2] {\n        keccak256(data)\n    }\n\n    #[aztec(public-vm)]\n    fn poseidon_hash(data: [Field; 3]) -> pub Field {\n        poseidon(data)\n    }\n\n    #[aztec(public-vm)]\n    fn sha256_hash(data: [Field; 3]) -> pub [Field; 2] {\n        sha256(data)\n    }\n\n    #[aztec(public-vm)]\n    fn pedersen_hash(data: [Field; 3]) -> pub Field {\n        dep::std::hash::pedersen_hash(data)\n    }\n\n    // /************************************************************************\n    //  * AvmContext functions\n    //  ************************************************************************/\n    #[aztec(public-vm)]\n    fn getAddress() -> pub AztecAddress {\n        context.address()\n    }\n\n    #[aztec(public-vm)]\n    fn getStorageAddress() -> pub AztecAddress {\n        context.storage_address()\n    }\n\n    #[aztec(public-vm)]\n    fn getSender() -> pub AztecAddress {\n        context.sender()\n    }\n\n    #[aztec(public-vm)]\n    fn getOrigin() -> pub AztecAddress {\n        context.origin()\n    }\n\n    #[aztec(public-vm)]\n    fn getPortal() -> pub EthAddress {\n        context.portal()\n    }\n\n    #[aztec(public-vm)]\n    fn getFeePerL1Gas() -> pub Field {\n        context.fee_per_l1_gas()\n    }\n\n    #[aztec(public-vm)]\n    fn getFeePerL2Gas() -> pub Field {\n        context.fee_per_l2_gas()\n    }\n\n    #[aztec(public-vm)]\n    fn getFeePerDaGas() -> pub Field {\n        context.fee_per_da_gas()\n    }\n\n    #[aztec(public-vm)]\n    fn getChainId() -> pub Field {\n        context.chain_id()\n    }\n\n    #[aztec(public-vm)]\n    fn getVersion() -> pub Field {\n        context.version()\n    }\n\n    #[aztec(public-vm)]\n    fn getBlockNumber() -> pub Field {\n        context.block_number()\n    }\n\n    #[aztec(public-vm)]\n    fn getTimestamp() -> pub Field {\n        context.timestamp()\n    }\n    // #[aztec(public-vm)]\n    // fn getContractCallDepth() -> pub Field {\n    //     context.contract_call_depth()\n    // }\n}\n"},"60":{"path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::inputs::PrivateContextInputs, key::nullifier_key::validate_nullifier_key_against_address,\n    messaging::process_l1_to_l2_message,\n    oracle::{\n    arguments, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    debug_log::debug_log\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_data::FunctionData, function_selector::FunctionSelector,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, hash::hash_args, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader\n};\nuse dep::std::option::Option;\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<SideEffect, MAX_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.call_context.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        // Note. The side effect counter is 2 when this is the initial call\n        if (side_effect_counter == 2) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(0),\n            read_requests: BoundedVec::new(SideEffect::empty()),\n            nullifier_key_validation_requests: BoundedVec::new(NullifierKeyValidationRequest::empty()),\n            new_note_hashes: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(0),\n            public_call_stack_hashes: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(L2ToL1Message::empty()),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            // TODO(fees): start this from 0 and test the following:\n            // - in the private circuit init that it gets set correctly\n            // - in the private circuit inner that it remains 0\n            // I've had to initialize the counter here so that it would work for contract deployments\n            // the above checks should be doable after we figure out fee payments for contract deployments\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            read_requests: self.read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        let side_effect = SideEffect { value: read_request, counter: self.side_effect_counter };\n        self.read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            msg_key,\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash: [0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero()\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n"}}}