{"noir_version":"0.24.0+78ef0134b82e76a73dadb6c7975def22290e3a1a","name":"DocsExample","functions":[{"name":"get_stable","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"struct","path":"types::leader::Leader","fields":[{"name":"account","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"public"},"return_witnesses":[0,1]},"bytecode":"H4sIAAAAAAAA/81VwU7DMAx10rVL2yG4coFc4JxVSBy4lF/gD4paEJdV6jYJfh6xQKy9phFCWob2pCqua8f2i+sIIhL0g4T2kDSFtXtwsgK93j21k80huDNVZjeZURDz3ZM5uQQ7CToxG9dyEbBTIH/Gyt2Y+zMac8Wxktg8GbMUNIYGOUE+PLsSviNv0vO1XBv4ngZ8skA8llPQ8XFmAV/kKYVaaiebw/DNE8bS8M7xFpBH9g/5YHtreE9PJPbcyXW82EbRfmZErKmyNeVwdhry53gzsLl267lbWW+BvW+xAF5y2FPF52dp9yyOxE/p8cP5F8AP29x6/LAe+VHAT+7ZKc+ujlOH8XtXQWycZznUxHY4g3Aucc5Yg/T8caahPdYZ8Q6p7L48g3TEfZEDxm93yLHnYAF8rjf90Lx2T13TCkiN05VeuoLGqUtv9eUkoCMaX0N43Pz7Y6tIjxZsC7bPaUpp1NmdUBhYmKApYRZXbr106+MwNB/6bdV277rfbnT/op/77apdo9PNX53oC6C+gVFHCgAA","debug_symbols":"zdjfaoMwFAbwd8m1jJw/SYyvMnaRbQ4EsaXKYIjvPqVWBhVGpbXfXQLn5PwuDh9ib+rDR+qqQ9Oaojf2xZvitTftMTXTve3SqTOFs8SZKZvP6ah+yMxXVZemYI5DdlVNnmSuJq+6VJPllWoJl6eVZKkNNLxlIydgcXIsTsTikAXzEJiHwTwC5lEwjwPzgIUzgaUzgcUzgeUzg+Uzg+UzPzifz0NkjyG6xxC3x5C7ZJ7TZUjw/+yIUn7ZEQ5/XvYzKKCBcjRQBAOJRQMRGojRQLI7SBaQroEUDeTQQB4NFNBAORoogoHUPhHkZAVEaCBGA60uNfswN4nVqw9tjbf3OLuhhzb08IYeua1nvHynU5Xe63L67Tpeu5/j+Tj8Ag=="},{"name":"compute_note_hash_and_nullifier","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":20,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"contract_address":[{"start":0,"end":1}],"nonce":[{"start":1,"end":2}],"note_type_id":[{"start":3,"end":4}],"serialized_note":[{"start":4,"end":24}],"storage_slot":[{"start":2,"end":3}]},"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"},"return_witnesses":[24,25,26,27]},"bytecode":"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","debug_symbols":"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"},{"name":"view_imm_card","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"struct","path":"types::card_note::CardNote","fields":[{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"randomness","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"header","type":{"kind":"struct","path":"aztec::note::note_header::NoteHeader","fields":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"nonce","type":{"kind":"field"}},{"name":"storage_slot","type":{"kind":"field"}},{"name":"is_transient","type":{"kind":"boolean"}}]}}]},"visibility":"public"},"return_witnesses":[0,1,2,3,4,5,6]},"bytecode":"","debug_symbols":""},{"name":"insert_notes","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"amounts","type":{"kind":"array","length":10,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"param_witnesses":{"amounts":[{"start":41,"end":51}],"inputs":[{"start":0,"end":41}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383]},"bytecode":"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","debug_symbols":"7Z3RTuw2EIbfJdcIecbjsc2rVL3YtlRCQpyjA6pUId698bLJ7qE+WXk2YHs2V7CSP+9k8if5MJLzOjx++3P38vDt6Xm4ex0QhrvfXofn77un9PH5ZffjZbgzN8P901/jz7eb4e+Hx/vhDjG+3fxvHLh4GAkB5rFgODMWbQiHwUjkjqMj5GYGQjfNDRTiT+N/vxkQey3cflnhDnEq3AW8uHC6pHBLbprdkj9OzmY/t/vEufkT5/afOHfIze0iwYFx0fO5uIDj6ZxiPImAyUUgEB0Gh5O4UG5iNHEKIgKGebAzuXm9PYyNxi0PBWunzIL1dHJ4TpTZuPXw0h5ao6WHkeciDPCZJp5tC2xtybUFv7ot48MvzBXFeNqYVI+tWc/Y/I/10JfXg8czhhyWgxMI55CRww+PJOt6Lp6/vvg4J8GSPXPJWj/bmo3hzF2bwvQ4cPb4OOD3iHlFB+phOqWe+PRAM6ffTiXHeKwBghfdx4KiJnKcBnum5SZCNPPE5uQagsCiNkZNWfR+ur0Y/+GiI9P2gZKZ/4hltGcO1PrJHtyJPBDtD1SN99RTasLNHXNtsW25I1Fb7kg96xdxz8VrUqoldyRN2lPLHUmT9NRzR9e4Uq3mjg6uxB2dGu+p547Obu6Yawu15Y7OteWOrmf9cr7n4jUp1ZI7OlVrPZXckTVJTz135MaVajV3ZLwSd2Q13lPPHZk2d8y1xbXljsxtuSP3rF8cei5ek1ItuaNXtdZTyR29Jump546+caVazR29vRJ39LS546Xu6N3mjrm2cFvu6H1b7uh71i8fOy4+aFKqJXcMqtZ6Krlj0CQ99dwxNK5Uq7ljoCtxx6DGe+q5Y+DNHXNt8W25YwhtuWPoWb+i6bl4TUq15I5R1VpPJXeMmqSnnjtGuhJ3jO5K3DGq8Z567hj95o65toS23DHGttwRTM/+NX5B19VrsqolfQSjar2nkj+CoU0gVxBIMI2L1WoGOd77r0Qhwajxn3oOCUbNXlqrSiSY2JZFApjGNBK6FjHArqvXJFeLGgm0aeTlGgma9KeiRoKmnbIWNRIa39dhPY2EbTfRyzUS1Gwnuq5GomlMIxEa00jsWsTQdl09XYtGoqr1n1oaiZr0p6JGoqp9SJc0Ehvf4mE9jdw2VF9BI7cd1X/RF2hMI+tuZp7RSNu1iHW99zlYTXK1qJGqdkqvppGqtmGvqJGqdmJf1MjWN0tfTSMt3ub/0Yc+Ti9PwgDw01ccOBBy+Uf57C/sTmLN7++LuM2v91ma2nB6vg/vXuDb/GLYOQgkEEogWwqRuf3FwoKdbq3O44dTnCCWQNm7JlszXzbHs+vt+67hsjAlDoRccZjIC8I0QuVhShBIIJRAxWFyIAhTglgCFYfJkSxMiQMhVxwmFwRhGqHyMCUIJBBKoOIwMQrClCCWQMVhYicLU+JAyBWHiaMgTCNUHqYEgQRCCVQcJm8FYUoQS6DiMHmWhSlxIOSKwxSMIEwjVB6mBIEEQglUHKZAgjAliCVQcZiCl4UpcSDkisMUQRCmESoPU4JAAqEEKg5TdIIwJYglUHGYYpCFKXEg5IrDBAYFaUpUeZz2FIgoFFG2nGJBpPYUi6jiUIGJslTtQZCC5bkCK8nVSAlylSgQUSiiynMFXpKrRLGIKs8VGmGuEghSsDxXSJJcjZQgV4kCEYUiqjxXGCS5ShSLqPJcWRDmKoEgBctzZZ0kVyMlyFWiQEShiCrPlY2SXCWKRVRhrsYP/+x+POz+eLx/HoHx48u/399/ffsP"},{"name":"constructor","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":41}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259]},"bytecode":"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","debug_symbols":"tZA7CoQwFEX3cusU5uMMZivDFE+NEAhRTBAkZO9GFBvrVO8dOJziJrh5oGhnH6ATOIf+JYSF/Ikh0hqhGwbjx3Izw2SdgRaiy+zlSdW2tyrVt3vsT5P/DFxUbMuKbVWrXWCj1VLvzLl+wbgv15sP"},{"name":"increase_legendary_points","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":41}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414,415,416,417,418,419,420,421,422,423,424,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442]},"bytecode":"","debug_symbols":""},{"name":"initialize_private","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"randomness","type":{"kind":"field"},"visibility":"private"},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":41}],"points":[{"start":42,"end":43}],"randomness":[{"start":41,"end":42}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277]},"bytecode":"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","debug_symbols":"3Vhtj9owDP4v+YxQ/JLY5q9M94FtTEJC3OlAkybEf197NGnX5YhWBnfwqY302HlsP3GdHtzm+dtyv37e7tzi4ADd4svB7V6W23a52y9f927hZ261/d48jzP3Y71ZuQWiHWd/4SBYhwSFjAUfC1gk1Q6MzKFHG5Q8A2NIvoHV/sA/zRzQvRLnmxEPiIl4ULyYeLiEOHFI3omldx79m+94Rd9yRd96Rd9W8h2ipqIGYazsgKZ5B4+c0aYlMHuf9QJwHlyVC/r7pg+X0ydPnOlLhb6KxA6s6nkkBsTPRYf+B52+uMCVeilzZtM75qJovKUeiYCawcEXw6QOaz6chwJRig5okD7EMElg/CAptJiEAh5iJYfVrIQbZ6X5dGomZDbMS0snfiCdJvVjOnJrOtiXC6OeV40yZoVxwHHL0DvmbjfnblkGxFQ5rSR5ziPTSmNiTR0vUN/x4pu+yD9OnAKpoMJxGGeh+JQ6mFnPAVSmdDCCx8lhtASWyOdzCOazYz84QKBxUhbxgZQoklqLl/GJo08dJ/t89Y1IlThJ0tAQBjMD8+m7Podic0GxPLXrYGpvt+jsYKLdOxJKZz2GgaTjqc3Py5cu4pSGYbVPFWyMyledmhFMMcIpRvSvRkTzdwaxfIMIgqMSt0ZxilFxqInk86Hpqyt0fGoWP5ev6+XXzar9hdUs979eTq/H3w=="},{"name":"is_legendary_initialized","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"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","debug_symbols":""},{"name":"is_imm_initialized","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"},"return_witnesses":[0]},"bytecode":"H4sIAAAAAAAA/+3dh1MU2RYG8B6UoM0o5qyjkuMMoIIJlaQiriKu4Aoq0YA557wv5/z2pX0555xzznlzzrv/wtbbGe8pv+3pobz1+lZ9vHe7asvTX0/3/d1DN1xhRxzHcULOzW2Uc2sLOa/e7h17888syCKv/LdK1dH/ZquOxjLiFxnt+G6Zr/yXrmoXXpemshzIxJ0F84kE5YxGYy6Mm6pXEahH+XheDs4TDYMHx0o3NPfRGnMXQxjOQ2OGIWO6hjEDjOk+xkxDxgwNY6ZZT+IeyvAZa4yhuWc5tz/3MT6eUMBzz/IZyzU097HO7c9dDGE4D43ZhoyuhjEbjK6PMWzImK1hDMOfch7e5+MMGcMaxnFglPPw89B4Q8ZxGsbxYJTzsI85hozjNYw5YJTzsI8TgjdWujDu7RgngGeSIc8EDc8k8EwM3hMzNM9o/BqTneS+ylhhOI73wGQDcwzBuHJt2UfjSPLGPTkeqwuvyyExSjbRrKfS9Xji23DP1WTwTDXkmazhmQqeKcF7YobmmXjOpznJfZWxwnAcn5tpBuYYgnHl2rKPxpHkxWdIrC68bhKJUbIpZj2VrscT34Z7rqaBZ4YhzzQNzwzwTA/eEzM0z8RzPtNJ7quMFYbj+NzMNDDHEIwr15Z9NI4kLz5DYnXhdVNJjJJNN+xxPZ74Ntxz5WfEj+ssQ8aZGsZZYJTz8O9osw0ZZ2kYZ4NRzsM+zjFknK1hnANGOQ/7ONeQcY6GcS4Y5Tzs4zxDxrkaxnlglPOwjxFDxnkaxggY5Tzs43xDxoiGcT4YJcc+LjBknK9hXABGOQ/7uNCQcYGGcSEY5TzsY64h40INYy4Y5TzsY54hY66GMQ+MuT7GfEPGPA1jPhjzfIwFhoz5GsYCMOb7GAsNGQs0jIVgLPAxFhkyFmoYi8BY6GMsNmQs0jAWg7HIx1hiyFisYSwBY7GPsdSQsUTDWArGEh9jmSFjqYaxDIylPsZyQ8YyDWM5GMt8jBWGjOUaxgowlvsYo4aMFRrGKBgrfIwxQ8aohjEGxqiPsdKQMaZhrASjnIdrsypDxkoNYxUYK32M1YaMVRrGajDKefixXhS8MfE9ymoN4yLwLAneU+3CGLfjWQKexcF7YobmmXiUa5zkvspYYTiO90CNgTmGYFy5tuyj0XqttwY81R6rC6+rJjFKttiwx/V44ttwn7f8jPhxrTVkrNEw1oLR795bGrwx8fWoVsO4FDzLA/dUR10Y43Y8y8GzLHDPza9Hwc/z5tejFU5yX2WsMBzHe2CFgTmGYFy5tuyj8Xa9mSPMa/tr+2v7a/ubymv7a/tr+2v7m8pr+2v7a/tr+5vKa/tr+2v7a/ubymv7a/tr+2v7m8pr+2v7a/tr+5vKa/tr+2v7a/ubymv7a/tr+2v7m8pr+2v7a/tr+5vKa/tr+2v7a/ubymv7q++Ne2o9VhdeV0tilGyZYY/r8cS3kGc/ArWfEe/DlYaMKzSMK8Ho96zUGTKu1DDWgVHOw+djVfDGxHsO6jSMq8CzJnhP4j1wqzQ8a8CzOnhPzNA8E+85qHeS+ypjheE43qf1BuYYgnHl2rKPRuu13nrw1HmsLryujsQo2WrDHtfjiW/Dfd7yM+LHtcGQsV7D2ABGv3uv0ZCxQcPYCMYGH2OTIWOjhrEJjI0+xmZDxiYNYzMYm3yMa4M3JtYezRrGteBZH7inMvF+x7UanvXgWRe45+baI/h53lx7tDjJfZWxwnAc74EWA3MMwbhybdlH4+16M0eY1/bX9tf21/Y3ldf21/bX9tf2N5XX9tf21/bX9jeV1/bX9tf21/Y3ldf21/bX9vf/q79xT7PH6sLrmkmMkq0z7HE9nvgW8uxHoPYz4n24wZCxRcO4AYx+z0qrIeMGDWMrGOU8fD42Bm9M/MypVcO4ETybAvdUJX7mtFHDswk8dwTuufkzp+DnefNnTpud5L7KWGE4jvfpZgNzDMG4cm3ZR+P/qjdzhHnt/WDWa+8H67X3g/Wm8tr7wXrt/WC9qbz2frBeez9YbyqvvR+s194P1pvKa+8H67X3g/Wm8tr7wXrt/WC9qbz2frBeez9Ybyovw/0Q97R6rC68rpXEKNkdhj2uxxPfQp79CNR+RrwP2wwZN2sY28Do96xsMWRs0zBuAWObj7HdkHGLhrEdjHIePsNbgzcm/r+wdg3jVvBsC96T+HeQtmp4toHnzuA9MUPzjMav0eEk91XGCsNxvE87DMwxBOPKtWUfjdZrvR3gafdYXXhdO4lRsjsNe1yPJ74N93nLz4gf105Dxg4NYycY/e697cEbE1+POjWM28GzI3hP4uvRdg3PDvDcFbwnZmieia9HXU5yX2WsMBzHe6DLwBxDMK5cW/bRaL3W2wWeTo/Vhdd1khglu8uwx/V44ttwn7f8jPhx7TZk7NIwdoPR797bGbwx8fWoW8O4Ezy7g/ckvh7t1PDsBs+u4D0xQ/NMfD3qcZL7KmOF4TjeAz0G5hiCceXaso9G67XeHvB0e6wuvK6bxCjZLsMe1+OJb8N93vIz4se115CxR8PYC0a/e6/PkLFXw9gHxl4fY78hY5+GsR+MfT7GAUPGfg3jABjlPPze7KAh44CGcRCMch72cU/wxsT6aFDDuAc8+wx59mh49oFnb/CemKF5JtZH+53kvspYYTiO98B+A3MMwbhybdlH40jyxj2DHqsLrxskMUq216yn0vV44ttwz9V+8Bww5Nmv4TkAnqHgPTFD80w85wed5L7KWGE4js/NQQNzDMG4cm3ZR+NI8uIzJFYXXrePxCjZkFlPpevxxLfhnquD4DlsyHNQw3MYPIeC98QMzTPxnB9xkvsqY4XhOD43RwzMMQTjyrVlH40jyYvPkFhdeN0BEqNkhwx7XI8nvg33XPkZ8eN61JDxiIbxKBjlPPw72jFDxqMaxmNglPOwj8cNGY9pGI+DUc7DPp4wZDyuYTwBRjkP+3jSkPGEhvEkGOU87OMpQ8aTGsZTYJTzsI+nDRlPaRhPg1HOwz6eMWQ8rWE8A0Y5D/t41pDxjIbxLBjlPOzjOUPGsxrGc2CU87CP5w0Zz2kYz4PxnI/xgiHjeQ3jBTCe9zFeNGS8oGG8CMYLPsZLhowXNYyXwHjRx3jZkPGShvEyGC/5GK8YMl7WMF4Bo5w3BoxXDRmvaBivglHOwz5eM2S8qmG8BsarPsbrhozXNIzXwXjNx3jDkPG6hvEGGK/7GO82ZLyhYbwbjDeGMb4cnHFxGMY/BWO9xkA/hpv7a2Duss0l8xwh80wl8/STebLJPF1kntFkni1knhYyTz2Zp5bMEyPzXCfzlJB5LpJ58sg8p8k888g8R8k8M8g8A2SeMJmnm8yTTuZpJ/NsIPM0kHmWk3kqyTw3yDylZJ5LZJ58Ms8ZMk+EzHOMzDOTzDNI5hlH5tlN5skg82wj87SSeRrJPCvIPFVknjIyz2UyTwGZ5yyZZz6Z5ziZZxaZZx+ZZzyZp4fMk0Xm6SDzbCLzNJF5VpJ5qsk85WSeK2SeQjLPOTLPAjLPCTLPbDLPATJPDpmnl8wzlsyD/6Ydg2czmaeZzFNH5llC5qkg81wl8xSRec6TeRaSeU6SeeaQeQ6TeSaRefrIPC6ZZweZJ43M00bmWU/mWUPmqSHzRMk818g8xWSeC2SeXDJPiMDjOsnv+XTh+BjIXqvqNMhep+rRkL1e1emQvUHVGZC9EeYv2ZtUPRayN0Mtf75F1dmQvVXVYcjepupxkL1d1eMhe4eqcyB7p6onQfYuVU+F7N2qngHZe1Q9E7L3qnoWZO9T9WzI3q/qOZDdo+q5kH1A1fMg+6CqI5B9SNXzIfuwqhdA9hFVL4TsXlXnQvZRVedB9jFV50P2cVUXQPYJVRdC9klVF0H2KVUXQ/ZpVZdA9hlVl0L2WVWXQfY5VZdD9nlVV0D2BVVHIfuiqmOQfUnVlZB9WdVVkH1F1dWQfVXVSyD7mqprIPu6qmsh+4aql0P2TVWvgOxbql4J2bdVXQfZd1S9BrLvqroesu+pugGy76u6EbIfqLoJsh+quhmyH6l6PWQ/VnULZD9R9QbIfqrqVsh+pupNkP1c1Zsh+4Wq2yD7paq3QPYrVbdD9mtVb4PsN6rugOy3qu6E7Heq3gHZ71XdBdkfVN0N2R9VvRuyP6m6B7I/q7oXsr+oug+yv6q6H7K/qXoAsr+rehCyf6h6H2T/VPUByP6l6sOQ/VvVRyC7T9VHIbtf1ccge0DVxyF7UNUnIHtI1Sche1jVpyB7RNWnIXtU1Wcge0zVZyF7XNXnIHtC1eche1LVFyB7StUXIXta1Zcge0bVlyF7VtVXIHtO1Vche17V1yB7QdXXIXtR1Tcge0nVd0MmX+9xzSD/7sNrIZM1wOsgkzXA6yGTNcAbIMtU9Rshk3XBmyCT9QiuCWSt8BbIZK3wVshkrfA2yGSt8HbIZK3wDshkrfBOyGSt8C7IJqj63ZBNVPV7IJM1xXshm6zq90E2RdXvh0zWHvdANk3VH4Bsuqo/CJmsUT4EmaxRPgyZrFE+ApmsUe6FTNYoH4VM1igfg0zWKB+HLKLqT0Ama5RPQiZrlE9BJmuUT0Mma5TPQCZrlM9CJmuUz0Ema5TPQyZrlC9AJmuUL0Ima5QvQVai6i9DJmuUr0Ama5SvQiZrlK9BJmuUr0Mma5RvQCZrlG9CJmuUb0Ema5RvQyZrlO9AtkjV34Vssaq/B5msZb4PmaxlfgCZrGV+CNlSVf8IsmWq/jFksub5CWSy5vkpZLLm+Rlksub5OWSrVP0LyFar+peQydroV5DJ2ujXkMna6DeQydrot5DJ2uh3kMna6PeQrVX1HyBbp+o/QiZrqD9B1qLqP0Mma6i/QCZrqL9CJr8X+2+Qye+h/jtkstb6B2Sy1vonZLLW+hdkstb6N2Sy1roPMvldnvdDJr878wHIZE32IGSyJnsIMlmTPQyZ/H62RyCT34f2KGSydnsMMlm7PQ6ZrN2egEx+586TkO1S9VOQyRrvachkjfcMZLLGexYyWeM9B5ms8Z6HTNZ4L0Ama7wXIdujalkTxL9GT8m6dVxei98PeMnnOlLj9ztk7IgT7Pc7cKwI7Mt42eB4kcSTS+a5QOYpJvNcI/NEyTw1ZJ41ZJ71ZJ42Mk8amWcHmccl8/SReSaReQ6TeeaQeU6SeRaSec6TeYrIPFfJPBVkniVknjoyTzOZZzOZp5PMM5bM00vmySHzHCDzzCbznCDzLCDznCPzFJJ5rpB5ysk81WSelWSeJjLPJjJPB5kni8zTQ+YZT+bZR+aZReY5TuaZT+Y5S+YpIPNcJvOUkXmqyDwryDyNZJ5WMs82Mk8GmWc3mWccmWeQzDOTzHOMzBMh85wh8+STeS6ReUrJPDfIPJVknuVkngYyzwYyTzuZJ53M003mCZN5Bsg8M8g8R8k888g8p8k8eWSei2SeEjLPdTJPjMxTS+apJ/O0kHm2kHlGk3m6yDzZZJ5+Ms9UMs8RMs9cMs8pj8d1br2n8CXI5H01cmyMsu83YI+Pt9d59Rby7Eeg3g+93GfAY2ieibfeDcE89nrmE4bje2COQwbmGIJx5dqyPwRjG+jD4vh1DxiYU/xnGWOgrwc8/R2CPsuWBnM9aKjPjqfPsh308dSReWrJPFVknjIyTwGZp4/MM5/M003mmUXm6SDzTCHztJF5xpN5NpB5xpB5msg8o8g8q8g8Q2SepWSeajJPOZmnkMzTT+ZZQObZSeaZTebpJPNMJfNsIfPkkHlayTxjyTzNZJ7RZJ7VZJ5lZJ5FZJ4KMk8RmWeAzLOQzLOLzDOHzLOdzDONzNNO5plA5tlI5nHJPGvJPOlknjVknuVknsVkniiZp5jMM0jmySXz7CbzzCXz3EXmmU7m2UrmmUjmuYPMk03mWUfmySDz1JN5VpB5lpB5YmSeEjJPHpmnh8wzj8yzg8wzg8xzJ5lnEplnE5knTOZZT+bJJPM0kHlWknlqyDyVZJ5SMk8+maeXzBMh83SReWaSebaReSaTeTaTecaReVrIPFlknkYyT4jA4zrJ72924fgQZGmec+Pr23vG3jp+SOVpPtc55CS/Dud/2ND8cawI7Mt42eA4ROJpJPNkkXlayDzjyDybyTyTyTzbyDwzyTxdZJ4ImaeXzJNP5ikl81SSeWrIPCvJPA1knkwyz3oyT5jMs4nMM4nMcyeZZwaZZweZZx6Zp4fMk0fmKSHzxMg8S8g8K8g89WSeDDLPOjJPNpnnDjLPRDLPVjLPdDLPXWSeuWSe3WSeXDLPIJmnmMwTJfMsJvMsJ/OsIfOkk3nWknlcMs9GMs8EMk87mWcamWc7mWcOmWcXmWchmWeAzFNE5qkg8ywi8ywj86wm84wm8zSTecaSeVrJPDlkni1knqlknk4yz2wyz04yzwIyTz+Zp5DMU07mqSbzLCXzDJF5VpF5RpF5msg8Y8g8G8g848k8bWSeKWSeDjLPLDJPN5lnPpmnj8xTQOYpI/NUkXlqyTx1ZJ40jyf+80JZw+L7YuV1ciy+Tol/L0vez9a7p793/8YTQ0N7B/b2H208vffY8WMh59Y2CiyOT53mk8V7Iz/ffTnA3sSvId+nHA22dJjvKDju7cEo6AF6E9uqgJAhGMi7hfzC/wCiK+viytMBAA==","debug_symbols":""},{"name":"insert_note","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},{"name":"randomness","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"amount":[{"start":41,"end":42}],"inputs":[{"start":0,"end":41}],"randomness":[{"start":42,"end":43}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275]},"bytecode":"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","debug_symbols":"7VjbaiJBEP2XfhbpunaVv7LkYXbXBUFMiLKwiP++4zrdM3Ebh0zQJJInHThVnjp1urqcfVg//mh2q8fNNiz2ATAsvu3D9qnZHB+3u+Z5FxZxFpabn+3nYRZ+rdbLsED0w+w/HIh3SDAoWIhawSKZdWBklh7tUMsMjJJzA5u/wD/MAtBnJc43Iy6ImbgYvpm4vIU4seTsxKlPrvFfbr1i7nTF3HbF3F7LrSCpi1FwHLMLiOae4gANsWYBY+7ANrAL1xJj9GxEBLQClljLm6jDepTLUCDKngVKPChPpngW471o6FpIRNAREUdlgS9ZarLgrWVpB7cVRu5DYY586D35tOKf8+Gb88G+Y6h22TjGWEzGgmfjFOUzk9fbk/fiBGIaObKUyqZBbiNTmy1fB0L9daAni6U7KjRBbmliHRZaaT9lyu49B7A0aY7ZHYmonsFJ+bKI4LEkjoMzBKaTZPR78mLKrC2ms0NH8WMXyrH8AVOkkUIp5e1BBssD8+mCn0O1Vkyel3Y0gBc/0cXBxLjqTiFlbVEZmFpPs35eX/2JswzDdndzU+f1XXcsCKYE4ZQgem0QxXn90hbKc1USnrX4GKRTguoXD8VyavruJjo8tA+/m+dV8329PL5IaR93f55OXw9/AQ=="},{"name":"simple_macro_example_expanded","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"a","type":{"kind":"field"},"visibility":"private"},{"name":"b","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"a":[{"start":41,"end":42}],"b":[{"start":42,"end":43}],"inputs":[{"start":0,"end":41}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264]},"bytecode":"H4sIAAAAAAAA/+XdZXRbZRwG8KSpDR1jjDGsOG03Fm2Taefu7mvXdO7ujg0Z7jCGM2S4wxjuw4bDGD7cvfA8pymES7/13w/vee45z0nv2ZbdX26S3vvK/831+3y7fFUbfvRlIAEkL20/M/Vz9X6WZz/bs5/j+ff1PPsNPPsNPfuNPPuNPftNUvvpmz/1WJJ6jASLotFkcTgZioRKg+FEWTwWjMbKiuKheCgWj5WH45FIMh6NFyfKEsXBRCgaSYYqYolIRbBqK0x7rmAtNx5bbtox5yOVSEHqsVDssWkq3telqejrkf66NPP9d8tIPZakHmv7vs4xfK7jfGafkXDA9+9nOH3zfq6DtdtChsccTD/e5r6q70Vu2TUcf/UWqOHn3LS/V2lo9f6/3mOpX8Nx/u8clBgeTF2czOZ18LxBn92HpK7cQftzFPS+YSyPOd/wuQoMz0/I+PWzPtc5qXNtfYET9tXN+ybD2G9pjjhi9huao46YMwzNMUfMAUNzkSPmTENzsSPmLENz3BFztqE54YjZ8uaqhSPmZobmlo6YQ4bmVo6YCw3NrQXNbQTNbR0xhw3NJYLnuZ2gub2guYOguaOguZOgubOguYuguauguZugubuguYeguaeguZegubeguY+gua+guZ+gub+geYCgeaCgeZCgebCgeYigeaigeZigebigeYSgeaSgeZSgebSgeYygeayguVTQXCZoHidoLhc0JwXNFYLm8YLmCYLmiYLmSYLmyYLmKYLmqYLmaYLm6YLmGYLmmYLmWYLm2YLmOYLmuYLmeYLm+YLmBYLmhYLmRYLmxYLmJYLmpYLmZYLm5YLmFYLmlYLmVYLm1YLmNYLmtYLm4wXNJwiaTxQ0nyRoPlnQvE7QfIqg+VRB82mC5tMFzesFzWcIms8UNJ8laD5b0HyOoPlcQfN5gubzBc0XCJovFDRfJGi+WNB8iaD5UkHzZYLmDYLmywXNGwXNVwiarxQ0XyVovlrQfI2g+VpB83WC5usFzZsEzTcImm8UNN8kaL5Z0LxZ0HyLoPlWQfNtgubbBc13CJrvFDTfJWi+W9B8j6D5XkHzfYLm+wXNDwiaHxQ0PyRo3iJofljQvFXQ/Iig+VFB82OC5scFzU8Imp8UND8laH5a0PyMoPlZQfNzgubnBc0vCJq3CZpfFDS/JGh+WdD8iqD5VUHzdkHza4Lm1wXNbwia3xQ0vyVoflvQ/I6g+V1B83uC5h2OmHMMze8LnuedguYPBM0fCpo/EjR/LGj+xBFzrqH5U0fM9QzNnzli3s3QvMsR8+6G5s8dMe9haP7CEfOehuYvHTHvZWj+yhHz3obmrx0x1zc0f+OIeR9D87eOmBsYmr9zxLyvofl7R8wNDc0/OGLez9D8oyPmRobmnxwx729o/tkRc2ND8y+OmA8wNP/qiLmJofk3R8wHGpp/d8R8kKH5D0fMBxua/3TEfIihudIR86GG5r8cMecZmn1+N8yHGZr9jpgPNzRnOGI+wtAccMR8pKE50xHzUYbmLEfMRxuasx0xH2NoznHEfKyhOdfQjKfyBVLPVZjm96deA/5ZJpKFZCMc88W+dPYts6+VfY/si2PfFPtq2HfBtny2bbOtl22fbAtk2xjbith2wrYE3lvzXpP3XrwX4bU5r1V57ZaH8Hc7f9fxu5/fhfxu4GeF7x2+lvlIQdrxbq9+bZEoEkOKkGIkjiSQFkhLpBXSGmmDtE2dl3ZIe6QD0hHphHRGuiBdkW5Id6QH0hPphfRG+iB9kX5If2QAMhAZhAxGhiBDkWHIcGQEMhIZhYxGxiBjkVKkDBmHlCNJpAIZj0xAJiKTkMnIFGQqMg2ZjsxAZiKzkNnIHGQuMg+ZjyxAFiKLkMXIEmQpsgxZjqxAViKrkNXIGmQtwvXkub461xvn+ttcj3odwvWKuX4v17Pl+q7rEa7/yfUwuT4k10vk+oFcT4/ry3G9Na4/xvW4uD4V12vi+kVcz4fr22xAuP7JRoTrY3C9CK6fwPUEWF+f9eZZf531yDchrFfN+s2sZ8z6vpsR1n9lPVTWB2W9TNaPZD1F1hdkvT3Wn2M9NtYnY70u1q9iPSfWN9qCsP7NVoT1UVgvhPUzWE+C9RVYb4Dz7zkfnfOzOV+Z83c5n5XzO7chnP/H+XCcH8b5Upw/xPck55dwvgXnH3A8Psenc7w2xy9zPC/Ht+5AOP5xJ8LxcRwvxvFTHE/E8TUcb8LxFxyPwP559lez/5b9mezfY38X+3/YH8L+AbaXs/2Y7alsX2R7G9uf2B7D9gner/P+lfdzvL/hh53Xv7we5PURrxf4+5O/T/j9yu+bf7a/AYzUZeRu2gAA","debug_symbols":"1ZPBCsIwDED/JeceljTZ2v6KeKg6YTDm2IogY//uNq1THHgQB94SeM3jHdpBedr7UJyqFlwHiOA2HbS1r8a1Db4J4DBJMVOQV4dp1kmv4FiUOTgi26t3XmykDT7Y4eUCS9qYO0zMMtMWly4jk8TbyMa+8FsFSP8eoFcPEKIYIIa+DuDlADH2KQA/BGiWaNGczZI0mRyygiNdwZH92jEsZ98Uflfm4wcf1nCpb2N/BQ=="},{"name":"get_imm_card","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"struct","path":"types::card_note::CardNote","fields":[{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"randomness","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"header","type":{"kind":"struct","path":"aztec::note::note_header::NoteHeader","fields":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"nonce","type":{"kind":"field"}},{"name":"storage_slot","type":{"kind":"field"}},{"name":"is_transient","type":{"kind":"boolean"}}]}}]},"visibility":"public"},"return_witnesses":[0,1,2,3,4,5,6]},"bytecode":"H4sIAAAAAAAA/+2daZBUVZbH3yuyioRXyS778hCqKKiiqCxQcE8X3EGkW+lW6JZNRRQQBRRQAUVBbfd9xQXttu1uuzu6v818mZiI+T79aWZiIiYmYr7MfJmOmImYiZme6fvqHeufN2+mect7ypN6XgTBfefed8/v/O/y7tuyOqIoiqOhbUw0vI2Najcq12aVL+T/t+f/d/z53z3ThtJFOD79879Knh74OtuqgdUd6NjaDHuSpxMo1wa2uFAdg7G1FarjMbYxherYjK1QGI6TbO2FYd9k6yhUazAJKqdyRag7DaXPwEA5iWrlia39FNLtDp4/heMZKEW1/aQIGqbfYOzEoIxhGJl4qvoQ+horIPaxDp6YKXb0VRQQOzEoY3jGjhZgbG8BRtVxYHCkjOb/8Uw8RQ+e8cAzLjxPmSnOAVNHEtXqSr5KkI99IGGIMQa/VDftI2Mr8eIYKkIelSsIYSTbOODhGlc+4xzHVScTz3gPnk7g4WgvpjizcV6KanUlXyXIx3FTYogxBr9UN3JEjrR0XhznOL6oXEEIYyewEQ/XuPIZ5ziuJjDxdHrwTAAejvZiijMb5xOjWl3JVwnycdxMZIgxBr9UN+0jYyvx4jjHsUTlCkIYUT/iYehv3tcWExw6trcAY0cLMKqOqmNFEKPqqDpWBDG2go7KqIwVZVRGZVTG7zijrin876PhfatJ4XlW4b2OZngmAQ/H/RCmOLP7aJOjWl3JVwnysQ9MZogxBr9UN+0jo/Iq72TgKVisCZQrCGEk20TgYRjP3nP9JIeO7co4OFJGwzMlOM/gAPbpZnimAA9Hv+eJc+h8NDWq1ZV8lSAf+8BUhhhj8Et10z4yKq/yKq/yKq/yKq/yKq/yKq/yKq/yKq/yKq/yKq/yKu9X8+I9fmJNoFxBCCPZJgMPw/1w72clUxw6titjKzAOjpTR8EwLzjP0zGmKB8804OEYmzxxDj1zOieq1ZV8lSAf+8A5DDHG4Jfqpn1kVF7lVV7lVV7lVV7lVV7lVV7lVV7lVV7lVV7lVV7lVd6v5sV7/MSaQLmCEEayTQUehvvh3s9Kpjl0bFfGVmAcHCmj4ZkenmcVjrtmeKYDD8fYZIoze+Y0I6rVlXyVIB/7wAyGGGPwS3XTPjIqr/LOAJ6CxZpAuYIQRrKdAzwM49l7rp/u0LFdGQdHymh4ZgbnGXoHYroHz0zg4ej3PHEOnY9mRbW6kq8S5GMfmMUQYwx+qW7aR8ZmeTtajFf1VX1VX9W3Hq/qq/qqvqpvPV7VV/VVfVXferyqr+qr+qq+9XhVX9VX9f1u6Yv3+Ik1gXIFIYxkmwE8DPfDvZ+VzHTo2K6MQRg7eBkHR8poeGYH51k5gOOuGZ7ZwMMxNnniHHrmNCeq1ZV8lSAf++kchhhj8Et10z4yflt5O1qMV/sDL6/2B+XV/qC89Xi1Pyiv9gflrcer/UF5tT8obz1e7Q/Kq/1Beevxan9QXu0PyluPV/uD8mp/UN56vNoflFf7g/LW45XQH/AdF2JNoFxBCCPZZgHPbAYe3/dwZjt0bFfG7wxjBy/j4EgZDc/c8DyrcG5ohmcu8HDMH0xxZu+FzYtqdSVfJcjHfjqPIcYY/FLdtI+Myqu884CnYLEmUK4ghJFsc4CHYTx7z/VzHTq2K2MrMA6OlNHwzGfimevBMx94OMYmU5zZOXNBVKsr+SpBPvaBBQwxxuCX6qZ9ZGwlXhxDxJpAuYIQRrLNAx6G/uY9F8136NiujMooiLGjBRiZdRwcKWMR7KF55nvwpMDDMQ8zxZmdvxdGtbqSrxLkYx9YyBBjHNVqSvvI2Eq8OIaINYFyBSGMZFsAPGl4Hu9xngLPuUw8qQfPucDD0V5McWbjfJEjJvJVgnwcN4sYYozBL9VN+8jYSrw4ztP8/wTKFYQwkm0h8HCNK59xjuNqMRPPuR48i4GHo72Y4szGeVdUqyv5KkE+jpsuhhhj8Et10z4ythIvjnNiTaBcQQgj2RYBD0N/8762WOzQsb0FGDtagFF1VB0rghhVR9WxIoixFXRURmWsKOO3mpHjugCvQZphdF0rIGM3E2OXB2M3MLquAZcwMXZ7MC4BRjoOz4U9TIxLPBh7gJGOGwuMS5kYezwYlwJjj4NxGRPjUg/GZcC41MHYy8S4zIOxFxjpOOyPfUyMvR6MfcBIx+G4Xs7E2OfBuBwY6TjUsZ+JcbkHYz8w0nGo44rwjNl91H4PxhXAU2biWeHBUwaegfA8ZaY4M9TBqFZX8lWCfOwDgwwxxuCX6qZ9ZGwlXsPTb7EmUK5fCCPZBnh5BhOLx2yNxtUg8Kxi4hn04FkFPCvD85SZ4sya9byoVlfyVYJ8HDfnMcQYg1+qm/aRsZV4cQwRawLlykIYybaSl2cwsXjM1mhcnQc8q5l4zvPgWQ0854fnKTPFmY3zNVGtruSrBPk4btYwxBiDX6qb9pGxlXhxDBFrAuVWCWEk2/nMPInFY7ZG48rFiO16ARPjGg/GC4CRjsNrtAuZGC/wYLwQGOk41PEiJsYLPRgvAkY6DnW8mInxIg/Gi4GRjkMdL2FivNiD8RJgpONQx0uZGC/xYLwUGOk41PEyJsZLPRgvA0Y6DnWsMDFe5sFYAUY6DnW8nImx4sF4OTDScajjFUyMl3swXgGMdBzqeCUT4xUejFcC4xUOxquYGK/0YLwKGK90MK5lYrzKg3EtMF7lYLyaiXGtB+PVwLjWwXgNE+PVHozXAOPVDsZrmRiv8WC8FhivcTBex8R4rQfjdcB4rYPxeibG6zwYrwfG6xyMNzAxXu/BeAMwXu9gvJGJ8QYPxhuB8QYH4zomxhs9GNcB440OxvVMjOs8GNcD4zoH401MjOs9GG8CxvUOxg1MjDd5MG4ARjoO12Y3MzFu8GC8GRg3OBg3MjHe7MG4ERjpOGzr74VnzO5RbvRg/B7w3BKeJ/t9pu958NwCPN8Pz1NmijO7Z3prVKsr+SpBPvaBWxlijMEv1U37yKi8ynsr8Gy0WBMot1EII9m+z8yTWDxmazRvuRixXTcxMd7qwbgJGF197wfhGbPz0SYPxh8Az23BeVZlf0f2Bx48twHPD4PzDJ2Pwsc5dD66ParVlXyVIB/7wO0MMcbgl+qmfWRslrejxXhVX9VX9VV96/Gqvqqv6qv61uNVfVVf1Vf1rcer+qq+qq/qW49X9VV9VV/Vtx6v6qv6qr6qbz1e1Vf1VX1V33q8qq/qq/qqvvV4VV/VV/VVfevxqr6qr+qr+tbjVX39eQ3PJos1gXKbhDCS7YfMPInFY7bY2k8h7WLEfriZifF2D8bNwOgaK1uYGDd7MG4BRjoOx8ePwjNm3xxs8WD8EfDcEZ4n+wbuRx48dwDPj8PzlJnizL452BrV6kq+SpCP/XQrQ4wx+KW6aR8ZlVd5twLPFos1gXJbhDCS7cfMPInFY7ZG85aLEdt1GxPjVg/GbcDo6nvbmRi3eTBuB8ZtDsYdTIzbPRh3AON2B+NOJsYdHow7gXGHg/HO8IzZ2mOnB+OdwHN3cJ7B7HvHOz147gaeu4LzDK09wsc5tPbYFdXqSr5KkI99YBdDjDH4pbppHxmb5e1oMV7VV/VVfVXferyqr+qr+qq+9XhVX9VX9VV96/Gqvqqv6qv61uNVfVVf1fe7pa/h2WmxJlBupxBGst3FzJNYPGaLrf0U0i5G7If3MDHu8mC8BxhdY2U3E+M9Hoy7gZGOw/Fxb3jG7JnTbg/Ge4FnT3Celdkzp3s9ePYAz33BeYaeOYWPc+iZ096oVlfyVYJ87Kd7GWKMwS/VTfvI+G3l7WgxXu0PvLzaH5RX+4Py1uPV/qC82h+Utx6v9gfl1f6gvPV4tT8or/YH5a3Hq/1BebU/KG89Xu0Pyqv9QXnr8Wp/UF7tD8pbj1dCfzA8uy3WBMrtFsJItvuYeRKLx2yxtZ9C2sWI/XAfE+NeD8Z9wOgaK/czMe7zYLwfGPc5GPczMd7vwbgfGOk4HMMPhGfM3gvb78H4APAcCM+T/Q7SAx48B4DnwfA8ZaY4s/fCDka1upKvEuRjPz3IEGMMfqlu2kdG5VXeg8Cz32JNoNx+IYxke5CZJ7F4zNZo3nIxYrseYmI86MF4CBhdfe+h8IzZ+eiQB+NDwHM4PE92PnrIg+cw8DwcnqfMFGd2PjoS1epKvkqQj33gCEOMMfilumkfGZVXeY8AzyGLNYFyh4Qwku1hZp7E4jFbo3nLxYjtepSJ8YgH41FgdPW9R8IzZuejox6MjwDPY+F5svPRIx48jwHPo+F5ykxxZuejY1GtruSrBPnYB44xxBiDX6qb9o+BXXmV9xjwHLVYEyh3VAgj2R5l5kksHrM1mreOORixXY8zMR7zYDwOjMccjCeYGI97MJ4AxuMOxseZGE94MD4OjCccjE8wMT7uwfgEMNJxeG/2JBPjEx6MJ4GRjkMdnwzPmK2PTnowPgk8p5h4nvTgOQU8T4XnKTPFma2PTke1upKvEuRjHzjNEGMMfqlu2kfGVuI1PCct1gTKnRTCSLaneHkGE4vHbI3G1WngeYaJ57QHzzPA83R4njJTnNk4fzaq1ZV8lSAfx82zDDHG4Jfqpn1kbCVeHEPEmkC5U0IYyfY0L89gYvGYrdG4ehZ4nmPiedaD5zng+Ul4njJTnNk4fz6q1ZV8lSAfx83zDDHG4Jfqpn1kbCVeHEPEmkC5Z4Qwku0nzDyJxWO2RuPKxYjt+gIT4/MejC8AIx2H12gvMjG+4MH4IjDScajjS0yML3owvgSMdBzq+DIT40sejC8DIx2HOr7CxPiyB+MrwEjHoY6vMjG+4sH4KjDScajja0yMr3owvgaMdBzq+DoT42sejK8DIx2HOr7BxPi6B+MbwEjHoY5vMjG+4cH4JjDScajjW0yMb3owvgWMbzoY32ZifMuD8W1gfMvB+A4T49sejO8A49sOxneZGN/xYHwXGN9xML7HxPiuB+N7wPiug/F9Jsb3PBjfB0Y6biwwnmFifN+D8Qww0nGo4wdMjGc8GD8AxjMOxg+ZGD/wYPwQGD9wMH7ExPihB+NHwPihg/FjJsaPPBg/BsaPHIxnoY5KIMYY/LbnddM4JX8FKHN43ND/Ey3d/hSO6fzSsCRf/qav8fUJaBYy/nrt8Qm0B21bhfFsEsZzkzCeD4XxXCeM5x1hPFcK43lNGM8lwnheEMazWhjPE8J4eoXxHBXG0yWMZ78wnnuE8WwTxnObMJ4Nwng+EsZzvTCed4XxXCWM53VhPJcK43lRGM8aYTwnhfH0CeN5TBhPtzCeA8J4dgvj2S6M53ZhPDcL47lBGM97wnjWCuN5QxjPZcJ4XhLGc4EwnlPCeJYL4zkmjGeJMJ6Dwnj2COPZIYxnszCejcJ4bhTG874wnquF8bwpjKcijOdlYTwXCuN5RhhPvzCe48J4eoTxHBLGs1cYz05hPFuE8dwijGedMJ4zwniuEcbzljCey4XxvCKM5yJhPM8J42kTxlMWxrNUGM9hYTwFYTz7hPGcEMZztzCeO4Tx3CqMZ70wng+E8VwrjOdtYTxXCON5VRjPxcJ4nhfGM0YYzyphPMuE8RwRxrNYGM/9wngeF8YTC+BJotrvdBPI/xhsbdax5tvZuyYN5/8it7fBMb/M02PA9qs8XQDbF3m6HWy/ztMdYPsN+Cbbb/N00cH/C7B9mqd/Cbaf5ulfge1nefoLsH2Wp38Ntp/n6d+A7fM8/VsHH7Y3HZNGYdsbfaWwT/46geO3QngeF8ZzvzCexcJ4jgjjWSaMZ5UwnjHCeJ4XxnOxMJ5XhfFcIYznbWE81wrj+UAYz3phPLcK47lDGM/dwnhOCOPZJ4ynIIznsDCepcJ4ysJ42oTxPCeM5yJhPK8I47lcGM9bwniuEcZzRhjPOmE8twjj2SKMZ6cwnr3CeA4J4+kRxnNcGE+/MJ5nhPFcKIznZWE8FWE8bwrjuVoYz/vCeG4UxrNRGM9mYTw7hPHsEcZzUBjPEmE8x4TxLBfGc0oYzwXCeF4SxnOZMJ43hPGsFcbznjCeG4Tx3CyM53ZhPNuF8ewWxnNAGE+3MJ7HhPH0CeM5KYxnjTCeF4XxXCqM53VhPFcJ43lXGM/1wng+EsazQRjPbcJ4tgnjuUcYz35hPF3CeI4K4+kVxvOEMJ7VwnheEMZziTCe14TxXCmM5x1hPNcJ4/lQGM9Nwng2CePZKoxnl4OHvmMN+LdsB9CveSedvqP9Ndgov61z6H/627pfhOc53+ah73W/cPB0AI+xf57bn87t5rvkYuewfgx/CzjTD/8OMX1z/DHYKH8jcHXm6TbI/wT4DO+z+X4ajndlAmy0xdZ+CmliMDw/Cc9TZooza5enIY6PrXhKkH8WYnyaIcYY/FLdtI+MzfJ+2mK8PxXAy9XPTL2nw9e7csKf6xgHup629MW4ngzvf9DMEzQuaGs0TzwJPE+F5ykzxZnNE49CHGeteEqQ/3OI8VGGGGPwS3XTPjI2y/u0AF4m34M0Ps5a/p619DD+H2bwn0TV85/ZGo2Ph4HnkfA8ZaY4s/HxEMTxtBVPCfJ/BjE+xBBjDH6pbtpHxmZ5nxTAy9Ruq0y9D4av98txR7o+aOmLcd3H4D+JquccszUad/cBzwPhecpMcWbj7l6I40krnhLkfwYx3ssQYwx+qW7aR8ZmeR8SwMvUbitNvXeFr/fLcUe63mXpS3Hhb36RzVxvntLrTbPp9SbY9XqTj1evN702vd7M/9frza/Hq9ebQ5teb+r1pov323q9ietesuG61+TTbyq2Qf4Xui42m66Lwa7rYj5eXRd7bbouzv/XdfHX4/2m18V4/iUbnn+LUEfI9zNMO9BvLZ6FtlnssHVZtiLY0sBM9H1XF/giWxzYF31L3w2x9jhsSx22ZRansfU6tOtzlFvu0LM3vJ7ZHEm+ItAQtxTSvcDTF56nzBRnNkcugziWW/Fge6HmyxhijMEv1U37yNhKvIan32JNoFy/EEay9fHyZOOqP6reGo0r/Fs/DP2/zBRnNq6WQhz9Ds0pH/vpUoYY46h6zKSwj4ytxGt4yhZrAuXKQhjJ1svLk42rclS9NRpX+DdWOeYdpjizcdUDcZQdmlM+9tMehhjjqHrMpLCPjK3Ea3hWWawJlFslhJFsOD+ttnQ0NvpmHdeQFzjKXegod5Gj3MWOcpc4yl3qKHeZo1zFUe5yR7krHLYrHbarHLa1DtvVDts1Dtu1Dtt1Dtv1DtsNDtuNDts6h229ZSuCLY3C9Tfji75jWQ/+6VtjbJebHUw3hWdalYAv2hrN5TcBzwYGjZjizObydRDHzVY8rr5RBFsahZ13boqq9aV9ZFRe5V0HPBst1gTKbRTCSLYNYLvF0tHYbo1qtd0YnHvVQAK+aGs0v6GOtwTnGZrfwsc5NL9h+9xqxYNtg3/zl2GuzfrKxqhaX9pHxmZ5u1qMl/mcrfq2GK/qq/qqvqpvPV7VV/VVfVXferyqr+qr+qq+9XhVX9VX9VV96/Gqvqqv6qv61uNVfVVf1Vf1rcer+qq+qq/qW49X9VV9VV/Vtx6v6qv6qr6qbz1e1Vf1VX2/Hq/h2WSxJlBukxBGst0CPMQW8HcTsm9tbrNiNzb6u8b4LvrmPI3teFt4jbJvbcgXbbG1n0L6NuC5PTxPmSnO7F107AubrXiwH/C+/z/UL2+LqvWlfWRUXuXFuX2LxZpAuS1CGMl2O9jusHQ0tq0O2zaHbbvDtsOyFeHYNFjMg9l3OuSLtkZz4zbg2R6cZ2huDB/n0Ny4FeLYYcXjaq8i2NIobD/bFlXrS/vI2CxvV4vxqr6qr+qr+tbjVX1VX9VX9a3Hq/qqvqqv6luPV/VVfVVf1bcer+qr+qq+3y19Dc9OizWBcjuFMJJtO9juztP4fGCXw3ZPnka97w4ey8rsmQH5oi229lNI3w08u4LzDD0zCB/n0DODnRDHPVY82KdwTO5kiDEGv1Q37SPjt5W3q8V4tT/w8mp/UF7tD8pbj1f7g/Jqf1DeerzaH5RX+4Py1uPV/qC82h+Utx6v9gfl1f6gvPV4tT8or/YH5a3Hq/1BebU/KG89Xgn9wfDstlgTKLdbCCPZdoFtT54+C7a9Dts+h+3+PI1tsDd8fNnvEpAv2mJrP4X0XuDZF56nzBRn9h7NHojjfiseV3sVwZZGYfvU3qhaX9pHRuVV3j3As99iTaDcfiGMZNsHtgOWjsZ2MKrVdn947mx+OxhVb43mN9TxAIOOTHFm8xu2z0ErHte5h2muzfrK/qhaX9pHRuVVXpxvD1msCZQ7JISRbAfAdtjS0diORLXaHgrPnc1vR6LqrdH8hjoeZtCRKc5sfsP2OWLFg23DfE7J+sqhqFpf2kdG5VVenG+PWqwJlDsqhJFsh8H2mKWjsR1z2I47bCcctsfzdBfYnrDKFeHYNJwOgwn4oq3RfHkCeB4Pz1NmijObL49DHE9Y8bjaqwi2NArb905E1frSPjK2Eq/hOWmxJlDupBBGsj3Oy5ONq5NR9dZoXB0HHob+X2aKMxtXxyCOkw7NKR/76TGGGOOoesyksH8M7K3Ea3hOWawJlDslhJFsJ3h5snF1KqreGo2rY8DDMe8wxZmNq8cgjlMOze11SBFsaRS2DxyLqvWlfWRsJV7D84zFmkC5Z4Qwkg3np+eiah2N7fk8jWvIFxzlXnSUe8lR7mVHuVcc5V51lHvNUe51R7k3HOXedNjectjedtjecdjeddjey9PdYHvfUe6Mw/aBw/ahw/aRZUvA9gnY6NhPwUY+fgq2M3n6Z2Aj5s/ARrH9HGykwedga8vTH4FtTJ7+EGyFPP0B2Nrz9BmwdeTp98E2Nk+/B7ZiniamcbmNfJt0JU8PfM2tCFxpwHpRF9oanYM6ILb28DxlrjiL0XB7hdavI2pevyL8P5ZJP444TZ3jmfQrRs3rNx70G8ekH0ecpt5OJv3GR83r1wn6JUz6ccRp6p3ApF9n1Lx+E0C/EpN+HHEy1ZvxTmTinZTX1RaYd2p43jWmH02Omu9HU6EfTWFqF4Y4s3aZBvGFqtfUcQ7oM9nSqQT500C7cxi0i8Ev1U37yNgs7xgBvOg74N/jydpt+lfoMN3BMn2UdUBG5VXe7wLvNAG8xveM4L7LqxPLt9kanW9nMGvBE+fQ/DoT4phqxVOCfOyfMxlijMEv1U37yKi8yqu8yqu8yqu8yqu8yqu8yqu8yvtd5zW+Z4X3vTKxfJsttvZTSM9i1oIpzux+yGyIY4YVTwnysb1nM8QYg1+qm/aRUXn5eEuQ3wY8DH2v3Mx4Qp5YAE8S1c4DCeS3gY00HQO2OXm6ALa5ebodbPPydAfY5ufpsWBbEA1rQrY0T48D28I8PR5s50Ka/l+UpzvBtjhPl8BG7+pNABu9MzcRbEvy9CSw9eTpyWBbmqengG1Znp4Ktt48PR1sfXl6BtiW5+mZYKO2wbaktpkNNmqbOWCjtpkLNmobait8r20+2KhtFoAN37UhG7XNQrBR22BbUdssAhu1zWKwUdt0gY3aphts1DZLwEZt0wM2apulYKO2WQY2ek7SCzaa2/rARm1IbWW0Ozt5OJ+OxzFFfnBMLXf463NwURrnETomjcLOI+grhX3y1wkcy4TwtDl4qK0r4Xiydx56wse5xsRGfbgjr5v4yV8Byvw472s0JshuNupTS0GfXqscxlGJwq71upn06bL0If5u0IfK3GnpQ3bUpwf0WWKVwzgqUbjvPEy9i5n0WWTpQ/yLQR8qc5+lD9lRn27Qp8sqh3FUonDXLqbec5n0WWjpQ/zngj5U5kFLH7KjPotBn0VWOYyjEoX7HYBiNHzeDa3PAksfbAfSh8ocsfQhO+pzLuiz0CqHcVSiYHGcZ+qdz6TPPEsf4p8P+lCZE5Y+ZEd9UtBngVUO46hEweI439Q7l0mfOZY+xD8X9KEypy19yI76zAd95lnlMI5KFCyO1UzXr2vw+pX0If7ZoA+VecHSZ5ZDn7mgzxyrXBHKxVHY9RitT9vzunstrgKUeQ3iwHUxrtepLK71KQ68TiCd8BqjP0/j9cmKPI3XNgN5Gq+LaM2Ia29am+Nan66p8NqLrqnw2ouuqfrBRtdUK8BG11TERN8KMfS7QdSStkb3CvBeCh2H17qzLS0M95zw3Fk/m20x0v4cYCTbFODhuv/UbvHYfYDT91jL99hR9D3O8j1uFH0nlu9kFH2XLN+lUfQ9zfI9zfJd714nF09k8UQNeGYK45kljGeqMJ5pwngmCuMZL4wnEcZTEMbTLoxnsjCe0Vgr+fBMEMZTFMYzThjPGGE8M4TxjMazcB+e6cJ4Jgnj6RTGUxLG0yGMZ6wwnlgAT713Oygfn0PT/RN8Do33aMlG98/w3Q66J4vvdtC9N3y3I42GNSEb3bfDdzvoGQG+24H3/Oh/fNZCNvzNJbLRMyt8t4PuNeK7HT15Gt/toOel+M4GPU+eBjbSErUnLfH+ImmJ712QlnhvkrTE9y5IS7yvSVqmYCMt8Z4oaYnvXZCWqC1pie9dkJZ4L5a0xPcu7OfO+C4GvndBa19874LWn6StifXmacP5dDz2WfKDfXaZw99SBxelcZwyPMPPxin6SmEfnzXHFuM3zTNWGE+HMJ6SMJ5OYTyThPFMF8ZzjjCeGcJ4xgjjGSeMpyiMZ4IwninCeCYL42kXxlMQxpMI4xkvjGeiMJ5pwnimCuOZJYxnpjCetlHkoetRqtt+p9v4ZnjPOHtPvSt4TOXVJia6X2C/Z0z+ClDmsfzkTHMI2c1G1+/4nnGPVY4njoGB2GJJwTf5a3PwpBZTJRxT9u78ouCxDrUZ3QuiNrPf5y5AmdNWm5HdbMssjTqj2veoixHLO9zZeJoCLCnsu3yH/G1D/KaW6jfrqhemDPvtDu+3ak4zbfcYcOB3D1TmvSnDbK9MGW4j+709vOeL78fMA20rAWMgX1Q37ZM/fIcV75fa33git+tdTtf3cVSe3rNk+D5lANuJ6rbbqQ3SS6Cc3cYplKP5B9v4Y2jjWfliiKn/nYesbY6YcM4K6HfQ1IHf7CyydGuLar/ZqeQ8C6NhbcPwDM2haVTdRuR/IbQRlfmFNYeS3WzLrFhM37e/tShCOuR8gn5RO/LVBvFQuUrOswDKhuEZ0hWfKaVR7bciBSjze0tXskeg60LQdYlVrgjpOAo7/hcCS+zwjX12IZSLrGNd31oxrIEark+7HHoF9D2Iz+9Qs8jiiSwNmc5RK/HZZjM8+J1O+HExtBZkiDO7LqDzYejffp7jaC+KoRTVnt+LEd+3A/OsdrO/H1JeXl7D02Wx4jsFXUIYyYbP2WdaOpp11t/BOp9hvbPS8NKaitb5xIHXaFRm3rRhtn+Edb59LY7vXaDmKehSCRND2T4HplH1WowYXd/Kcp3fFlk8ixxafJO+SYNKFHaOT8PHlPVR+xthu33xG+F/s9Zq+I0w9VNcq3VZ5TCOYkB9YovF7gNma6vDg0yVKOz5nmGdtRLnwWa+W/5Pq81wDsXrZrON4nfLg7huSQPr4/Pd8v9a+sxx6PNV3y0z3H8o43tztDVav+L1O8f5F9/Fa4bH9V13aJ45Hjy4huJ4pxPvYzXDg98c9jLxzPbg6QWePiaeXg+ePuBZzsTT58FDDGaNaZ/3jY3GxgKwUf/ENT31EfwdM2qnc8Fm/95UCXjxPhPZ8D6p65tujjEYR/W/6cbfMqBY8N1lStP9x0pUPXdVwnGuwfvVbXm99rfnOC8EvI9UZuq/WUz0uwT270/g7zZQmZ78ofbEPNZ+BiausWrqWAExuX6fgvKX53Ga66gVeRrPXfhbF5c68mlrNBeQdibecvh4s/XsYF4XtW3Z4XslsAbyXUbfcf6P/JC9AOlL4A/1rBxOfqkzcZt5YMBRDtPd1jElyB9wxJ0GjrsMLCnskz/TZwahf1H/4XnOO9TvBxz6zAV9KB/nLjzPVqLquZ94V4TnzeYkGpPUb4kFxy+VudqakzjmSaZYs7bph5gWOeKk/Bugz6yDOYfahdrV5G925NPWzPrkm5iT0LeEOen2OnOSPb80MyfNtY6ROCdtgP61GeYkjnU8xo369II+lE/rY/veWSWqvuYhXob7ds51kr1+x7G6Y5TWSRz3KE0dOP/0OeKk/F3QZ3bDnEPtgvfKDzvyaWt2nTQQPt4BHB/UtgMO3zh3BPJdNTZpTiI/ZC9A+mGYkwaHk1/qTNxmTlruKIfpXuuYEuQvd8SdBo4bx38K++TP9Jk90L8Ow5zEca8M40Z9FoE+lE/X5/Y940pUvYYjXq7fVqRxSP2WWPAeJZU5Yc1JHGs3rnsEpg6cf7odcVL+U9BnTsOcQ+1C7Wry33Dk09ZoTiLtmNabAzg+qG2XO3zj3BHId9XYpDmJ/JC9AOnXYU7CdYZ9fW3mpH5HOUwvso4pRe5rVoa1aRmvO6ju5Raj6TPPQv96YxTWSf0OffD+IOXT/UF8thPlLPguCvEy3C92/h43sZA/HKtnrDmJY+3GdW/c1IHzT58jTso/C33mU5hzqF2oXU3+7x35tDWak/D5McN6c8B1Xd7v8I1zRyDfVWOT5iTyg/fvKP07mJNwnUE6E7eZk1Y4ymF6gXUMXpuscMSdBo4bx38K++TP9JnPoH/9fhTWSSsc+uDzCcqn5xMmDnxOUomq32MjXq51Eo1J6rfEguOXyvylNSdxzJMS1kl/BX3mr2HOsd99Mvl/cOTT1mhOwueBoz0noW8Jc9Lf1pmT7PmlmTlpnnWMxDnpb6B//WEU7nGvcOjTB/pQPj0fNXHg85pKVL2GI16Gb5ac66Ruiw/H6j+M0jqJ4/ssUwfOP4sccVL+P0Gf+WeYc6hd8Len/ujIp63ZdRLDNfCA617hCodvrt/h74d6cY7C5wyU/neYk/Dah3Qmbnz+juUw3Wcdg/dLeh1xp4HjxvGfwj75M33mX6B//RHmJI539TFu1Kcb9LHfz3Dd47bfr+NcJ9GYtO9x4/ilMv9tzUkc8+RorZNc980o//+gz8Twe2SudwEmOfJpazQnkXbfxJyEviXMSRPhR+4bzS/NzEnd1jES56QCvLM/Cb7b5PjmFuNGffAeN+UvAdssqzzeL8X3wzjmUXtOTCP3fTCy4RqB+TvYmu8mZzh0sn9XC78Pr/dtRmrZOLUlX1R3ammL32bYZWmjb1IW5v+3RbX3HCsR13eDQ9+L2u+zk3/X++w9eb9wvc++zBF/apXD+GZa8Y3W++iucxaVWQHxMb3LvZLz3Ix/+8q1BqH8VTB3ng/nXmonfCdmrSOftkbnZny3k+Eev/MeRp/DN55DA/l23sMgP657GFfBuRnvAdhrITw3YzlMu67RXfduGO4ble37kSnskz/TZy6A/rUWziUM3+TUnJvt+3B4bk7B1mWVx+cGeP7guO8SR9XPKNKo9plGKaqdi3F9E/p8jN9rz3RoM9Nisb/jnMqkU73fqMG/+8Plu93y3T6KvsdavseOou96f6NsNHwnlu9kFH2XLN+lUfT9zfTzcvY3Oqcz1GvaDf/umtkarRfw72qcE5xnoDw+Gv7t17t2Prh+74M7H4iBi1hnWKxxVM1N+Z1ga4P0GDiuENXG3+GwFR228Q5bZ1S7TYD0REhPgvRUqGNynnbFQWXsdhoN+1eVI17Tr6iv4N8RoPxzwEbtMh1sY6z6xkUOnkr+/8DX27KBPSZyb2OtYNvysqbTmBON6SizIJ+2H+UtSHmX79+/9eF0154dOx9K9x54MN17Z7pt74E9Ox7Ag3aO5KB7R3LQAyM56PBIDjo+koNOjeSg50dy0KNTRoI3koM+H8lBvxvJQf86koP+YyQH/c9IDloydQQHrR3JQdtHctDxkRz0/kgO+ouRHPT3Iznov0Zy0JJpIziov9mDov8HUvDKXZeHAwA=","debug_symbols":""},{"name":"get_leader","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"struct","path":"types::leader::Leader","fields":[{"name":"account","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}}]},"visibility":"public"},"return_witnesses":[0,1]},"bytecode":"H4sIAAAAAAAA/81VwU7DMAx10rVL2yG4coFc4JxV3LiUX+APiloQl1XqNgl+HtFArL2mEUJahnhSFde1Y/vFdQQRCfpGQgdImsPa3TtZgV6PT+1kcwzuTJXZTRYUxHJ8MieXYCdBJxbTWi4Cdgrkj1i5G7M+oylXHCuJzdMYS9AUGuQE+fDsSviOvEnP13Jt4Hsa8MkC8VhOQcfHmQV8kacUaqmdbI7DF08YS8M7x1tBHtkf5IPtreE9/Sexl06u48U2ig4zI2JNla0ph7PTkD/HW4DNtVvP3cp6C+x9ixXwksOeKj4/a7tncSJ+So8fzr8Aftjm1uOH9ciPAn5yz055dnWcOozfuwpi4zzLoSa2wxmEc4lzxhqk548zDe2xzoh3SGX35RmkI+6LHDB+ukNOPQcL4HO764fmpXvsmlZAapyu9NIVNE1deqsvJwEd0fQawuPm3x9bRXq0YFuwfU5zSqPO7oTCwMIEzQmzuHLrpVsfhqF516+btnvT/X6n+2f91O837Radbn7rRJ+UMTTfRwoAAA==","debug_symbols":"zdjdaoNAEAXgd9lrKTsz++urlF5sWwuCmBClUMR3rxJjApFAJDHnbhdmnO9iOMh2qtp9pbbc1Y3KO6XfnMrfO9XsUz3emzYdWpUHsjFTRf09HoPuM/VTVoXKmWOfXVUT8amayJ2ro18oFs9TrSGZSz31H9mg8VCaAKWJUBrSWBzC4jAWR7A4BotjsThYkUxYmUxYoUxYqcxYqcxYqczPTeXjDNlghtlght1gxkOSzut5RuTb62EonNaD/cWH3eTxYJ4A5olYHtFgHgLzMJhHtvbI7DFLHgPmsWAeB+bxYJ4A5olYHqNf57Gy4CEwD4N5FveZnZ+aRJurf2oT7++xekUPrejhFT1yX89w+U2HMn1WxfiiOlzbv/3x2P8D"},{"name":"read_note","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"comparator","type":{"kind":"integer","sign":"unsigned","width":3},"visibility":"private"}],"param_witnesses":{"amount":[{"start":0,"end":1}],"comparator":[{"start":1,"end":2}]},"return_type":{"abi_type":{"kind":"array","length":10,"type":{"kind":"struct","path":"std::option::Option","fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"struct","path":"types::card_note::CardNote","fields":[{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"randomness","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"header","type":{"kind":"struct","path":"aztec::note::note_header::NoteHeader","fields":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"nonce","type":{"kind":"field"}},{"name":"storage_slot","type":{"kind":"field"}},{"name":"is_transient","type":{"kind":"boolean"}}]}}]}}]}},"visibility":"public"},"return_witnesses":[2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81]},"bytecode":"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","debug_symbols":""},{"name":"update_legendary_card","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"randomness","type":{"kind":"field"},"visibility":"private"},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":41}],"points":[{"start":42,"end":43}],"randomness":[{"start":41,"end":42}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396]},"bytecode":"","debug_symbols":"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"},{"name":"initialize_stable","function_type":"Open","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":39}],"points":[{"start":39,"end":40}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233]},"bytecode":"","debug_symbols":""},{"name":"update_leader","function_type":"Open","is_internal":true,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"public_global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]},"visibility":"private"},{"name":"account","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"param_witnesses":{"account":[{"start":39,"end":40}],"inputs":[{"start":0,"end":39}],"points":[{"start":40,"end":41}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"contract_storage_update_requests","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"new_value","type":{"kind":"field"}}]}}},{"name":"contract_storage_reads","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::contrakt::storage_read::StorageRead","fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"current_value","type":{"kind":"field"}}]}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"prover_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]},"visibility":"public"},"return_witnesses":[41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234]},"bytecode":"","debug_symbols":""},{"name":"match_stable","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"account","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]},"visibility":"private"},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"param_witnesses":{"account":[{"start":41,"end":42}],"inputs":[{"start":0,"end":41}],"points":[{"start":42,"end":43}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037]},"bytecode":"","debug_symbols":""},{"name":"get_legendary_card","function_type":"Unconstrained","is_internal":false,"abi":{"parameters":[],"param_witnesses":{},"return_type":{"abi_type":{"kind":"struct","path":"types::card_note::CardNote","fields":[{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"randomness","type":{"kind":"field"}},{"name":"owner","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"header","type":{"kind":"struct","path":"aztec::note::note_header::NoteHeader","fields":[{"name":"contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"nonce","type":{"kind":"field"}},{"name":"storage_slot","type":{"kind":"field"}},{"name":"is_transient","type":{"kind":"boolean"}}]}}]},"visibility":"public"},"return_witnesses":[0,1,2,3,4,5,6]},"bytecode":"","debug_symbols":""},{"name":"initialize_immutable_singleton","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"randomness","type":{"kind":"field"},"visibility":"private"},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":41}],"points":[{"start":42,"end":43}],"randomness":[{"start":41,"end":42}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277]},"bytecode":"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","debug_symbols":"3VjbbtswDP0XPQeBeBFJ5VeGPnhbBgQI0qIJBgxB/n1ObclupkWo26RNnmwBh9QheURT3rv1449mt3rcbN1i7wDd4tvebZ+azXG53TXPO7fwM7fc/Gyfh5n7tVov3QIxHmb/4CDEHgkGGQteClgksx6MzGFARyh5BsaQfANbfIV/mDmgWyXOVyMeEBPxYPhu4uE9xIlD8k6sg3PxL77lgr71gr7tgr5jyXfArMZADJUdUCDtgBJ4JBgqoT0l6ggMFXRVMOhvPQD4iACEEyX1tQBMVXq02QjdKQLxi/GhD+CjQ4FVayUz5kxnaGhcdOxjzFpAy+Dgi3FSj40+nIcCUeqqQMqj8MIkjfG95DBKkgp4kEoSq2kJ105L+w21zCjGcWKOfOQz+bTJP+WjV+eDQ8VQ7LxwjDGLjAOe9g27ZfLx+uRjVgIxVY4saR76KFqlPbFRZj30PXmRGPk7ClQhlVRZxoEWyk+pj8U4cADTKX2M4I6SKDGBVfh8EiH67NiPzhCYTEoj3pMWVVN78Xp66OhrB8o+34UFqRIoaZoewmh4YO4+8HMoNhjUmGd4A3i1RW8HE+3KIspjy/h+IdL1+nn5Fkac0jAud1fC1qh886kZwRQjnGJEbzUimv9nIqPUV4PiSYmPRjLFqDjbSL7amR+qq3R4aBe/m+dV8329PP7Tape7P0/d6+Ev"},{"name":"simple_macro_example","function_type":"Secret","is_internal":false,"abi":{"parameters":[{"name":"inputs","type":{"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"private_global_variables","type":{"kind":"struct","path":"aztec::context::globals::private_global_variables::PrivateGlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]}}]},"visibility":"private"},{"name":"a","type":{"kind":"field"},"visibility":"private"},{"name":"b","type":{"kind":"field"},"visibility":"private"}],"param_witnesses":{"a":[{"start":41,"end":42}],"b":[{"start":42,"end":43}],"inputs":[{"start":0,"end":41}]},"return_type":{"abi_type":{"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs","fields":[{"name":"call_context","type":{"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext","fields":[{"name":"msg_sender","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"storage_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"function_selector","type":{"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector","fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}},{"name":"is_contract_deployment","type":{"kind":"boolean"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"args_hash","type":{"kind":"field"}},{"name":"return_values","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"read_requests","type":{"kind":"array","length":32,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"nullifier_key_validation_requests","type":{"kind":"array","length":1,"type":{"kind":"struct","path":"aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"secret_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey","fields":[{"name":"high","type":{"kind":"field"}},{"name":"low","type":{"kind":"field"}}]}}]}}},{"name":"new_note_hashes","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffect","fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"new_nullifiers","type":{"kind":"array","length":16,"type":{"kind":"struct","path":"aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash","fields":[{"name":"value","type":{"kind":"field"}},{"name":"note_hash","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}]}}},{"name":"private_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":4,"type":{"kind":"field"}}},{"name":"new_l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message","fields":[{"name":"recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"content","type":{"kind":"field"}}]}}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"encrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"unencrypted_logs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"encrypted_log_preimages_length","type":{"kind":"field"}},{"name":"unencrypted_log_preimages_length","type":{"kind":"field"}},{"name":"historical_header","type":{"kind":"struct","path":"aztec::protocol_types::header::Header","fields":[{"name":"last_archive","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"content_commitment","type":{"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment","fields":[{"name":"tx_tree_height","type":{"kind":"field"}},{"name":"txs_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"in_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"out_hash","type":{"kind":"array","length":2,"type":{"kind":"field"}}}]}},{"name":"state","type":{"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference","fields":[{"name":"l1_to_l2_message_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"partial","type":{"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference","fields":[{"name":"note_hash_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"nullifier_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"contract_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}},{"name":"public_data_tree","type":{"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot","fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}]}}]}}]}},{"name":"global_variables","type":{"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables","fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"field"}},{"name":"coinbase","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"fee_recipient","type":{"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}}]}},{"name":"contract_deployment_data","type":{"kind":"struct","path":"aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData","fields":[{"name":"public_key","type":{"kind":"struct","path":"aztec::protocol_types::grumpkin_point::GrumpkinPoint","fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}}]}},{"name":"initialization_hash","type":{"kind":"field"}},{"name":"contract_class_id","type":{"kind":"struct","path":"aztec::protocol_types::contract_class_id::ContractClassId","fields":[{"name":"inner","type":{"kind":"field"}}]}},{"name":"contract_address_salt","type":{"kind":"field"}},{"name":"portal_contract_address","type":{"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress","fields":[{"name":"inner","type":{"kind":"field"}}]}}]}},{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}]},"visibility":"public"},"return_witnesses":[51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264]},"bytecode":"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","debug_symbols":"1ZNBCoMwEEXvMussnMmMJrlK6SJtLQiioqFQxLtXW62UupMUuko+PB5vMz2U9dmHoq46cD0ggjv00DW+mmYXfBvAJQry6jK+g4JrUebgiOygvjgUO5No8M1ikm6wpI2ZYWKWlba4ZUYmWdzIxn7wRwVI/xqufxYuREu4GNodznvCNcti15yt8jR5uiWiO43ozmK5x3HzbeFPZT4d6jjDvXl9hwc="}],"events":[],"file_map":{"3":{"source":"struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    // TODO: change this to return a u64 as Noir now\n    // uses u64 for indexing\n    len: Field,\n    empty_value: T,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0, empty_value: initial_value }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> Field {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> Field {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + (i as Field)] = vec.get_unchecked(i as Field);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = self.empty_value;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}","path":"std/collections/bounded_vec.nr"},"18":{"source":"// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n/// A hint for decomposing a single field into two 16 byte fields.\nunconstrained fn decompose_unsafe(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    // Take hints of the decomposition\n    let (xlo, xhi) = decompose_unsafe(x);\n    let borrow = lt_unsafe(PLO, xlo, 16);\n\n    // Range check the limbs\n    xlo.assert_max_bit_size(128);\n    xhi.assert_max_bit_size(128);\n\n    // Check that the decomposition is correct\n    assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n    // Check that (xlo < plo && xhi <= phi) || (xlo >= plo && xhi < phi)\n    let rlo = PLO - xlo + (borrow as Field) * TWO_POW_128;\n    let rhi = PHI - xhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n\n    (xlo, xhi)\n}\n\nunconstrained fn lt_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.__to_le_radix(256, num_bytes);\n    let y_bytes = y.__to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nunconstrained fn lte_unsafe(x: Field, y: Field, num_bytes: u32) -> bool {\n    lt_unsafe(x, y, num_bytes) | (x == y)\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    // Decompose a and b\n    let (alo, ahi) = decompose(a);\n    let (blo, bhi) = decompose(b);\n\n    let borrow = lte_unsafe(alo, blo, 16);\n\n    // Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\n    let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n    let rhi = ahi - bhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if a == b {\n        false\n    } else if lt_unsafe(a, b, 32) {\n        assert_gt(b, a);\n        false\n    } else {\n        assert_gt(a, b);\n        true\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n","path":"std/field/bn254.nr"},"19":{"source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n","path":"std/field.nr"},"27":{"source":"mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint\n// docs:end:pedersen_commitment\n{\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\npub fn hash_to_field<N>(input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [u8; N], _state_length: u32) -> [u8; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n","path":"std/hash.nr"},"29":{"source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n","path":"std/merkle.nr"},"31":{"source":"struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n","path":"std/option.nr"},"44":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::oracle;\nuse dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint};\n\npub fn emit_encrypted_log<N>(\n    context: &mut PrivateContext,\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    log: [Field; N]\n) {\n    let _ = oracle::logs::emit_encrypted_log(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        encryption_pub_key,\n        log\n    );\n    context.accumulate_encrypted_logs(log);\n}\n\npub fn emit_unencrypted_log<T>(context: &mut PublicContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n\n// TODO: We might want to remove this since emitting unencrypted logs from private functions is violating privacy.\n// --> might be a better approach to force devs to make a public function call that emits the log if needed then\n// it would be less easy to accidentally leak information.\n// If we decide to keep this function around would make sense to wait for traits and then merge it with emit_unencrypted_log.\npub fn emit_unencrypted_log_from_private<T>(context: &mut PrivateContext, log: T) {\n    let contract_address = context.this_address();\n    let event_selector = 5; // TODO: compute actual event selector.\n    let _ = oracle::logs::emit_unencrypted_log(contract_address, event_selector, log);\n    // context.accumulate_unencrypted_logs(log);\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/log.nr"},"48":{"source":"use dep::std::option::Option;\nuse dep::protocol_types::{\n    constants::{\n        MAX_READ_REQUESTS_PER_CALL,\n        GET_NOTE_ORACLE_RETURN_LENGTH,\n        GET_NOTES_ORACLE_RETURN_LENGTH,\n        MAX_NOTES_PER_PAGE,\n        VIEW_NOTE_ORACLE_RETURN_LENGTH,\n    },\n};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, Comparator, NoteStatus},\n    note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption,\n};\nuse crate::oracle;\n\nfn check_note_header<Note, N>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address));\n    assert(header.storage_slot == storage_slot);\n}\n\nfn check_note_fields<N>(fields: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n\n        // Values are computed ahead of time because circuits evaluate all branches\n        let isEqual = fields[select.field_index] == select.value;\n        let isLt = fields[select.field_index].lt(select.value);\n\n        if (select.comparator == Comparator.EQ) {\n            assert(isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.NEQ) {\n            assert(!isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LT) {\n            assert(isLt, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LTE) {\n            assert(isLt | isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GT) {\n            assert(!isLt & !isEqual, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GTE) {\n            assert(!isLt, \"Mismatch return note field.\");\n        }\n    }\n}\n\nfn check_notes_order<N>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let eq = fields_0[sort.field_index] == fields_1[sort.field_index];\n        let lt = fields_0[sort.field_index] as u120 < fields_1[sort.field_index] as u120;\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> Note where Note: NoteInterface<N> {\n    let note = get_note_internal(storage_slot);\n\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n\n    context.push_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let opt_notes = get_notes_internal(storage_slot, options);\n    let mut num_notes = 0;\n    let mut prev_fields = [0; N];\n    for i in 0..opt_notes.len() {\n        let opt_note = opt_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_consumption(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_read_request(note_hash_for_read_request);\n\n            num_notes += 1;\n        };\n    }\n    if options.limit != 0 {\n        assert(num_notes <= options.limit, \"Invalid number of return notes.\");\n    }\n    opt_notes\n}\n\nunconstrained fn get_note_internal<Note, N>(storage_slot: Field) -> Note where Note: NoteInterface<N> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, FILTER_ARGS>\n) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n    let (num_selects, select_by, select_values, select_comparators, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    let opt_notes = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let filter = options.filter;\n    let filter_args = options.filter_args;\n    filter(opt_notes, filter_args)\n}\n\nunconstrained pub fn view_notes<Note, N>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N>\n) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n    let (num_selects, select_by, select_values, select_comparators, sort_by, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    )\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [Field; N], [u3; N], [u8; N], [u2; N]) {\n    let mut num_selects = 0;\n    let mut select_by = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by[num_selects] = select.unwrap_unchecked().field_index;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by[i] = sort.unwrap_unchecked().field_index;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (num_selects, select_by, select_values, select_comparators, sort_by, sort_order)\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/note/note_getter.nr"},"49":{"source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_note_hash_for_insertion, compute_note_hash_for_consumption}\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note,\n    broadcast: bool\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    // As `is_transient` is true, this will compute the inner note hsah\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    // TODO: Strong typing required because of https://github.com/noir-lang/noir/issues/4088\n    let serialized_note: [Field; N] = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        inner_note_hash\n    )\n        == 0\n    );\n\n    context.push_new_note_hash(inner_note_hash);\n\n    if broadcast {\n        Note::broadcast(*note, context, storage_slot);\n    }\n}\n\npub fn create_note_hash_from_public<Note, N>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N> {\n    let contract_address = (*context).this_address();\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, is_transient: true };\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    Note::set_header(note, header);\n    let inner_note_hash = compute_note_hash_for_insertion(*note);\n\n    context.push_new_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N>(context: &mut PrivateContext, note: Note) where Note: NoteInterface<N> {\n    let mut nullifier = 0;\n    let mut consumed_note_hash: Field = 0;\n    nullifier = note.compute_nullifier(context);\n\n    // We also need the note hash corresponding to the \"nullifier\"\n    let header = note.get_header();\n    // `consumed_note_hash` is used to inform the kernel which pending note hash\n    // the nullifier corresponds to so they can be matched and both squashed/deleted.\n    // nonzero nonce implies \"persistable\" nullifier (nullifies a persistent/in-tree\n    // note hash) in which case `consumed_note_hash` is not used since the kernel\n    // just siloes and forwards the nullifier to its output.\n    if (header.is_transient) {\n        // TODO(1718): Can we reuse the note hash computed in `compute_nullifier`?\n        consumed_note_hash = compute_note_hash_for_consumption(note);\n    }\n    assert(notify_nullified_note(nullifier, consumed_note_hash) == 0);\n\n    context.push_new_nullifier(nullifier, consumed_note_hash)\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr"},"50":{"source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__SILOED_NOTE_HASH},\n    hash::pedersen_hash, utils::arr_copy_slice\n};\n\nfn compute_siloed_hash(contract_address: AztecAddress, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address.to_field(), inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_NOTE_HASH)\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\nfn compute_inner_note_hash<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([header.storage_slot, note_hash], 0)\n}\n\nfn compute_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let inner_note_hash = compute_inner_note_hash(note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let siloed_note_hash = compute_siloed_note_hash(note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n    let inner_nullifier = note_with_header.compute_nullifier(context);\n\n    let input = [header.contract_address.to_field(), inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_insertion<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    compute_inner_note_hash(note)\n}\n\npub fn compute_note_hash_for_consumption<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<T, N, S>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    T::set_header((&mut note), note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = note.compute_nullifier_without_context();\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/note/utils.nr"},"51":{"source":"use dep::protocol_types::address::AztecAddress;\nuse dep::protocol_types::traits::Empty;\n\nstruct NoteHeader {\n    contract_address: AztecAddress,\n    nonce: Field,\n    storage_slot: Field,\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    // Remove this and check the nonce to see whether a note is transient or not.\n    is_transient: bool,\n}\n\nimpl Empty for NoteHeader {\n    fn empty() -> Self {\n        NoteHeader { contract_address: AztecAddress::zero(), nonce: 0, storage_slot: 0, is_transient: false }\n    }\n}\n\nimpl NoteHeader {\n    pub fn new(contract_address: AztecAddress, nonce: Field, storage_slot: Field) -> Self {\n        NoteHeader { contract_address, nonce, storage_slot, is_transient: false }\n    }\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/note/note_header.nr"},"58":{"source":"use crate::{\n    context::inputs::PublicContextInputs, messaging::process_l1_to_l2_message,\n    oracle::{arguments, public_call::call_public_function_internal}\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_READ_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::hash_args, header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = StorageRead::empty();\n        let empty_storage_update = StorageUpdateRequest::empty();\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(0),\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_reads: BoundedVec::new(empty_storage_read),\n            public_call_stack_hashes: BoundedVec::new(0),\n            new_note_hashes: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n            new_l2_to_l1_msgs: BoundedVec::new(L2ToL1Message::empty()),\n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field, sender: EthAddress) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            sender,\n            self.chain_id(),\n            self.version(),\n            msg_key,\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(contract_address, function_selector, 0, false, true)\n    }\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/context/public_context.nr"},"60":{"source":"use crate::{\n    context::inputs::PrivateContextInputs, key::nullifier_key::validate_nullifier_key_against_address,\n    messaging::process_l1_to_l2_message,\n    oracle::{\n    arguments, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    debug_log::debug_log\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_data::FunctionData, function_selector::FunctionSelector,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, hash::hash_args, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader\n};\nuse dep::std::option::Option;\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<SideEffect, MAX_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.call_context.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        // Note. The side effect counter is 2 when this is the initial call\n        if (side_effect_counter == 2) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(0),\n            read_requests: BoundedVec::new(SideEffect::empty()),\n            nullifier_key_validation_requests: BoundedVec::new(NullifierKeyValidationRequest::empty()),\n            new_note_hashes: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(0),\n            public_call_stack_hashes: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(L2ToL1Message::empty()),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            // TODO(fees): start this from 0 and test the following:\n            // - in the private circuit init that it gets set correctly\n            // - in the private circuit inner that it remains 0\n            // I've had to initialize the counter here so that it would work for contract deployments\n            // the above checks should be doable after we figure out fee payments for contract deployments\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            read_requests: self.read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        let side_effect = SideEffect { value: read_request, counter: self.side_effect_counter };\n        self.read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            msg_key,\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash: [0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero()\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/context/private_context.nr"},"66":{"source":"use dep::std::option::Option;\nuse crate::note::{\n    note_header::NoteHeader,\n    note_interface::NoteInterface,\n};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    utils::arr_copy_slice,\n};\n\n#[oracle(notifyCreatedNote)]\nfn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _inner_note_hash: Field\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    inner_note_hash: Field\n) -> Field {\n    notify_created_note_oracle(storage_slot, note_type_id, serialized_note, inner_note_hash)\n}\n\n#[oracle(notifyNullifiedNote)]\nfn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(nullifier: Field, inner_note_hash: Field) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash)\n}\n\n#[oracle(getNotes)]\nfn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u3; N],\n    _sort_by: [u8; N],\n    _sort_order: [u2; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u2,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u3; N],\n    sort_by: [u8; N],\n    sort_order: [u2; N],\n    limit: u32,\n    offset: u32,\n    status: u2,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, N, M, S, NS>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u3; M],\n    sort_by: [u8; M],\n    sort_order: [u2; M],\n    limit: u32,\n    offset: u32,\n    status: u2,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by,\n        select_values,\n        select_comparators,\n        sort_by,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i as u32 < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: Field = 2; // num_notes & contract_address.\n            let extra_preimage_length: Field = 2; // nonce & is_transient.\n            let read_offset: Field = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let is_transient = fields[read_offset + 1] as bool;\n            let header = NoteHeader { contract_address, nonce, storage_slot, is_transient };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n            Note::set_header(&mut note, header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n#[oracle(checkNullifierExists)]\nfn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/notes.nr"},"67":{"source":"use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE\n// = 2 + 4 + 8\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 14;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr"},"68":{"source":"#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr"},"69":{"source":"use dep::protocol_types::{address::{AztecAddress, PartialAddress, PublicKeysHash}, grumpkin_point::GrumpkinPoint};\n\n#[oracle(getPublicKeyAndPartialAddress)]\nfn get_public_key_and_partial_address_oracle(_address: AztecAddress) -> [Field; 3] {}\n\nunconstrained fn get_public_key_and_partial_address_internal(address: AztecAddress) -> [Field; 3] {\n    get_public_key_and_partial_address_oracle(address)\n}\n\npub fn get_public_key(address: AztecAddress) -> GrumpkinPoint {\n    let result = get_public_key_and_partial_address_internal(address);\n    let pub_key = GrumpkinPoint::new(result[0], result[1]);\n    let partial_address = PartialAddress::from_field(result[2]);\n\n    let calculated_address = AztecAddress::compute(PublicKeysHash::compute(pub_key), partial_address);\n    assert(calculated_address.eq(address));\n\n    pub_key\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/get_public_key.nr"},"71":{"source":"use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/storage.nr"},"73":{"source":"use dep::protocol_types::{address::AztecAddress, constants::NUM_FIELDS_PER_SHA256, grumpkin_point::GrumpkinPoint};\n\n// TODO: Should take encrypted data.\n#[oracle(emitEncryptedLog)]\nfn emit_encrypted_log_oracle<N>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _encryption_pub_key: GrumpkinPoint,\n    _preimage: [Field; N]\n) -> Field {}\n\nunconstrained pub fn emit_encrypted_log<N>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    encryption_pub_key: GrumpkinPoint,\n    preimage: [Field; N]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    [\n        emit_encrypted_log_oracle(\n            contract_address,\n            storage_slot,\n            note_type_id,\n            encryption_pub_key,\n            preimage\n        ), 0\n    ]\n}\n\n#[oracle(emitUnencryptedLog)]\nfn emit_unencrypted_log_oracle<T>(\n    _contract_address: AztecAddress,\n    _event_selector: Field,\n    _message: T\n) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log<T>(\n    contract_address: AztecAddress,\n    event_selector: Field,\n    message: T\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // https://github.com/AztecProtocol/aztec-packages/issues/885\n    [emit_unencrypted_log_oracle(contract_address, event_selector, message), 0]\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/logs.nr"},"77":{"source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, hash::pedersen_hash,\n    public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage, traits::{Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: Field = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nfn get_public_data_witness_oracle(\n    _block_number: u32,\n    _leaf_slot: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, leaf_slot: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, leaf_slot);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr"},"78":{"source":"use dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint, grumpkin_private_key::GrumpkinPrivateKey};\n\nstruct NullifierKeyPair {\n    account: AztecAddress,\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\n#[oracle(getNullifierKeyPair)]\nfn get_nullifier_key_pair_oracle(_account: AztecAddress) -> [Field; 4] {}\n\nunconstrained fn get_nullifier_key_pair_internal(account: AztecAddress) -> NullifierKeyPair {\n    let result = get_nullifier_key_pair_oracle(account);\n    NullifierKeyPair {\n        account,\n        public_key: GrumpkinPoint { x: result[0], y: result[1] },\n        secret_key: GrumpkinPrivateKey { high: result[2], low: result[3] }\n    }\n}\n\npub fn get_nullifier_key_pair(account: AztecAddress) -> NullifierKeyPair {\n    get_nullifier_key_pair_internal(account)\n}\n\npub fn get_nullifier_secret_key(account: AztecAddress) -> GrumpkinPrivateKey {\n    get_nullifier_key_pair_internal(account).secret_key\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/nullifier_key.nr"},"85":{"source":"mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod avm;\n\nuse private_context::PrivateContext;\nuse public_context::PublicContext;\nuse avm::AVMContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none() }\n    }\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/context.nr"},"90":{"source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::pedersen_hash, address::{AztecAddress},\n    header::Header, utils::field::full_field_less_than\n};\nuse dep::std::merkle::compute_merkle_root;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::{get_public_data_witness}};\n\nfn _public_value_inclusion(\n    value: Field,\n    storage_slot: Field,\n    contract_address: AztecAddress,\n    header: Header\n) {\n    // 1) Compute the leaf slot by siloing the storage slot with the contract address\n    let public_value_leaf_slot = pedersen_hash(\n        [contract_address.to_field(), storage_slot],\n        GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n    );\n\n    // 3) Get the membership witness of the slot\n    let witness = get_public_data_witness(\n        header.global_variables.block_number as u32,\n        public_value_leaf_slot\n    );\n\n    // 4) Check that the witness matches the corresponding public_value\n    let preimage = witness.leaf_preimage;\n\n    // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n    // 1. The value is the same as the one in the witness\n    // 2. The value was never initialized and is zero\n    let is_less_than_slot = full_field_less_than(preimage.slot, public_value_leaf_slot);\n    let is_next_greater_than = full_field_less_than(public_value_leaf_slot, preimage.next_slot);\n    let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n    let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n    if is_in_range {\n        assert_eq(value, 0, \"Non-existant public data leaf value is non-zero\");\n    } else {\n        assert_eq(preimage.slot, public_value_leaf_slot, \"Public data slot don't match witness\");\n        assert_eq(preimage.value, value, \"Public value does not match the witness\");\n    }\n\n    // 5) Prove that the leaf we validated is in the public data tree\n    assert(\n        header.state.partial.public_data_tree.root\n        == compute_merkle_root(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n    );\n    // --> Now we have traversed the trees all the way up to archive root and that way verified that a specific\n    // `value` was really set in a given contract storage slot at block `block_number` in public data tree.\n}\n\npub fn prove_public_value_inclusion(\n    value: Field, // The value that we want to prove is in the public data tree\n    storage_slot: Field, // The storage slot in which the value is stored\n    contract_address: AztecAddress, // The contract we want to look into\n    context: PrivateContext\n) {\n    _public_value_inclusion(\n        value,\n        storage_slot,\n        contract_address,\n        context.historical_header\n    );\n}\n\npub fn prove_public_value_inclusion_at(\n    value: Field, // The value that we want to prove is in the public data tree\n    storage_slot: Field, // The storage slot in which the value is stored\n    contract_address: AztecAddress, // The contract we want to look into\n    block_number: u32, // The block at which we'll prove that the note exists\n    context: PrivateContext\n) {\n    let header = context.get_header_at(block_number);\n\n    _public_value_inclusion(value, storage_slot, contract_address, header);\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/history/public_value_inclusion.nr"},"97":{"source":"use crate::context::{Context};\nuse crate::oracle::storage::storage_read;\nuse crate::oracle::storage::storage_write;\nuse dep::std::option::Option;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_state_struct\nstruct PublicState<T> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_state_struct\n\nimpl<T> Storage<T> for PublicState<T> {}\n\nimpl<T> PublicState<T> {\n    // docs:start:public_state_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicState { context, storage_slot }\n    }\n    // docs:end:public_state_struct_new\n\n    // docs:start:public_state_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n    // docs:end:public_state_struct_read\n\n    // docs:start:public_state_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state writes only supported in public functions\");\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n    // docs:end:public_state_struct_write\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/state_vars/public_state.nr"},"98":{"source":"use dep::std::option::Option;\n\nuse dep::protocol_types::{address::AztecAddress, constants::{GENERATOR_INDEX__INITIALIZATION_NULLIFIER}, hash::pedersen_hash};\n\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note}, note_getter::{get_note, view_notes},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions\n};\nuse crate::oracle::{nullifier_key::get_nullifier_secret_key, notes::check_nullifier_exists};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct Singleton<Note> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for Singleton<T> {}\n\nimpl<Note> Singleton<Note> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context: context.private, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, Singleton>` type (for example), because the storage slot often also identifies an actor. e.g. \n    // the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    // Note: subsequent nullification of this state variable, via the `replace` method will not be leaky, if the `compute_nullifier()` method of the underlying note is designed to ensure privacy. \n    // For example, if the `compute_nullifier()` method injects the secret key of a note owner into the computed nullifier's preimage.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        pedersen_hash(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize<N>(self, note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        context.push_new_nullifier(nullifier, 0);\n\n        create_note(context, self.storage_slot, note, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace<N>(self, new_note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let prev_note = get_note(context, self.storage_slot);\n\n        // Nullify previous note.\n        destroy_note(context, prev_note);\n\n        // Add replacement note.\n        create_note(context, self.storage_slot, new_note, broadcast);\n    }\n    // docs:end:replace\n\n    // docs:start:get_note\n    pub fn get_note<N>(self, broadcast: bool) -> Note where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let mut note = get_note(context, self.storage_slot);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(context, note);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(context, self.storage_slot, &mut note, broadcast);\n\n        note\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note<N>(self) -> Note where Note: NoteInterface<N> {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/state_vars/singleton.nr"},"100":{"source":"use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse dep::protocol_types::{hash::pedersen_hash, traits::{ToField}};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()], 0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/state_vars/map.nr"},"101":{"source":"use dep::std::option::Option;\nuse dep::protocol_types::{\n    constants::{MAX_NOTES_PER_PAGE, MAX_READ_REQUESTS_PER_CALL},\n    abis::side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n};\nuse crate::context::{PrivateContext, PublicContext, Context};\nuse crate::note::{\n    lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader, note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_consumption\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct Set<Note> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for Set<T> {}\n\nimpl<Note> Set<Note> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Set { context, storage_slot }\n    }\n    // docs:end:new\n    // docs:start:insert\n    pub fn insert<N>(self, note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        create_note(\n            self.context.private.unwrap(),\n            self.storage_slot,\n            note,\n            broadcast\n        );\n    }\n    // docs:end:insert\n\n    // docs:start:insert_from_public\n    pub fn insert_from_public<N>(self, note: &mut Note) where Note: NoteInterface<N> {\n        create_note_hash_from_public(self.context.public.unwrap(), self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n\n    // DEPRECATED\n    fn assert_contains_and_remove(_self: Self, _note: &mut Note, _nonce: Field) {\n        assert(\n            false, \"`assert_contains_and_remove` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\"\n        );\n    }\n\n    // DEPRECATED\n    fn assert_contains_and_remove_publicly_created(_self: Self, _note: &mut Note) {\n        assert(\n            false, \"`assert_contains_and_remove_publicly_created` has been deprecated. Please call PXE.addNote() to add a note to the database. Then use Set.get_notes() and Set.remove() in your contract to verify and remove a note.\"\n        );\n    }\n\n    // docs:start:remove\n    pub fn remove<N>(self, note: Note) where Note: NoteInterface<N> {\n        let context = self.context.private.unwrap();\n        let note_hash = compute_note_hash_for_consumption(note);\n        let has_been_read = context.read_requests.any(|r: SideEffect| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(context, note);\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<N, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, FILTER_ARGS>\n    ) -> [Option<Note>; MAX_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N> {\n        let storage_slot = self.storage_slot;\n        let opt_notes = get_notes(self.context.private.unwrap(), storage_slot, options);\n        opt_notes\n    }\n    // docs:end:get_notes\n\n    // docs:start:view_notes\n    unconstrained pub fn view_notes<N>(\n        self,\n        options: NoteViewerOptions<Note, N>\n    ) -> [Option<Note>; MAX_NOTES_PER_PAGE] where Note: NoteInterface<N> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/state_vars/set.nr"},"102":{"source":"use crate::context::{Context};\nuse crate::oracle::{storage::{storage_read, storage_write}};\nuse crate::history::public_value_inclusion::prove_public_value_inclusion;\nuse dep::std::option::Option;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\nstruct StablePublicState<T>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T> Storage<T> for StablePublicState<T> {}\n\nimpl<T> StablePublicState<T> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n\n    // Intended to be only called once. \n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public state wrties only supported in public functions\");\n        // TODO: Must throw if the storage slot is not empty -> cannot allow overwriting\n        // This is currently impractical, as public functions are never marked `is_contract_deployment`\n        // in the `call_context`, only private functions will have this flag set.\n        let fields = T::serialize(value);\n        storage_write(self.storage_slot, fields);\n    }\n\n    pub fn read_public<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.private.is_none(), \"Public read only supported in public functions\");\n        let fields = storage_read(self.storage_slot);\n        T::deserialize(fields)\n    }\n\n    pub fn read_private<T_SERIALIZED_LEN>(self) -> T  where T: Deserialize<T_SERIALIZED_LEN> {\n        assert(self.context.public.is_none(), \"Private read only supported in private functions\");\n        let private_context = self.context.private.unwrap();\n\n        // Read the value from storage (using the public tree)\n        let fields = storage_read(self.storage_slot);\n\n        // Loop over the fields and prove their inclusion in the public tree\n        for i in 0..fields.len() {\n            // TODO: Update membership proofs to use current header (Requires #4179)\n            // Currently executing unnecessary computation:\n            // - a membership proof of the value in the public tree of the header \n            prove_public_value_inclusion(\n                fields[i],\n                self.storage_slot + i,\n                (*private_context).this_address(),\n                (*private_context)\n            )\n        }\n        T::deserialize(fields)\n    }\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/state_vars/stable_public_state.nr"},"103":{"source":"use dep::std::option::Option;\nuse dep::protocol_types::{address::AztecAddress, constants::{GENERATOR_INDEX__INITIALIZATION_NULLIFIER}, hash::pedersen_hash};\n\nuse crate::context::{PrivateContext, Context};\nuse crate::note::{\n    lifecycle::create_note, note_getter::{get_note, view_notes}, note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct ImmutableSingleton<Note> {\n    context: Option<&mut PrivateContext>,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T> Storage<T> for ImmutableSingleton<T> {}\n\nimpl<Note> ImmutableSingleton<Note> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context: context.private, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, ImmutableSingleton>` type (for example), because the storage slot often also identifies an actor. \n    // e.g. the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        pedersen_hash(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // docs:start:initialize\n    pub fn initialize<N>(self, note: &mut Note, broadcast: bool) where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        context.push_new_nullifier(nullifier, 0);\n\n        create_note(context, self.storage_slot, note, broadcast);\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note<N>(self) -> Note where Note: NoteInterface<N> {\n        let context = self.context.unwrap();\n        let storage_slot = self.storage_slot;\n        get_note(context, storage_slot)\n    }\n    // docs:end:get_note\n\n    // docs:start:view_note\n    unconstrained pub fn view_note<N>(self) -> Note  where Note: NoteInterface<N> {\n        let options = NoteViewerOptions::new().set_limit(1);\n        view_notes(self.storage_slot, options)[0].unwrap()\n    }\n    // docs:end:view_note\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/state_vars/immutable_singleton.nr"},"106":{"source":"use dep::protocol_types::{hash::hash_args, traits::Hash};\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/hasher.nr"},"121":{"source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment : bool,\n\n    start_side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.is_contract_deployment == false);\n        assert(self.start_side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.is_contract_deployment == self.is_contract_deployment)\n            & (call_context.start_side_effect_counter == self.start_side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n            self.start_side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            is_contract_deployment: serialized[6] as bool,\n            start_side_effect_counter: serialized[7] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/call_context.nr"},"122":{"source":"use crate::{\n    abis::{call_context::CallContext, side_effect::{SideEffect, SideEffectLinkedToNoteHash}},\n    address::AztecAddress,\n    constants::{\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Hash, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.extend_from_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from public_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x0d43290c164ebc3d80d4d17f1939482d9d01ad503cebceb8c665d2bd96597a68);\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/public_circuit_public_inputs.nr"},"133":{"source":"use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n\nmod tests {\n    use crate::{\n        abis::{\n        function_data::FunctionData, function_selector::FunctionSelector,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem, side_effect::SideEffect\n    },\n        address::AztecAddress, constants::GENERATOR_INDEX__CALL_STACK_ITEM, traits::Hash\n    };\n\n    #[test]\n    fn compute_call_stack_item_request_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_internal: false, is_private: false, is_constructor: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: true, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item request hash\" test\n        assert_eq(call_stack_item.hash(), 0x2812dfeffdb7553fbbdd27c03fbdf61e3aa9bab3209db39f78838508ad892803);\n    }\n\n    #[test]\n    fn compute_call_stack_item_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_internal: false, is_private: false, is_constructor: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: false, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item hash\" test\n        assert_eq(call_stack_item.hash(), 0x1f71c0d6bd03e409df694549b6aa83d706cfe55427152e6ec443ec64fa62d3a0);\n    }\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/public_call_stack_item.nr"},"142":{"source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize}\n};\n\nstruct FunctionData {\n    // First four bytes of the abi encoding \n    // of a function. \n    selector : FunctionSelector,\n    is_internal : bool,\n    is_private : bool,\n    is_constructor : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_internal == other.is_internal &\n        self.is_private == other.is_private &\n        self.is_constructor == other.is_constructor\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_internal: serialized[1] as bool,\n            is_private: serialized[2] as bool,\n            is_constructor: serialized[3] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x200569267c0f73ac89aaa414239398db9445dd4ad3a8cf37015cd55b8d4c5e8d);\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/function_data.nr"},"145":{"source":"use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_field(value: Field) -> Self {\n        Self { inner: value as u32 }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/function_selector.nr"},"174":{"source":"global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_NOTE_HASHES_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as note hashes and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_NOTE_HASHES_PER_TX ≥ MAX_NEW_NOTE_HASHES_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_NOTE_HASHES_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL: Field = 1;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_NOTE_HASHES_PER_TX: Field = 64;\nglobal MAX_NON_REVERTIBLE_NOTE_HASHES_PER_TX: Field = 8;\nglobal MAX_REVERTIBLE_NOTE_HASHES_PER_TX: Field = 56;\n\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_NON_REVERTIBLE_NULLIFIERS_PER_TX: Field = 8;\nglobal MAX_REVERTIBLE_NULLIFIERS_PER_TX: Field = 56;\n\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\n\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NON_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 3;\nglobal MAX_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 5;\n\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 32;\nglobal MAX_NON_REVERTIBLE_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_REVERTIBLE_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\n\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 32;\nglobal MAX_NON_REVERTIBLE_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_REVERTIBLE_PUBLIC_DATA_READS_PER_TX: Field = 16;\n\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX: Field = 4;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 40;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\nglobal ARTIFACT_FUNCTION_TREE_MAX_HEIGHT = 5;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 0;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 16;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 6;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 26;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 6;\nglobal PUBLIC_DATA_SUBTREE_HEIGHT: Field = 5;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 14;\nglobal PUBLIC_DATA_SUBTREE_SIBLING_PATH_LENGTH: Field = 35;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\n// sha256 hash is stored in two fields to accommodate all 256-bits of the hash\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 32;\n\n// CONTRACT CLASS CONSTANTS\n// This should be around 8192 (assuming 2**15 instructions packed at 8 bytes each),\n// but it's reduced to speed up build times, otherwise the ClassRegisterer takes over 5 mins to compile.\n// We are not using 1024 so we can squeeze in a few more args to methods that consume packed public bytecode,\n// such as the ClassRegisterer.register, and still land below the 32 * 32 max args limit for hashing.\nglobal MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS: Field = 1000;\n// Bytecode size for private functions is per function, not for the entire contract.\n// Note that private functions bytecode includes a mix of acir and brillig.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS: Field = 500;\n// Same for unconstrained functions: the size is per function.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS: Field = 500;\n// Since we are not yet emitting selectors we'll use this magic value to identify events emitted by the ClassRegisterer.\n// This is just a stopgap until we implement proper selectors.\n// sha224sum 'struct ContractClassRegistered {contract_class_id: ContractClassId, version: Field, artifact_hash: Field, private_functions_root: Field, packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS] }'\nglobal REGISTERER_CONTRACT_CLASS_REGISTERED_MAGIC_VALUE = 0x6999d1e02b08a447a463563453cb36919c9dd7150336fc7c4d2b52f8;\n// sha224sum 'struct ClassPrivateFunctionBroadcasted'\nglobal REGISTERER_PRIVATE_FUNCTION_BROADCASTED_MAGIC_VALUE = 0x1b70e95fde0b70adc30496b90a327af6a5e383e028e7a43211a07bcd;\n// sha224sum 'struct ClassUnconstrainedFunctionBroadcasted'\nglobal REGISTERER_UNCONSTRAINED_FUNCTION_BROADCASTED_MAGIC_VALUE = 0xe7af816635466f128568edb04c9fa024f6c87fb9010fdbffa68b3d99;\n\n// CONTRACT INSTANCE CONSTANTS\n// sha224sum 'struct ContractInstanceDeployed'\nglobal DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE = 0x85864497636cf755ae7bde03f267ce01a520981c21c3682aaf82a631;\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue below is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 25;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\n\n// LENGTH OF STRUCTS SERIALIZED TO FIELDS\nglobal AZTEC_ADDRESS_LENGTH = 1;\nglobal CALL_CONTEXT_LENGTH: Field = 8;\nglobal CONTENT_COMMITMENT_LENGTH: Field = 7;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 2;\nglobal ETH_ADDRESS_LENGTH = 1;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal FUNCTION_LEAF_PREIMAGE_LENGTH: Field = 5;\nglobal GLOBAL_VARIABLES_LENGTH: Field = 6;\nglobal HEADER_LENGTH: Field = 25; // 2 for last_archive, 7 for content commitment, 10 for state reference, 6 for global vars\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L2_TO_L1_MESSAGE_LENGTH: Field = 2;\nglobal NEW_CONTRACT_DATA_LENGTH: Field = 3;\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH = 4;\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH = 5;\nglobal PARTIAL_STATE_REFERENCE_LENGTH: Field = 8;\nglobal PRIVATE_CALL_STACK_ITEM_LENGTH: Field = 219;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we should change this\n// constant as well PRIVATE_CALL_STACK_ITEM_LENGTH\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 214;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 194;\nglobal STATE_REFERENCE_LENGTH: Field = 10; // 2 for snap + 8 for partial\nglobal TX_CONTEXT_DATA_LENGTH: Field = 11;\nglobal TX_REQUEST_LENGTH: Field = 17;\n\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal NOTE_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 32;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 52;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__NOTE_HASH = 1;\nglobal GENERATOR_INDEX__NOTE_HASH_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_NOTE_HASH = 3;\nglobal GENERATOR_INDEX__SILOED_NOTE_HASH = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\nglobal GENERATOR_INDEX__SIDE_EFFECT = 29;\nglobal GENERATOR_INDEX__FEE_PAYLOAD = 30;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/constants.nr"},"175":{"source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() as u32 < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/utils/field.nr"},"177":{"source":"struct Reader<N> {\n    data: [Field; N],\n    offset: Field,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/utils/reader.nr"},"179":{"source":"use crate::traits::{Empty, Hash};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            dep::std::hash::pedersen_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/public_data_tree_leaf_preimage.nr"},"185":{"source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/utils.nr"},"186":{"source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS},\n    contract_class_id::ContractClassId, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        AztecAddress::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute_from_public_key(\n        pub_key: GrumpkinPoint,\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        portal_contract_address: EthAddress\n    ) -> AztecAddress {\n        AztecAddress::compute(\n            PublicKeysHash::compute(pub_key),\n            PartialAddress::compute(\n                contract_class_id,\n                salt,\n                initialization_hash,\n                portal_contract_address\n            )\n        )\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            pedersen_hash(\n                [pub_keys_hash.to_field(), partial_address.to_field()],\n                GENERATOR_INDEX__CONTRACT_ADDRESS\n            )\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let contract_address_salt = 3;\n    let contract_class_id = ContractClassId::from_field(4);\n    let initialization_hash = 5;\n    let portal_contract_address = EthAddress::from_field(6);\n\n    let address = AztecAddress::compute_from_public_key(\n        point,\n        contract_class_id,\n        contract_address_salt,\n        initialization_hash,\n        portal_contract_address\n    );\n\n    assert(address.to_field() == 0x2fd71a4f0742364f194dd16d0ae32d2f47845ddc7f5d328f37d4148b565c4123);\n}\n\n#[test]\nfn compute_address_from_partial_and_pubkey() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let partial_address = PartialAddress::from_field(3);\n\n    let address = AztecAddress::compute(PublicKeysHash::compute(point), partial_address);\n    assert(address.to_field() == 0x0447f893197175723deb223696e2e96dbba1e707ee8507766373558877e74197);\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/address/aztec_address.nr"},"187":{"source":"use crate::{\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, grumpkin_point::GrumpkinPoint,\n    traits::{ToField, Serialize, Deserialize}\n};\n\n// Public keys hash. Used in the computation of an address.\nstruct PublicKeysHash {\n    inner: Field\n}\n\nimpl ToField for PublicKeysHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<1> for PublicKeysHash {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<1> for PublicKeysHash {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        PublicKeysHash::from_field(fields[0])\n    }\n}\n\nimpl PublicKeysHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(public_key: GrumpkinPoint) -> Self {\n        PublicKeysHash::from_field(\n            pedersen_hash(\n                [\n            public_key.x,\n            public_key.y\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let point = GrumpkinPoint { x: 1, y: 2 };\n    let actual = PublicKeysHash::compute(point);\n    assert(actual.to_field() == 0x1923a6246e305720b6aaf751fde0342613e93c82e455c3831e28375c16dd40d8);\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/address/public_keys_hash.nr"},"191":{"source":"use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::function_leaf_preimage::FunctionLeafPreimage;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::abis::new_contract_data::NewContractData as ContractLeafPreimage;\nuse crate::abis::function_data::FunctionData;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n    ARGS_HASH_CHUNK_COUNT, ARGS_HASH_CHUNK_LENGTH, CONTRACT_TREE_HEIGHT, FUNCTION_TREE_HEIGHT,\n    NOTE_HASH_TREE_HEIGHT, NUM_FIELDS_PER_SHA256, GENERATOR_INDEX__SILOED_NOTE_HASH,\n    GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__VK, GENERATOR_INDEX__CONSTRUCTOR,\n    GENERATOR_INDEX__PARTIAL_ADDRESS, GENERATOR_INDEX__CONTRACT_ADDRESS,\n    GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__FUNCTION_ARGS\n};\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Checks that `value` is a member of a merkle tree with root `root` at position `index`\n// The witness being the `sibling_path`\npub fn assert_check_membership<N>(value: Field, index: Field, sibling_path: [Field; N], root: Field) {\n    let calculated_root = root_from_sibling_path(value, index, sibling_path);\n    assert(calculated_root == root, \"membership check failed\");\n}\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like \n// this because it means we never even need to consider cases where \n// the index is greater than p.\npub fn root_from_sibling_path<N>(leaf: Field, leaf_index: Field, sibling_path: [Field; N]) -> Field {\n    let mut node = leaf;\n    let indices = leaf_index.to_le_bits(N);\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\n// Calculate the function tree root from the sibling path and leaf preimage.\n//\n// TODO: The cpp code passes in components of the FunctionLeafPreimage and then \n// builds it up. We should build it up and then pass the leaf preimage as a parameter.\n// We can then choose to have a general method that takes in anything hashable\n// and deduplicate the logic in `contract_tree_root_from_siblings`\npub fn function_tree_root_from_siblings(\n    selector: FunctionSelector,\n    is_internal: bool,\n    is_private: bool,\n    vk_hash: Field,\n    acir_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = FunctionLeafPreimage { selector, is_internal, is_private, vk_hash, acir_hash };\n\n    let function_leaf = function_leaf_preimage.hash();\n\n    let function_tree_root = root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path);\n\n    function_tree_root\n}\n\n// Calculate the contract tree root from the sibling path and leaf preimage.\npub fn contract_tree_root_from_siblings(\n    contract_class_id: ContractClassId,\n    storage_contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    contract_leaf_index: Field,\n    contract_leaf_sibling_path: [Field; CONTRACT_TREE_HEIGHT]\n) -> Field {\n    //TODO(Kev): if we use shorthand syntax here, we get an error as expected,\n    // since variable name is `storage_contract_address` but the span is incorrect.\n    let contract_leaf_preimage = ContractLeafPreimage { contract_address: storage_contract_address, portal_contract_address, contract_class_id };\n\n    let contract_leaf = contract_leaf_preimage.hash();\n\n    let computed_contract_tree_root = root_from_sibling_path(contract_leaf, contract_leaf_index, contract_leaf_sibling_path);\n\n    computed_contract_tree_root\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn read_request_root_from_siblings(\n    read_request: Field,\n    leaf_index: Field,\n    sibling_path: [Field; NOTE_HASH_TREE_HEIGHT]\n) -> Field {\n    root_from_sibling_path(read_request, leaf_index, sibling_path)\n}\n\npub fn silo_note_hash(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\nfn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\n// TODO CPP uses blake2s for this\npub fn compute_new_contract_address_hash(new_contract_address: AztecAddress) -> Field {\n    dep::std::hash::pedersen_hash([new_contract_address.to_field()])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new(0);\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn compute_constructor_hash(\n    function_data: FunctionData,\n    args_hash: Field,\n    constructor_vk_hash: Field\n) -> Field {\n    let function_data_hash = function_data.hash();\n\n    pedersen_hash(\n        [\n        function_data_hash,\n        args_hash,\n        constructor_vk_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, commitment_index: Field) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_siloed_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn compute_unique_siloed_note_hashes<N>(\n    first_nullifier: Field,\n    siloed_note_hashes: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_note_hashes = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_note_hash = siloed_note_hashes[i];\n        if siloed_note_hash.value != 0 {\n            let nonce = compute_note_hash_nonce(first_nullifier, i);\n            unique_siloed_note_hashes[i] = SideEffect {\n                value: compute_unique_siloed_note_hash(nonce, siloed_note_hash.value),\n                counter: siloed_note_hash.counter\n                };\n        }\n    }\n    unique_siloed_note_hashes\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n    assert(result == 0x142a6d57007171f6eaa33d55976d9dbe739c889c8e920f115f7808dea184c718);\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = [0; 800];\n    for i in 0..800 {\n        input[i] = i as Field;\n    }\n    let hash = hash_args(input);\n    assert(hash == 0x371960dd84ed3445ab099ac4c1af5ba90e0c713b593e0ca52ee532087c7f097);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0x2266ac2f9f0c19c015239ef5ea85862fc6fac00db73779b220a4d49c4856c2e1);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x0f24729168d4450a5681beafa5e3a899ac28bd17bf5a4877dab37bcd834e1634);\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/hash.nr"},"199":{"source":"use crate::{\n    constants::{CONTRACT_STORAGE_READ_LENGTH, GENERATOR_INDEX__PUBLIC_DATA_READ}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Empty, Serialize}\n};\n\nstruct StorageRead {\n    storage_slot: Field,\n    current_value: Field,\n}\n\nimpl Eq for StorageRead {\n    fn eq(self, other: Self) -> bool {\n        (self.storage_slot == other.storage_slot) & (self.current_value == other.current_value)\n    }\n}\n\nimpl Empty for StorageRead {   \n    fn empty() -> Self {\n        Self {\n            storage_slot: 0,\n            current_value: 0,\n        }\n    }\n}\n\nimpl Hash for StorageRead {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_DATA_READ)\n    }\n}\n\nimpl Serialize<CONTRACT_STORAGE_READ_LENGTH> for StorageRead {\n    fn serialize(self) -> [Field; CONTRACT_STORAGE_READ_LENGTH] {\n        [self.storage_slot, self.current_value]\n    }\n}\n\nimpl Deserialize<CONTRACT_STORAGE_READ_LENGTH> for StorageRead {\n    fn deserialize(serialized: [Field; CONTRACT_STORAGE_READ_LENGTH]) -> Self {\n        Self {\n            storage_slot: serialized[0],\n            current_value: serialized[1],\n        }\n    }\n}\n\nimpl StorageRead {\n    pub fn is_empty(self) -> bool {\n        self.storage_slot == 0\n    }\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/contrakt/storage_read.nr"},"225":{"source":"use dep::aztec::{\n    note::{note_header::NoteHeader, note_interface::NoteInterface, utils::compute_note_hash_for_consumption},\n    oracle::{nullifier_key::get_nullifier_secret_key, get_public_key::get_public_key},\n    log::emit_encrypted_log, hash::pedersen_hash, context::PrivateContext,\n    protocol_types::{address::AztecAddress, traits::Empty}\n};\n\n// Shows how to create a custom note\n\nglobal CARD_NOTE_LEN: Field = 3;\n\n// docs:start:state_vars-CardNote\nstruct CardNote {\n    points: u8,\n    randomness: Field,\n    owner: AztecAddress,\n    header: NoteHeader,\n}\n// docs:end:state_vars-CardNote\n\nimpl CardNote {\n    pub fn new(points: u8, randomness: Field, owner: AztecAddress) -> Self {\n        CardNote { points, randomness, owner, header: NoteHeader::empty() }\n    }\n}\n\nimpl NoteInterface<CARD_NOTE_LEN> for CardNote {\n    fn serialize_content(self) -> [Field; CARD_NOTE_LEN] {\n        [self.points as Field, self.randomness, self.owner.to_field()]\n    }\n\n    fn deserialize_content(serialized_note: [Field; CARD_NOTE_LEN]) -> Self {\n        CardNote {\n            points: serialized_note[0] as u8,\n            randomness: serialized_note[1],\n            owner: AztecAddress::from_field(serialized_note[2]),\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_content_hash(self) -> Field {\n        pedersen_hash(self.serialize_content(), 0)\n    }\n\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.owner);\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.high,\n            secret.low,\n        ],0)\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn get_header(note: CardNote) -> NoteHeader {\n        note.header\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            Self::get_note_type_id(),\n            encryption_pub_key,\n            self.serialize_content(),\n        );\n    }\n\n    fn get_note_type_id() -> Field {\n        // TODO(#4519): autogenerate\n        // python -c \"print(int(''.join(str(ord(c)) for c in 'CardNote')))\"\n        679711410078111116101\n    }\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-contracts/contracts/docs_example_contract/src/types/card_note.nr"},"226":{"source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\n\n// Shows how to create a custom struct in Public\nstruct Leader {\n    account: AztecAddress,\n    points: u8,\n}\n\nglobal LEADER_SERIALIZED_LEN: Field = 2;\n\nimpl Deserialize<LEADER_SERIALIZED_LEN> for Leader {\n    fn deserialize(fields: [Field; LEADER_SERIALIZED_LEN]) -> Self {\n        Leader { account: AztecAddress::from_field(fields[0]), points: fields[1] as u8 }\n    }\n}\n\nimpl Serialize<LEADER_SERIALIZED_LEN> for Leader {\n    fn serialize(self) -> [Field; LEADER_SERIALIZED_LEN] {\n        [self.account.to_field(), self.points as Field]\n    }\n}\n\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-contracts/contracts/docs_example_contract/src/types/leader.nr"},"229":{"source":"mod options;\nmod types;\n\n// Following is a very simple game to show case use of singleton in as minimalistic way as possible\n// It also serves as an e2e test that you can read and then replace the singleton in the same call\n// (tests ordering in the circuit)\n\n// you have a card (singleton). Anyone can create a bigger card. Whoever is bigger will be the leader.\n// it also has dummy methods and other examples used for documentation e.g. \n// how to create custom notes, a custom struct for public state, a custom note that may be unencrypted\n// also has `options.nr` which shows various ways of using `NoteGetterOptions` to query notes\n// it also shows what our macros do behind the scenes!\n\ncontract DocsExample {\n    // how to import dependencies defined in your workspace\n    use dep::aztec::protocol_types::{\n        abis::function_selector::FunctionSelector,\n        address::AztecAddress,\n    };\n    use dep::aztec::{\n        note::{\n            note_header::NoteHeader,\n            note_getter_options::{NoteGetterOptions, Comparator},\n            note_viewer_options::{NoteViewerOptions},\n            utils as note_utils,\n        },\n        context::{PrivateContext, PublicContext, Context},\n        state_vars::{map::Map, public_state::PublicState,singleton::Singleton, immutable_singleton::ImmutableSingleton, set::Set, stable_public_state::StablePublicState},\n    };\n    // how to import methods from other files/folders within your workspace\n    use crate::options::create_account_card_getter_options;\n    use crate::types::{\n        card_note::CardNote,\n        leader::Leader,\n    };\n\n    struct Storage {\n        // Shows how to create a custom struct in PublicState\n        // docs:start:storage-leader-declaration\n        leader: PublicState<Leader>,\n        // docs:end:storage-leader-declaration\n        // docs:start:storage-singleton-declaration\n        legendary_card: Singleton<CardNote>,\n        // docs:end:storage-singleton-declaration\n        // just used for docs example to show how to create a singleton map. \n        // docs:start:storage-map-singleton-declaration\n        profiles: Map<AztecAddress, Singleton<CardNote>>,\n        // docs:end:storage-map-singleton-declaration\n        // docs:start:storage-set-declaration\n        set: Set<CardNote>,\n        // docs:end:storage-set-declaration\n        // docs:start:storage-immutable-singleton-declaration\n        imm_singleton: ImmutableSingleton<CardNote>,\n        // docs:end:storage-immutable-singleton-declaration\n        // docs:start:storage-stable-declaration\n        stable_value: StablePublicState<Leader>,\n        // docs:end:storage-stable-declaration\n        // docs:start:storage-minters-declaration\n        minters: Map<AztecAddress, PublicState<bool>>, \n        // docs:end:storage-minters-declaration\n    }\n\n    impl Storage {\n        fn init(context: Context) -> Self {\n            Storage {\n                // docs:start:storage-leader-init\n                leader: PublicState::new(\n                    context,\n                    1\n                ),\n                // docs:end:storage-leader-init\n                // docs:start:start_vars_singleton\n                legendary_card: Singleton::new(context, 3),\n                // docs:end:start_vars_singleton\n                // just used for docs example (not for game play):\n                // docs:start:state_vars-MapSingleton\n                profiles: Map::new(\n                    context,\n                    4,\n                    |context, slot| {\n                        Singleton::new(context, slot)\n                    },\n                ),\n                // docs:end:state_vars-MapSingleton\n                // docs:start:storage-set-init\n                set: Set::new(context, 5),\n                // docs:end:storage-set-init\n                imm_singleton: ImmutableSingleton::new(context, 6),\n                // docs:start:storage-stable-init\n                stable_value: StablePublicState::new(context, 7),\n                // docs:end:storage-stable-init\n                // docs:start:storage-minters-init\n                minters: Map::new(\n                    context,\n                    8,\n                    |context, slot| {\n                        PublicState::new(context, slot)\n                    },\n                ),\n                // docs:end:storage-minters-init\n            }\n        }\n    }\n\n    #[aztec(private)]\n    fn constructor() {}\n\n    #[aztec(public)]\n    fn initialize_stable(points: u8) {\n        let mut new_leader = Leader { account: context.msg_sender(), points };\n        storage.stable_value.initialize(new_leader);\n    }\n\n    #[aztec(private)]\n    fn match_stable(account: AztecAddress, points: u8) {\n        let expected = Leader { account, points };\n        let read = storage.stable_value.read_private();\n\n        assert(read.account == expected.account, \"Invalid account\");\n        assert(read.points == expected.points, \"Invalid points\");\n    }\n\n    unconstrained fn get_stable() -> pub Leader {\n        storage.stable_value.read_public()\n    }\n\n    // docs:start:initialize-immutable-singleton\n    #[aztec(private)]\n    fn initialize_immutable_singleton(randomness: Field, points: u8) {\n        let mut new_card = CardNote::new(points, randomness, context.msg_sender());\n        storage.imm_singleton.initialize(&mut new_card, true);\n    }\n    // docs:end:initialize-immutable-singleton\n\n    #[aztec(private)]\n    // msg_sender() is 0 at deploy time. So created another function\n    fn initialize_private(randomness: Field, points: u8) {\n        let mut legendary_card = CardNote::new(points, randomness, context.msg_sender());\n        // create and broadcast note\n        storage.legendary_card.initialize(&mut legendary_card, true);\n    }\n\n    #[aztec(private)]\n    fn insert_notes(amounts: [u8; 10]) {\n        for i in 0..amounts.len() {\n            let mut note = CardNote::new(amounts[i], 1, context.msg_sender());\n            storage.set.insert(&mut note, true);\n        }\n    }\n\n    #[aztec(private)]\n    fn insert_note(amount: u8, randomness: Field) {\n        let mut note = CardNote::new(amount, randomness, context.msg_sender());\n        storage.set.insert(&mut note, true);\n    }\n\n    // docs:start:state_vars-NoteGetterOptionsComparatorExampleNoir\n    unconstrained fn read_note(amount: Field, comparator: u3) -> pub [Option<CardNote>; 10] {\n        let options = NoteViewerOptions::new().select(0, amount, Option::some(comparator));\n        let notes = storage.set.view_notes(options);\n\n        notes\n    }\n    // docs:end:state_vars-NoteGetterOptionsComparatorExampleNoir\n\n    #[aztec(private)]\n    fn update_legendary_card(randomness: Field, points: u8) {\n        let mut new_card = CardNote::new(points, randomness, context.msg_sender());\n        storage.legendary_card.replace(&mut new_card, true);\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"update_leader((Field),u8)\"),\n            [context.msg_sender().to_field(), points as Field]\n        );\n    }\n\n    #[aztec(private)]\n    fn increase_legendary_points() {\n        // Ensure `points` > current value\n        // Also serves as a e2e test that you can `get_note()` and then `replace()`\n\n        // docs:start:state_vars-SingletonGet\n        let card = storage.legendary_card.get_note(false);\n        // docs:end:state_vars-SingletonGet\n\n        let points = card.points + 1;\n\n        let mut new_card = CardNote::new(points, card.randomness, context.msg_sender());\n        // docs:start:state_vars-SingletonReplace\n        storage.legendary_card.replace(&mut new_card, true);\n        // docs:end:state_vars-SingletonReplace\n\n        context.call_public_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"update_leader((Field),u8)\"),\n            [context.msg_sender().to_field(), points as Field]\n        );\n    }\n\n    #[aztec(public)]\n    internal fn update_leader(account: AztecAddress, points: u8) {\n        let new_leader = Leader { account, points };\n        storage.leader.write(new_leader);\n    }\n\n    unconstrained fn get_leader() -> pub Leader {\n        storage.leader.read()\n    }\n\n    unconstrained fn get_legendary_card() -> pub CardNote {\n        storage.legendary_card.view_note()\n    }\n\n    // docs:start:singleton_is_initialized\n    unconstrained fn is_legendary_initialized() -> pub bool {\n        storage.legendary_card.is_initialized()\n    }\n    // docs:end:singleton_is_initialized\n\n    // docs:start:get_note-immutable-singleton\n    unconstrained fn get_imm_card() -> pub CardNote {\n        storage.imm_singleton.get_note()\n    }\n    // docs:end:get_note-immutable-singleton\n\n    unconstrained fn view_imm_card() -> pub CardNote {\n        storage.imm_singleton.view_note()\n    }\n\n    unconstrained fn is_imm_initialized() -> pub bool {\n        storage.imm_singleton.is_initialized()\n    }\n\n    /// Macro equivalence section\n    use dep::aztec::hasher::Hasher;\n\n    use dep::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs;\n    use dep::aztec::context::inputs::PrivateContextInputs;\n\n    // docs:start:simple_macro_example\n    #[aztec(private)]\n    fn simple_macro_example(a: Field, b: Field) -> Field {\n        a + b\n    }\n    // docs:end:simple_macro_example\n\n    // docs:start:simple_macro_example_expanded\n    fn simple_macro_example_expanded(\n        // ************************************************************\n        // The private context inputs are made available to the circuit by the kernel\n        // docs:start:context-example-inputs\n        inputs: PrivateContextInputs,\n        // docs:end:context-example-inputs\n        // ************************************************************\n\n        // Our original inputs!\n        a: Field,\n        b: Field // The actual return type of our circuit is the PrivateCircuitPublicInputs struct, this will be the \n        // input to our kernel! \n        // docs:start:context-example-return\n    ) -> distinct pub PrivateCircuitPublicInputs {\n        // docs:end:context-example-return\n        // ************************************************************\n        // The hasher is a structure used to generate a hash of the circuits inputs. \n        // docs:start:context-example-hasher\n        let mut hasher = Hasher::new();\n        hasher.add(a);\n        hasher.add(b);\n        // docs:end:context-example-hasher\n\n        // The context object is created with the inputs and the hash of the inputs\n        // docs:start:context-example-context\n        let mut context = PrivateContext::new(inputs, hasher.hash());\n        // docs:end:context-example-context\n\n        // docs:start:storage-example-context\n        let mut storage = Storage::init(Context::private(&mut context));\n        // docs:end:storage-example-context\n        // ************************************************************\n\n        // Our actual program\n        let result = a + b;\n\n        // ************************************************************\n        // Return values are pushed into the context\n        // docs:start:context-example-context-return\n        context.return_values.push(result);\n        // docs:end:context-example-context-return\n\n        // The context is returned to be consumed by the kernel circuit!\n        // docs:start:context-example-finish\n        context.finish()\n        // docs:end:context-example-finish\n        // ************************************************************\n    }\n    // docs:end:simple_macro_example_expanded\n}\n","path":"/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-contracts/contracts/docs_example_contract/src/main.nr"}}}