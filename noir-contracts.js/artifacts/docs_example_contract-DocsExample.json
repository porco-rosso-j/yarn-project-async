{"transpiled":true,"noir_version":"0.31.0+6237d96a0bc23a5ed656e7ba172fb57facd9c807","name":"DocsExample","functions":[{"name":"get_shared_immutable","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"account","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"types::leader::Leader"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/7VUTVPCMBBNWygt5UM96cmcPRUuegQ9efHgwXuhERm1mUnLjP55RjJm4ZEWRqG8mTSbdPft5nUbh/3CMUOjybbhsjIcejRYNVzL2cVAg0uwr8w8Vir55vMsFV9cLgouX/lELrI0x8Dr/wSuU96YOYBovhojY8fH4C4e+jY5oLUavrEj8HNhzzF7ntk7r/Brr0bP2DNR3H/I6fvT4nMiFOpTJTZnZWi2iw3bg8wKlUyLcZoqkW8p7lUwLncwtoHxLZlnjylGNQ5jehEqn8sMo5p/ZNJq+GCTX2CtR8aOj8Ot5m3VzzvUvB3DxWvkjVi5bR1rzcGmGnRMWH89A/3VI8OVF1IlM/EsknUTOVCu3eh4jZH85IM3lQc23lQ+2K2KuOWeOQBeXqMc+jwh1MBhTfkCqL3G3PGpWk6fqWu4moab6u+A7uRDl/wZKwO5qE7qD+LsglZd0OwEZxto3t6JNOtbmlH9PdCsD7n3adbfoVkHdCKtyNcFP9RR74ew1qB/j/zwfcTKPRxVcEds83+GsOdZufS7H6lU24/LCAAA","debug_symbols":"7ZnRaoMwFIbfJdcykpzk5NhXGWPY1g6h2NLawSh999nVaIdn9cKLJVuuJPr7++W7OULOYl0uT2+vVb3ZHcXi+Sy2u1XRVLu6XZ2FfMKvm8d9UV/Xx6Y4NGIhM1HW6/Z6ycSm2pZiAQYv2SjntOuSzlCfJbq8ZG21m1VNqkuSxFE1zakm6KsZ6nxWtdO+msbVSnLdiGS6l9BpPfEFlVvs0lrKgUeZnEtb8OjKor0nYsIA4MNGqsdhBL9TpKFXgWayBjyyse5b9qZF/U8tQD5rUDFadNLCaYGkhdNikhZOi01aOC2YtHBaXNLCaaE/pEW5XgvO1JInLYwW/Qt/ucoOWvDxTo0iT6/dHUbe0auo6XXU9BA1vYma3kZNj1HTu7Dpoac3HD1FTZ/HTA+Bz9oJ+sBn7QR94LN2gj7wWTtBH/isHegtMPSBz9oJ+sBn7c/07eq9OFTFclteTz+uD0/1yh+GtMvmY3970mY/AQ=="},{"name":"get_imm_card","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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"},{"name":"get_leader","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"account","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"types::leader::Leader"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/7VUTVPCMBBNWygt5UM96cmcPRVOHkFPXjx48F5oREZtZtIyo3+ekWgWHmlhFMqbCdmku283j00c9gvHDI0m24bLynDop8Gq4VrOLgYaXIJ9ZeaxUskXn2ep+ORyUXD5widykaU5Bl7/J3Cd8sbMAUTz1RgZOz4Gt/HQt8kBrdXwjR2Bnwt7jtnzzN55hV97NXrGnoni7l1O3x4XHxOhUJ8qsTkrQ7NdbNjuZVaoZFqM01SJfEtxr4JxuYOxDYyvyTx7SDGqcRjTs1D5XGYY1fwjk1bDB5v8Ams9MnZ8HAaat1U/71DzdgwXr5E3YuW2daw1B5tq0DFh/fUM9L8eGa68kCqZiSeRrJvIgXLtRsdnjOQnH3ypPLDxpfLBblXELffMAfDyGuXQ5wmhBg5ryhdA7TXmjk/VcvpMXcPVNNxUfwd0Jx965M9YGchFdVJ/EGcXtOqCZic428/1751Is76lGdXfA836kHufZv0dmnVAJ9KKfF3wQx31fghrDbp75IffI1bu4aiCO2Kb+xnCnmfl0t++AQfchgjLCAAA","debug_symbols":"7ZnBboJAEIbfZc+kYXZ2ZwdfpWkaqtiQGDSKTRrjuxcrizaOcuDQ3XZPsPDz8/FdhmQPalG97d9f62a53qnZ80Gt1vOyrddNtzqo/Im+L+42ZXNa79py26pZnqmqWXTHY6aW9apSMzR0zG5yTrs+6QwPWebjS9ZVu0nVDH2Sc7qp5inVjEO1QF1MqnbaV/NtNeRSN0BBpn+qO2c78g6w7HGAtBnScCeNQ9qSvWYSwojowyaHx2FC/610xQyohaxB6rPGuh/Zsxj4r2KQfdYQCGJ0EiOLwSRGFmOSGFmMTWJkMZTEyGJcEiOL4T8lBtwghiaKKZIYUYz+lT9fsBcx9PhbDbDn1+4Ko+j5IXJ+HTk/Rs5vIue3kfNT5PwudH4c+I3Ez5HzF3HzY/Dzd4Q/+Pk7wh/8/B3hD37+jvAHP38v/BYF/uDn7wh/8PP3Pn+3+ii3dfm2qk57Jqeb+2but1C6Zfu5Od/psl8="},{"name":"match_shared_immutable","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"account","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"7Z3druRKcp3f5VwPBsxk5E/oVQzDGOvHGEAYCdLIgCHMu5uRvVm75zSrdneRkbVWZV75jFXM9bGik5E7ihHrv3/7p3/+3//1f/7Xn//yL//2n7/9w//479/+9d/+8U9//fO//WX7X//9W0jt/+8///1Pf7H/+Z9//dN//PW3f1j+8Ns//+Wftv/3b3/47V/+/K///Ns/rJL/9ocfPhdz0I+Pxizh9ukQw8Gn1yLx49NrXfSLT6uofHxaU1pvn46y/O1//uG3kFnBSz9wCSV8fFriGk6C1zPga43L7TtM+fZplba2+q0dl6O1RcO6fzWa4ldf+xrL/rVL/VQIogefLmn/Hmv9XLkuv/6dx0DMHnuzq+4fDstav4c3nBULR7BwEhZOxsIpWDgVC0ehcNYFCydg4fR/KuflhlPl9zgrFk73p3JIy40nJX2ccbdzW9o/HOPn0rGsRyBJ6g6SyufpLx59eN1Q9zPUltc/PxyPPhx0P1du/1m+/7B9iWl+iee/xDy/xPNfYplf4vkvsc4v8We+xHj7a2hdw/L7L1Hnl3j6S5Rlfok/8yWuMd2+RFkefzjW23ko1hK/+PB6+zq2ctLvHxQSZnheHJ4cbuGp+vjDJe33V74nXlsk44zkm0RynZF8k0jKjOSLI6m3n14klhORnH8fv0sk5x/pL46k1Fsk0/d3+O1AOv/8hw7PLCxAh2eWLJDDk2Yx5MXhyXF/KyjmHB5/ONS0xyXUIr+P5aycvE8sZ+2EKZaqt5WXUJ//UyDNQsuQYZcZ9hHDPks4RGGPS5Rb2FM8EfZZ7xky7LOO5BB23VeOunzxKH78u3OadaRXh+ei37jSLDm9SSTzrE69OpIX/caVZ23qXSI5K1MvjuTDgn6eFSTo8MgMD3J4ZkUGOjyzcvLi8Fz3C1ee5ZD3ieWsnTDF8qrfL/IstIwY9jKrMkOGfZZwiMJ+2c9WZdZ7hgz7rCNdH3Ytt77kZSlnTtxFZniQwzPrSC8Oz2WnnllyepdIzoLTu0RylpveJZKzgvTaSF7290KdRaF3ieSs8/xcJG+/VG6BlK/+4L9sPlKd9ZhXh+eitxvrLLG8SyRlRvJNIjkLN6+O5EXvqdZZuHmXSM7CzYsj+fClvDqrMdDhmSUW5PDorJtAh2cWQ14cnuveUtVZOXmfWM7aCVMsr/q9SGWGfcSwz6rMkGGfJRyisF/2A6TOes+QYZ91JIewXzYfSWcd6dXhueg3rrDMmtPbhHLWp14dyot+5QrLLE+9TShnderFoXxY1A+LzPhAx2fWe7DjMwsz2PGZFZQXx+e6X7rCMusibxTMWUVhCuZVv2SEMEsuY8Z91mfGjPss5hDF/bLfsEKYlZ8x4y4z7pfH/bp5PCHMihJ2fGZF6cXxue7oM4tPbxPKWXp6m1DOwtO7hDLOWtJrQ3ndnw1xlofeJpQvqPjc/i4OOS8koQy6v/q2/efvXzINcZ3f4gXfosxv8YJvMc1v8YJvMc9v8We+xai3rLWG5Ydvscxv8YJvsc5v8aeOW27O6w9bTELUGZ8Xx+eqxoR1maF8l1CGGcp3CeX8I/XVobyqx2Sdfym/TShlhvK1oXz8Ov06CwHY8ZklBuz4zOIFdnxmWeTF8bmww2SdNZT3CabMKgpTMC97xUNmyWXMuM/6zJhxn8Ucorhf99KQyIz7kHGfFSWHuF826zDIrCi9Oj5X/eQls/j0NqGcdapXh/Kqn7xkVqneJZRp1qheHMrH1f00a0nY8Zk1H+z4zNoMdnxkxue18bnwB680CyNvFMxZRWEK5mW/ZqRZchkz7rM+M2bcZzGHKO7X/YqVZ+VnzLjPitL1cb9wmF6eFSXs+MyK0ovjc9nRJ8sM5buEcpae3iaUs/D0NqGctaTXhvLCPxtmeehtQjkrPj8XSjeL9sfvr5ZZmXl1fK566bHMYsvbhHLWZd4mlLOE8+pQXvX+apEZyncJ5SzhvDiUj1/VK7Mugx2fWWzBjs+soGDHZ5ZFXhyfC99erbOG8kbBnFUUpmBe9vNRnSWXMeM+6zNjxl1m3Hnift0PknVWfsaM+6woOcT9ukFKdVaUXh2fq37yqrP49DahnHWqV4fyqp+8dFap3iaUs0b14lA+ru7rrCVhx2fWfLDjIzM+0PGZNZQXx+fCH7x0FkbeKJizisIUzMt+zdBZchkz7rM+M2Lc4zKLOURxv+xXrO1fzYz7kHGfFaXr437doJ64zIoSdnxkxue18bnu6DOLT28Tyll6eptQzsLT24Ry1pJeG8oL/2yY5aF3CWXoX/HJ9Radsuj3oWxAAQ0oogH1/6OwBLkBreUHIEEDSmhA/U+kpdbbH67hR6CCBtT/dFBy+QSqPwApGFDs/6TWZX/fdzsGhh+AAhpQRANa0YC6P6nj5zDJ+P0wycOD2wby8dm0fHdsW+vBZ/X22bAs6e8+3O40DXOneZg7LW9zp2EJy+1W48Gt1nFuVYe51XV5o636eadp+fFOw1veaTmIaYS+05T235WzpK/++epn3UTT+vnp9O1O12HuVPrf6fJ5p+WrO133v6RS/izorIfl21vHXqj197WfNY1xm3mM2yxj3GYd4zZ1iNuUZYzbDGPcZhzjNtcxblPGuM0xTkEyxilIxjgFyRinIBnjFJTGOAWlMU5BaYxTUBrjFJRkjNsc4xSUxjgFpTFOQWmMU1Aa4xSUxzgF5TFOQXmMU1Ae4xTU32b+Nbc5xikoj3EKymOcgvIYp6A8ximojHEKKmOcgsoYp6Ayximov1Pra25zjFNQGeMUVMY4BZUxTkFljFNQHeMUVMc4BdUxTkF1jFNQf4uz19zmGKegOsYpqI5xCqpjnILqGKcgHeMUpGOcgnSMU5COcQrqbybymtvEPgWVW4Pg91NX1m/TORX7aPOYHfu8Ute9KbbW8MU/r8e9lop9YrnwRrHPLJfd6Lpgn1ouvFHsc8uFN4p9crnwRrHPLhfeqIxyo9jnlwtvFPuwc+GNDnIyWpdBTkbrMsrJKIxyMgqjnIzCKCejMMrJqP8w21fd6CgnozDKySiMcjIKo5yMwignozjKySiOcjKKo5yM4igno1cMj37NjY5yMoqjnIziKCejOMrJKI5yMlpHORmto5yM1lFORusoJyPwedEX3ugoJyPwmdEX3ugoJyPwudEX3ugoJyPw2dEX3ugoJyPw+dEX3ugoJyPwGdIX3ugoJyPwOdIX3ugoJyPwWdIX3ugoJyPwedIX3ugoJyPwmdIX3ugoJyPwudIX3ugoJyPw2dIX3ugoJyPw+dIX3ugoJyPwGdMX3ugoJyPwOdMX3ugoJyPwWdMX3ugoJyPwedMX3ugoJyPwmdMX3ugoJyPwudMX3ugoJyPw2dMX3ugoJyPw+dMX3ugoJyPwGdQX3ugoJyPwOdQX3ugoJyPwWdQX3ugoJyPwedQX3ugoJyPwmdQX3ugoJyPwudQX3ugoJyPw2dQX3ugoJyPw+dQX3ugoJyPwGdUX3ugoJyPwOdUX3ugoJyPwsdYX3ugoJ6NRZmCvo8zAllFmYMsoM7BllBnYMsoMbFlklBsd5GQko8zAllFmYMsoM7BllBnYMsoMbBllBraMMgNbRpmBLaPMwJZRZmDLKDOwZZQZ2DLKDGwZZQa2jDIDW0aZgS2jzMCWUWZgyygzsGWUGdgyygxsGWUGtowyA1tGmYEto8zAllFmYMsoM7BllBnYMsoMbBllBraMMgNbRpmBLaPMwJZRZmDLKDOwZZQZ2DLKDGwZZQa2jDIDW0aZgS2jzMCWUWZgyygzsGWUGdgyygxsGWUGtowyA1tGmYEto8zAllFmYMsoM7BllBnYMsoMbBllBraMMgNbRpmBLaPMwJZRZmDLKDOwZZQZ2DLKDGwZZQa2jDIDW0aZgS2jzMCWUWZgyygzsGWUGdgyygxsGWUGtowyA1tGmYEto8zAllFmYMsoM7BllBnYMsoMbBllBraMMgNbRpmBLaPMwJZRZmDLKDOwZZQZ2DLKDGwZZQa2jDIDW0aZgS2jzMCWUWZgyygzsGWUGdgyygxsecEM7Ch650Y3oNR/VnVJcvsy4+PvXbeH98dnNX3/ZcoHfGCG737S0Lz/Mw5LlR/+JaxgPN3zdth2ww6Ukj4Ob4ifGz3Gz6VjWY9AktQdJJXPZ0g8+vC6oX58eN3+EX1++OiBs25PnP3DQcv3H27fYprf4gXfYp7f4gXfYpnf4gXfYp3f4s98i/GWftc1LD98izq/xfPfYv953pzf4hrT7VuU5fGHY70di2It8YsPr7evI67hh2dF/zHkMz6/+/JyuMWn6uMPl7TfX/meeP0WyjhD+S6hXGco3yWUMkP54lDqrbwlsZwJ5fxL+W1COf9cf3Eopd5Cmb6/w49j6SwEYMdnlhiw4zOLF9DxibMs8uL45Bj3D+ccHn841LTHJdQiPwRz1lDeKJizisIUTNXbykuoJ/4iiLPkMmbcZcZ9yLjPYg5R3OMS5Rb3FM/EfVZ+xoz7rCg5xF33laMuXzyNv/ghOs6K0qvjc9VPXnEWn94llOusU706lFf95LXOKtXbhHLWqF4cysfV/XXWkrDjIzM+0PGZtRns+Mwayovjc+EPXussjLxRMGcVhSmYl/2asc6Sy5Bxl1mfGTPus5hDFPfrfsWSWfkZM+6zonR93LXcOpeXpZw6d/c3cZ7x+aX4zIrSi+Nz3dFnFp/eJpSz9PQ2oZyFp7cJ5awlvTaU1/3ZkGZ56G1COSs+PxfK2y+XWyTlq7/8rxuklGZl5tXxueqlxzSLLW8TSpmhfJdQzhLOq0N51furaZZw3iaUs4Tz4lA+flUvzboMdnxmsQU6PnlWULDjM8siL47PhW+v5llDeaNgzioKUzAv+/koy4z7kHGf9Zkx4z6LOURxv+4HyTwrP2PGfVaUHOJ+3SClPCtKr47PVT95lVl8eptQzjrVq0N51U9eZVap3iaUs0b14lA+ru4XmfGBjs+s+WDHZ9ZmsOMzaygvjs+FP3iVWRh5o2DOKgpTMC/7NaPOksuYcZ/1mTHjPos5RHG/7lesOis/Y8ZdZtwvj/uFg3rqrChhx2dWlF4cn+uOPrP49DahnKWntwnlLDy9Syh11pJeG8rr/mzQWR56m1C+oOJz+7s45LyQhDLo/urb9p8/vGWq6/wWL/gWZX6LF3yLaX6LF3yLeX6LP/MtRr1lrTUsP3yLZX6LF3yLdX6LP3XccjNpf9xjojrj8+L4XNSYkJdlhvJdQhlmKN8llPOP1FeH8qIek7zMv5TfJpQyQ/naUD58nT4vsxCAHZ9ZYsCOzyxeYMdnlkVeHJ/rOkzyMmso7xPMMKsoTMG86hWPHGbJZcy4z/rMmHGfxRyiuF/20lAOMuM+ZNxnRckh7pcNO8xhVpReHZ+rfvIKs/j0NqGcdapXh/Kqn7zCrFK9SyjjrFG9OJSPq/tx1pKw4zNrPtjxmbUZ7PjIjM9r43PhD15xFkbeKJizisIUzMt+zYiz5DJm3Gd9Zsy4z2IOUdyv+xVrnZWfMeM+K0rXx/26YXp5nRUl7PjMitKL43PZ0WeVGcp3CeUsPb1NKGfh6W1COWtJrw3lhX82zPLQ24RyVnx+LpRuJu2P31+VWZl5dXyueulRZrHlbUI56zJvE8pZwnl1KK96f1VkhvJdQjlLOC8O5eNX9WTWZbDjM4st2PGZFRTs+MyyyIvjc+Hbq2nWUN4omLOKwhTMy34+SrPkMmbcZ31mzLjLjDtP3K/7QTLNys+YcZ8VJYe4XzdIKc2K0qvjc9VPXmkWn94mlLNO9epQXvWTV55VqrcJ5axRvTiUj6v7edaSsOMzaz7Y8ZEZH+j4zBrKi+Nz4Q9eeRZG3iiYs4rCFMzLfs3Is+QyZtxnfWbIuJdZzCGK+3W/YpVZ+Rkz7rOidH3cLxzUU2ZFCTs+MuPz2vhcd/SZxae3CeUsPb1NKGfh6W1COWtJrw3lhX82zPLQu4Sy9q/45HqLTln0+1A2oIAGFNGA+v9RWILcgNbyA5CgASU0oP4n0lLr7Q/X8CNQQQPqfzoouXwC1R+AFAxI+z+pddnf992OgeEHoIAGFNGAVjSg7k/q+DlMMn4/TPLw4LaBfHw2Ld8d29Z68Fm9fTYsS/q7D7c7TcPcaR7mTsvb3GlYwnK71Xhwq3WcW9VRbrUsyxtt1c87TcuPdxre8k7LQUwj9J2mtP+unCV99c9XP+smmtbPT6dvd7oOc6fS/06XzzstX93puv8llfJnQWc9LN/eOvZCrb+r/ZQljXGbeYzbLGPcZh3jNnWI2wzLGLcZxrjNOMZtrmPcpoxxm2OcgsIYp6AwxikojHEKCmOcguIYp6A4xikojnEKimOcgqKMcZtjnILiGKegOMYpKI5xCopjnILWMU5B6xinoHWMU9A6ximov838a25zjFPQOsYpaB3jFLSOcQpaxzgFyRinIBnjFCRjnIJkjFNQf6fW19zmGKcgGeMUJGOcgmSMU5CMcQpKY5yC0hinoDTGKSiNcQrqb3H2mtsc4xSUxjgFpTFOQWmMU1Aa4xSUxzgF5TFOQXmMU1Ae4xTU30zkNbeJfQoqtwbB76eurPEbO/bR5jE79nmlrntTbK3hi39ej3stM/aJ5cIbxT6zXHejBfvUcuGNYp9bLrxR7JPLhTeKfXa58EZllBvFPr9ceKPYh50Lb3SUk1EZ5WRURjkZ1VFORnWUk1Ed5WRURzkZ9R9m+6obHeVkVEc5GdVRTkZ1lJNRHeVkpKOcjHSUk5GOcjLSUU5Grxge/ZobHeVkpKOcjHSUk5GOcjLSQU5GdRnkZFSXQU5GdRnkZFSXQU5GdZFRbnSQk1EFnxl94Y0OcjKq4HOjL7zRUU5G4LOjL7zRUU5G4POjL7zRUU5G4DOkL7zRUU5G4HOkL7zRUU5G4LOkL7zRUU5G4POkL7zRUU5G4DOlL7zRUU5G4HOlL7zRUU5G4LOlL7zRUU5G4POlL7zRUU5G4DOmL7zRUU5G4HOmL7zRUU5G4LOmL7zRUU5G4POmL7zRUU5G4DOnL7zRUU5G4HOnL7zRUU5G4LOnL7zRUU5G4POnL7zRUU5G4DOoL7zRUU5G4HOoL7zRUU5G4LOoL7zRUU5G4POoL7zRUU5G4DOpL7zRUU5G4HOpL7zRUU5G4LOpL7zRUU5G4POpL7zRUU5G4DOqL7zRUU5G4HOqL7zRUU5G4GOtL7zRUU5Go8zArqPMwK6jzMCuo8zArqPMwK6jzMCuo8zArqPMwK6jzMCuo8zArqPMwK6jzMCuo8zArqPMwK6jzMCuo8zArqPMwK6jzMCuo8zArqPMwK6jzMCuo8zArqPMwK6jzMCuo8zArqPMwK6jzMCuo8zArqPMwK6jzMCuo8zArqPMwNZRZmDrKDOwdZQZ2DrKDGxdZJQbHeRkpKPMwNZRZmDrKDOwdZQZ2DrKDGwdZQa2jjIDW0eZga2jzMDWUWZg6ygzsHWUGdg6ygxsHWUGto4yA1tHmYGto8zA1lFmYOsoM7B1lBnYOsoMbB1lBraOMgNbR5mBraPMwNZRZmDrKDOwdZQZ2DrKDGwdZQa2jjIDW0eZga2jzMDWUWZg6ygzsHWUGdg6ygxsHWUGto4yA1tHmYGto8zA1lFmYOsoM7B1lBnYOsoMbB1lBraOMgNbR5mBraPMwNZRZmDrKDOwdZQZ2DrKDGwdZQa2jjIDW0eZga2jzMDWUWZg6ygzsHWUGdg6ygxsHWUGto4yA1tfMAM7it65UQO6ZFZ1WvIukWL9AkjWui/93fezbp9tPAGMJ4LxrGA8AsaTwHgyGE8B46lgPIrFc29ibtkzUlqWv+dpVx0+RdOy6u2qrL+/ao1/PH6Du4SdsJRPwrDd2cdV5amr6lNX6TNXHb/1+uVV4amr4lNXHT7Xa5D94BEPr5KnrkpPXZWfuqo8dVV96ip95qrj935q3Td81Xh0VXjqqvjUVetTV8lTV6WnrspPXXX4b0OX8HGVhuXoqvrUVfrMVce/fH55VXjqqvjUVetTVx3+29C47xRdj3bK8U8vX16Vn7qqPHVVfeoqfeaq49rvl1eFL66So3gdVyW/vGp96qrjfxtp38tbifToqvTUVfmpq8pTV9WnrtJnrjr+q/rLq47/bdT9qBeWVP/usj/8yoc/NGIHjbWDhnTQSB00cgeN0kGjdtBQf43jv7cu1uiwz2uHfV477PPaYZ/XDvu8dtjntcM+rx32ee2wz7XDPtcO+1w77HPtsM+1wz7X8/sjpVsFrXz+EhRL2iWqu0RYzv+zSjXuGrUeasQOGmsHDemgkTpo/Gr62K8rz10XV/9/x1E6aKQOGrmDRumgccGzS/cfv/OSDjXUX2NdOmiEDhqxg8YF+1zDTSMfakgHjdRBI3fQKB00agcN9c+JsnTQ6HDWkg5nLelw1pIOZy3pcNaS3EGjdNCoHTQ67PPUYZ+nDvs8ddjnqcM+Tx32eeqwz1OHfZ467PPUYZ+nDvs8d9jnucM+zx32ee6wz3OHfZ477PPcYZ/nDvs8d9jnucM+Lx32eemwz0uHfV467PPSYZ+XDvu8dNjnxXuf1z8eKmyHrr3nYzu3lM/LjnpQatoVvm9XOfxoCHV/VTnE716P3P7zG02FolEommP/pdfhBCyciIWzYuEIFk7CwslYOFjP5ID1UA5YT+WI9VSOWE/liPVUjlhP5Yj1VI5YT+Xo+FT+UCjuCuefnd81V6zL2a9UoXDWBQsnYOFELJwVC0ewcBIWTsbCKVg4WE/lFeupLFhPZcF6KgvWU1mwnsqC9VQWrKeyYD2VxfGp/KFQ3RXUWyEt7grBXSG6K6zuCuKukNwVsruC+57O5/+1hmXZW5PDEuKBRuygcT7aIcrnEzYf/Pmf1f8+ytJBo0PMi1ygkfWm8d2ouk+N1EEjd9AoHTRqB40r9kcOnxrlR426dNAIHTRiB421g4Z00EgdNHIHjdJBo3bQuGCfh9tgre2/Ds4lunTQCB00YgeNtYOGdNBIHTRyB43SQeOCfR5KvGl8/zbZTUP9NbaDZA+R1f+vgzvt4leLpB4iuYeIdhC54C27nxAJPURiDxHvfSLL8Suq5XZRKV8UQmW5jbyN6fFH6+25oIv87buK6a+WVzfsyomtnNjH+5aAO5ByR1LulZRbSLkTKXcm5SbNloE0XQbSfBlJ82UkzZeRNF9G0nwZSfNlJM2X0S1ffqxfnNc/nX9u47YlycH66rv+ujivH5zXj87rn36O3Rpppa4H64vz+sl5/ey8/tn9m5a9pJSWerB+dV5ffdeXxXn94Lz+2X+fKe4f/d7E6nP97Lz+2fjmm9tVTvHH9dPivL7z95NO799bSTilcrB+dV5ffdfPi/P6wXn96Lz+6ry+OK+fnNfPzutfuH9zPli/Oq9/fv/enm/lYP1yev9+uh0erh+c14/O65/dv/n2/mde9GB9cV4/Oa+fndcvzuuf3r+fw5/DcrC++q5fF+f1g/P60Xn91Xl9cV4/Oa+fndcvF65/sH9rdV7//P7d30/L8WB9Pb1/bwXK4/WD8/rRef3T+ffx348qzusn5/Wz8/rFef3qvL5zfePOa5kXCaQ7b4GFvN7ees3pi587giz7Iy5ICD9K3Hn379c0pN40yle/v1w1LSfde4+IhD0Ss6/E7ELMnojZMzF7IWavxOzKyx6J82okzquROK9G4rwaifNqJM6rkTivRuK8GonzakTJq99wVpRU+YHTOftdNt4q3XujjIR9JWYXYvZEzJ6J2QsxeyVmV152WYjZifOqEOdVIc6rQpxXhTivCnFeFeK8KsR5VYjzakLJqx84KKnyAwcl+33goCS0DxyUHPWBg5J2PnBQMskHDkpy+MBBed5/4KA8wr/hZKyncu680R+PD073+jNeCdT5n/PjMVrpXgfCC7+hEtGAVjSg3Bvo0cDmdK8L4ZVAFQ1IwYDqggbU/Tn0aDpxutd68UqgFQ1I0IASGlBGAypoQBUNSMGAdEED6v2kfjjDOt1rsnkl0IoGJGhACQ0oowEVNKCKBqRgQPdm0DsSPRpY34gCHFGEI0pgJZl7c/NfSVTgiNAKaaF3r91PEEU4ohWOSOCIsJ5HhdJpYcNmHB29YTNOjt6wKZ0WjJtxcrRxM06ONm7GydHGLaTcjJOjjZvRacG4SbMlpdOCcZPmS0qnBeMmzZeUTgvGTZovKZ0WjJs0X7o6Ldj6xXl9T6cFW19913d1WrD1g/P60Xl9T6cFW1+c10/O62fn9T2dFmz96ry++q7v6rRg6wfn9T2dFmz97Ly+5yTCbX1XpwVb3/n7cXVasPWr8/rqu76r04KtH5zXj87rr87ri/P6yXn97Ly+p9OCrV+d1/d0WrAfmTydFmz94Lx+dF7f02nB1hfn9ZPz+tl5/eK8vqfTgq2vvuu7Oi3Y+sF5/ei8/uq8vjivn5zXz87rezot2PrVeX1PpwV77cDTacHWD87rR+f1PZ0WbH1xXj85r5+d1y/O61fn9Z3rG75OCzm7Oy1sErROC8bOOhHa2FknQhs760RoYxdidtaJ0MbOOhHa2FknQhs760RoY2d1WtjYaZ0WjJ04r9I6LRg7cV6ldVowduK8Suu0YOzEeZXWacHYgZwWNhwkpwXDYZ0IbeysE6GNnXUitLELMTvrRGhjZ50IbeysE6GNnXUitLGzToTe2GmdFoydOK/SOi0YO3FepXVaMHbivErrtGDsxHmV1mnB2InzKpLTguEAOS0YDpDTguEAOS0YDkqO+sABclowHCCnBcMBclowHCCnBcMBclrYcJCcFgyn80Z/PJTegKCcFgwIakCcvUAF5bRgQFBOCwYE5bRgQFBOCwYE5bRgQFBOCwYE5bSwAWE5LRgQlNOCAUE5LRgQlNOCAQkaEJTTggFBOS0YEJTTggFBOS0YEJTTwgaE5bRgQFBOCwYE5bRgQFBOCwYkaEBQTgsGBOW0YEBQTgsGBOW0YEBQTgutUQjKaaERQTktNCIop4VGBDXZvBFBOS00IiinhUaEVkgDc1poRFBOC40IymmhEQkcEdTzqKzuPbabBG2PrbGz9gIZO2svkLGz9gIZuxCzs/YCGTtrL5Cxs/YCGTtrL5Cxs/bYbuy0PbbGTpxXaXtsjZ04r9L22Bo7cV6l7bE1duK8Sttja+xAPbYbDlKPreGw9gIZO2svkLGz9gIZuxCzs/YCGTtrL5Cxs/YCGTtrL5Cxs/YCbey0PbbGTpxXaXtsjZ04r9L22Bo7cV6l7bE1duK8Sttja+zEeRWpx9ZwgHpsDQeox9ZwgHpsDQclR33gAPXYGg5Qj63hAPXYGg5Qj63hAPXYbjhIPbaG03mjP25HNCCoHlsDgno10F6gguqxNSCoHlsDguqxNSCoHlsDguqxNSCoHlsDguqx3YCwemwNCKrH1oCgemwNCKrH1oAEDQiqx9aAoHpsDQiqx9aAoHpsDQiqx3YDwuqxNSCoHlsDguqxNSCoHlsDEjQgqB5bA4LqsTUgqB5bA4LqsTUgqB7b1igE1WPbiKB6bBsRVI9tI0LraQPrsW1EUD22jQitkAbWY9uIoHpsGxFUj20jEjgiqOdRDX886yMsyw4j8QuWentY6yKfH11/+RfrDbtyYisndlhIuQMpdyTlXkm5hZQ7kXJnUm7SbBlI02UgzZeRNF9G0nwZSfNlJM2XkTRfRtJ8Gd3y5cf6xXn90/kn7W/NSJKD9dV3/XVxXj84rx+d1z/9HKv7ZpG6Hqwvzusn5/Wz8/pn929aysdH01IP1q/O66vv+rI4rx+c1z/77zPF/aMpHq2fndc/G9+87i+Y5RR/XD8tzus7fz/p9P6V27+fVA7Wr87rq+/6eXFePzivH53XX53XF+f1k/P62Xn9C/dvzgfrV+f1z+/f2/OtHKxfTu/f2/P5eP3gvH50Xv/s/s23roK86MH64rx+cl4/O69fnNc/vX91H2Ocw3KwvvquXxfn9YPz+tF5/dV5fXFePzmvn53XLxeuf7B/a3Ve//z+3d8fyfFgfT29f28FyuP1g/P60Xn90/n38d+PKs7rJ+f1s/P6xXn96ry+c33jzsvHFwlocHda0MDrtKCB12lBA6/TggZepwUNvE4LGnidFjTwOi1o4HVa0MDrtKCB12lBA6/TggZepwUNvE4LGnidFjTwOi1o4HVa0MDrtKCB12lBA6/TggYopwUNUE4LGnidFjTwOi1o4HVa0MDrtKCB12lBA6/TggZepwUNvE4LGnidFjTwOi1o4HVaMHbivErrtGDsxHmV1mlBA6/TgrET51VapwUNvE4LGqCcFgwHyGnBcICcFgwHyGnBcFBy1AcOkNOCBiinBQ1QTgsaoJwWNEA5LWiAclrQAOa0oAHMaUEDmNOCBjCnBQ1gTgsawJwWNIA5LWgAc1rQAOa0oAHMaUEDmNOCBjCnBQ1gTgsawJwWNIA5LWgAc1rQAOa0oAHMaUEDmNOCBjCnBQ1gTgsawJwWNIA5LWgAc1rQAOa0oAHMaUEDmNOCBjCnBQ1gTgsawJwWNKA5LTQiKKeFRgTltNCIoCabNyIop4VGBOW00IjQCmlgTguNCMppoRFBOS00IoEjwnoeVUqnhQ2bcXT0hs04OXrDpnRaMG7GydHGzTg52rgZJ0cbt5ByM06ONm5GpwXjJs2WlE4Lxk2aLymdFoybNF9SOi0YN2m+pHRaMG7SfOnqtGDrF+f1PZ0WbH31Xd/VacHWD87rR+f1PZ0WbH1xXj85r5+d1/d0WrD1q/P66ru+q9OCrR+c1/d0WrD1s/P6npMIt/VdnRZsfefvx9Vpwdavzuur7/quTgu2fnBePzqvvzqvL87rJ+f1s/P6nk4Ltn51Xt/TacF+ZPJ0WrD1g/P60Xl9T6cFW1+c10/O62fn9Yvz+p5OC7a++q7v6rRg6wfn9aPz+qvz+uK8fnJePzuv7+m0YOtX5/U9nRbstQNPpwVbPzivH53X93RasPXFef3kvH52Xr84r1+d13eub/g6LYSluFstmAat10KDZx0K3eBZp0I3eNax0A1emOFZB0M3eNbJ0A2edTR0g2edDd3gWU0XDJ7WdaHBM2dYWt+FBs+cYWmdFxo8c4al9V5o8MwZltZ9ocED2S8YD5L/QuNhHRTd4FknRTd41lHRDV6Y4VmHRTd41mnRDZ51XHSDZ50X3eBZB0YbPK0TQ4NnzrC0XgwNnjnD0roxNHjmDEvrx9DgmTMsrSNDg2fOsEieDI0HyJSh8QC5MjQeIFuGxoOSrXYeIGOGxgPkzNB4gKwZGg+QN0PjATJnMB4kd4bG03m/P55k34ig/BkaEdRcufbeFZRDQyOCsmhoRFAeDY0IyqShEUG5NDQiKJuGRgTl02BEWEYNjQjKqaERQVk1NCIor4ZGJHBEUG4NjQjKrqERQfk1NCIow4ZGBOXYYERYlg2NCMqzoRFBmTY0IijXhkYkcERQvg2NCMq4oRFBOTc0IijrhkYE5d3wrfMIyrzhGxKUe8M3JCj7hm9IUPPSvyFBGTh8Q4JycPiGBFdqA/Nw+IYEZeLwDQnKxeEbkuAhYT2Xgvh38G4avB28Bk/bX2TwtP1FBk/bX2TwwgxP219k8LT9RQZP219k8LT9RQZP28G7wfN28Bo8c4bl7eA1eOYMy9vBa/DMGZa3g9fgmTMsbwevwSN18G48UB28xkPbX2TwtP1FBk/bX2TwwgxP219k8LT9RQZP219k8LT9RQZP21+0wfN28Bo8c4bl7eA1eOYMy9vBa/DMGZa3g9fgmTMsbwevwTNnWKgOXuNB6uA1HqQOXuNB6uA1HpRstfMgdfAaD1IHr/EgdfAaD1IHr/EgdfBuPFAdvMbTeb9/0edoRFgdvEaE9VqhvXeF1cFrRFgdvEaE1cFrRFgdvEaE1cFrRFgdvEaE1cG7EYF18BoRVgevEWF18BoRVgevEQkcEVYHrxFhdfAaEVYHrxFhdfAaEVYH70YE1sFrRFgdvEaE1cFrRFgdvEYkcERYHbxGhNXBa0RYHbxGhNXBa0RYHbyt8wirg7chYXXwNiSsDt6GBNcph9bB25CwOngbElypDa2DtyFhdfA2JKwO3oYkeEhYz6WY73TwJin7ZSmXxxrXveW94VQsHMXCudMK/TqeAMYTwXhWMB4B40lgPBmMB+zpHMAezwHs+RzBns8R7PkcwZ7PEez5HMGezxHs+Rwdn8+7RPGXOP8Uve6VUeNRLJ51AeMJYDwRjGcF4xEwngTGk8F4ChgP2PN5BXs+C9jzWcCezwL2fBaw57OAPZ8F7PksYM9ncXw+7xLVX0LdJdLiLxH8JaK/xOovIf4SyV8i+0v47+58/h/tFy/Xm0jsIXI+5F//JJe1w52UpYdIj8AXuUDk4QvuJpJ6iOQeIqWHSO0hcsU+efiWrP0gvfQQCT1EYg+RtYeI9BBJPURyD5HSQ6T2ELlgxz9+69Pe+Vh6iIQeIrGHyNpDRHqIpB4iuYdI6SFywY5//CaviWgHkXvveV+tsnb44yEs0kUldVHJXVS0h8oF7+79jEroohK7qPjvl3r8/mu5XVXKF+VTWfa3cSV+8TJuvT0hdJG/fVdn/fWibD1+UZaAW0m5j7cvA3hgBY+s4CsruLCCJ1bwzArOmjcDa+IMrJkzsmbOyJo5I2vmjKyZM7JmzsiaOaNb5twFirfA6UyU9l9GJcmRgDoLrIu3QPAWiN4Cp59odd80UtcjAfEWSN4C2Vvg7E5Oy15xSks9EqjeAuosIIu3QPAWOPvPNMX9oykeCmRvgbNBzuv+wkRO8UAgLd4C3l9ROr2Tb7XjlMqRQPUWUGeBvHgLBG+B6C2weguIt0DyFsjeAhfu5JyPBKq3wPmdfHvYlSOBcnon3x7XdwSCt0D0Fji7k/Pt5dK86JGAeAskb4HsLVC8BU7vZE27QFiOBNRZoC7eAsFbIHoLrN4C4i2QvAWyt0C5UOBoJ9fqLXB+J+8vveV4JKCnd/KtrnlHIHgLRG+B0zn5i78yVbwFkrdA9hYo3gLVW8C7GHLnnc+rFNY7b5b94qjHZX/eBQnhQCOgmND/8k846703k1jgIzP8ygwvzPCJGT4zwxdm+MoMr8TwkTnDRuYMG5kzbGTOsJE5w0bmDBuZM2xkzrCROcNGlAz7wbOiJM2dB8WE/pngriiO9U/Bo9jbPwUvzPCJGT4zwxdm+MoMr8TwsjDDM2dYYc6wwpxhhTnDCnOGFeYMK8wZVpgzrDBn2ISSYXcelKS586DkwZ0HJbXtPCjZaudBSUA7D0pO2XlQ0sTOg/Lk33lQHuYfPBns+Zw77/cvZh2v9xo/XkqEZdi83mtreOV3VCIc0QpH1Nse/fF46fVeY8NLiSockaIR1QWOqPvz6OEY5fVeN8dLiVY4IoEjSnBEGY6owBFVOCJFI9IFjqj3M/vxtO31Xt/OS4lWOCKBI0pwRBmOqMARVTgiRSO6NzPfEenhgP2GFPCQIh5SQqvY3Jvz/1KkgocEV2oLvVv4fgYp4iGteEiCh4T1XJLE6Q2xcVOOuN64KSdcb9yc3hAGTjnh2sApJ1wbOOWEawMXVnDKCdcGTukNYeCseZPTG8LAWTMnpzeEgbNmTk5vCANnzZyc3hAGzpo5fb0hTKB4C7h6Q5iAOgv4ekOYQPAWiN4Crt4QJiDeAslbIHsLuHpDmED1FlBnAV9vCBMI3gKu3hAmkL0FXMchbgK+3hAm4P0V+XpDmED1FlBnAV9vCBMI3gLRW2D1FhBvgeQtkL0FXL0hTKB6C7h6Q9gvU67eECYQvAWit4CrN4QJiLdA8hbI3gLFW8DVG8IE1FnA1xvCBIK3QPQWWL0FxFsgeQtkbwFXbwgTqN4Crt4Q9vaCqzeECQRvgegt4OoNYQLiLZC8BbK3QPEWqN4C3sUQZ2+IJP7eEJsGrzeEwdNOrjZ42snVBk87udrghRmednK1wdNOrjZ42snVBk87udrgab0hNnhebwiDZ86wvN4QBs+cYXm9IQyeOcPyekMYPHOG5fWGMHgkb4iNB8obwnhoJ1cbPO3kaoOnnVxt8MIMTzu52uBpJ1cbPO3kaoOnnVxt8LSTqzd4Xm8Ig2fOsLzeEAbPnGF5vSEMnjnD8npDGDxzhuX1hjB45gwL5Q1hPEjeEMaD5A1hPEjeEMaDkq12HiRvCONB8oYwHiRvCONB8oYwHiRviI0HyhvCeDrv9y8m6BsRljeEEWENrLP3rrC8IYwIyxvCiLC8IYwIyxvCiLC8IYwIyxvCiLC8ITYiMG8II8LyhjAiLG8II8LyhjAigSPC8oYwIixvCCPC8oYwIixvCCPC8obYiMC8IYwIyxvCiLC8IYwIyxvCiASOCMsbwoiwvCGMCMsbwoiwvCGMCMsbonUeYXlDNCQsb4iGhOUN0ZCwZrA3JCxviIaE5Q3RkOBKbWjeEA0JyxuiIWF5QzQkwUPCei7l4N/Bu2nwdvAaPG1/kcHT9hcZPG1/kcELMzxtf5HB0/YXGTxtf5HB0/YXGTxtB+8Gz9vBa/DMGZa3g9fgmTMsbwevwTNnWN4OXoNnzrC8HbwGj9TBu/FAdfAaD21/kcHT9hcZPG1/kcELMzxtf5HB0/YXGTxtf5HB0/YXGTxtf9EGz9vBa/DMGZa3g9fgmTMsbwevwTNnWN4OXoNnzrC8HbwGz5xhoTp4jQepg9d4kDp4jQepg9d4ULLVzoPUwWs8SB28xoPUwWs8SB28xoPUwbvxQHXwGk/n/f5Fn6MRYXXwGhHWa4X23hVWB68RYXXwGhFWB68RYXXwGhFWB68RYXXwGhFWB+9GBNbBa0RYHbxGhNXBa0RYHbxGJHBEWB28RoTVwWtEWB28RoTVwWtEWB28GxFYB68RYXXwGhFWB68RYXXwGpHAEWF18BoRVgevEWF18BoRVgevEWF18LbOI6wO3oaE1cHbkLA6eBsSXKccWgdvQ8Lq4G1IcKU2tA7ehoTVwduQsDp4G5LgIYE9l/SPZ32QZdlpJH4BU2+PbV3k86PrE79z6x8rKbeScoeFFTywgkdW8JUVXFjBEyt4ZgVnzZuBNXEG1swZWTNnZM2ckTVzRtbMGVkzZ2TNnNEtc+4CxVvgdCZK+/s2kuRIQJ0F1sVbIHgLRG+B00+0um8aqeuRgHgLJG+B7C1wdienpXx8NC31SKB6C6izgCzeAsFb4Ow/0xT3j6Z4KJC9Bc4GOa/7W2o5xQOBtHgLeH9F6fROltu/olSOBKq3gDoL5MVbIHgLRG+B1VtAvAWSt0D2FrhwJ+d8JFC9Bc7v5NvDrhwJlNM7+fa4viMQvAWit8DZnZxvLQt50SMB8RZI3gLZW6B4C5zeybpPWM5hORJQZ4G6eAsEb4HoLbB6C4i3QPIWyN4C5UKBo51cq7fA+Z28v4iS45GAnt7Jt7rmHYHgLRC9BU7n5C/+ylTxFkjeAtlboHgLVG8B72LInXebr1Io6u8NUZTYG6IosTdEUWJviKLE3hBFib0hihJ7QxQl9oYoSuwNUZTYG6IosTdEUWJviKLE3hBFib0hihJ7QxQl9oYoSuwNUZTYG6IosTdEUWJviKJY3hBFsbwhihJ7QxQl9oYoSuwNUZTYG6IosTdEUWJviKLE3hBFib0hihJ7QxQl9oYoSuwNYfDMGZbXG8LgmTMsrzdEUWJvCINnzrC83hBFib0himJ5QxgPkjeE8SB5QxgPkjeE8aBkq50HyRuiKJY3RFEsb4iiWN4QRbG8IYpieUMURfOGKIrmDVEUzRuiKJo3RFE0b4iiaN4QRdG8IYqieUMURfOGKIrmDVEUzRuiKJo3RFE0b4iiaN4QRdG8IYqieUMURfOGKIrmDVEUzRuiKJo3RFE0b4iiaN4QRdG8IYqieUMURfOGKIrmDVEUzRuiKJo3RFE0b4iiaN4QReG8IRoSljdEQ8LyhmhIWDPYGxKWN0RDwvKGaEhwpTY0b4iGhOUN0ZCwvCEakuAhYT2Xaub0hti4KUdcb9yUE643bk5vCAOnnHBt4JQTrg2ccsK1gQsrOOWEawOn9IYwcNa8yekNYeCsmZPTG8LAWTMnpzeEgbNmTk5vCANnzZy+3hAmULwFXL0hTECdBXy9IUwgeAtEbwFXbwgTEG+B5C2QvQVcvSFMoHoLqLOArzeECQRvAVdvCBPI3gKu4xA3AV9vCBPw/op8vSFMoHoLqLOArzeECQRvgegtsHoLiLdA8hbI3gKu3hAmUL0FXL0h7JcpV28IEwjeAtFbwNUbwgTEWyB5C2RvgeIt4OoNYQLqLODrDWECwVsgegus3gLiLZC8BbK3gKs3hAlUbwFXbwh7e8HVG8IEgrdA9BZw9YYwAfEWSN4C2VugeAtUbwHvYoizN4Qmf2+ITYPXG8LgaSdXGzzt5GqDp51cbfDCDE87udrgaSdXGzzt5GqDp51cbfC03hAbPK83hMEzZ1hebwiDZ86wvN4QBs+cYXm9IQyeOcPyekMYPJI3xMYD5Q1hPLSTqw2ednK1wdNOrjZ4YYannVxt8LSTqw2ednK1wdNOrjZ42snVGzyvN4TBM2dYXm8Ig2fOsLzeEAbPnGF5vSEMnjnD8npDGDxzhoXyhjAeJG8I40HyhjAeJG8I40HJVjsPkjeE8SB5QxgPkjeE8SB5QxgPkjfExgPlDWE8nff7FxP0jQjLG8KIsAbW2XtXWN4QRoTlDWFEWN4QRoTlDWFEWN4QRoTlDWFEWN4QGxGYN4QRYXlDGBGWN4QRYXlDGJHAEWF5QxgRljeEEWF5QxgRljeEEWF5Q2xEYN4QRoTlDWFEWN4QRoTlDWFEAkeE5Q1hRFjeEEaE5Q1hRFjeEEaE5Q3ROo+wvCEaEpY3REPC8oZoSFgz2BsSljdEQ8LyhmhIcKU2NG+IhoTlDdGQsLwhGpLgIUE9l+IS3Tt4TYO2g7fBs/YXNXjW/qIGz9pf1OCFGZ61v6jBs/YXNXjW/qIGz9pf1OBZO3gNnraDt8EzZ1jaDt4Gz5xhaTt4GzxzhqXt4G3wzBmWtoO3wQN18BoPUgdv42HtL2rwrP1FDZ61v6jBCzM8a39Rg2ftL2rwrP1FDZ61v6jBs/YXGTxtB2+DZ86wtB28DZ45w9J28DZ45gxL28Hb4JkzLG0Hb4NnzrBIHbyNB6iDt/EAdfA2HqAO3saDkq12HqAO3sYD1MHbeIA6eBsPUAdv4wHq4DUepA7extN5vz/uc2xEUB28jQjqtcL23hVUB28jgurgbURQHbyNCKqDtxFBdfA2IqgO3kYE1cFrRFgdvI0IqoO3EUF18DYiqA7eRiRwRFAdvI0IqoO3EUF18DYiqA7eRgTVwWtEWB28jQiqg7cRQXXwNiKoDt5GJHBEUB28jQiqg7cRQXXwNiKoDt5GBNXB+63zCKqD9xsSVAfvNySoDt5vSHCdcmAdvN+QoDp4vyHBldrAOni/IUF18H5Dgurg/YYkeEhQz6V09238EnaNUj5/ZQ6x3i4rz11Wn7tMn7rs+BXtry8Lz10Wn7vscOPU29mkxuPL5LnL0nOX5ecuK89dVp+7TJ+67PidxFr3Yn7VeHhZeO6y+Nxl63OXyXOXpecuy89ddviv5LsfLsNyeFl97jJ96rLj92q+viw8d1l87rL1ucsO/5Vo3DeOrocb5/jVjK8vy89dVp67rD53mT512fGv+19fFr64TA7jluNzl63PXXb8ryTtu1vz4e4+/jn/68vyc5eV5y6rz12mT11WlucuO/5XUpdbnTfVv7vuD7/y4V0k9hBZe4hID5HUQyT3ECk9RGoPEe0gcvwb/NUiPXZ87bHja48dX3vs+Npjx9ceO7722PG1x46vPXa89tjx2mPHa48drz12vPbY8Xp+n6S0v0CVyndVuK18t2tUf407vx39mkjdf3pJ3//y8r1I7CGy9hCRHiKph8ivppPbheXJC+Pa4d9zlB4iqYdI7iFSeohc8CDTfSJoXtKxiHYQWZceIqGHSOwhcsGO13ATycci0kMk9RDJPURKD5HaQ0Q7pElZeoj0OIRJj0OY9DiESY9DmPQ4hEnuIVJ6iNQeIj12fOqx41OPHZ967PjUY8enHjs+9djxqceOTz12fOqx41OPHZ977PjcY8fnHjs+99jxuceOzz12fO6x43OPHZ977PjcY8eXHju+9NjxpceOLz12fOmx40uPHV967PjivuPrHSufJGXXSPnvugh/lLhs3LPhVCwcxcK544n0Op4AxhPBeFYwHgHjSWA8GYwH7OkcwB7PAez5HMGezxHs+RzBns8R7PkcwZ7PEez5HB2fz7tE8Zc4/xS9bHZs41EsnnUB4wlgPBGMZwXjETCeBMaTwXgKGA/Y83kFez4L2PNZwJ7PAvZ8FrDns4A9nwXs+Sxgz2dxfD7vEtVfQt0l0uIvEfwlor/E6i8h/hLJXyL7S/jv7nz+H+3jKdtNJPYQOR/yr2bz1Dvt5RffSVl6iPQIfJELRB5Num4iqYdI7iFSeojUHiJX7JNH43LbD9JLD5HQQyT2EFl7iEgPkdRDJPcQKT1Eag+RC3b8w/Gv7Z2PpYdI6CESe4isPUSkh0jqIZJ7iJQeIhfs+IcjfZuIdhC5N/D5apW1wx8Pd9rXL1dJXVRyFxXtoXLBu3s/oxK6qMQuKu77JSzH77+W21WlfFE+lWUf9Crxi6m89faE0EX+9l2d9ZeLsht3JeVWUu7j7csAHljBIyv4ygourOCJFTyzgrPmzcCaOANr5oysmTOyZs7Imjkja+aMrJkzsmbO6JY5d4HiLXA6E90mh0uSIwF1FlgXb4HgLRC9BU4/0W4NvFLXIwHxFkjeAtlb4OxOTstecdrqUkcC1VtAnQVk8RYI3gJn/5mmuH80xUOB7C1wNsh53V+YyCkeCKTFW8D7K0qnd/KtdpxSORKo3gLqLJAXb4HgLRC9BVZvAfEWSN4C2Vvgwp2c85FA9RY4v5NvD7tyJFBO7+RVHwsEb4HoLXB2J+fby6V50SMB8RZI3gLZW6B4C5zeyZ9DrMNyJKDOAnXxFgjeAtFbYPUWEG+B5C2QvQXKhQJHO7lWb4HzO3l/6S3HIwE9vZNvdc07AsFbIHoLnM7JX/yVqeItkLwFsrdA8Rao3gLexZA773xepRDvvFn2i57vy/68CxLCgcadlwrdjOWvm+YT772ZxAIfmeFXZnhhhk/M8JkZvjDDV2Z4JYaPzBk2MmfYyJxhI3OGjcwZNjJn2MicYSNzho3MGTaiZNgPnhUlae48nfPgdeO34r131FjgV2Z4YYZPzPCZGb4ww1dmeCWGl4UZnjnDCnOGFeYMK8wZVpgzrDBnWGHOsMKcYYU5wyaUDLvzoCTNnQclD+48KKlt50HJVjsPSgLaeVByys6DkiZ2HpQn/86D8jD/4Mlgz+fceb9/Mes43mv8eClR53/TX0z0ivfaGl75HZUIR7TCEeXeRA/HS8d7jQ0vJapwRIpGVBc4ou7Po4djlOO9bo6XEq1wRAJHlOCIMhxRgSOqcESKRqQLHFHvZ/bjadvxXt/OS4lWOCKBI0pwRBmOqMARVTgiRSO6NzPfEenhgP2GFPCQIh5SQqvY3Jvz/1KkgocEV2oLvVv4fgYp4iGteEiChwT2XCqc3hAbN+WI642bcsL1xs3pDWHglBOuDZxywrWBU064NnBhBaeccG3glN4QBs6aNzm9IQycNXNyekMYOGvm5PSGMHDWzMnpDWHgrJnT1xvCBIq3gKs3hAmos4CvN4QJBG+B6C3g6g1hAuItkLwFsreAqzeECVRvAXUW8PWGMIHgLeDqDWEC2VvAdRziJuDrDWEC3l+RrzeECVRvAXUW8PWGMIHgLRC9BVZvAfEWSN4C2VvA1RvCBKq3gKs3hP0y5eoNYQLBWyB6C7h6Q5iAeAskb4HsLVC8BVy9IUxAnQV8vSFMIHgLRG+B1VtAvAWSt0D2FnD1hjCB6i3g6g1hby+4ekOYQPAWiN4Crt4QJiDeAslbIHsLFG+B6i3gXQxx9oZYs783xKbB6w1h8LSTqw2ednK1wdNOrjZ4YYannVxt8LSTqw2ednK1wdNOrjZ4Wm+IDZ7XG8LgmTMsrzeEwTNnWF5vCINnzrC83hAGz5xheb0hDB7JG2LjgfKGMB7aydUGTzu52uBpJ1cbvDDD006uNnjaydUGTzu52uBpJ1cbPO3k6g2e1xvC4JkzLK83hMEzZ1hebwiDZ86wvN4QBs+cYXm9IQyeOcNCeUMYD5I3hPEgeUMYD5I3hPGgZKudB8kbwniQvCGMB8kbwniQvCGMB8kbYuOB8oYwns77/YsJ+kaE5Q1hRFgD6+y9KyxvCCPC8oYwIixvCCPC8oYwIixvCCPC8oYwIixviI0IzBvCiLC8IYwIyxvCiLC8IYxI4IiwvCGMCMsbwoiwvCGMCMsbwoiwvCE2IjBvCCPC8oYwIixvCCPC8oYwIoEjwvKGMCIsbwgjwvKGMCIsbwgjwvKGaJ1HWN4QDQnLG6IhYXlDNCSsGewNCcsboiFheUM0JLhSG5o3REPC8oZoSFjeEA1J8JCwnkuy+nfwbhq8HbwGT9tfZPC0/UUGT9tfZPDCDE/bX2TwtP1FBk/bX2TwtP1FBk/bwbvB83bwGjxzhuXt4DV45gzL28Fr8MwZlreD1+CZMyxvB6/BI3XwbjxQHbzGQ9tfZPC0/UUGT9tfZPDCDE/bX2TwtP1FBk/bX2TwtP1FBk/bX7TB83bwGjxzhuXt4DV45gzL28Fr8MwZlreD1+CZMyxvB6/BM2dYqA5e40Hq4DUepA5e40Hq4DUelGy18yB18BoPUgev8SB18BoPUgev8SB18G48UB28xtN5v3/R52hEWB28RoT1WqG9d4XVwWtEWB28RoTVwWtEWB28RoTVwWtEWB28RoTVwbsRgXXwGhFWB68RYXXwGhFWB68RCRwRVgevEWF18BoRVgevEWF18BoRVgfvRgTWwWtEWB28RoTVwWtEWB28RiRwRFgdvEaE1cFrRFgdvEaE1cFrRFgdvK3zCKuDtyFhdfA2JKwO3oYE1ymH1sHbkLA6eBsSXKkNrYO3IWF18DYkrA7ehiR4SFjPpRT+eNYHWZadRuIXMPX22NZFPj+6/vrv3Bt3JeVWUu6wsIIHVvDICr6yggsreGIFz6zgrHkzsCbOwJo5I2vmjKyZM7JmzsiaOSNr5oysmTO6Zc5doHgLnM5EaX/fRpIcCaizwLp4CwRvgegtcPqJVvdNI3U9EhBvgeQtkL0Fzu7ktJSPj6alHglUbwF1FpDFWyB4C5z9Z5ri/tEUDwWyt8DZIOd1f0stp3ggkBZvAe+vKJ3eyXL7V5TKkUD1FlBngbx4CwRvgegtsHoLiLdA8hbI3gIX7uScjwSqt8D5nXx72JUjgXJ6J98e13cEgrdA9BY4u5PzrWUhL3okIN4CyVsgewsUb4HTO1n3Ccs5LEcC6ixQF2+B4C0QvQVWbwHxFkjeAtlboFwocLSTa/UWOL+T9xdRcjwS0NM7+VbXvCMQvAWit8DpnPzFX5kq3gLJWyB7CxRvgeot4F0MufNu81UKOfh7Q+RA7A2RA7E3RA7E3hA5EHtD5EDsDZEDsTdEDsTeEDkQe0PkQOwNkQOxN0QOxN4QORB7Q+RA7A2RA7E3RA7E3hA5EHtD5EDsDZEDsTdEDsTeEDlgeUPkgOUNkQOxN0QOxN4QORB7Q+RA7A2RA7E3RA7E3hA5EHtD5EDsDZEDsTdEDsTeEDkQe0MYPHOG5fWGMHjmDMvrDZEDsTeEwTNnWF5viByIvSFywPKGMB4kbwjjQfKGMB4kbwjjQclWOw+SN0QOWN4QOWB5Q+SA5Q2RA5Y3RA5Y3hA5oHlD5IDmDZEDmjdEDmjeEDmgeUPkgOYNkQOaN0QOaN4QOaB5Q+SA5g2RA5o3RA5o3hA5oHlD5IDmDZEDmjdEDmjeEDmgeUPkgOYNkQOaN0QOaN4QOaB5Q+SA5g2RA5o3RA5o3hA5oHlD5IDmDZEDmjdEDmjeEDmgeUPkgOYNkQOcN0RDwvKGaEhY3hANCWsGe0PC8oZoSFjeEA0JrtSG5g3RkLC8IRoSljdEQxI8JLDnUuX0hti4KUdcb9yUE643bk5vCAOnnHBt4JQTrg2ccsK1gQsrOOWEawOn9IYwcNa8yekNYeCsmZPTG8LAWTMnpzeEgbNmTk5vCANnzZy+3hAmULwFXL0hTECdBXy9IUwgeAtEbwFXbwgTEG+B5C2QvQVcvSFMoHoLqLOArzeECQRvAVdvCBPI3gKu4xA3AV9vCBPw/op8vSFMoHoLqLOArzeECQRvgegtsHoLiLdA8hbI3gKu3hAmUL0FXL0h7JcpV28IEwjeAtFbwNUbwgTEWyB5C2RvgeIt4OoNYQLqLODrDWECwVsgegus3gLiLZC8BbK3gKs3hAlUbwFXbwh7e8HVG8IEgrdA9BZw9YYwAfEWSN4C2VugeAtUbwHvYoizN0Qp/t4QmwavN4TB006uNnjaydUGTzu52uCFGZ52crXB006uNnjaydUGTzu52uBpvSE2eF5vCINnzrC83hAGz5xheb0hDJ45w/J6Qxg8c4bl9YYweCRviI0HyhvCeGgnVxs87eRqg6edXG3wwgxPO7na4GknVxs87eRqg6edXG3wtJOrN3hebwiDZ86wvN4QBs+cYXm9IQyeOcPyekMYPHOG5fWGMHjmDAvlDWE8SN4QxoPkDWE8SN4QxoOSrXYeJG8I40HyhjAeJG8I40HyhjAeJG+IjQfKG8J4Ou/3LyboGxGWN4QRYQ2ss/eusLwhjAjLG8KIsLwhjAjLG8KIsLwhjAjLG8KIsLwhNiIwbwgjwvKGMCIsbwgjwvKGMCKBI8LyhjAiLG8II8LyhjAiLG8II8LyhtiIwLwhjAjLG8KIsLwhjAjLG8KIBI4IyxvCiLC8IYwIyxvCiLC8IYwIyxuidR5heUM0JCxviIaE5Q3RkLBmsDckLG+IhoTlDdGQ4EptaN4QDQnLG6IhYXlDNCTBQ8J6LlXx7+DdNHg7eA2etr/I4Gn7iwyetr/I4IUZnra/yOBp+4sMnra/yOBp+4sMnraDd4Pn7eA1eOYMy9vBa/DMGZa3g9fgmTMsbwevwTNnWN4OXoNH6uDdeKA6eI2Htr/I4Gn7iwyetr/I4IUZnra/yOBp+4sMnra/yOBp+4sMnra/aIPn7eA1eOYMy9vBa/DMGZa3g9fgmTMsbwevwTNnWN4OXoNnzrBQHbzGg9TBazxIHbzGg9TBazwo2WrnQergNR6kDl7jQergNR6kDl7jQerg3XigOniNp/N+/6LP0YiwOniNCOu1QnvvCquD14iwOniNCKuD14iwOniNCKuD14iwOniNCKuDdyMC6+A1IqwOXiPC6uA1IqwOXiMSOCKsDl4jwurgNSKsDl4jwurgNSKsDt6NCKyD14iwOniNCKuD14iwOniNSOCIsDp4jQirg9eIsDp4jQirg9eIsDp4W+cRVgdvQ8Lq4G1IWB28DQmuUw6tg7chYXXwNiS4UhtaB29DwurgbUhYHbwNSfCQsJ5Lmu908CYp+2Upl8ca173lveFULBzFwrnTCv06ngDGE8F4VjAeAeNJYDwZjAfs6RzAHs8B7PkcwZ7PEez5HMGezxHs+RzBns8R7PkcHZ/Pu0Txlzj/FL3ulVHjUSyedQHjCWA8EYxnBeMRMJ4ExpPBeAoYD9jzeQV7PgvY81nAns8C9nwWsOezgD2fBez5LGDPZ3F8Pu8S1V9C3SXS4i8R/CWiv8TqLyH+EslfIvtL+O/ufP4f7Rcv15tI7CFyPuRf/ySXtcOdlKWHSI/AF7lA5OEL7iaSeojkHiKlh0jtIXLFPnn4lqz9IL30EAk9RGIPkbWHiPQQST1Ecg+R0kOk9hC5YMc/fuvT3vlYeoiEHiKxh8jaQ0R6iKQeIrmHSOkhcsGOf/wmr4loB5F773lfrbJ2+OMhLNJFJXVRyV1UtIfKBe/u/YxK6KISu6j475d6/P5ruV1VyhflU1n2t3ElfvEybr09IXSRv31XZ/31omw9flGWgFtJuY+3LwN4YAWPrOArK7iwgidW8MwKzpo3A2viDKyZM7JmzsiaOSNr5oysmTOyZs7ImjmjW+bcBYq3wOlMlPZfRiXJkYA6C6yLt0DwFojeAqefaHXfNFLXIwHxFkjeAtlb4OxOTstecUpLPRKo3gLqLCCLt0DwFjj7zzTF/aMpHgpkb4GzQc7r/sJETvFAIC3eAt5fUTq9k2+145TKkUD1FlBngbx4CwRvgegtsHoLiLdA8hbI3gIX7uScjwSqt8D5nXx72JUjgXJ6J98e13cEgrdA9BY4u5Pz7eXSvOiRgHgLJG+B7C1QvAVO72RNu0BYjgTUWaAu3gLBWyB6C6zeAuItkLwFsrdAuVDgaCfX6i1wfifvL73leCSgp3fyra55RyB4C0RvgdM5+Yu/MlW8BZK3QPYWKN4C1VvAuxhy553PixTycufNsl8c9bjsz7sgIRxoBBQT+l/9CafBB2b4yAy/MsMLM3xihs/M8IUZvjLDKzF8ZM6wkTnDRuYMG5kzbGTOsJE5w0bmDBuZM2xkzrARJcN+8KwoSXPnQTGhfya4K4pj/VPwKPb2T8ELM3xihs/M8IUZvjLDKzG8LMzwzBlWmDOsMGdYYc6wwpxhhTnDCnOGFeYMK8wZNqFk2J0HJWnuPCh5cOdBSW07D0q22nlQEtDOg5JTdh6UNLHzoDz5dx6Uh/kHTwZ7PufO+/3xrONGlOCIoAyb23tXAe07KhGOaIUj6m2P/nC8dCMqcEQVjkjRiOoCR9T9efRojHIjinBEKxyRwBElOKIMR1TgiCockaIR6QJH1PuZ/XDadiOKcEQrHJHAESU4ogxHVOCIKhyRohHdm5nviPRowP43pICHFPGQElrF5t6c/5ciFTwkuFJb6N3C9zNIEQ9pxUMSPCSs51JIlN4Qxs044tq4GSdcGzelN0QDZ5xw3cAZJ1w3cMYJ1w1cWMEZJ1w3cEZviAbOmjcpvSEaOGvmpPSGaOCsmZPSG6KBs2ZOSm+IBs6aOV29IZpA8Rbw9IZoAuos4OoN0QSCt0D0FvD0hmgC4i2QvAWyt4CnN0QTqN4C6izg6g3RBIK3gKc3RBPI3gKe4xBNwNUbogl4f0Wu3hBNoHoLqLOAqzdEEwjeAtFbYPUWEG+B5C2QvQU8vSGaQPUW8PSGaL9MeXpDNIHgLRC9BTy9IZqAeAskb4HsLVC8BTy9IZqAOgu4ekM0geAtEL0FVm8B8RZI3gLZW8DTG6IJVG8BT2+I9vaCpzdEEwjeAtFbwNMbogmIt0DyFsjeAsVboHoLeBdDnL0hovh7Q2wavN4QBk87udrgaSdXGzzt5GqDF2Z42snVBk87udrgaSdXGzzt5GqDp/WG2OB5vSEMnjnD8npDGDxzhuX1hjB45gzL6w1h8MwZltcbwuCRvCE2HihvCOOhnVxt8LSTqw2ednK1wQszPO3kaoOnnVxt8LSTqw2ednK1wdNOrt7geb0hDJ45w/J6Qxg8c4bl9YYweOYMy+sNYfDMGZbXG8LgmTMslDeE8SB5QxgPkjeE8SB5QxgPSrbaeZC8IYwHyRvCeJC8IYwHyRvCeJC8ITYeKG8I4+m837+YoG9EWN4QRoQ1sM7eu8LyhjAiLG8II8LyhjAiLG8II8LyhjAiLG8II8LyhtiIwLwhjAjLG8KIsLwhjAjLG8KIBI4IyxvCiLC8IYwIyxvCiLC8IYwIyxtiIwLzhjAiLG8II8LyhjAiLG8IIxI4IixvCCPC8oYwIixvCCPC8oYwIixviNZ5hOUN0ZCwvCEaEpY3REPCmsHekLC8IRoSljdEQ4IrtaF5QzQkLG+IhoTlDdGQBA8J67m0Bv8O3k2Dt4PX4Gn7iwyetr/I4Gn7iwxemOFp+4sMnra/yOBp+4sMnra/yOBpO3g3eN4OXoNnzrC8HbwGz5xheTt4DZ45w/J28Bo8c4bl7eA1eKQO3o0HqoPXeGj7iwyetr/I4Gn7iwxemOFp+4sMnra/yOBp+4sMnra/yOBp+4s2eN4OXoNnzrC8HbwGz5xheTt4DZ45w/J28Bo8c4bl7eA1eOYMC9XBazxIHbzGg9TBazxIHbzGg5Ktdh6kDl7jQergNR6kDl7jQergNR6kDt6NB6qD13g67/cv+hyNCKuD14iwXiu0966wOniNCKuD14iwOniNCKuD14iwOniNCKuD14iwOng3IrAOXiPC6uA1IqwOXiPC6uA1IoEjwurgNSKsDl4jwurgNSKsDl4jwurg3YjAOniNCKuD14iwOniNCKuD14gEjgirg9eIsDp4jQirg9eIsDp4jQirg7d1HmF18DYkrA7ehoTVwduQ4Drl0Dp4GxJWB29Dgiu1oXXwNiSsDt6GhNXB25AEDwnsuaR/POuDLMtOI/ELmHp7bOsinx9dn/idW/9YSbmVlDssrOCBFTyygq+s4MIKnljBMys4a94MrIkzsGbOyJo5I2vmjKyZM7JmzsiaOSNr5oxumXMXKN4CpzNR2t+3kSRHAuossC7eAsFbIHoLnH6i1X3TSF2PBMRbIHkLZG+Bszs5LeXjo2mpRwLVW0CdBWTxFgjeAmf/maa4fzTFQ4HsLXA2yNsiHx/NKR4IpMVbwPsrSqd3stz+FaVyJFC9BdRZIC/eAsFbIHoLrN4C4i2QvAWyt8CFOznnI4HqLXB+J98eduVIoJzeybfH9R2B4C0QvQXO7uR8a1nIix4JiLdA8hbI3gLFW+D0TtZ9wnIOy5GAOgvUxVsgeAtEb4HVW0C8BZK3QPYWKBcKHO3kWr0Fzu/k/UWUHI8E9PROvtU17wgEb4HoLXA6J3/xV6aKt0DyFsjeAsVboHoLeBdD7rzbfJWCqL83hCixN4QosTeEKLE3hCixN4QosTeEKLE3hCixN4QosTeEKLE3hCixN4QosTeEKLE3hCixN4QosTeEKLE3hCixN4QosTeEKLE3hCixN4QoljeEKJY3hCixN4QosTeEKLE3hCixN4QosTeEKLE3hCixN4QosTeEKLE3hCixN4QosTeEwTNnWF5vCINnzrC83hCixN4QBs+cYXm9IUSJvSFEsbwhjAfJG8J4kLwhjAfJG8J4ULLVzoPkDSGK5Q0hiuUNIYrlDSGK5Q0hiuUNIYrmDSGK5g0hiuYNIYrmDSGK5g0hiuYNIYrmDSGK5g0hiuYNIYrmDSGK5g0hiuYNIYrmDSGK5g0hiuYNIYrmDSGK5g0hiuYNIYrmDSGK5g0hiuYNIYrmDSGK5g0hiuYNIYrmDSGK5g0hiuYNIYrmDSGK5g0hiuYNIQrnDdGQsLwhGhKWN0RDwprB3pCwvCEaEpY3REOCK7WheUM0JCxviIaE5Q3RkAQPCeu5lDKnN8TGTTnieuOmnHC9cXN6Qxg45YRrA6eccG3glBOuDVxYwSknXBs4pTeEgbPmTU5vCANnzZyc3hAGzpo5Ob0hDJw1c3J6Qxg4a+b09YYwgeIt4OoNYQLqLODrDWECwVsgegu4ekOYgHgLJG+B7C3g6g1hAtVbQJ0FfL0hTCB4C7h6Q5hA9hZwHYe4Cfh6Q5iA91fk6w1hAtVbQJ0FfL0hTCB4C0RvgdVbQLwFkrdA9hZw9YYwgeot4OoNYb9MuXpDmEDwFojeAq7eECYg3gLJWyB7CxRvAVdvCBNQZwFfbwgTCN4C0Vtg9RYQb4HkLZC9BVy9IUygegu4ekPY2wuu3hAmELwForeAqzeECYi3QPIWyN4CxVugegt4F0OcvSFy8veG2DR4vSEMnnZytcHTTq42eNrJ1QYvzPC0k6sNnnZytcHTTq42eNrJ1QZP6w2xwfN6Qxg8c4bl9YYweOYMy+sNYfDMGZbXG8LgmTMsrzeEwSN5Q2w8UN4QxkM7udrgaSdXGzzt5GqDF2Z42snVBk87udrgaSdXGzzt5GqDp51cvcHzekMYPHOG5fWGMHjmDMvrDWHwzBmW1xvC4JkzLK83hMEzZ1gobwjjQfKGMB4kbwjjQfKGMB6UbLXzIHlDGA+SN4TxIHlDGA+SN4TxIHlDbDxQ3hDG03m/fzFB34iwvCGMCGtgnb13heUNYURY3hBGhOUNYURY3hBGhOUNYURY3hBGhOUNsRGBeUMYEZY3hBFheUMYEZY3hBEJHBGWN4QRYXlDGBGWN4QRYXlDGBGWN8RGBOYNYURY3hBGhOUNYURY3hBGJHBEWN4QRoTlDWFEWN4QRoTlDWFEWN4QrfMIyxuiIWF5QzQkLG+IhoQ1g70hYXlDNCQsb4iGBFdqQ/OGaEhY3hANCcsboiEJHhLWc6lE/w7eTYO3g9fgafuLDJ62v8jgafuLDF6Y4Wn7iwyetr/I4Gn7iwyetr/I4Gk7eDd43g5eg2fOsLwdvAbPnGF5O3gNnjnD8nbwGjxzhuXt4DV4pA7ejQeqg9d4aPuLDJ62v8jgafuLDF6Y4Wn7iwyetr/I4Gn7iwyetr/I4Gn7izZ43g5eg2fOsLwdvAbPnGF5O3gNnjnD8nbwGjxzhuXt4DV45gwL1cFrPEgdvMaD1MFrPEgdvMaDkq12HqQOXuNB6uA1HqQOXuNB6uA1HqQO3o0HqoPXeDrv9y/6HI0Iq4PXiLBeK7T3rrA6eI0Iq4PXiLA6eI0Iq4PXiLA6eI0Iq4PXiLA6eDcisA5eI8Lq4DUirA5eI8Lq4DUigSPC6uA1IqwOXiPC6uA1IqwOXiPC6uDdiMA6eI0Iq4PXiLA6eI0Iq4PXiASOCKuD14iwOniNCKuD14iwOniNCKuDt3UeYXXwNiSsDt6GhNXB25DgOuXQOngbElYHb0OCK7WhdfA2JKwO3oaE1cHbkAQPCei5tP2P//un//jzn/73v/7zf26X2P/tv/7yj3/987/95eN//vX//fu3/8v22f8P"},{"name":"get_shared_immutable_constrained_private","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(view)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"increase_legendary_points","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":""},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"is_priv_imm_initialized","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/7VUPU/DMBC1Q5O2TlsEYmTIT3CXirGAGFgY2UtiqEVIJCdI/HpELdnK65Ei1MYnWWef7Xf3nj8464w7H7N946wnMGL9xv8KXjs/gbls19auL0+xG7lMKDjYGJilsC5ysQuI+XrFri1c/021d2Wdvz99frwogzQjwtKzombRLju0+7pqzSZvb4vCqKbB3Wc9iN8HEAUgbje6eixw1+g4pGdlGl1XuCv+J9KEdUeQsYHOVsqlPbOE5KKXLSN1eD8OUE8gntJiTkHfgXBXVitBtEqIVgtYM4U5EUA/zn7/A34sIHcAjVcWMw3A6dzV7nVNgQfysv7K9fOtsp9KWepXrczDl27avb9g5jx9dzgWB9bYvHMYrwfiiTljqHEOvGekNhuLCCd7x34AseA8TYIGAAA=","debug_symbols":"1ZfdaoNAEIXfZa+l7M7sz6yvUkoxiSmCrCGaQhHfvWvjmgsFLywkcyWjH8fzXc1uL07l4fb1WYVz04r8vRd1cyy6qglx6oV8M38v20sRxrntimsncpmJMpzic8jEuapLkaO2Q7bgHLiJdJpmlmj4yGK03RVNaiJJ2kW02xNNOEevtKZd0Q5SNC2j/Vq0AutTHwUOceMXKCG1QWn8TCsLKzRInWhQRm3QXns90d6YRxPQ8m6gJH8FxV8B+CsgfwXNX8HwV7D8FRx/BeKvwH87A//tDPy3M/zTdrY+KSgJG6W0p1TKSHycUhVOR0/AZ5cyK6X0i5WK03dxrYpDXY7Xo/HjLRzTbSmO3c/l/iWyvw=="},{"name":"simple_macro_example_expanded","is_unconstrained":false,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"a","type":{"kind":"field"},"visibility":"private"},{"name":"b","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"5ZXRaoMwFED/Jc8ycm/ujbn+yijDtnYIoqXawRD/fdHF0G0OH1ZKR/HFaw4cjiSkV/tie359KetD06rsuVdVs8u7sqn91Cug6Vt7zOtxbLv81KkMiJxOVFHvp3dxQ6IOZVWozJAdkh88WpCAoyWINCAs0CYlDLRxWlZoIaFAC7OJNJIeNokC/u8B9vYBBCkEmtDAHwPSXwIYLwJkJcA41PGfso200ORwN3DIooMBzOxg/6w4LFkXcMvafHOgvoqDDUYHf3Hc1dZGeKhavPPa6556eYLlYJvOucIXjnTY+OktP5X5tirGy2dcPNe7+S7yY/d+/Fzx7Ac="},{"name":"read_note","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"comparator","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"storage","type":{"kind":"array","length":10,"type":{"fields":[{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"randomness","type":{"kind":"field"}},{"name":"npk_m_hash","type":{"kind":"field"}},{"name":"header","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"nonce","type":{"kind":"field"}},{"name":"storage_slot","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::note::note_header::NoteHeader"}}],"kind":"struct","path":"types::card_note::CardNote"}}},{"name":"len","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::collections::bounded_vec::BoundedVec"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"get_shared_immutable_constrained_private_indirect","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"initialize_public_immutable","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"return_type":null},"bytecode":"H4sIAAAAAAAC/72WSY7TQBSGyxm6E5FOQuJMzuwhwwFgg8SeHVdgWiABCwQLOAp34CItsUZiwVmo/1U9/0ncWLLUaktll5//r97vV5b8UlM3pmWHMUvjD0RM11zZS4Dx3OjMTmp2BF0TaMhNaxgZdFjAzaCuywxMI7anR0+MZnuMUzM1TXNyPPtx27aXK0nuxoUC2e24doprjBSGJdrJVNOSt5CjgxM17X3NL427VprrbqjpXsn0BlM7els8jzB7GtBH3b8uZL0MD3pIVzQshpxh6FtNmXb8bdvlTezo5/579N8/99+l435qgpeulHWfHeJBVvP1HRAbOE3fTQX9yrCiQ0EhGBIdEh169DXDioaCQhASDYmGHv3AsKIjQSEYER0RHXn0PcOKjgWFYEx0THTs0TcMKzoRFIIJ0QnRiUdfMKzoVFAIpkSnRKce/ciwojNBIZgRnRGdueu9IINyxBr8wrCikaAQREQjopFHXzGs6FxQCOZE50TnRaPz/KupiITliDX4jmFFF4JCsCC6ILrw6IZhRZeCQrAkuiS6LBpd5uWoiITliDX4mWFFV4JCsCK6IroqZlvl5aiIROWINfiWYUXXgkKwJromuvboN4YV3QgKwYbohuimaHST71dFZFSOWIOfGFZ0KygEW6Jbottitm2erSIye5AsUXUkvHdjttjfGVY0FhSCmGhMNC5mi/MvvSKyKkekMfjDn3gqoOGfW3/VUJtMf+d2xcZJb5BIquQ8VergWFdll5BStGMzsHc9y97rD7Z2UBwDER4RwhDHv92dvi6YY6ayjIndg5q3fjR5hh2u+Nx/ndi6MCytUv/cb5LXpsPaJBcNGt8pKfRSf39iaddLxdyQTt5A1XRruKDfhsTbSQ6BJwK2mo07sxk0ow0qGm5RKchdu5ydv0manj7RDweinfhscgcDV9S6Pv8fkpQjB625dNxS7ektxj8OW/PD5wsAAA==","debug_symbols":"5Z3RalpBFEX/xWcpd585c2Ymv1JKMYkpQjAhMYUS8u/V1Ksplfgiq1zmLVcPd59NWDDC8vo6u11ev/z4vlrfPTzPrr6+zu4fbhab1cN6e/U6G75I768+Py7WuxeeN4unzewqaivz2XJ9u/2zqbzNZ3er++XsKnm8zf+Z9mS+n/aU7DDd8onhSLWOt/YhfRz+Nt8tZCcXaum4UPUzC8lT20/Laz5Mby9OTOeUxvVzivb5+lktjcOmM8M1D+PWNfuJrt5R1+ioa+moa+2oa+unqw0ddRXfVe3QtQyfr6/mMd665eOtLfl+f5v4/mni+/vE988T3z8mvn+Z+P6XOAPkwcaQ/OEjx27/95A0ECEiQowISUSIEyGZCAkipBAhCIwNCHGCeCeId4J4J4h3gngniHeCeCeId4J4J4jPBPGZID4TxGeC+EwQnwniM0F8JojPBPGZID4I4oMgPgjigyA+COKDID4I4oMgPgjigyC+EMQXgvhCEF8I4gtBfCGILwTxhSC+EMQXgvhKEF8J4itBfCWIrwTxlSC+EsRXgvhKEF8J4htBfCOIbwTxjSC+EcQ3gvhGEN8I4htBfCOI1zAgKUJSDElJSIojKRlJCSSlICkVSUHYF8K+EPaFsC+EfSHsC2FfCPtC2BfCvhD2DWHfEPYNYd8Q9g1h3xD2DWHfEPYRV06GsI8oeUKcPCFSnhArT4iWJ8TLEyLmCTHzhKh5Qtw8IXKeEDtPiJ4nxM8TIugJMfSEKHpCHD0hkp4QS0+IpifE0xMi6gkx9YSoekJcPSGynhBbT4iuJ8TXEyLsCTH2hCh7Qpw9IdKeEGtPiLYnxNsTIu4JMfeEqHtC3D0h8p4Qe0+IvifE3xMi8Akx+IQofEIcPiESnxCLT4jGJ8TjEyLyCTH5hKh8Qlw+ITKfEJtPiM4nxOcTIvQJMfqEKH1CnD4hUp8Qq0+I1ifE6zPE6zPE6zPE6zPE67PBkZSMpASSUpCUiqQg7CNenyFenyFenyFenyFenyFenyFenyFen13E64s6jCklnX2OV2iczhHH6dPPTPRyGM7DmeEaNj6nt8bfTwjbl20dlb2I5TiZsuqprPVUNvVUNvdUNnoqW3oq29Ohwno6VFxEny6eD2VbOVvWy7Gsf75/DOMjYsPahzXauL749f/f/yr1VNZ7Kpt7Khs9lS09la09lW0dlfWhp7I9HSou8r2TyZTt6QR1kW/hTKZsTyco7+QEtb34uXhaLa7vl7ufCty997K+GX85cHu5+fX4553t7G8="},{"name":"update_legendary_card","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"randomness","type":{"kind":"field"},"visibility":"private"},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"initialize_private","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"randomness","type":{"kind":"field"},"visibility":"private"},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"is_legendary_initialized","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"boolean"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/7VUXUvDMBRN6tpt6TZRfPShPyFDEB+n4oMvPvo+2+iCtYW0gr9eXCChZ9dOZGsuhJvcJOfec/LBWWfc+ZjtGmc9gRHrN/5X8NL5Ccxl27ZyfXmM3chlQsHBxsAshXWRi51BzNcrtm3h+m+qvSvr/P3p8+NFGaQZEZaeFTWLdt6h3ddVa9Z5e1sURjUN7j7pQfzegygAcbPW1WOBu0aHIT0r0+i6wl3xP5EmrDuCjA10tlIu7ZklJBe9bBmpw/txgHoC8ZQWcwr6DoR7ZbUSRKuEaLWANVOYEwH04+z3P+DHAnIH0PjaYqYBOJ262r2uKfBAXtZfuH6+UfZTKUv9qpV5+NJNu/MXzJyn7w7HYs8am3cO49VAPDFnDDXOgfeM1GZjEeFk79gPonE3GIIGAAA=","debug_symbols":"1ZfRaoQwEEX/Jc9SkslMMtlfKaW4u24RRJfVLRTx3xu7UQoKPljoji9mkpObe58m6dW5ON4/3sv60rTq8NqrqjnlXdnUseqVfqGfyfaa12PddvmtUwedqaI+x/+QqUtZFepg0Q3ZgvPgE+mRZ5Z5eMuitNslzSaRrN1C2u+RZjtLr7jmXdIeJmleSoc1aQPxS5vi2JmNI8gSJ5xs8DNtkFZoQOMSDQRbdMCAiQ5EdqYB9SOB0fIjGPkRQH4EKz8Cyo9A8iM4+RG8/AgsP4L87gzyuzPI787wN90Z9XS3JkS9YQoDT6ZI21+0TVdPsP9tilZM4ZOZitVnfivzY1WMz6Nx8V6fptdSLLuv62Mlst8="},{"name":"spend_public_authwit","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAC/1WNwQ6AIAxDCwNCYsLZixdln+DV/49f5TrhwJLCS7tChwA1webAGDpoKHYF6sEkg2gKDWFaypCtqGMN4sTFdNqxKf5elZuB8IWOjHXYzP6rR9lbpOJEP17E/aU+Bih0SrkAAAA=","debug_symbols":"TclRCoAgDADQu+y7E3SViJimMZAtSoMYu7uCfvj5eApncOU6iKO8sG4KSTxmEm5SW+DDh9ClMBgL+2nzf/ex3So="},{"name":"update_leader","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"account","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"return_type":null},"bytecode":"H4sIAAAAAAAC/83X227TQBAG4HUSJykhdpz4fEjb1JZ4AMIll7wG4nSBhAAhuOAVeSp2Znf8p7iytKiyasmJM/4/z3qdVptWzZVaL5TeGmU3/WmtArXUbx7tr5Uc6YOZ3r1AeVIyh3SReUc5usCss0KZGpkFH+mc8k/65flZSd+IXpYhva586sr7is63NDr1Uu+bTkZ3pbhI24ZeTIaaPWtxplXeG2pjwlc2vO1mpqi2YFuT2ZhDpr9QFhowpUAAGoAGln5FWWjIlAIhaAgaWvoBZaE7phTYge5Ad5b+RFloxJQCEWgEGln6GWWhe6YU2IPuQfeWfkNZ6IEpBQ6gB9CDeR+SYJzobjcoC42ZUiAGjUHjYbe4f44jRHf7jrLQhCkFEtAENLH0I8pCU6YUSEFT0NTSdygLzZhSIAPNQLPhPWb9ox8hutsnlIXmTCmQg+aguaVvURZaMKVAAVqAFpZ+QVloyZQCJWgJWg7vsewH6khSd5I8+sD0NPxAWWjFlAIVaAVaDbtV/V+AIwndSepOgknuZT/JwIpxoh/pb5SF1kwpUIPWoPWwW91PwwjR3d6jLLRhSoEGtAFtht2a/uvqSA7uJHQnqTspJiH/MWPJJJMcuZPAnewmmbFyknt5st+xapzcmqV4v04+M1RYHMtqmFf2nayY9RUXCtuRWx3vt7o2uDGHcoYW4tcI3WK9fVry4cnm7/S/J0q0HgdbKtHOI96YT3K7ZNpOYjdobE7MTJFOSge6yknXPO9iWP8M+JVn7/bMP2SUTz8pWn673CjlI+GbC/KE9BO5xEQe7//gWLeXZ+Yma6aSx7148Pkd7TgfJKtx8sKzgrL+HY0x/0P7XwqBdQbIDQAA","debug_symbols":"5dzdShtBHIbxe9njUOZ959tbKaWkGktAomgsFPHeu6lZazHUPu1BoXOk0RnY4TlZfvvfPEwXm0/3nz9ud5fXd9PZ+4fp6vp8vd9e7+ZPD1N4J3//693Nenf4w91+fbufzsJq2uwu5p+Pq+lye7WZzmIqj6tX61J0Oi5NMfp5dc8nFpfY2nFxSSG+XPxhdbiU+FeXopqXS1FLb1yKY10uxfnEpaTfv5SnDZluKHRDpRsa3dDhBge6QXSD6YZIN9DSpqVNS5uWNi1tWjrS0pGWjrR0pKUjLR1p6UhLR1o60tKRlk60dKKlEy2daOlESydaOtHSiZZOtHSipTMtnWnpTEtnWjrT0pmWzrR0pqUzLZ1p6UJLF1q60NKFli60dKGlCy1daOlCSxdautLSlZautHSlpSstXWnpSktXWrrS0pWWbrR0o6UbLd1o6UZLN1q60dKNlm60dKOlOy3daelOS3dautPSnZbutHSnpTst3WlphYB3CO8w3hHxDswnAftJwIASsKAETCgBNxduLtxcuLlwc05m3Mw4mnE142yG3UwYzoTlTJjOhO1MGM+E9UyYz4T9TBjQhAVNmNCEDU0Y0YQVTZjRhB1NGNKEJU2Y0oQtTRjThDVNmNOEPU0Y1IRFTZjUhE1NGNWEVU2Y1YRdTRjWhGVNmNaEbU0Y14R1TZjXhH1NGNiEhU2Y2ISNTRjZVPhzT9wcO5swtAlLmzC1CVubMLYJa5swtwl7myp/2I2bY3ITNjdhdBNWN2F2E3Y3YXgTljdhelPjEw64OdY3YX4T9jdhgBMWOGGCEzY4YYQTVjh1PtbC51rwYAt2OGOHM3Y4Y4czdjhjhzN2OGOHM3Y4iw8z4ebY4YwdztjhjB3O2OGMHc7Y4czn1/gA2x9MsOHmfIaND7HxKTY+xsbn2PggG3Y4Y4czdjhHPraIm2OHM3Y4Y4czdjhjhzN2OGOHM3Y4Y4dz4rOquDl2OGOHM3Y4Y4czdjhjhzN2OGOHM3Y4Y4czdjhjhzN2OGOHM3Y4Y4czdjhjhzN2OGOHc+FT6bg5djhjhzN2OJ92uPkxblleB5l/7/Wnna9fCJkftpVleSztebVOrs4lLa+P5FLeetck9OPa4v7iMvpyAP2LAyj8OED+9QFyqs+Lc3hjcSteXvJppYaXi4/HjWMdN4113DzWcctYx61jHbeNddw+1HFbGOu4Y91mnH6M9v8ed6y7qjbWXVUb666qDXNXNX/4sr7drj9dbQ7fx3D43/3ufPl6hvnj/uvN03/mtd8A"},{"name":"get_shared_immutable_constrained_public_multiple","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":5,"type":{"fields":[{"name":"account","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"types::leader::Leader"}},"visibility":"public"}},"bytecode":"H4sIAAAAAAAC/+1Uu1LDMBA8WbacOJbUAQ0zPKyhoYWS/x++Cu2eDpkhTao00czZa93e3kO2N/Eih1XqepS2hrojSUK9OdiXGFKnuCTOtgqcjCqNJv6lXu43KoM+EspSbVII1qwQ6xAIITNVO27iwFgciYg7wp7BvdMn30pBzFKMFtQx/joG3YTTMsy4P9XL+iGtwGVj3v0Ca+QMqDb+ZyBwUsbUO6NcMU6rR1p5suv+bWjSLLHP4tR1Vh3LCbBaZP/Qjp+u1+Fbi6BFTiJqS5Zq7YpJFaGWqmUqvgOdUwQtUzFDlYdO8aBtw2bdxbhiP+ZcdnO0zvLfCex6zkqaGynx2KCTOj0pJ1vp50Li5SG3LNfPUuyDUxQYZ28Mfyvk+VfAh2/YD6JQzA23BAAA","debug_symbols":"5dhNasMwEAXgu2htisYz+vNVSilK4hSDkUPsFIrJ3Su3ihuoW+2ChHaW9RbfWz3QzA7t7vL22rnjMLLmeWb9sLdTNzh/mhl/qvHr73iybvkxTvY8sUaixoq17uA/qYZrxY5d37IGSV6rX2lQKEMalOZrGshspAUihbRAada0EVthMDeIqCES1oKrENaC8D78Ui1dRUFdVUFddUFdTTldkRfUFQrqWj++K5i1q+L/8wl0yFKt7hgm6DFrPWWtF1nrZdZ6lbVeZ603aetx1dOGnnjWeshan/jWRvSJb21En/jWRvSJb21En/jW/ugFbugT39qIPvGt/VvvT+/23Nld3y7vY8vlxe1vz2X+OH2cvm989hM="},{"name":"insert_notes","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"amounts","type":{"kind":"array","length":3,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"initialize_shared_immutable","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"return_type":null},"bytecode":"H4sIAAAAAAAC/72WS47TQBCG23lMMiKThLxfTuJXHgeADRJ71pwABBJIwALBAo7CHbjISKyRWHAW+q/u8p/EgyVLo7HUdrn8f13V1S25UlM3pm2HMaHxFzyma67sI8B4btSyRs2OoGsCdTmzhpFBhwmcBXVdLDCN2N4ePTEa7TFuzdQ0zcn17Mdtyz6uJLgbFwpEt6PlFBC3UiQs3k6mmrasQq4ObtRc72t+ary101x3Q033SswbmHb0InxfwHoaMI+6Xy5kvQwfeghXTFgScglD326K2fGv1y5uYkc/z7/H/Pvn+XeZcT81wUtXyrqPDvEgq/n6DogNnKbvTEHf0a3oUFAIhkSHRIcefUW3oiNBIRgRHREdefQz3YqOBYVgTHRMdOzRt3QrOhEUggnRCdGJR9/QrehUUAimRKdEpx59QbeiM0EhmBGdEZ159CPdis4FhWBOdE507p6VERvtK92KLgSFYEF0QXTh0S90K7oUFIIl0SXRZTHRZX4EShAb7TXdiq4EhWBFdEV05dEPdCsaCgpBSDQkGhYTDfNTU4LYaFu6FV0LCsGa6JrouhhtnZelIrKqjoyqI+MHWcukHLHF/ka3ohtBIdgQ3RDdFKNt8v0pQWy093QruhUUgi3RLdGtRz/RrWgkKAQR0YhoVEw0yqNVRBYPEmVYHVnde2K22N/pVjQWFIKYaEw0LkaL85NeEZmUI9IY/OFPPBXQ8M+tv2qoTaa/cztj46Q3SCRUch4qdXCss7JLSCnasRnYu55l7/UHWzsojoEIj3BhSMa/3ZsuF8wxU1nGwO5Dzad+NHmEHZ447r9O0rpIWFql/nm+SV6bDmuTXDRoXFNS6KX+/sTUrpeKuSGdvIGq6dZwQr8NiU8nOQSeCNhqNu6MJv1lg4qGm1QKctcuZ+crSdPTL3pwINpJnk3uYOCKWtfv/0OScuSgNZeOW6o9u8X4B2GEWF/nCwAA","debug_symbols":"5Z3hShtBFIXfZX9L2XPnzp0ZX6WUkmosAYmisVDEd29is9HSYCiEryzzz00ue+5RPhjwy+Z5uF5+e/r+dbW+uXscLj8/D7d3V4vN6m69vXoexk/S66uP94v17oXHzeJhM1x65HoxLNfXux9LfbkYbla3y+Eyebxc/D2dzKfplOww3fKR4Uh1unX4mN4Pf7nYLWTHF2qHhYrnEwvJYppWkh+m5e3IdE5pWj+naB+vn9XSNGw6MVzzWPbDNfuRrt5R1+ioa+moa+2oa+unq40ddRXfVe3QtYwfr6/mMd265bdFLPl+f5v5/mnm+/vM988z3z9mvn+Z+f7nOAOkpMP+u4l3+7+GpJEIERFiREgiQpwIyURIECGFCEFgbECIE8Q7QbwTxDtBvBPEO0G8E8Q7QbwTxDtBfCaIzwTxmSA+E8RngvhMEJ8J4jNBfCaIzwTxQRAfBPFBEB8E8UEQHwTxQRAfBPFBEB8E8YUgvhDEF4L4QhBfCOILQXwhiC8E8YUgvhDEV4L4ShBfCeIrQXwliK8E8ZUgvhLEV4L4ShDfCOIbQXwjiG8E8Y0gvhHEN4L4RhDfCOIbQbzGEUkRkmJISkJSHEnJSEogKQVJqUgKwr4Q9oWwL4R9IewLYV8I+0LYF8K+EPaFsG8I+4awbwj7hrBvCPuGsG8I+4awj7hyMoR9RMkT4uQJkfKEWHlCtDwhXp4QMU+ImSdEzRPi5gmR84TYeUL0PCF+nhBBT4ihJ0TRE+LoCZH0hFh6QjQ9IZ6eEFFPiKknRNUT4uoJkfWE2HpCdD0hvp4QYU+IsSdE2RPi7AmR9oRYe0K0PSHenhBxT4i5J0TdE+LuCZH3hNh7QvQ9If6eEIFPiMEnROET4vAJkfiEWHxCND4hHp8QkU+IySdE5RPi8gmR+YTYfEJ0PiE+nxChT4jRJ0TpE+L0CZH6hFh9QrQ+IV6fIV6fIV6fIV6fIV6fjY6kZCQlkJSCpFQkBWEf8foM8foM8foM8foM8foM8foM8foM8frsLF5fHqcnc23/B3LyOV6hcT+dI97uffyZiV4Ow3k8MVzDpq1r/PmEsH3Z1lHZs1iOsymrnspaT2VTT2VzT2Wjp7Klp7I9HSqsp0PFWfTpXKaHZissTpb18lbWP94/Dr/GsPZujem0exYv+x/X/39/q9RTWe+pbO6pbPRUtvRUtvZUtnVU1seeyvZ0qDjL505mU7anE9RZPoUzm7I9naC8kxPU9uLH4mG1+Ha73H1V4O69p/XV9M2B28vNz/vf72xnfwE="},{"name":"simple_macro_example","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"a","type":{"kind":"field"},"visibility":"private"},{"name":"b","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"5ZXdasMwDIXfxddhWLIsR3mVUYbbpiMQnNKkgxHy7nM6z+ynsItspaVX5tifj4+MjUa1rdfH56cm7LpeVY+jaruNH5ouRDUqoNNcv/dhlv3gD4OqdKHqsI3jVKhd09aqMsRT8YNDBkkoMkGmAeEMbRxhok2p5RdaSCjRYq3JNJKeVoUCe6vB+XLBCRwkmtDAwuBuSXBTos53aDnTQifv8h+9ZYk3E5cJZavNN2/Ui7ytwextv3hf1ZNFuIsq8Uqr/NtfLA9wtlBgl7aB2E9nuGkV1Ys/NH7d1nPTmBePYfPRQ6IcXvfvK5F9Aw=="},{"name":"get_shared_immutable_constrained_public_indirect","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"account","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"types::leader::Leader"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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F5DjAnJcQI4LyHEBOR5AjgeQ4wHkeAA5HkCOB5DjAeR4ADkeQI4HkOMVyPEK5HgFcrwCOV6BHK9AjlcgxyuQ4xXI8QrkeANyvAE53oAcb0CONyDHG5DjDcjxBuR4A3K8ATnegRzvQI53IMc7kOMdyPEO5HgHcrwDOd6BHO88jgvocwrocwrocwrocyrxOC6gzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgzymgz6kb+Jzezu9hUtJhps7LdAOfc5wpAzMZMJMDMxVgJgEzBTBTBWYCcrwCOd6AHG9AjjcgxxuQ4w3I8QbkeANyvAE53oAcb0COdyDHO5DjHcjxDuR4B3K8AznegRzvQI53IMc7j+OReByPxON4JB7HI/E4HonH8Ug8jkdicfx069/3vz7c//D+3cfTns/f/O3xx6eHD4/bzaf//PK/75zW/hc="},{"name":"get_shared_immutable_constrained_public","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(view)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"account","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"types::leader::Leader"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAC/+XYSY7TQBQG4HKcpEM8ZHacwc5khxPAkiVL+giISYAYBbQEF2DHxTgV9V7V8x8wSqsi5A2W0nE//1+9ctndiyqUr1SvrfSRKXu0dEXFqqu/PPo8UHJmLiovVp6USrrIqrQx5e/1j6CUofgCt/HvUYRGaBXKo2inozxzUXX0p13w6SOKlTKdrrmupJHJELsqcEUP+FB/3zHhrg33y5Ypqj5Y32R65pTpDcpCA6YUCEAD0MDS9ygLDZlSIAQNQUNLn6EsNGJKgQg0Ao0s/YKy0JgpBWLQGDS29DXKQgdMKTAAHYAOLP2AstAhUwoMQYegQ/NdJ8F5orttURY6YkqBEegIdGTpS5SFjplSYAw6Bh1b+gJloROmFJiATkAn9XucVA/jDNHdHqMsdMqUAlPQKejU0s8oC50xpcAMdAY6s/QVykITphRIQBPQxNInKAudM6XAHHQOOrf0E8pCU6YUSEFT0LS+smn1MM4Q3e05ykIXTCmwAF2ALurdFtXDcCTxeaIn+A5loUumFFiCLkGX9W4Xk747idxJcp7oZXiKstAVUwqsQFegK0vfoix0zZQCa9A16Lo+0XX1QjmSiTsJ3cnAnQTuZOpOIncydyeJO4kbWbELXpj0n79j+o/gI8pCM6YUyEAz0KzeLav+JziSpTtZuZPYnYTuZNhIl8SdBI3cy6CRid3y9PUb/Q1loTlTCuSgOWhe75ZXy+BIlu5k3MjEQneSuJNVI+SCFUsbWeSpO4kaeS4XdIn/73fsln8XO6p/VdWuwzVDZY8edh0orUoltlBthWPDrTa/t9oanJtTuULbGluE9ti9OHT59GDzhd0dKT0OUuuCPjzjG/Ob3C6ZspTYDo3NhZYp0kXpQLszB93Ge3MyrT8mfN+zd3td8MbM6XGlPz5vD7Hx6wlq2jaJNtaXp1Kt7wbrS/M72dXJ77bs0LyyWKU9xrELtre3ZFbmO53xzO3h2ydDsYLXiJZxh1YHjFjiEdAcjzziDzr724gUO/KIRxqV98N48I25bX4fYnntdHO5T/OCcbKUd8tskBHxD3Sa/qTPL0BhP3yaEwAA","debug_symbols":"5dzdSl1XFIbhe9nHUtb4xvr1VkopJjFFEA3RFIrk3rtt1aTERp4clL3rUVDnJGPxHix59pze7d6dv/n0268XV++vb3anP9/tLq/fnt1eXF/tv7rbDT9V/fXdmw9nV/ffuLk9+3i7Ox1OdudX7/b/fj7Zvb+4PN+d9jh//uXkfkN0Q+uGUTdMumHWDYtuWHXDhhsy6AYtHS0dLR0tHS0dLR0tHS0dLd1aurV0a+nW0q2lW0u3lm4t3Vq6tfSopUctPWrpUUuPWnrU0qOWHrX0qKVHLT1p6UlLT1p60tKTlp609KSlJy09aelJS89aetbSs5aetfSspWctPWvpWUvPWnrW0ouWXrT0oqUXLb1o6UVLL1p60dKLll609KqlVy29aulVS69aetXSq5ZetfSqpVctvWnpTUtvWnrT0puW3rT0pqU3Lb1p6U1L1zDwDraTgfFkYD0ZmE8G9pOBAWVgQRmYUAZuXtzcvczBzMXMyczNzNHM1czZjN2sGM4qbqTcnO2sGM+K9ayYz4r9rBjQigWtmNCKDa3aYZybM6MVO1oxpBVLWjGlFVtaMaYVa1oxp9Xon4Zwcxa1YlIrNrViVCtWtWJWK3a1YlgrlrViWiu2tWJcK9a1Yl4r9rViYCsWtmJiKza2YmSr2T/35ObsbMXQVixtxdRWbG3F2FasbcXcVuxttfiH3dycya3Y3IrRrVjditmt2N2K4a1Y3orprVY/4cDNWd+K+a3Y34oBrljgigmu2OCKEa5Y4WrzYy1+roUPtrDDhR0u7HBhhws7XNjhwg4Xdriww6X8MBM3Z4cLO1zY4cIOF3a4sMOFHS5+fs0PsP3ACTZu7mfY/BCbn2LzY2x+js0PsrHDhR0u7HBpP7bIzdnhwg4Xdriww4UdLuxwYYcLO1zY4TL6WVVuzg4Xdriww4UdLuxwYYcLO1zY4cIOF3a4sMOFHS7scGGHCztc2OHCDhd2uLDDhR0us59K5+bscGGHCztc2OHCDhd2uLDDhR0u7HBZ/CoCN2eHCztc2OHCDhd2uLDDhR0u7HBhh8vq90+4OTtc2OHCDhd2uLDDhR0u7HBhhws7XDa/dOS3jvjaETtcs8M1O1yzwzU7XLPDNTtcs8M1O1yXXzXj5uxwzQ7X7HDNDtfscM0O1+xwzQ7X7HAdv1/Izdnhmh2u2eGaHa7Z4Zodrv1GqV8p9TulP3CplJv7tVK/V+oXS/1mqV8tZYdrdrhmh2t2uB79JjE3Z4drdrhmh2t2uGaHa3a4Zodrdrhmh2t2uGaHa3a4Zodrdrhmh2t2uGaHa3a4Zodrdrie/W8GcHN2uGaHa3a4Zodrdrhmh2t2uGaHa3a4ft7h5v2nyw+b5j1+/2PfyTera+n5YXUt65f/pcbtmdXT/veUh9XTPu7T6m16bnFt/bh4/6n69xev07A8LF6nsb9e/PCw6yt62Odl8v/6sPWaHjav6WH7NT3s+JoedvrvH7a2p4ddhu/PP9b6sHbM8tUY2+P483GPvxz3+Otxj78d9fjbcNzj13GPn8Mev5/GH58dv497/PG4xz/wt+5L4x/4W/el8Q/8rfvS+Af+1n1p/AN/634Zf+pvxx+HA3/rvjT+gb91/338/Ve/n328OHtzeX7/h6Lvf/jp6u3j343ef3n7x4e/f7Jf+yc="},{"name":"view_imm_card","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"randomness","type":{"kind":"field"}},{"name":"npk_m_hash","type":{"kind":"field"}},{"name":"header","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"nonce","type":{"kind":"field"}},{"name":"storage_slot","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::note::note_header::NoteHeader"}}],"kind":"struct","path":"types::card_note::CardNote"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"get_public_immutable","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"account","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"types::leader::Leader"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/7VUTVPCMBBNWygt5UM96cmcPRVOegM9efHgwXuhERm1mUnLjP55RjJm4ZEWRqG8mTSbdPft5nUbh/3CMUOjybbhsjIcejRYNVzL2cVAg0uwr8w8Vir55vMsFV9cLgouX/lELrI0x8Dr/wSuU96YOYBovhojY8fH4DYe+jY5oLUavrEj8HNhzzF7ntk7r/Brr0bP2DNR3H/I6fvT4nMiFOpTJTZnZWi2iw3bg8wKlUyLcZoqkW8p7lUwLncwtoHxLZlnjylGNQ5jehEqn8sMo5p/ZNJq+GCTX2CtR8aOj8Od5m3VzzvUvB3DxWvkjVi5bR1rzcGmGnRMWH89A/3VI8OVF1IlM/EsknUTOVCu3eh4jZH85IM3lQc23lQ+2K2KuOWeOQBeXqMc+jwh1MBhTfkCqL3G3PGpWk6fqWu4moab6u+A7uRDl/wZKwO5qE7qD+LsglZd0OwEZxto3t6JNOtbmlH9PdCsD7n3adbfoVkHdCKtyNcFP9RR74ew1qB/j/zwfcTKPRxVcEds83+GsOdZufS7Hy7EJSfLCAAA","debug_symbols":"7Zlda4MwFIb/S65leHLycexfGWPY1g6h2NLawSj+9+lqtMOzeuHFki1XEn158+S5OUKuYlusL2+vZbU7nMXq+Sr2h01el4eqXV1F+mS+Xp6PedWtz3V+qsUqTURRbdtnk4hduS/ECpVpkknOStsnraIhS9S8JG21XVRN0CcpNZNqWlJNOFQz1NmiaitdNU2rIeW6LWh0FoHUzA4SterTErNxD+iOMkm31Q4dtNH3REwY0YGASuFx2KA7qaGxF1AyWYWmzyptv2VvWuB/akFyWWWA0SKjFk4LRi2cFhW1cFp01MJpMVELp8VGLZwW+kNawA5azEItWdTCaJG/8JcLetRiHp9UATl6ae8wsp4egqaXQdNj0PQqaHodNL0Jmt76TY8DveLoKWj6LGR69HzWztB7Pmtn6D2ftTP0ns/aGXrPZ+1Ir5Gh93zWztB7Pmt/pm9X7/mpzNf7orv96D5eqo27DGmX9cfx9qXNfgI="},{"name":"verify_private_authwit","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(view)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"inner_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"5ZVva8MgEMa/i6/D8M7zzOWrjDJsm45AMKVJByPku890TvansEG20dJX8ujPx+dEuVFt6/Xx8aEJu65X1f2o2m7jh6YLUY0KzGmu3/swy37wh0FVulB12MZxKtSuaWtVGeKp+MIhgyQUmSDTgHCGNo4w0abU8g0tJJRosdZkGklPq0IBXWtw+3/BCRwkmtDAwuC8JLgpUec7tJxpoZO3+0Pv8ufeMy5LojBxmVC22nyKgnqRtzWYve0H74t64Qg3USVeaJW/++nlDs4WCuzSNhD77gw3raJ68ofGr9t67jHz4jFs3lpOlMPz/nUlsi8="},{"name":"insert_note","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"},{"name":"randomness","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"get_legendary_card","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"fields":[{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"randomness","type":{"kind":"field"}},{"name":"npk_m_hash","type":{"kind":"field"}},{"name":"header","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"nonce","type":{"kind":"field"}},{"name":"storage_slot","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::note::note_header::NoteHeader"}}],"kind":"struct","path":"types::card_note::CardNote"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"initialize_private_immutable","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"randomness","type":{"kind":"field"},"visibility":"private"},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000a017782b"},{"kind":"string","value":"CardNote"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"leader","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"legendary_card","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"profiles","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"set","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"private_immutable","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"shared_immutable","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"public_immutable","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"return_type","type":{"fields":[{"name":"account","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"types::leader::Leader"}}],"kind":"struct","path":"DocsExample::get_shared_immutable_constrained_public_indirect_abi"},{"fields":[],"kind":"struct","path":"DocsExample::increase_legendary_points_abi"},{"fields":[{"name":"return_type","type":{"kind":"array","length":5,"type":{"fields":[{"name":"account","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"types::leader::Leader"}}}],"kind":"struct","path":"DocsExample::get_shared_immutable_constrained_public_multiple_abi"},{"fields":[{"name":"return_type","type":{"fields":[{"name":"account","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"types::leader::Leader"}}],"kind":"struct","path":"DocsExample::get_shared_immutable_constrained_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"account","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"DocsExample::match_shared_immutable_parameters"}}],"kind":"struct","path":"DocsExample::match_shared_immutable_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"a","type":{"kind":"field"}},{"name":"b","type":{"kind":"field"}}],"kind":"struct","path":"DocsExample::simple_macro_example_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"DocsExample::simple_macro_example_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"account","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"DocsExample::update_leader_parameters"}}],"kind":"struct","path":"DocsExample::update_leader_abi"},{"fields":[{"name":"return_type","type":{"fields":[{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"randomness","type":{"kind":"field"}},{"name":"npk_m_hash","type":{"kind":"field"}},{"name":"header","type":{"fields":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"nonce","type":{"kind":"field"}},{"name":"storage_slot","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::note::note_header::NoteHeader"}}],"kind":"struct","path":"types::card_note::CardNote"}}],"kind":"struct","path":"DocsExample::get_imm_card_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"DocsExample::initialize_public_immutable_parameters"}}],"kind":"struct","path":"DocsExample::initialize_public_immutable_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"inner_hash","type":{"kind":"field"}}],"kind":"struct","path":"DocsExample::spend_public_authwit_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"DocsExample::spend_public_authwit_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"DocsExample::initialize_shared_immutable_parameters"}}],"kind":"struct","path":"DocsExample::initialize_shared_immutable_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"amount","type":{"kind":"integer","sign":"unsigned","width":8}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"DocsExample::insert_note_parameters"}}],"kind":"struct","path":"DocsExample::insert_note_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"inner_hash","type":{"kind":"field"}}],"kind":"struct","path":"DocsExample::verify_private_authwit_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"DocsExample::verify_private_authwit_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"randomness","type":{"kind":"field"}},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"DocsExample::initialize_private_parameters"}}],"kind":"struct","path":"DocsExample::initialize_private_abi"},{"fields":[{"name":"return_type","type":{"fields":[{"name":"account","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"types::leader::Leader"}}],"kind":"struct","path":"DocsExample::get_shared_immutable_constrained_private_indirect_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"randomness","type":{"kind":"field"}},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"DocsExample::initialize_private_immutable_parameters"}}],"kind":"struct","path":"DocsExample::initialize_private_immutable_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"amounts","type":{"kind":"array","length":3,"type":{"kind":"integer","sign":"unsigned","width":8}}}],"kind":"struct","path":"DocsExample::insert_notes_parameters"}}],"kind":"struct","path":"DocsExample::insert_notes_abi"},{"fields":[{"name":"return_type","type":{"fields":[{"name":"account","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"types::leader::Leader"}}],"kind":"struct","path":"DocsExample::get_shared_immutable_constrained_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"randomness","type":{"kind":"field"}},{"name":"points","type":{"kind":"integer","sign":"unsigned","width":8}}],"kind":"struct","path":"DocsExample::update_legendary_card_parameters"}}],"kind":"struct","path":"DocsExample::update_legendary_card_abi"}]}},"file_map":{"102":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::{Point, pub_key_to_bytes},\n    constants::{GENERATOR_INDEX__IVSK_M, GENERATOR_INDEX__OVSK_M}, hash::poseidon2_hash\n};\n\nuse std::field::bytes32_to_field;\n\nuse crate::oracle::unsafe_rand::unsafe_rand;\n\nuse crate::event::event_interface::EventInterface;\nuse crate::note::note_interface::NoteInterface;\n\nuse crate::encrypted_logs::{\n    header::EncryptedLogHeader, incoming_body::EncryptedLogIncomingBody,\n    outgoing_body::EncryptedLogOutgoingBody\n};\n\npub fn compute_encrypted_event_log<Event, NB, MB, OB>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    ovsk_app: Field,\n    ovpk: Point,\n    ivpk: Point,\n    event: Event\n) -> [u8; OB] where Event: EventInterface<NB, MB> {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    let eph_sk: Scalar = fr_to_fq(unsafe_rand());\n    let eph_pk = eph_sk.derive_public_key();\n\n    // TODO: (#7177) This value needs to be populated!\n    let recipient = AztecAddress::from_field(0);\n\n    let ivpk_app = compute_ivpk_app(ivpk, contract_address);\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_Header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_event(event, randomness).compute_ciphertext(eph_sk, ivpk_app);\n    let outgoing_body_ciphertext: [u8; 176] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk_app).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; OB] = [0; OB];\n    // @todo We ignore the tags for now \n\n    let eph_pk_bytes = pub_key_to_bytes(eph_pk);\n    for i in 0..64 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[128 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[176 + i] = outgoing_Header_ciphertext[i];\n    }\n    for i in 0..176 {\n        encrypted_bytes[224 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = OB - 400;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[400 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (64 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (176 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\npub fn compute_encrypted_note_log<Note, N, NB, M>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: Point,\n    ivpk: Point,\n    note: Note\n) -> [u8; M] where Note: NoteInterface<N, NB> {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    let eph_sk: Scalar = fr_to_fq(unsafe_rand());\n    let eph_pk = eph_sk.derive_public_key();\n\n    // TODO: (#7177) This value needs to be populated!\n    let recipient = AztecAddress::from_field(0);\n\n    let ivpk_app = compute_ivpk_app(ivpk, contract_address);\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_Header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_note(note, storage_slot).compute_ciphertext(eph_sk, ivpk_app);\n    let outgoing_body_ciphertext: [u8; 176] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk_app).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now \n\n    let eph_pk_bytes = pub_key_to_bytes(eph_pk);\n    for i in 0..64 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[128 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[176 + i] = outgoing_Header_ciphertext[i];\n    }\n    for i in 0..176 {\n        encrypted_bytes[224 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 400;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[400 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (64 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (176 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field elememt to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let r_bytes = r.to_be_bytes(32);\n\n    let mut high_bytes = [0; 32];\n    let mut low_bytes = [0; 32];\n\n    for i in 0..16 {\n        high_bytes[16 + i] = r_bytes[i];\n        low_bytes[16 + i] = r_bytes[i + 16];\n    }\n\n    let low = bytes32_to_field(low_bytes);\n    let high = bytes32_to_field(high_bytes);\n\n    Scalar::new(low, high)\n}\n\nfn compute_ivpk_app(ivpk: Point, contract_address: AztecAddress) -> Point {\n    // It is useless to compute this, it brings no value to derive fully.\n    // Issue(#6955)\n    ivpk\n    /*\n    // @todo Just setting infinite to false, but it should be checked.\n    // for example user could define ivpk = infinity using the registry\n    assert((ivpk.x != 0) & (ivpk.y != 0), \"ivpk is infinite\");\n\n    let i = fr_to_fq(poseidon2_hash([contract_address.to_field(), ivpk.x, ivpk.y, GENERATOR_INDEX__IVSK_M]));\n    let I = i.derive_public_key();\n\n    let embed_I = Point { x: I.x, y: I.y, is_infinite: false };\n    let embed_ivpk = Point { x: ivpk.x, y: ivpk.y, is_infinite: false };\n\n    let embed_result = embedded_curve_add(embed_I, embed_ivpk);\n\n    Point::new(embed_result.x, embed_result.y)*/\n}\n"},"103":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    encrypted_logs::payload::compute_encrypted_note_log, oracle::logs_traits::LensForEncryptedLog\n};\nuse dep::protocol_types::{\n    hash::sha256_to_field, address::AztecAddress, point::Point, abis::note_hash::NoteHash,\n    constants::MAX_NOTE_HASHES_PER_CALL, utils::arrays::find_index\n};\n\nunconstrained fn compute_unconstrained<Note, N, NB, M>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: Point,\n    ivpk: Point,\n    note: Note\n) -> ([u8; M], Field) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    compute(contract_address, storage_slot, ovsk_app, ovpk, ivpk, note)\n}\n\nfn compute<Note, N, NB, M>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: Point,\n    ivpk: Point,\n    note: Note\n) -> ([u8; M], Field) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    let encrypted_log: [u8; M] = compute_encrypted_note_log(contract_address, storage_slot, ovsk_app, ovpk, ivpk, note);\n    let log_hash = sha256_to_field(encrypted_log);\n    (encrypted_log, log_hash)\n}\n\nfn emit_with_keys<Note, N, NB, M>(\n    context: &mut PrivateContext,\n    note: Note,\n    ovpk: Point,\n    ivpk: Point,\n    inner_compute: fn(AztecAddress, Field, Field, Point, Point, Note) -> ([u8; M], Field)\n) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    let note_exists_index = find_index(\n        context.note_hashes.storage,\n        |n: NoteHash| n.counter == note_hash_counter\n    );\n    assert(\n        note_exists_index as u32 != MAX_NOTE_HASHES_PER_CALL, \"Can only emit a note log for an existing note.\"\n    );\n\n    let contract_address: AztecAddress = context.this_address();\n    let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n    let (encrypted_log, log_hash) = inner_compute(contract_address, storage_slot, ovsk_app, ovpk, ivpk, note);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n\npub fn encode_and_encrypt_note<Note, N, NB, M>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let header = context.get_header();\n        let ovpk = header.get_ovpk_m(context, ov);\n        let ivpk = header.get_ivpk_m(context, iv);\n        emit_with_keys(context, e.note, ovpk, ivpk, compute);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, N, NB, M>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let header = context.get_header();\n        let ovpk = header.get_ovpk_m(context, ov);\n        let ivpk = header.get_ivpk_m(context, iv);\n        emit_with_keys(context, e.note, ovpk, ivpk, compute_unconstrained);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys<Note, N, NB, M>(\n    context: &mut PrivateContext,\n    ovpk: Point,\n    ivpk: Point\n) -> fn[(&mut PrivateContext, Point, Point)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        emit_with_keys(context, e.note, ovpk, ivpk, compute);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys_unconstrained<Note, N, NB, M>(\n    context: &mut PrivateContext,\n    ovpk: Point,\n    ivpk: Point\n) -> fn[(&mut PrivateContext, Point, Point)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        emit_with_keys(context, e.note, ovpk, ivpk, compute_unconstrained);\n    }\n}\n"},"104":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/outgoing_body.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash\n};\n\nuse std::aes128::aes128_encrypt;\n\nuse crate::keys::point_to_symmetric_key::point_to_symmetric_key;\n\nstruct EncryptedLogOutgoingBody {\n    eph_sk: Scalar,\n    recipient: AztecAddress,\n    recipient_ivpk_app: Point,\n}\n\nimpl EncryptedLogOutgoingBody {\n    pub fn new(eph_sk: Scalar, recipient: AztecAddress, recipient_ivpk_app: Point) -> Self {\n        Self { eph_sk, recipient, recipient_ivpk_app }\n    }\n\n    pub fn compute_ciphertext(self, ovsk_app: Scalar, eph_pk: Point) -> [u8; 176] {\n        // Again, we could compute `eph_pk` here, but we keep the interface more similar\n        // and also make it easier to optimise it later as we just pass it along\n\n        let mut buffer: [u8; 160] = [0; 160];\n\n        let serialized_eph_sk_high = self.eph_sk.hi.to_be_bytes(32);\n        let serialized_eph_sk_low = self.eph_sk.lo.to_be_bytes(32);\n\n        let address_bytes = self.recipient.to_field().to_be_bytes(32);\n        let serialized_recipient_ivpk_app = self.recipient_ivpk_app.serialize();\n        let serialized_recipient_ivpk_app_x = serialized_recipient_ivpk_app[0].to_be_bytes(32);\n        let serialized_recipient_ivpk_app_y = serialized_recipient_ivpk_app[1].to_be_bytes(32);\n\n        for i in 0..32 {\n            buffer[i] = serialized_eph_sk_high[i];\n            buffer[i + 32] = serialized_eph_sk_low[i];\n            buffer[i + 64] = address_bytes[i];\n            buffer[i + 96] = serialized_recipient_ivpk_app_x[i];\n            buffer[i + 128] = serialized_recipient_ivpk_app_y[i];\n        }\n\n        // We compute the symmetric key using poseidon.\n        let full_key: [u8; 32] = poseidon2_hash(\n            [\n            ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y,\n            GENERATOR_INDEX__SYMMETRIC_KEY as Field\n        ]\n        ).to_be_bytes(32).as_array();\n\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(buffer, iv, sym_key).as_array()\n    }\n}\n\nmod test {\n    use crate::encrypted_logs::outgoing_body::EncryptedLogOutgoingBody;\n    use dep::protocol_types::{\n        address::AztecAddress, traits::Empty, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        scalar::Scalar, point::Point, hash::poseidon2_hash\n    };\n\n    use crate::context::PrivateContext;\n\n    #[test]\n    fn test_encrypted_log_outgoing_body() {\n        let eph_sk = Scalar::new(\n            0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        );\n        let recipient_ivsk_app = Scalar::new(\n            0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        );\n        let sender_ovsk_app = Scalar::new(\n            0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        );\n\n        let eph_pk = eph_sk.derive_public_key();\n        let recipient_ivpk_app = recipient_ivsk_app.derive_public_key();\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let body = EncryptedLogOutgoingBody::new(eph_sk, recipient, recipient_ivpk_app);\n\n        let ciphertext = body.compute_ciphertext(sender_ovsk_app, eph_pk);\n\n        let expected_outgoing_body_ciphertext = [\n            127, 84, 96, 176, 101, 107, 236, 57, 68, 8, 53, 202, 138, 74, 186, 54, 74, 193, 245, 7, 109, 59, 218, 33, 1, 31, 205, 225, 241, 209, 64, 222, 94, 245, 4, 150, 47, 241, 187, 64, 152, 20, 102, 158, 200, 217, 213, 82, 1, 240, 170, 185, 51, 80, 27, 109, 63, 231, 235, 120, 174, 44, 133, 248, 10, 97, 60, 40, 222, 190, 147, 76, 187, 48, 91, 206, 48, 106, 56, 118, 38, 127, 82, 4, 182, 188, 44, 224, 31, 129, 47, 107, 134, 252, 20, 25, 122, 191, 158, 69, 35, 255, 215, 171, 196, 45, 91, 184, 83, 80, 238, 201, 1, 233, 235, 159, 171, 130, 158, 64, 176, 165, 132, 30, 84, 81, 71, 195, 145, 47, 82, 247, 210, 192, 23, 4, 220, 90, 56, 109, 46, 105, 79, 251, 165, 141, 185, 233, 191, 118, 219, 153, 191, 162, 99, 238, 241, 249, 9, 74, 210, 241, 54, 28, 126, 226, 85, 235, 174, 75, 239, 207, 100, 184, 248, 194\n        ];\n\n        for i in 0..expected_outgoing_body_ciphertext.len() {\n            assert_eq(ciphertext[i], expected_outgoing_body_ciphertext[i]);\n        }\n        assert_eq(expected_outgoing_body_ciphertext.len(), ciphertext.len());\n    }\n}\n"},"105":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::point_to_symmetric_key::point_to_symmetric_key;\n\nuse std::aes128::aes128_encrypt;\n\nstruct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext(self, secret: Scalar, point: Point) -> [u8; 48] {\n        let full_key = point_to_symmetric_key(secret, point);\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes(32).as_array();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nfn test_encrypted_log_header() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar::new(\n        0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    );\n    let point = Point::new(\n        0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        false\n    );\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    let expected_header_ciphertext = [\n        228, 9, 65, 81, 62, 59, 249, 207, 90, 196, 206, 72, 39, 199, 82, 196, 23, 131, 32, 226, 26, 176, 43, 39, 239, 177, 177, 192, 85, 216, 17, 15, 18, 187, 35, 225, 135, 192, 63, 88, 29, 173, 232, 46, 72, 82, 187, 139\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext);\n}\n"},"106":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/incoming_body.nr","source":"use crate::note::note_interface::NoteInterface;\nuse crate::event::event_interface::EventInterface;\nuse dep::protocol_types::{scalar::Scalar, point::Point};\n\nuse std::aes128::aes128_encrypt;\nuse crate::keys::point_to_symmetric_key::point_to_symmetric_key;\n\nstruct EncryptedLogIncomingBody<M> {\n    plaintext: [u8; M]\n}\n\nimpl<M> EncryptedLogIncomingBody<M> {\n    pub fn from_note<T, N>(note: T, storage_slot: Field) -> Self where T: NoteInterface<N, M> {\n        let mut plaintext = note.to_be_bytes(storage_slot);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn from_event<T, MR>(event: T, randomness: Field) -> Self where T: EventInterface<M, MR> {\n        let mut plaintext = event.private_to_be_bytes(randomness);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn compute_ciphertext(self, eph_sk: Scalar, ivpk_app: Point) -> [u8] {\n        let full_key = point_to_symmetric_key(eph_sk, ivpk_app);\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(self.plaintext, iv, sym_key)\n    }\n}\n\nmod test {\n    use crate::encrypted_logs::incoming_body::EncryptedLogIncomingBody;\n    use dep::protocol_types::{\n        address::AztecAddress, traits::Empty, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        scalar::Scalar, point::Point, traits::Serialize, abis::event_selector::EventSelector\n    };\n\n    use crate::{\n        note::{note_header::NoteHeader, note_interface::NoteInterface},\n        event::event_interface::EventInterface, oracle::unsafe_rand::unsafe_rand,\n        context::PrivateContext\n    };\n\n    struct AddressNote {\n        address: AztecAddress,\n        owner: AztecAddress,\n        randomness: Field,\n        header: NoteHeader,\n    }\n\n    global ADDRESS_NOTE_LEN: Field = 3;\n    global ADDRESS_NOTE_BYTES_LEN = 32 * 3 + 64;\n\n    impl NoteInterface<ADDRESS_NOTE_LEN, ADDRESS_NOTE_BYTES_LEN> for AddressNote {\n        fn compute_note_content_hash(self) -> Field {1}\n\n        fn get_note_type_id() -> Field {\n            1\n        }\n\n        fn get_header(self) -> NoteHeader { self.header}\n\n        fn set_header(&mut self, header: NoteHeader) {self.header = header; }\n\n        fn compute_note_hash_and_nullifier(self, context: &mut PrivateContext) -> (Field, Field) {\n            (1, 1)\n        }\n\n        fn compute_note_hash_and_nullifier_without_context(self) -> (Field, Field) {(1,1)}\n\n        fn serialize_content(self) -> [Field; ADDRESS_NOTE_LEN] { [self.address.to_field(), self.owner.to_field(), self.randomness]}\n\n        fn deserialize_content(fields: [Field; ADDRESS_NOTE_LEN]) -> Self {\n            AddressNote { address: AztecAddress::from_field(fields[0]), owner: AztecAddress::from_field(fields[1]), randomness: fields[2], header: NoteHeader::empty() }\n        }\n\n        fn to_be_bytes(self, storage_slot: Field) -> [u8; ADDRESS_NOTE_BYTES_LEN] {\n            let serialized_note = self.serialize_content();\n\n            let mut buffer: [u8; ADDRESS_NOTE_BYTES_LEN] = [0; ADDRESS_NOTE_BYTES_LEN];\n\n            let storage_slot_bytes = storage_slot.to_be_bytes(32);\n            let note_type_id_bytes = AddressNote::get_note_type_id().to_be_bytes(32);\n\n            for i in 0..32 {\n                buffer[i] = storage_slot_bytes[i];\n                buffer[32 + i] = note_type_id_bytes[i];\n            }\n\n            for i in 0..serialized_note.len() {\n                let bytes = serialized_note[i].to_be_bytes(32);\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n            buffer\n        }\n    }\n\n    impl AddressNote {\n        pub fn new(address: AztecAddress, owner: AztecAddress, randomness: Field) -> Self {\n            AddressNote { address, owner, randomness, header: NoteHeader::empty() }\n        }\n    }\n\n    #[test]\n    fn test_encrypted_note_log_incoming_body() {\n        let note = AddressNote::new(\n            AztecAddress::from_field(0x1),\n            AztecAddress::from_field(0x2),\n            3\n        );\n\n        let storage_slot = 2;\n\n        let eph_sk = Scalar::new(\n            0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        );\n        let ivpk_app = Point::new(\n            0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            false\n        );\n\n        let body = EncryptedLogIncomingBody::from_note(note, storage_slot);\n\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk_app);\n\n        let expected_note_body_ciphertext = [\n            228, 9, 65, 81, 62, 59, 249, 207, 90, 196, 206, 72, 39, 199, 82, 196, 63, 127, 188, 251, 150, 188, 238, 205, 3, 86, 102, 164, 175, 12, 137, 158, 163, 111, 205, 10, 229, 230, 46, 202, 110, 107, 156, 180, 67, 192, 161, 201, 48, 153, 169, 1, 25, 182, 93, 39, 39, 207, 251, 218, 234, 147, 156, 13, 110, 180, 190, 199, 41, 6, 211, 203, 176, 110, 165, 186, 110, 127, 199, 22, 201, 149, 92, 249, 219, 68, 145, 68, 179, 29, 233, 34, 98, 123, 197, 234, 169, 53, 44, 14, 81, 60, 92, 27, 250, 134, 49, 248, 57, 119, 236, 118, 158, 104, 82, 243, 98, 164, 60, 72, 74, 27, 177, 194, 221, 225, 193, 150, 67, 235, 205, 106, 150, 24, 126, 186, 220, 178, 199, 189, 113, 54, 181, 55, 46, 15, 236, 236, 9, 159, 5, 172, 237, 154, 110, 50, 241, 64, 92, 13, 37, 53, 20, 140, 42, 146, 229, 63, 97, 25, 159, 63, 235, 104, 68, 100\n        ];\n\n        assert_eq(expected_note_body_ciphertext.len(), ciphertext.len());\n\n        for i in 0..expected_note_body_ciphertext.len() {\n            assert_eq(ciphertext[i], expected_note_body_ciphertext[i]);\n        }\n    }\n\n    struct TestEvent {\n        value0: Field,\n        value1: Field,\n        value2: Field,\n    }\n\n    impl Serialize<3> for TestEvent {\n        fn serialize(self) -> [Field; 3] {\n            [self.value0, self.value1, self.value2]\n        }\n    }\n\n    global TEST_EVENT_LEN: Field = 3;\n    global TEST_EVENT_BYTES_LEN = 32 * 3 + 64;\n    global TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS = 32 * 3 + 32;\n\n    impl EventInterface<TEST_EVENT_BYTES_LEN, TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS> for TestEvent {\n        fn get_event_type_id() -> EventSelector {\n            EventSelector::from_signature(\"TestEvent(Field,Field,Field)\")\n        }\n\n        fn private_to_be_bytes(self, randomness: Field) -> [u8; TEST_EVENT_BYTES_LEN] {\n            let mut buffer: [u8; TEST_EVENT_BYTES_LEN] = [0; TEST_EVENT_BYTES_LEN];\n\n            let randomness_bytes = randomness.to_be_bytes(32);\n            let event_type_id_bytes = TestEvent::get_event_type_id().to_field().to_be_bytes(32);\n\n            for i in 0..32 {\n                buffer[i] = randomness_bytes[i];\n                buffer[32 + i] = event_type_id_bytes[i];\n            }\n\n            let serialized_event = self.serialize();\n\n            for i in 0..serialized_event.len() {\n                let bytes = serialized_event[i].to_be_bytes(32);\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n\n            buffer\n        }\n\n        fn to_be_bytes(self) -> [u8; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS] {\n             let mut buffer: [u8; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS] = [0; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS];\n\n             let event_type_id_bytes = TestEvent::get_event_type_id().to_field().to_be_bytes(32);\n\n             for i in 0..32 {\n                 buffer[i] = event_type_id_bytes[i];\n            }\n\n             let serialized_event = self.serialize();\n\n             for i in 0..serialized_event.len() {\n                 let bytes = serialized_event[i].to_be_bytes(32);\n                 for j in 0..32 {\n                     buffer[32 + i * 32 + j] = bytes[j];\n                }\n            }\n\n             buffer\n        }\n\n        fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n            _emit(self);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_event_incoming_body() {\n        let test_event = TestEvent { value0: 1, value1: 2, value2: 3 };\n\n        let eph_sk = Scalar::new(\n            0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        );\n\n        let ivpk_app = Point::new(\n            0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            false\n        );\n\n        let randomness = 2;\n\n        let body = EncryptedLogIncomingBody::from_event(test_event, randomness);\n\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk_app);\n\n        let expected_event_body_ciphertext = [\n            228, 9, 65, 81, 62, 59, 249, 207, 90, 196, 206, 72, 39, 199, 82, 196, 63, 127, 188, 251, 150, 188, 238, 205, 3, 86, 102, 164, 175, 12, 137, 158, 163, 111, 205, 10, 229, 230, 46, 202, 110, 107, 156, 180, 67, 192, 161, 201, 66, 122, 29, 35, 42, 33, 153, 216, 199, 208, 103, 207, 126, 153, 189, 136, 19, 220, 238, 15, 169, 29, 255, 11, 123, 107, 70, 192, 53, 40, 36, 93, 187, 32, 123, 136, 104, 23, 229, 245, 152, 90, 84, 2, 136, 112, 42, 27, 82, 214, 104, 14, 250, 48, 199, 245, 88, 22, 200, 77, 38, 51, 127, 56, 138, 255, 16, 46, 179, 129, 215, 185, 185, 116, 148, 16, 133, 62, 56, 180, 10, 132, 109, 77, 206, 199, 21, 167, 7, 163, 171, 158, 244, 23, 18, 121, 108, 42, 107, 7, 48, 84, 212, 104, 39, 16, 109, 7, 108, 129, 60, 80, 112, 241, 223, 140, 186, 158, 38, 74, 230, 213, 159, 175, 142, 228, 128, 160\n        ];\n\n        assert_eq(expected_event_body_ciphertext.len(), ciphertext.len());\n\n        for i in 0..expected_event_body_ciphertext.len() {\n            assert_eq(ciphertext[i], expected_event_body_ciphertext[i]);\n        }\n    }\n}\n"},"110":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, MAX_NOTES_PER_PAGE, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, Comparator, NoteStatus, PropertySelector},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\n\nmod test;\n\nfn extract_property_value_from_selector<N>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note. \n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value = serialized_note[selector.index].to_be_bytes(32);\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, N, M>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<N>(serialized_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        // Values are computed ahead of time because circuits evaluate all branches\n        let is_equal = value_field == select.value.to_field();\n        let is_lt = value_field.lt(select.value.to_field());\n\n        if (select.comparator == Comparator.EQ) {\n            assert(is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.NEQ) {\n            assert(!is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LT) {\n            assert(is_lt, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LTE) {\n            assert(is_lt | is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GT) {\n            assert(!is_lt & !is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GTE) {\n            assert(!is_lt, \"Mismatch return note field.\");\n        }\n    }\n}\n\nfn check_notes_order<N>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N, M>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> Note where Note: NoteInterface<N, M> {\n    let note = get_note_internal(storage_slot);\n\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    context.push_note_hash_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, M, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, M, FILTER_ARGS>\n) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> where Note: NoteInterface<N, M> {\n    let opt_notes = get_notes_internal(storage_slot, options);\n\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nfn constrain_get_notes_internal<Note, N, M, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, M, FILTER_ARGS>\n) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> where Note: NoteInterface<N, M> {\n    let mut returned_notes = BoundedVec::new();\n\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        let opt_note = filtered_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n\n            // The below code is used to collapse a sparse array into one where the values are guaranteed to be at the \n            // front of the array. This is highly useful because the caller knows that the returned array won't have\n            // more than option.limits notes, and can therefore loop over this limit value instead of the entire array,\n            // resulting in a smaller circuit and faster proving times.\n            // We write at returned_notes[num_notes] because num_notes is only advanced when we have a value in \n            // filtered_notes.\n            returned_notes.push(note);\n        };\n    }\n\n    // As long as we only loop till `options.limit` the array will be guaranteed to be at most of length `options.limit`.\n    assert(returned_notes.len() <= options.limit, \"Got more notes than limit.\");\n    // We will however check that nothing else was returned after the limit.\n    for i in options.limit..filtered_notes.len() {\n        assert(filtered_notes[i].is_none(), \"Got more notes than limit.\");\n    }\n\n    assert(returned_notes.len() != 0, \"Cannot return zero notes\");\n\n    returned_notes\n}\n\nunconstrained fn get_note_internal<Note, N, M>(storage_slot: Field) -> Note where Note: NoteInterface<N, M> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, M, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, M, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N, M> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    )\n}\n\nunconstrained pub fn view_notes<Note, N, M>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N, M>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N, M> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"},"112":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    constants::GENERATOR_INDEX__INNER_NOTE_HASH,\n    hash::{\n    pedersen_hash, compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_inner_note_hash_from_preimage(storage_slot: Field, note_content_hash: Field) -> Field {\n    pedersen_hash(\n        [storage_slot, note_content_hash],\n        GENERATOR_INDEX__INNER_NOTE_HASH\n    )\n}\n\nfn compute_inner_note_hash<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    compute_inner_note_hash_from_preimage(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N, M>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note_with_header.get_header();\n    let (_, inner_nullifier) = note_with_header.compute_note_hash_and_nullifier(context);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\nfn compute_note_hash_for_read_request_from_innter_and_nonce(\n    inner_note_hash: Field,\n    nonce: Field\n) -> Field {\n    // TODO(#1386): This if-else can be nuked once we have nonces injected from public\n    if (nonce == 0) {\n        // If nonce is zero, that means we are reading a public note.\n        inner_note_hash\n    } else {\n        compute_unique_note_hash(nonce, inner_note_hash)\n    }\n}\n\npub fn compute_note_hash_for_read_request<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let inner_note_hash = compute_inner_note_hash(note);\n    let nonce = note.get_header().nonce;\n\n    compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, nonce)\n}\n\npub fn compute_note_hash_for_consumption<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    if (header.note_hash_counter != 0) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        inner_note_hash\n    } else {\n        // If a note is not transient, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the siloed_note_hash which has already been hashed with\n        // nonce and then contract address. This hash will match the existing leaf in the note hash\n        // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        let unique_note_hash = compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, header.nonce);\n        compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n        // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n        // nullification, it is not strictly necessary to silo the note hash before computing\n        // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n        // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n        // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n        // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n        // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n    }\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, N, M, S>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N, M> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n    let unique_note_hash = compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, note_header.nonce);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        let (_, nullifier) = note.compute_note_hash_and_nullifier_without_context();\n        nullifier\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [inner_note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"113":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_inner_note_hash, compute_note_hash_for_consumption}, note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N, M>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let inner_note_hash = compute_inner_note_hash(*note);\n\n    let serialized_note = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        inner_note_hash,\n        note_hash_counter\n    )\n        == 0\n    );\n\n    context.push_note_hash(inner_note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, N, M>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let inner_note_hash = compute_inner_note_hash(*note);\n\n    context.push_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N, M>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N, M> {\n    let (note_hash, nullifier) = note.compute_note_hash_and_nullifier(context);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let note_hash_for_consumption = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a non-transient note and we don't populate the note_hash with real\n        // value (if we did so the `notifyNullifiedNote` oracle would throw).\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a transient note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can find it and squash both\n        // the note and the nullifier.\n        note_hash\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    assert(notify_nullified_note(nullifier, note_hash_for_consumption, nullifier_counter) == 0);\n\n    context.push_nullifier(nullifier, note_hash_for_consumption)\n}\n"},"114":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\nstruct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting  \n * a change note in a token's transfer function only when there is \"change\" left).\n */\nstruct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(self) {}\n}\n"},"116":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr","source":"use std::option::Option;\nuse crate::note::note_getter_options::{PropertySelector, Select, Sort, Comparator, NoteStatus};\nuse dep::protocol_types::traits::ToField;\nuse crate::note::note_interface::NoteInterface;\nuse crate::note::constants::MAX_NOTES_PER_PAGE;\n\n// docs:start:NoteViewerOptions\nstruct NoteViewerOptions<Note, N, M> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, N, M> NoteViewerOptions<Note, N, M> {\n    pub fn new() -> NoteViewerOptions<Note, N, M> where Note: NoteInterface<N, M> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        value: T,\n        comparator: Option<u8>\n    ) -> Self where T: ToField {\n        self.selects.push(\n            Option::some(\n                Select::new(\n                    property_selector,\n                    value.to_field(),\n                    comparator.unwrap_or(Comparator.EQ)\n                )\n            )\n        );\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set. This isn't required in unconstrained code, but we still keep this\n        // requirement here for API consistency.\n        assert_constant(limit);\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"},"117":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/note_header.nr","source":"use dep::protocol_types::address::AztecAddress;\nuse dep::protocol_types::traits::{Empty, Eq, Serialize};\n\nstruct NoteHeader {\n    contract_address: AztecAddress,\n    nonce: Field,\n    storage_slot: Field,\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386)\n    // Check the nonce to see whether a note is transient or not.\n    note_hash_counter: u32, // a note_hash_counter of 0 means non-transient\n}\n\nimpl Empty for NoteHeader {\n    fn empty() -> Self {\n        NoteHeader { contract_address: AztecAddress::zero(), nonce: 0, storage_slot: 0, note_hash_counter: 0 }\n    }\n}\n\nimpl Eq for NoteHeader {\n    fn eq(self, other: Self) -> bool {\n        (self.contract_address == other.contract_address) & \n        (self.nonce == other.nonce) & \n        (self.storage_slot == other.storage_slot)& \n        (self.note_hash_counter == other.note_hash_counter)\n    }\n}\n\nimpl NoteHeader {\n    pub fn new(contract_address: AztecAddress, nonce: Field, storage_slot: Field) -> Self {\n        NoteHeader { contract_address, nonce, storage_slot, note_hash_counter: 0 }\n    }\n}\n\nimpl Serialize<4> for NoteHeader {\n    fn serialize(self) -> [Field; 4] {\n        [self.contract_address.to_field(), self.nonce, self.storage_slot, self.note_hash_counter as Field]\n    }\n}\n"},"121":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH, MAX_ARGS_LENGTH\n},\n    traits::Hash, hash::{pedersen_hash, compute_siloed_nullifier, sha256_to_field}\n};\nuse crate::oracle::logs_traits::{LensForEncryptedLog, ToBytesForUnencryptedLog};\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    pedersen_hash([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, N, M>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes = (n as Field).to_be_bytes(4);\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    pedersen_hash(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<N>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() <= MAX_ARGS_LENGTH, \"Args length exceeds maximum\");\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..MAX_ARGS_LENGTH {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x11e40f2a780822f7971803048c9a2100579de352e7dadd99981760964da65b57);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"124":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::{address::AztecAddress, point::Point};\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<M>(_note_hash_counter: u32, _encrypted_note: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_note_log<M>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<M>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32\n) {}\n\nunconstrained pub fn emit_encrypted_event_log<M>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedNoteLog)]\nunconstrained fn compute_encrypted_note_log_oracle<N, M>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_note_log<N, M>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_note_log_oracle(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        preimage\n    )\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedEventLog)]\nunconstrained fn compute_encrypted_event_log_oracle<N, M>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _event_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_event_log<N, M>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    event_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_event_log_oracle(\n        contract_address,\n        randomness,\n        event_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        preimage\n    )\n}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_oracle_private<T>(_contract_address: AztecAddress, _message: T, _counter: u32) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log_private_internal<T>(\n    contract_address: AztecAddress,\n    message: T,\n    counter: u32\n) -> Field {\n    emit_unencrypted_log_oracle_private(contract_address, message, counter)\n}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private<N>(contract_address: AztecAddress, message: [Field; N], counter: u32) -> Field {}\n\nunconstrained pub fn emit_contract_class_unencrypted_log_private_internal<N>(contract_address: AztecAddress, message: [Field; N], counter: u32) -> Field {\n    emit_contract_class_unencrypted_log_private(contract_address, message, counter)\n}\n"},"125":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<N>(_args: [Field; N]) -> Field {}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n/// - Pack arguments (array version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments_array<N>(args: [Field; N]) -> Field {\n    pack_arguments_array_oracle(args)\n}\n\n/// - Pack arguments (slice version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments(args: [Field]) -> Field {\n    pack_arguments_oracle(args)\n}\n\n"},"127":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle<N>(_returns: [Field]) -> Field {}\n\nunconstrained pub fn pack_returns(returns: [Field]) {\n    let _unused = pack_returns_oracle(returns);\n}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<N>(_return_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn unpack_returns<N>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n"},"128":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, hash::pedersen_hash,\n    public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage, traits::{Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _leaf_slot: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, leaf_slot: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, leaf_slot);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"129":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub fn get_key_validation_request(pk_m_hash: Field, key_index: Field) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n\n"},"132":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/storage.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<N>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field\n) -> [Field; N] {}\n\nunconstrained pub fn raw_storage_read<N>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> [Field; N] {\n    storage_read_oracle(address.to_field(), storage_slot, block_number as Field, N)\n}\n\nunconstrained pub fn storage_read<T, N>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> T where T: Deserialize<N> {\n    T::deserialize(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::address::AztecAddress;\n\n    use std::test::OracleMock;\n    use crate::test::mocks::mock_struct::MockStruct;\n\n    global address = AztecAddress::from_field(29);\n    global slot = 7;\n    global block_number = 17;\n\n    #[test]\n    fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"},"133":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/unsafe_rand.nr","source":"#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n\n// Called `unsafe_rand` because we do not constrain in circuit that we are dealing with an actual random value.\n// Instead we just trust our PXE.\nunconstrained pub fn unsafe_rand() -> Field {\n    rand_oracle()\n}\n"},"135":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n"},"136":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::PublicKeys;\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained fn get_public_keys_and_partial_address_oracle_wrapper(address: AztecAddress) -> [Field; 13] {\n    get_public_keys_and_partial_address_oracle(address)\n}\n\nfn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle_wrapper(address);\n\n    let keys = PublicKeys {\n        npk_m: Point::new(result[0], result[1], result[2] as bool),\n        ivpk_m: Point::new(result[3], result[4], result[5] as bool),\n        ovpk_m: Point::new(result[6], result[7], result[8] as bool),\n        tpk_m: Point::new(result[9], result[10], result[11] as bool)\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"138":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _inner_note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    inner_note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        serialized_note,\n        inner_note_hash,\n        counter\n    )\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field, _counter: u32) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash, counter)\n}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, N, NB, M, S, NS>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N, NB> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n// Only ever use this in private!\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n// Only ever use this in private!\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n"},"140":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{\n    abis::{\n    function_selector::FunctionSelector, public_call_stack_item::PublicCallStackItem,\n    function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs,\n    call_context::CallContext, read_request::ReadRequest, note_hash::NoteHash, nullifier::Nullifier,\n    log_hash::LogHash, global_variables::GlobalVariables, gas::Gas\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    messaging::l2_to_l1_message::L2ToL1Message, header::Header, address::AztecAddress,\n    utils::reader::Reader,\n    constants::{\n    MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n}\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn parse_public_call_stack_item_from_oracle(fields: [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH]) -> PublicCallStackItem {\n    let mut reader = Reader::new(fields);\n\n    // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n    // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n    // WARNING: if updating, see comment in public_call_stack_item.ts's PublicCallStackItem.hash()\n    let item = PublicCallStackItem {\n        contract_address: AztecAddress::from_field(reader.read()),\n        function_data: FunctionData { selector: FunctionSelector::from_field(reader.read()), is_private: false },\n        public_inputs: PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            start_side_effect_counter: reader.read_u32(),\n            args_hash: reader.read(),\n            returns_hash: 0,\n            note_hash_read_requests: [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n            l1_to_l2_msg_read_requests: [ReadRequest::empty(); MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL],\n            contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n            contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            note_hashes: [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL],\n            nullifiers: [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL],\n            l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL],\n            end_side_effect_counter: 0,\n            unencrypted_logs_hashes: [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL],\n            historical_header: Header::empty(),\n            global_variables: GlobalVariables::empty(),\n            prover_address: AztecAddress::zero(),\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty(),\n            transaction_fee: 0\n        },\n        is_execution_request: true\n    };\n    reader.finish();\n\n    item\n}\n"},"145":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/private_mutable.nr","source":"use dep::protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::pedersen_hash};\n\nuse crate::context::{PrivateContext, UnconstrainedContext};\nuse crate::note::{\n    lifecycle::{create_note, destroy_note}, note_getter::{get_note, view_notes},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions, note_emission::NoteEmission\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateMutable<Note, Context> {\n    context: Context,\n    storage_slot: Field\n}\n// docs:end:struct\n\nmod test;\n\nimpl<T, Context> Storage<T> for PrivateMutable<T, Context> {}\n\nimpl<Note, Context> PrivateMutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateMutable>` type (for example), because the storage slot often also identifies an actor. e.g.\n    // the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    // Note: subsequent nullification of this state variable, via the `replace` method will not be leaky, if the `compute_note_hash_and_nullifier()` method of the underlying note is designed to ensure privacy.\n    // For example, if the `compute_note_hash_and_nullifier()` method injects the secret key of a note owner into the computed nullifier's preimage.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        pedersen_hash(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n}\n\nimpl<Note> PrivateMutable<Note, &mut PrivateContext> {\n    // docs:start:initialize\n    pub fn initialize<N, M>(\n        self,\n        note: &mut Note\n    ) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier, 0);\n\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:initialize\n\n    // docs:start:replace\n    pub fn replace<N, M>(\n        self,\n        new_note: &mut Note\n    ) -> NoteEmission<Note>  where Note: NoteInterface<N, M> {\n        let prev_note: Note = get_note(self.context, self.storage_slot);\n\n        // Nullify previous note.\n        destroy_note(self.context, prev_note);\n\n        // Add replacement note.\n        create_note(self.context, self.storage_slot, new_note)\n    }\n    // docs:end:replace\n\n    pub fn initialize_or_replace<N, M>(\n        self,\n        note: &mut Note\n    ) -> NoteEmission<Note>  where Note: NoteInterface<N, M> {\n        let is_initialized = check_nullifier_exists(self.compute_initialization_nullifier());\n\n        // check_nullifier_exists() is an unconstrained function - we can constrain a true value by providing an \n        // inclusion proof of the nullifier, but cannot constrain a false value since a non-inclusion proof would only \n        // be valid if done in public.\n        // Ultimately, this is not an issue ginen that we'll either:\n        //  - initialize the state variable, which would fail if it was already initialized due to the duplicate \n        //    nullifier, or\n        //  - replace the current value, which would fail if it was not initialized since we wouldn't be able to produce\n        //    an inclusion proof for the current note\n        // This means that an honest oracle will assist the prover to produce a valid proof, while a malicious oracle\n        // (i.e. one that returns an incorrect value for is_initialized) will simply fail to produce a proof.\n        if (!is_initialized) {\n            self.initialize(note)\n        } else {\n            self.replace(note)\n        }\n    }\n\n    // docs:start:get_note\n    pub fn get_note<N, M>(self) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n        let mut note = get_note(self.context, self.storage_slot);\n\n        // Nullify current note to make sure it's reading the latest note.\n        destroy_note(self.context, note);\n\n        // Add the same note again.\n        // Because a nonce is added to every note in the kernel, its nullifier will be different.\n        create_note(self.context, self.storage_slot, &mut note)\n    }\n    // docs:end:get_note\n}\n\nimpl<Note> PrivateMutable<Note, UnconstrainedContext> {\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n\n    // docs:start:view_note\n    unconstrained pub fn view_note<N, M>(self) -> Note where Note: NoteInterface<N, M> {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\n    }\n    // docs:end:view_note\n}\n"},"146":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::oracle::storage::storage_read;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UnconstrainedContext> {\n    unconstrained pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"148":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr","source":"use crate::{\n    context::{PublicContext, UnconstrainedContext}, oracle::storage::storage_read,\n    state_vars::storage::Storage\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like SharedImmutable but without the ability to read from private functions.\n// docs:start:public_immutable_struct\nstruct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\nimpl<T, Context> Storage<T> for PublicImmutable<T, Context> {}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl <T> PublicImmutable<T, &mut PublicContext> {\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T> PublicImmutable<T, UnconstrainedContext> {\n    unconstrained pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"149":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext}, oracle::storage::storage_read,\n    state_vars::storage::Storage\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\nstruct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T> SharedImmutable<T, &mut PublicContext> {\n    // Intended to be only called once. \n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T> SharedImmutable<T, UnconstrainedContext> {\n    unconstrained pub fn read_public<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T> SharedImmutable<T, &mut PrivateContext> {\n    pub fn read_private<T_SERIALIZED_LEN>(self) -> T  where T: Deserialize<T_SERIALIZED_LEN> {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"153":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE, lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader, note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note> PrivateSet<Note, &mut PublicContext> {\n    // docs:start:insert_from_public\n    pub fn insert_from_public<N, M>(self, note: &mut Note) where Note: NoteInterface<N, M> {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note> PrivateSet<Note, &mut PrivateContext> {\n    // docs:start:insert\n    pub fn insert<N, M>(self, note: &mut Note) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    // docs:start:remove\n    pub fn remove<N, M>(self, note: Note) where Note: NoteInterface<N, M> {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read = self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(self.context, note);\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<N, M, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, M, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> where Note: NoteInterface<N, M> {\n        get_notes(self.context, self.storage_slot, options)\n    }\n    // docs:end:get_notes\n}\n\nimpl<Note> PrivateSet<Note, UnconstrainedContext> {\n    // docs:start:view_notes\n    unconstrained pub fn view_notes<N, M>(\n        self,\n        options: NoteViewerOptions<Note, N, M>\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N, M> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"155":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_delay_change.nr","source":"use dep::protocol_types::traits::{Serialize, Deserialize, FromField, ToField};\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to store the minimum delay with which a ScheduledValueChange object can\n// schedule a change.\n// This delay is initally equal to INITIAL_DELAY, and can be safely mutated to any other value over time. This mutation \n// is performed via `schedule_change` in order to satisfy ScheduleValueChange constraints: if e.g. we allowed for the \n// delay to be decreased immediately then it'd be possible for the state variable to schedule a value change with a \n// reduced delay, invalidating prior private reads.\nstruct ScheduledDelayChange<INITIAL_DELAY> {\n    // Both pre and post are stored in public storage, so by default they are zeroed. By wrapping them in an Option, \n    // they default to Option::none(), which we detect and replace with INITIAL_DELAY. The end result is that a\n    // ScheduledDelayChange that has not been initialized has a delay equal to INITIAL_DELAY, which is the desired\n    // effect. Once initialized, the Option will never be none again.\n    pre: Option<u32>,\n    post: Option<u32>,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n    // The _dummy variable forces INITIAL_DELAY to be interpreted as a numeric value. This is a workaround to\n    // https://github.com/noir-lang/noir/issues/4633. Remove once resolved.\n    _dummy: [Field; INITIAL_DELAY],\n}\n\nimpl<INITIAL_DELAY> ScheduledDelayChange<INITIAL_DELAY> {\n    pub fn new(pre: Option<u32>, post: Option<u32>, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change, _dummy: [0; INITIAL_DELAY] }\n    }\n\n    /// Returns the current value of the delay stored in the data structure.\n    /// This function only returns a meaningful value when called in public with the current block number - for\n    /// historical private reads use `get_effective_minimum_delay_at` instead.\n    pub fn get_current(self, current_block_number: u32) -> u32 {\n        // The post value becomes the current one at the block of change, so any transaction that is included in the\n        // block of change will use the post value.\n\n        if current_block_number < self.block_of_change {\n            self.pre.unwrap_or(INITIAL_DELAY)\n        } else {\n            self.post.unwrap_or(INITIAL_DELAY)\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change delay and the block at which it will become the current\n    /// delay. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (u32, u32) {\n        (self.post.unwrap_or(INITIAL_DELAY), self.block_of_change)\n    }\n\n    /// Mutates the delay change by scheduling a change at the current block number. This function is only meaningful\n    /// when called in public with the current block number.\n    /// The block at which the new delay will become effective is determined automatically:\n    ///  - when increasing the delay, the change is effective immediately\n    ///  - when reducing the delay, the change will take effect after a delay equal to the difference between old and\n    ///    new delay. For example, if reducing from 3 days to 1 day, the reduction will be scheduled to happen after 2\n    ///    days.\n    pub fn schedule_change(&mut self, new: u32, current_block_number: u32) {\n        let current = self.get_current(current_block_number);\n\n        // When changing the delay value we must ensure that it is not possible to produce a value change with a delay\n        // shorter than the current one.\n        let blocks_until_change = if new > current {\n            // Increasing the delay value can therefore be done immediately: this does not invalidate prior contraints\n            // about how quickly a value might be changed (indeed it strengthens them).\n            0\n        } else {\n            // Decreasing the delay requires waiting for the difference between current and new delay in order to ensure\n            // that overall the current delay is respected.\n            //\n            //      current                    delay              earliest value block of change\n            //       block                 block of change         if delay remained unchanged\n            //  =======N=========================|================================X=================>\n            //         ^                         ^                                ^\n            //         |-------------------------|--------------------------------|\n            //         |   blocks until change               new delay            |\n            //         ------------------------------------------------------------\n            //                            current delay\n            current - new\n        };\n\n        self.pre = Option::some(current);\n        self.post = Option::some(new);\n        self.block_of_change = current_block_number + blocks_until_change;\n    }\n\n    /// Returns the minimum delay before a value might mutate due to a scheduled change, from the perspective of some\n    /// historical block number. It only returns a meaningful value when called in private with historical blocks. This \n    /// function can be used alongside `ScheduledValueChange.get_block_horizon` to properly constrain the\n    /// `max_block_number` transaction property when reading mutable shared state.\n    /// This value typically equals the current delay at the block following the historical one (the earliest one in\n    /// which a value change could be scheduled), but it also considers scenarios in which a delay reduction is \n    /// scheduled to happen in the near future, resulting in a way to schedule a change with an overall delay lower than\n    /// the current one.\n    pub fn get_effective_minimum_delay_at(self, historical_block_number: u32) -> u32 {\n        if self.block_of_change <= historical_block_number {\n            // If no delay changes were scheduled, then the delay value at the historical block (post) is guaranteed to\n            // hold due to how further delay changes would be scheduled by `schedule_change`.\n            self.post.unwrap_or(INITIAL_DELAY)\n        } else {\n            // If a change is scheduled, then the effective delay might be lower than the current one (pre). At the\n            // block of change the current delay will be the scheduled one, with an overall delay from the historical\n            // block number equal to the number of blocks until the change plus the new delay. If this value is lower\n            // than the current delay, then that is the effective minimum delay.\n            //\n            //       historical\n            //         block                  delay                  actual earliest value\n            //           v                block of change              block of change\n            //  =========NS=====================|=============================X===========Y=====>\n            //            ^                     ^                             ^           ^\n            //     earliest block in            |                             |           |\n            //   which to schedule change       |                             |           |\n            //           |                      |                             |           |\n            //           |----------------------|------------------------------           |\n            //           |         blocks                  new delay                      |\n            //           |      until change                                              |\n            //           |                                                                |\n            //           |----------------------------------------------------------------|\n            //                        current delay at the earliest block in \n            //                             which to scheduled value change\n\n            let blocks_until_change = self.block_of_change - (historical_block_number + 1);\n\n            min(\n                self.pre.unwrap_or(INITIAL_DELAY),\n                blocks_until_change + self.post.unwrap_or(INITIAL_DELAY)\n            )\n        }\n    }\n}\n\nimpl<INITIAL_DELAY> Serialize<1> for ScheduledDelayChange<INITIAL_DELAY> {\n    fn serialize(self) -> [Field; 1] {\n        // We pack all three u32 values into a single U128, which is made up of two u64 limbs.\n        // Low limb: [ pre_inner: u32 | post_inner: u32 ]\n        // High limb: [ empty | pre_is_some: u8 |  post_is_some: u8 | block_of_change: u32 ]\n\n        let lo = ((self.pre.unwrap_unchecked() as u64) * (1 << 32))\n            + (self.post.unwrap_unchecked() as u64);\n\n        let hi = (self.pre.is_some() as u64) * (1 << 33) \n            + (self.post.is_some() as u64 * (1 << 32)) \n            + self.block_of_change as u64;\n\n        let packed = U128::from_u64s_le(lo, hi);\n\n        [packed.to_integer()]\n    }\n}\n\nimpl<INITIAL_DELAY> Deserialize<1> for ScheduledDelayChange<INITIAL_DELAY> {\n    fn deserialize(input: [Field; 1]) -> Self {\n        let packed = U128::from_integer(input[0]);\n\n        // We use division and modulo to clear the bits that correspond to other values when unpacking.\n\n        let pre_is_some = ((packed.hi as u64) / (1 << 33)) as bool;\n        let pre_inner = ((packed.lo as u64) / (1 << 32)) as u32;\n\n        let post_is_some = (((packed.hi as u64) / (1 << 32)) % (1 << 1)) as bool;\n        let post_inner = ((packed.lo as u64) % (1 << 32)) as u32;\n\n        let block_of_change = ((packed.hi as u64) % (1 << 32)) as u32;\n\n        Self {\n            pre: if pre_is_some { Option::some(pre_inner) } else { Option::none() },\n            post: if post_is_some { Option::some(post_inner) } else { Option::none() },\n            block_of_change,\n            _dummy: [0; INITIAL_DELAY],\n        }\n    }\n}\n\nimpl<INITIAL_DELAY> Eq for ScheduledDelayChange<INITIAL_DELAY> {\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre) & (self.post == other.post) & (self.block_of_change == other.block_of_change)\n    }\n}\n"},"157":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/shared_mutable_private_getter.nr","source":"use dep::protocol_types::{\n    hash::{pedersen_hash, poseidon2_hash}, traits::{FromField, ToField}, address::AztecAddress,\n    header::Header\n};\n\nuse crate::context::PrivateContext;\nuse crate::state_vars::{\n    storage::Storage,\n    shared_mutable::{\n    shared_mutable::SharedMutable, scheduled_delay_change::ScheduledDelayChange,\n    scheduled_value_change::ScheduledValueChange\n}\n};\n\nstruct SharedMutablePrivateGetter<T, INITIAL_DELAY> {\n    context: &mut PrivateContext,\n    // The contract address of the contract we want to read from\n    other_contract_address: AztecAddress,\n    // The storage slot where the SharedMutable is stored on the other contract\n    storage_slot: Field,\n    // The _dummy variable forces INITIAL_DELAY to be interpreted as a numberic value. This is a workaround to\n    // https://github.com/noir-lang/noir/issues/4633. Remove once resolved.\n    _dummy: [Field; INITIAL_DELAY],\n}\n\n// We have this as a view-only interface to reading Shared Mutables in other contracts.\n// Currently the Shared Mutable does not support this. We can adapt SharedMutable at a later date\nimpl<T, INITIAL_DELAY> SharedMutablePrivateGetter<T, INITIAL_DELAY> {\n    pub fn new(\n        context: &mut PrivateContext,\n        other_contract_address: AztecAddress,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        assert(other_contract_address.to_field() != 0, \"Other contract address cannot be 0\");\n        Self { context, other_contract_address, storage_slot, _dummy: [0; INITIAL_DELAY] }\n    }\n\n    pub fn get_value_in_private(self, header: Header) -> T where T: FromField + ToField + Eq {\n        // We create a dummy SharedMutable state variable so that we can reuse its historical_read_from_public_storage\n        // method, greatly reducing code duplication. \n        let dummy: SharedMutable<T, INITIAL_DELAY, ()> = SharedMutable::new((), self.storage_slot);\n        let (value_change, delay_change, historical_block_number) = dummy.historical_read_from_public_storage(header, self.other_contract_address);\n\n        let effective_minimum_delay = delay_change.get_effective_minimum_delay_at(historical_block_number);\n        let block_horizon = value_change.get_block_horizon(historical_block_number, effective_minimum_delay);\n\n        // If our context has the same header as the one we pass in via the parameter, we are trying to read the \"current\" value\n        // and thus need to set the tx max block number below. If the context header is not the same as the one we pass in, this means\n        // we are trying to read a historical value and thus have no constraint on the max block number that this transaction can be included in.\n        if (self.context.historical_header.global_variables.block_number.eq(header.global_variables.block_number)) {\n            self.context.set_tx_max_block_number(block_horizon);\n        }\n\n        value_change.get_current_at(historical_block_number)\n    }\n}\n"},"159":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_value_change.nr","source":"use dep::protocol_types::traits::{Serialize, Deserialize, FromField, ToField};\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to represent a value that changes from `pre` to `post` at some block\n// called the `block_of_change`. The value can only be made to change by scheduling a change event at some future block\n// of change after some minimum delay measured in blocks has elapsed. This means that at any given block number we know\n// both the current value and the smallest block number at which the value might change - this is called the\n// 'block horizon'.\nstruct ScheduledValueChange<T> {\n    pre: T,\n    post: T,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n}\n\nimpl<T> ScheduledValueChange<T> {\n    pub fn new(pre: T, post: T, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the value stored in the data structure at a given block. This function can be called both in public\n    /// (where `block_number` is simply the current block number, i.e. the number of the block in which the current\n    /// transaction will be included) and in private (where `block_number` is the historical block number that is used\n    /// to construct the proof).\n    /// Reading in private is only safe if the transaction's `max_block_number` property is set to a value lower or\n    /// equal to the block horizon (see `get_block_horizon()`).\n    pub fn get_current_at(self, block_number: u32) -> T {\n        // The post value becomes the current one at the block of change. This means different things in each realm:\n        // - in public, any transaction that is included in the block of change will use the post value\n        // - in private, any transaction that includes the block of change as part of the historical state will use the\n        //   post value (barring any follow-up changes)\n\n        if block_number < self.block_of_change {\n            self.pre\n        } else {\n            self.post\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change value and the block at which it will become the current\n    /// value. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (T, u32) {\n        (self.post, self.block_of_change)\n    }\n\n    /// Returns the largest block number at which the value returned by `get_current_at` is known to remain the current\n    /// value. This value is only meaningful in private when constructing a proof at some `historical_block_number`,\n    /// since due to its asynchronous nature private execution cannot know about any later scheduled changes.\n    /// The caller of this function must know how quickly the value can change due to a scheduled change in the form of\n    /// `minimum_delay`. If the delay itself is immutable, then this is just its duration. If the delay is mutable\n    /// however, then this value is the 'effective minimum delay' (obtained by calling\n    /// `ScheduledDelayChange.get_effective_minimum_delay_at`), which equals the minimum number of blocks that need to\n    /// elapse from the next block until the value changes, regardless of further delay changes.\n    /// The value returned by `get_current_at` in private when called with a historical block number is only safe to use\n    /// if the transaction's `max_block_number` property is set to a value lower or equal to the block horizon computed\n    /// using the same historical block number.\n    pub fn get_block_horizon(self, historical_block_number: u32, minimum_delay: u32) -> u32 {\n        // The block horizon is the very last block in which the current value is known. Any block past the horizon\n        // (i.e. with a block number larger than the block horizon) may have a different current value. Reading the\n        // current value in private typically requires constraining the maximum valid block number to be equal to the\n        // block horizon.\n\n        if historical_block_number >= self.block_of_change {\n            // Once the block of change has been mined, the current value (post) will not change unless a new value\n            // change is scheduled. This did not happen at the historical block number (or else it would not be\n            // greater or equal to the block of change), and therefore could only happen after the historical block\n            // number. The earliest would be the immediate next block, and so the smallest possible next block of change\n            // equals `historical_block_number + 1 + minimum_delay`. Our block horizon is simply the previous block to\n            // that one.\n            //\n            //      block of      historical\n            //       change         block            block horizon\n            //   =======|=============N===================H===========>\n            //                         ^                   ^\n            //                         ---------------------\n            //                             minimum delay\n\n            historical_block_number + minimum_delay\n        } else {\n            // If the block of change has not yet been mined however, then there are two possible scenarios.\n            //   a) It could be so far into the future that the block horizon is actually determined by the minimum\n            //      delay, because a new change could be scheduled and take place _before_ the currently scheduled one.\n            //      This is similar to the scenario where the block of change is in the past: the time horizon is the\n            //      block prior to the earliest one in which a new block of change might land.\n            //\n            //         historical\n            //           block                        block horizon      block of change\n            //        =====N=================================H=================|=========>\n            //              ^                                 ^\n            //              |                                 |\n            //              -----------------------------------\n            //                        minimum delay\n            //\n            //   b) It could be fewer than `minimum_delay` blocks away from the historical block number, in which case\n            //      the block of change would become the limiting factor for the time horizon, which would equal the\n            //      block right before the block of change (since by definition the value changes at the block of\n            //      change).\n            //\n            //           historical                         block horizon\n            //             block     block of change       if not scheduled\n            //        =======N=============|===================H=================>\n            //                ^           ^                     ^\n            //                |     actual horizon              |\n            //                -----------------------------------\n            //                          minimum delay\n            //\n            // Note that the current implementation does not allow the caller to set the block of change to an arbitrary\n            // value, and therefore scenario a) is not currently possible. However implementing #5501 would allow for\n            // this to happen.\n\n            // Because historical_block_number < self.block_of_change, then block_of_change > 0 and we can safely\n            // subtract 1.\n            min(\n                self.block_of_change - 1,\n                historical_block_number + minimum_delay\n            )\n        }\n    }\n\n    /// Mutates the value by scheduling a change at the current block number. This function is only meaningful when\n    /// called in public with the current block number.\n    pub fn schedule_change(\n        &mut self,\n        new_value: T,\n        current_block_number: u32,\n        minimum_delay: u32,\n        block_of_change: u32\n    ) {\n        assert(block_of_change >= current_block_number + minimum_delay);\n\n        self.pre = self.get_current_at(current_block_number);\n        self.post = new_value;\n        self.block_of_change = block_of_change;\n    }\n}\n\nimpl<T> Serialize<3> for ScheduledValueChange<T> {\n    fn serialize(self) -> [Field; 3] where T: ToField {\n        [self.pre.to_field(), self.post.to_field(), self.block_of_change.to_field()]\n    }\n}\n\nimpl<T> Deserialize<3> for ScheduledValueChange<T> {\n  fn deserialize(input: [Field; 3]) -> Self  where T: FromField {\n    Self {\n        pre: FromField::from_field(input[0]),\n        post: FromField::from_field(input[1]),\n        block_of_change: FromField::from_field(input[2]),\n    }\n  }\n}\n\nimpl<T> Eq for ScheduledValueChange<T>  {\n    fn eq(self, other: Self) -> bool where T: Eq {\n        (self.pre == other.pre) & (self.post == other.post) & (self.block_of_change == other.block_of_change)\n    }\n}\n"},"160":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/shared_mutable.nr","source":"use dep::protocol_types::{\n    hash::{pedersen_hash, poseidon2_hash}, header::Header, address::AztecAddress,\n    traits::{FromField, ToField}\n};\n\nuse crate::context::{PrivateContext, PublicContext};\nuse crate::state_vars::{\n    storage::Storage,\n    shared_mutable::{scheduled_value_change::ScheduledValueChange, scheduled_delay_change::ScheduledDelayChange}\n};\nuse crate::oracle::storage::storage_read;\nuse dep::std::unsafe::zeroed;\n\nmod test;\n\nstruct SharedMutable<T, INITIAL_DELAY, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n\n// This will make the Aztec macros require that T implements the Serialize<N> trait, and allocate N storage slots to\n// this state variable. This is incorrect, since what we actually store is:\n//  - a ScheduledValueChange<T>, which requires 1 + 2 * M storage slots, where M is the serialization length of T\n//  - a ScheduledDelayChange, which requires another storage slot\n//\n// TODO https://github.com/AztecProtocol/aztec-packages/issues/5736: change the storage allocation scheme so that we\n// can actually use it here\nimpl<T, INITIAL_DELAY, Context> Storage<T> for SharedMutable<T, INITIAL_DELAY, Context> {}\n\n// TODO: extract into a utils module once  we can do arithmetic on generics, i.e. https://github.com/noir-lang/noir/issues/4784\nfn concat_arrays<N, M, O>(arr_n: [Field; N], arr_m: [Field; M]) -> [Field; O] {\n    assert_eq(N + M, O);\n    let mut out: [Field; O] = [0; O];\n    for i in 0..N {\n        out[i] = arr_n[i];\n    }\n    for i in 0..M {\n        out[N+i] = arr_m[i];\n    }\n    out\n}\n\n// SharedMutable<T> stores a value of type T that is:\n//  - publicly known (i.e. unencrypted)\n//  - mutable in public\n//  - readable in private with no contention (i.e. multiple parties can all read the same value without blocking one\n//    another nor needing to coordinate)\n// This is famously a hard problem to solve. SharedMutable makes it work by introducing a delay to public mutation:\n// the value is not changed immediately but rather a value change is scheduled to happen in the future after some delay\n// measured in blocks. Reads in private are only valid as long as they are included in a block not too far into the\n// future, so that they can guarantee the value will not have possibly changed by then (because of the delay).\n// The delay for changing a value is initially equal to INITIAL_DELAY, but can be changed by calling\n// `schedule_delay_change`.\nimpl<T, INITIAL_DELAY, Context> SharedMutable<T, INITIAL_DELAY, Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n\n    fn hash_scheduled_data(\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>\n    ) -> Field where T: ToField {\n        // TODO(#5491 and https://github.com/noir-lang/noir/issues/4784): update this so that we don't need to rely on\n        // ScheduledValueChange serializing to 3 and ScheduledDelayChange serializing to 1\n        let concatenated: [Field; 4] = concat_arrays(value_change.serialize(), delay_change.serialize());\n        poseidon2_hash(concatenated)\n    }\n\n    // Since we can't rely on the native storage allocation scheme, we hash the storage slot to get a unique location in\n    // which we can safely store as much data as we need.\n    // See https://github.com/AztecProtocol/aztec-packages/issues/5492 and\n    // https://github.com/AztecProtocol/aztec-packages/issues/5736\n    // We store three things in public storage:\n    //  - a ScheduledValueChange\n    //  - a ScheduledDelaChange\n    //  - the hash of both of these (via `hash_scheduled_data`)\n    fn get_value_change_storage_slot(self) -> Field {\n        pedersen_hash([self.storage_slot, 0], 0)\n    }\n\n    fn get_delay_change_storage_slot(self) -> Field {\n        pedersen_hash([self.storage_slot, 1], 0)\n    }\n\n    fn get_hash_storage_slot(self) -> Field {\n        pedersen_hash([self.storage_slot, 2], 0)\n    }\n\n    // It may seem odd that we take a header and address instead of reading from e.g. a PrivateContext, but this lets us\n    // reuse this function in SharedMutablePrivateGetter.\n    fn historical_read_from_public_storage(\n        self,\n        header: Header,\n        address: AztecAddress\n    ) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>, u32) where T: FromField + ToField + Eq {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for both the ScheduledValueChange and\n        // ScheduledDelayChange, but that'd require one full sibling path per storage slot (since due to kernel siloing\n        // the storage is not contiguous), and in the best case in which T is a single field that'd be 4 slots.\n        // Instead, we get an oracle to provide us the correct values for both the value and delay changes, and instead\n        // prove inclusion of their hash, which is both a much smaller proof (a single slot), and also independent of\n        // the size of T.\n        let (value_change_hint, delay_change_hint) = get_public_storage_hints(address, self.storage_slot, historical_block_number);\n\n        // Ideally the following would be simply public_storage::read_historical, but we can't implement that yet.\n        let hash = header.public_storage_historical_read(self.get_hash_storage_slot(), address);\n\n        // @todo This is written strangely to bypass a formatting issue with the if that is breaking ci.\n        let (a, b, c) = if hash != 0 {\n            let a = SharedMutable::hash_scheduled_data(value_change_hint, delay_change_hint);\n            (a, value_change_hint, delay_change_hint)\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized, meaning no value or delay change was ever\n            // scheduled. Therefore, the hints must then correspond to uninitialized scheduled changes.\n            let b = ScheduledValueChange::deserialize(zeroed());\n            let c = ScheduledDelayChange::deserialize(zeroed());\n            (hash, b, c)\n        };\n\n        assert_eq(hash, a, \"Hint values do not match hash\");\n        assert_eq(value_change_hint, b, \"Non-zero value change for zero hash\");\n        assert_eq(delay_change_hint, c, \"Non-zero delay change for zero hash\");\n\n        (value_change_hint, delay_change_hint, historical_block_number)\n    }\n}\n\nimpl<T, INITIAL_DELAY> SharedMutable<T, INITIAL_DELAY, &mut PublicContext> {\n    pub fn schedule_value_change(self, new_value: T) where T: ToField {\n        let mut value_change = self.read_value_change();\n        let delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n        let current_delay = delay_change.get_current(block_number);\n\n        // TODO: make this configurable\n        // https://github.com/AztecProtocol/aztec-packages/issues/5501\n        let block_of_change = block_number + current_delay;\n        value_change.schedule_change(new_value, block_number, current_delay, block_of_change);\n\n        self.write(value_change, delay_change);\n    }\n\n    pub fn schedule_delay_change(self, new_delay: u32) where T: ToField {\n        let mut delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n\n        delay_change.schedule_change(new_delay, block_number);\n\n        self.write(self.read_value_change(), delay_change);\n    }\n\n    pub fn get_current_value_in_public(self) -> T {\n        let block_number = self.context.block_number() as u32;\n        self.read_value_change().get_current_at(block_number)\n    }\n\n    pub fn get_current_delay_in_public(self) -> u32 {\n        let block_number = self.context.block_number() as u32;\n        self.read_delay_change().get_current(block_number)\n    }\n\n    pub fn get_scheduled_value_in_public(self) -> (T, u32) {\n        self.read_value_change().get_scheduled()\n    }\n\n    pub fn get_scheduled_delay_in_public(self) -> (u32, u32) {\n        self.read_delay_change().get_scheduled()\n    }\n\n    fn read_value_change(self) -> ScheduledValueChange<T> {\n        self.context.storage_read(self.get_value_change_storage_slot())\n    }\n\n    fn read_delay_change(self) -> ScheduledDelayChange<INITIAL_DELAY> {\n        self.context.storage_read(self.get_delay_change_storage_slot())\n    }\n\n    fn write(\n        self,\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>\n    ) where T: ToField {\n        // Whenever we write to public storage, we write both the value change and delay change as well as the hash of\n        // them both. This guarantees that the hash is always kept up to date.\n        // While this makes for more costly writes, it also makes private proofs much simpler because they only need to\n        // produce a historical proof for the hash, which results in a single inclusion proof (as opposed to 4 in the\n        // best case scenario in which T is a single field). Private shared mutable reads are assumed to be much more\n        // frequent than public writes, so this tradeoff makes sense.\n        self.context.storage_write(self.get_value_change_storage_slot(), value_change);\n        self.context.storage_write(self.get_delay_change_storage_slot(), delay_change);\n        self.context.storage_write(\n            self.get_hash_storage_slot(),\n            SharedMutable::hash_scheduled_data(value_change, delay_change)\n        );\n    }\n}\n\nimpl<T, INITIAL_DELAY> SharedMutable<T, INITIAL_DELAY, &mut PrivateContext> {\n    pub fn get_current_value_in_private(self) -> T where T: FromField + ToField + Eq {\n        // When reading the current value in private we construct a historical state proof for the public value.\n        // However, since this value might change, we must constrain the maximum transaction block number as this proof\n        // will only be valid for however many blocks we can ensure the value will not change, which will depend on the\n        // current delay and any scheduled delay changes.\n\n        let (value_change, delay_change, historical_block_number) = self.historical_read_from_public_storage(self.context.get_header(), self.context.this_address());\n\n        // We use the effective minimum delay as opposed to the current delay at the historical block as this one also\n        // takes into consideration any scheduled delay changes.\n        // For example, consider a scenario in which at block 200 the current delay was 50. We may naively think that\n        // the earliest we could change the value would be at block 251 by scheduling immediately after the historical\n        // block, i.e. at block 201. But if there was a delay change scheduled for block 210 to reduce the delay to 20\n        // blocks, then if a value change was scheduled at block 210 it would go into effect at block 230, which is\n        // earlier than what we'd expect if we only considered the current delay.\n        let effective_minimum_delay = delay_change.get_effective_minimum_delay_at(historical_block_number);\n        let block_horizon = value_change.get_block_horizon(historical_block_number, effective_minimum_delay);\n\n        // We prevent this transaction from being included in any block after the block horizon, ensuring that the\n        // historical public value matches the current one, since it can only change after the horizon.\n        self.context.set_tx_max_block_number(block_horizon);\n        value_change.get_current_at(historical_block_number)\n    }\n}\n\nunconstrained fn get_public_storage_hints<T, INITIAL_DELAY>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>) {\n    // This function cannot be part of the &mut PrivateContext impl because that'd mean that by passing `self` we'd also\n    // be passing a mutable reference to an unconstrained function, which is not allowed. We therefore create a dummy\n    // state variable here so that we can access the methods to compute storage slots. This will all be removed in the\n    // future once we do proper storage slot allocation (#5492).\n    let dummy = SharedMutable::new((), storage_slot);\n\n    (\n        storage_read(address, dummy.get_value_change_storage_slot(), block_number), storage_read(address, dummy.get_delay_change_storage_slot(), block_number)\n    )\n}\n"},"162":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/private_immutable.nr","source":"use dep::protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::pedersen_hash};\n\nuse crate::context::{PrivateContext, UnconstrainedContext};\nuse crate::note::{\n    lifecycle::create_note, note_getter::{get_note, view_notes}, note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions, note_emission::NoteEmission\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateImmutable<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateImmutable<T, Context> {}\n\nimpl<Note, Context> PrivateImmutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateImmutable>` type (for example), because the storage slot often also identifies an actor. \n    // e.g. the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        pedersen_hash(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n}\n\nimpl<Note> PrivateImmutable<Note, &mut PrivateContext> {\n    // docs:start:initialize\n    pub fn initialize<N, M>(\n        self,\n        note: &mut Note\n    ) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier, 0);\n\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note<N, M>(self) -> Note where Note: NoteInterface<N, M> {\n        let storage_slot = self.storage_slot;\n        get_note(self.context, storage_slot)\n    }\n    // docs:end:get_note\n}\n\nimpl<Note> PrivateImmutable<Note, UnconstrainedContext> {\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // view_note does not actually use the context, but it calls oracles that are only available in private\n    // docs:start:view_note\n    unconstrained pub fn view_note<N, M>(self) -> Note  where Note: NoteInterface<N, M> {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\n    }\n    // docs:end:view_note\n}\n"},"167":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{GAS_LENGTH, FIXED_DA_GAS, FIXED_L2_GAS}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered, utils::reader::Reader,\n    abis::gas_fees::GasFees\n};\nuse std::ops::{Add, Sub};\n\nstruct Gas {\n    da_gas: u32,\n    l2_gas: u32,\n}\n\nimpl Gas {\n    pub fn new(da_gas: u32, l2_gas: u32) -> Self {\n        Self { da_gas, l2_gas }\n    }\n\n    pub fn tx_overhead() -> Self {\n        Self { da_gas: FIXED_DA_GAS, l2_gas: FIXED_L2_GAS }\n    }\n\n    pub fn compute_fee(self, fees: GasFees) -> Field {\n        (self.da_gas as Field) * fees.fee_per_da_gas + (self.l2_gas as Field) * fees.fee_per_l2_gas\n    }\n\n    pub fn is_empty(self) -> bool {\n        (self.da_gas == 0) & (self.l2_gas == 0)\n    }\n\n    pub fn within(self, limits: Gas) -> bool {\n        (self.da_gas <= limits.da_gas) & (self.l2_gas <= limits.l2_gas)\n    }\n}\n\nimpl Add for Gas {\n    fn add(self, other: Gas) -> Self {\n        Gas::new(self.da_gas + other.da_gas, self.l2_gas + other.l2_gas)\n    }\n}\n\nimpl Sub for Gas {\n    fn sub(self, other: Gas) -> Self {\n        Gas::new(self.da_gas - other.da_gas, self.l2_gas - other.l2_gas)\n    }\n}\n\nimpl Serialize<GAS_LENGTH> for Gas {\n    fn serialize(self) -> [Field; GAS_LENGTH] {\n        [self.da_gas as Field, self.l2_gas as Field]\n    }\n}\n\nimpl Deserialize<GAS_LENGTH> for Gas {\n    fn deserialize(serialized: [Field; GAS_LENGTH]) -> Gas {\n        Gas::new(serialized[0] as u32, serialized[1] as u32)\n    }\n}\n\nimpl Eq for Gas {\n    fn eq(self, other : Gas) -> bool {\n        (self.da_gas == other.da_gas) & (self.l2_gas == other.l2_gas)\n    }\n}\n\nimpl Empty for Gas {\n    fn empty() -> Self {\n        Gas::new(0, 0)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = Gas::empty();\n    let serialized = item.serialize();\n    let deserialized = Gas::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n"},"169":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/note_hash.nr","source":"use crate::{\n    abis::read_request::ScopedReadRequest, address::AztecAddress,\n    abis::side_effect::{Ordered, OrderedValue, Readable, Scoped},\n    constants::{NOTE_HASH_LENGTH, SCOPED_NOTE_HASH_LENGTH}, traits::{Empty, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct NoteHash {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for NoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for NoteHash {\n    fn eq(self, other: NoteHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter) \n    }\n}\n\nimpl Empty for NoteHash {\n    fn empty() -> Self {\n        NoteHash {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<NOTE_HASH_LENGTH> for NoteHash {\n    fn serialize(self) -> [Field; NOTE_HASH_LENGTH] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<NOTE_HASH_LENGTH> for NoteHash {\n    fn deserialize(values: [Field; NOTE_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl NoteHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedNoteHash {\n        ScopedNoteHash { note_hash: self, contract_address }\n    }\n}\n\nstruct ScopedNoteHash {\n    note_hash: NoteHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<NoteHash> for ScopedNoteHash {\n    fn inner(self) -> NoteHash {\n        self.note_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedNoteHash {\n    fn counter(self) -> u32 {\n        self.note_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedNoteHash {\n    fn value(self) -> Field {\n        self.note_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.note_hash.counter\n    }\n}\n\nimpl Eq for ScopedNoteHash {\n    fn eq(self, other: ScopedNoteHash) -> bool {\n        (self.note_hash == other.note_hash)\n            & (self.contract_address == other.contract_address)\n    }\n}\n\nimpl Empty for ScopedNoteHash {\n    fn empty() -> Self {\n        ScopedNoteHash {\n            note_hash: NoteHash::empty(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_NOTE_HASH_LENGTH> for ScopedNoteHash {\n    fn serialize(self) -> [Field; SCOPED_NOTE_HASH_LENGTH] {\n        array_concat(self.note_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_NOTE_HASH_LENGTH> for ScopedNoteHash {\n    fn deserialize(values: [Field; SCOPED_NOTE_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            note_hash: reader.read_struct(NoteHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl Readable for ScopedNoteHash {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        assert_eq(self.note_hash.value, read_request.value(), \"Value of the note hash does not match read request\");\n        assert_eq(self.contract_address, read_request.contract_address, \"Contract address of the note hash does not match read request\");\n        assert(\n            read_request.counter() > self.note_hash.counter, \"Read request counter must be greater than the counter of the note hash\"\n        );\n    }\n}\n\nimpl ScopedNoteHash {\n    pub fn expose_to_public(self) -> NoteHash {\n        // Hide the actual counter when exposing it to the public kernel.\n        NoteHash { value: self.note_hash.value, counter: 0 }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NoteHash::empty();\n    let serialized = item.serialize();\n    let deserialized = NoteHash::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedNoteHash::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedNoteHash::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"170":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_fees.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::GAS_FEES_LENGTH, hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty},\n    abis::side_effect::Ordered, utils::reader::Reader\n};\n\nstruct GasFees {\n    fee_per_da_gas: Field,\n    fee_per_l2_gas: Field,\n}\n\nimpl GasFees {\n    pub fn new(fee_per_da_gas: Field, fee_per_l2_gas: Field) -> Self {\n        Self { fee_per_da_gas, fee_per_l2_gas }\n    }\n\n    pub fn default() -> Self {\n        GasFees::new(1, 1)\n    }\n\n    pub fn is_empty(self) -> bool {\n        (self.fee_per_da_gas == 0) & (self.fee_per_l2_gas == 0)\n    }\n}\n\nimpl Serialize<GAS_FEES_LENGTH> for GasFees {\n    fn serialize(self) -> [Field; GAS_FEES_LENGTH] {\n        [self.fee_per_da_gas, self.fee_per_l2_gas]\n    }\n}\n\nimpl Deserialize<GAS_FEES_LENGTH> for GasFees {\n    fn deserialize(serialized: [Field; GAS_FEES_LENGTH]) -> GasFees {\n        GasFees::new(serialized[0], serialized[1])\n    }\n}\n\nimpl Eq for GasFees {\n    fn eq(self, other : GasFees) -> bool {\n        (self.fee_per_da_gas == other.fee_per_da_gas) & (self.fee_per_l2_gas == other.fee_per_l2_gas)\n    }\n}\n\nimpl Empty for GasFees {\n    fn empty() -> Self {\n        GasFees::new(0, 0)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = GasFees::empty();\n    let serialized = item.serialize();\n    let deserialized = GasFees::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"172":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_circuit_public_inputs.nr","source":"use crate::{\n    abis::{\n    call_context::CallContext, max_block_number::MaxBlockNumber, gas_settings::GasSettings,\n    validation_requests::KeyValidationRequestAndGenerator, note_hash::NoteHash, nullifier::Nullifier,\n    private_call_request::PrivateCallRequest, read_request::ReadRequest,\n    log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_L2_TO_L1_MSGS_PER_CALL, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS, MAX_ENCRYPTED_LOGS_PER_CALL,\n    MAX_UNENCRYPTED_LOGS_PER_CALL, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, hash::pedersen_hash, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader,\n    transaction::tx_context::TxContext, utils::arrays::validate_array\n};\n\nstruct PrivateCircuitPublicInputsArrayLengths {\n    note_hash_read_requests: u32,\n    nullifier_read_requests: u32,\n    key_validation_requests_and_generators: u32,\n    note_hashes: u32,\n    nullifiers: u32,\n    l2_to_l1_msgs: u32,\n    private_call_requests: u32,\n    public_call_stack_hashes: u32,\n    note_encrypted_logs_hashes: u32,\n    encrypted_logs_hashes: u32,\n    unencrypted_logs_hashes: u32,\n}\n\nimpl PrivateCircuitPublicInputsArrayLengths {\n    pub fn new(public_inputs: PrivateCircuitPublicInputs) -> Self {\n        PrivateCircuitPublicInputsArrayLengths {\n            note_hash_read_requests: validate_array(public_inputs.note_hash_read_requests),\n            nullifier_read_requests: validate_array(public_inputs.nullifier_read_requests),\n            key_validation_requests_and_generators: validate_array(public_inputs.key_validation_requests_and_generators),\n            note_hashes: validate_array(public_inputs.note_hashes),\n            nullifiers: validate_array(public_inputs.nullifiers),\n            l2_to_l1_msgs: validate_array(public_inputs.l2_to_l1_msgs),\n            private_call_requests: validate_array(public_inputs.private_call_requests),\n            public_call_stack_hashes: validate_array(public_inputs.public_call_stack_hashes),\n            note_encrypted_logs_hashes: validate_array(public_inputs.note_encrypted_logs_hashes),\n            encrypted_logs_hashes: validate_array(public_inputs.encrypted_logs_hashes),\n            unencrypted_logs_hashes: validate_array(public_inputs.unencrypted_logs_hashes)\n        }\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    returns_hash: Field,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: [ReadRequest; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    key_validation_requests_and_generators: [KeyValidationRequestAndGenerator; MAX_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    note_hashes: [NoteHash; MAX_NOTE_HASHES_PER_CALL],\n    nullifiers: [Nullifier; MAX_NULLIFIERS_PER_CALL],\n    private_call_requests: [PrivateCallRequest; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    public_teardown_function_hash: Field,\n    l2_to_l1_msgs: [L2ToL1Message; MAX_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter : u32,\n    end_side_effect_counter : u32,\n    note_encrypted_logs_hashes: [NoteLogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_CALL],\n    encrypted_logs_hashes: [EncryptedLogHash; MAX_ENCRYPTED_LOGS_PER_CALL],\n    unencrypted_logs_hashes: [LogHash; MAX_UNENCRYPTED_LOGS_PER_CALL],\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // Note: The chain_id and version here are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    tx_context: TxContext,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.returns_hash == other.returns_hash) &\n        (self.min_revertible_side_effect_counter == other.min_revertible_side_effect_counter) &\n        (self.is_fee_payer == other.is_fee_payer) &\n        (self.max_block_number == other.max_block_number) &\n        (self.note_hash_read_requests == other.note_hash_read_requests) &\n        (self.nullifier_read_requests == other.nullifier_read_requests) &\n        (self.key_validation_requests_and_generators == other.key_validation_requests_and_generators) &\n        (self.note_hashes == other.note_hashes) &\n        (self.nullifiers == other.nullifiers) &\n        (self.private_call_requests == other.private_call_requests) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.l2_to_l1_msgs == other.l2_to_l1_msgs) &\n        (self.start_side_effect_counter == other.start_side_effect_counter) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.note_encrypted_logs_hashes == other.note_encrypted_logs_hashes) &\n        (self.encrypted_logs_hashes == other.encrypted_logs_hashes) &\n        (self.unencrypted_logs_hashes == other.unencrypted_logs_hashes) &\n        self.historical_header.eq(other.historical_header) &\n        self.tx_context.eq(other.tx_context)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n\n        fields.push(self.min_revertible_side_effect_counter as Field);\n        fields.push(if self.is_fee_payer { 1 } else { 0 } as Field);\n\n        fields.extend_from_array(self.max_block_number.serialize());\n\n        for i in 0..self.note_hash_read_requests.len() {\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..self.nullifier_read_requests.len() {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..self.key_validation_requests_and_generators.len() {\n            fields.extend_from_array(self.key_validation_requests_and_generators[i].serialize());\n        }\n        for i in 0..self.note_hashes.len() {\n            fields.extend_from_array(self.note_hashes[i].serialize());\n        }\n        for i in 0..self.nullifiers.len() {\n            fields.extend_from_array(self.nullifiers[i].serialize());\n        }\n        for i in 0..self.private_call_requests.len() {\n            fields.extend_from_array(self.private_call_requests[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n        fields.push(self.public_teardown_function_hash);\n        for i in 0..self.l2_to_l1_msgs.len() {\n            fields.extend_from_array(self.l2_to_l1_msgs[i].serialize());\n        }\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n        for i in 0..self.note_encrypted_logs_hashes.len() {\n            fields.extend_from_array(self.note_encrypted_logs_hashes[i].serialize());\n        }\n        for i in 0..self.encrypted_logs_hashes.len() {\n            fields.extend_from_array(self.encrypted_logs_hashes[i].serialize());\n        }\n        for i in 0..self.unencrypted_logs_hashes.len() {\n            fields.extend_from_array(self.unencrypted_logs_hashes[i].serialize());\n        }\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.extend_from_array(self.tx_context.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            min_revertible_side_effect_counter: reader.read() as u32,\n            is_fee_payer: reader.read() == 1,\n            max_block_number: reader.read_struct(MaxBlockNumber::deserialize),\n            note_hash_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            key_validation_requests_and_generators: reader.read_struct_array(KeyValidationRequestAndGenerator::deserialize, [KeyValidationRequestAndGenerator::empty(); MAX_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            note_hashes: reader.read_struct_array(NoteHash::deserialize, [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL]),\n            nullifiers: reader.read_struct_array(Nullifier::deserialize, [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL]),\n            private_call_requests: reader.read_struct_array(PrivateCallRequest::deserialize, [PrivateCallRequest::empty(); MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            public_teardown_function_hash: reader.read(),\n            l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            note_encrypted_logs_hashes: reader.read_struct_array(NoteLogHash::deserialize, [NoteLogHash::empty(); MAX_NOTE_ENCRYPTED_LOGS_PER_CALL]),\n            encrypted_logs_hashes: reader.read_struct_array(EncryptedLogHash::deserialize, [EncryptedLogHash::empty(); MAX_ENCRYPTED_LOGS_PER_CALL]),\n            unencrypted_logs_hashes: reader.read_struct_array(LogHash::deserialize, [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL]),\n            historical_header: reader.read_struct(Header::deserialize),\n            tx_context: reader.read_struct(TxContext::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\nimpl Empty for PrivateCircuitPublicInputs {\n    fn empty() -> Self {\n        PrivateCircuitPublicInputs {\n            call_context: CallContext::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            key_validation_requests_and_generators: [KeyValidationRequestAndGenerator::empty(); MAX_KEY_VALIDATION_REQUESTS_PER_CALL],\n            note_hashes: [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL],\n            nullifiers: [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL],\n            private_call_requests: [PrivateCallRequest::empty(); MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL],\n            start_side_effect_counter : 0 as u32,\n            end_side_effect_counter : 0 as u32,\n            note_encrypted_logs_hashes: [NoteLogHash::empty(); MAX_NOTE_ENCRYPTED_LOGS_PER_CALL],\n            encrypted_logs_hashes: [EncryptedLogHash::empty(); MAX_ENCRYPTED_LOGS_PER_CALL],\n            unencrypted_logs_hashes: [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL],\n            historical_header: Header::empty(),\n            tx_context: TxContext::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi = PrivateCircuitPublicInputs::empty();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs = PrivateCircuitPublicInputs::empty();\n    let hash = inputs.hash();\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x15c9b0a92b9b541598e24c9f0b0b4b04b7f2408599751c45aa12de671fd9b363;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"173":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item_compressed.nr","source":"use crate::abis::{call_context::CallContext, function_data::FunctionData, gas::Gas};\nuse crate::address::AztecAddress;\nuse crate::constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH};\nuse crate::traits::{Hash, Empty, Serialize, Deserialize};\nuse crate::utils::reader::Reader;\n\n/**\n * A compressed version of the PublicCallStackItem struct used to compute the \"hash\"\n * of a PublicCallStackItem.\n * \n * Historically, we have been zeroing most values in the PublicCallStackItem struct\n * to compute the hash involved when adding a PublicCallStackItem to the PublicCallStack.\n * \n * This struct is used to store the values that we did not zero out, and allow us to hash\n * only these, thereby skipping a lot of computation and saving us a lot of constraints\n * \n * Essentially this struct exists such that we don't have a `hash` function in the \n * PublicCallStackItem struct that practically throws away some values of the struct\n * without clearly indicating that it does so.\n */\nstruct PublicCallStackItemCompressed {\n    contract_address: AztecAddress,\n    call_context: CallContext,\n    function_data: FunctionData,\n    args_hash: Field,\n    returns_hash: Field,\n    revert_code: u8,\n    start_gas_left: Gas,\n    end_gas_left: Gas,\n}\n\nimpl Eq for PublicCallStackItemCompressed {\n    fn eq(self, other: PublicCallStackItemCompressed) -> bool {\n        (self.contract_address == other.contract_address)\n            & (self.call_context == other.call_context)\n            & (self.function_data == other.function_data)\n            & (self.args_hash == other.args_hash)\n            & (self.returns_hash == other.returns_hash)\n            & (self.revert_code == other.revert_code)\n            & (self.start_gas_left == other.start_gas_left)\n            & (self.end_gas_left == other.end_gas_left)\n    }\n}\n\nimpl Hash for PublicCallStackItemCompressed {\n    fn hash(self) -> Field {\n        std::hash::pedersen_hash_with_separator(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl Empty for PublicCallStackItemCompressed {\n    fn empty() -> Self {\n        PublicCallStackItemCompressed {\n            contract_address: AztecAddress::empty(),\n            call_context: CallContext::empty(),\n            function_data: FunctionData::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty(),\n        }\n    }\n}\n\nimpl Serialize<PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> for PublicCallStackItemCompressed {\n    fn serialize(self) -> [Field; PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.call_context.serialize());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n        fields.push(self.revert_code as Field);\n        fields.extend_from_array(self.start_gas_left.serialize());\n        fields.extend_from_array(self.end_gas_left.serialize());\n\n        assert_eq(fields.len(), PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> for PublicCallStackItemCompressed {\n  fn deserialize(fields: [Field; PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH]) -> PublicCallStackItemCompressed {\n    let mut reader = Reader::new(fields);\n\n    let item = PublicCallStackItemCompressed {\n      contract_address: reader.read_struct(AztecAddress::deserialize),\n      call_context: reader.read_struct(CallContext::deserialize),\n      function_data: reader.read_struct(FunctionData::deserialize),\n      args_hash: reader.read(),\n      returns_hash: reader.read(),\n      revert_code: reader.read() as u8,\n      start_gas_left: reader.read_struct(Gas::deserialize),\n      end_gas_left: reader.read_struct(Gas::deserialize),\n    };\n    reader.finish();\n    item\n  }\n}\n"},"175":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/global_variables.nr","source":"use crate::{\n    address::{AztecAddress, EthAddress}, abis::gas_fees::GasFees,\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}, utils::reader::Reader\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : u64,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n    gas_fees : GasFees\n}\n// docs:end:global-variables\n\nimpl GlobalVariables {\n    fn is_empty(self) -> bool {\n        (self.chain_id == 0)\n            & (self.version == 0)\n            & (self.block_number == 0)\n            & (self.timestamp == 0)\n            & (self.coinbase.is_zero())\n            & (self.fee_recipient.is_zero())\n            & (self.gas_fees.is_empty())\n    }\n}\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        let mut serialized: BoundedVec<Field, GLOBAL_VARIABLES_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.chain_id);\n        serialized.push(self.version);\n        serialized.push(self.block_number);\n        serialized.push(self.timestamp as Field);\n        serialized.push(self.coinbase.to_field());\n        serialized.push(self.fee_recipient.to_field());\n        serialized.extend_from_array(self.gas_fees.serialize());\n\n        serialized.storage\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        let mut reader = Reader::new(serialized);\n        GlobalVariables {\n            chain_id: reader.read(),\n            version: reader.read(),\n            block_number: reader.read(),\n            timestamp: reader.read() as u64,\n            coinbase: EthAddress::from_field(reader.read()),\n            fee_recipient: AztecAddress::from_field(reader.read()),\n            gas_fees: reader.read_struct(GasFees::deserialize)\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient) &\n        (self.gas_fees == other.gas_fees) \n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n            gas_fees: GasFees::empty()\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars = GlobalVariables::empty();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n"},"176":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/read_request.nr","source":"use crate::{\n    abis::side_effect::{Ordered, Scoped}, traits::{Empty, Serialize, Deserialize},\n    address::AztecAddress, constants::{READ_REQUEST_LENGTH, SCOPED_READ_REQUEST_LEN},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct ReadRequest {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for ReadRequest {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for ReadRequest {\n    fn eq(self, read_request: ReadRequest) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n    }\n}\n\nimpl Empty for ReadRequest {\n    fn empty() -> Self {\n        ReadRequest {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_LENGTH> for ReadRequest {\n    fn serialize(self) -> [Field; READ_REQUEST_LENGTH] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_LENGTH> for ReadRequest {\n    fn deserialize(values: [Field; READ_REQUEST_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl ReadRequest {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedReadRequest {\n        ScopedReadRequest { read_request: self, contract_address }\n    }\n}\n\nstruct ScopedReadRequest {\n    read_request: ReadRequest,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<ReadRequest> for ScopedReadRequest {\n    fn inner(self) -> ReadRequest {\n        self.read_request\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Eq for ScopedReadRequest {\n    fn eq(self, other: ScopedReadRequest) -> bool {\n        (self.read_request == other.read_request)\n        & (self.contract_address.eq(other.contract_address))\n    }\n}\n\nimpl Empty for ScopedReadRequest {\n    fn empty() -> Self {\n        ScopedReadRequest {\n            read_request: ReadRequest::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_READ_REQUEST_LEN> for ScopedReadRequest {\n    fn serialize(self) -> [Field; SCOPED_READ_REQUEST_LEN] {\n        array_concat(self.read_request.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_READ_REQUEST_LEN> for ScopedReadRequest {\n    fn deserialize(values: [Field; SCOPED_READ_REQUEST_LEN]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            read_request: reader.read_struct(ReadRequest::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl ScopedReadRequest {\n    pub fn value(self) -> Field {\n        self.read_request.value\n    }\n    pub fn counter(self) -> u32 {\n        self.read_request.counter\n    }\n}\n\n#[test]\nfn serialization_of_empty_read() {\n    let item = ReadRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ReadRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedReadRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedReadRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"179":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request_and_generator.nr","source":"use crate::{\n    address::AztecAddress,\n    abis::validation_requests::{\n    key_validation_request::KeyValidationRequest,\n    scoped_key_validation_request_and_generator::ScopedKeyValidationRequestAndGenerator\n},\n    constants::KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH, traits::{Empty, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct KeyValidationRequestAndGenerator {\n    request: KeyValidationRequest,\n    sk_app_generator: Field,\n}\n\nimpl Eq for KeyValidationRequestAndGenerator {\n    fn eq(self, other: KeyValidationRequestAndGenerator) -> bool {\n        (self.request == other.request) & (self.sk_app_generator == other.sk_app_generator)\n    }\n}\n\nimpl Empty for KeyValidationRequestAndGenerator {\n    fn empty() -> Self {\n        KeyValidationRequestAndGenerator {\n            request: KeyValidationRequest::empty(),\n            sk_app_generator: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH> for KeyValidationRequestAndGenerator {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH] {\n        array_concat(self.request.serialize(), [self.sk_app_generator])\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH> for KeyValidationRequestAndGenerator {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH]) -> Self {\n        let mut reader = Reader::new(fields);\n        let res = Self {\n            request: reader.read_struct(KeyValidationRequest::deserialize),\n            sk_app_generator: reader.read(),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl KeyValidationRequestAndGenerator {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedKeyValidationRequestAndGenerator {\n        ScopedKeyValidationRequestAndGenerator { request: self, contract_address }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = KeyValidationRequestAndGenerator::empty();\n    let serialized = item.serialize();\n    let deserialized = KeyValidationRequestAndGenerator::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"180":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{constants::KEY_VALIDATION_REQUEST_LENGTH, traits::{Empty, Serialize, Deserialize}, point::Point};\n\nstruct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m))\n            & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest {\n            pk_m: Point::empty(),\n            sk_app: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app,\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point::new(fields[0], fields[1], fields[2] as bool),\n            sk_app: fields[3],\n        }\n    }\n}\n\n"},"184":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier.nr","source":"use crate::{\n    abis::{side_effect::{Ordered, OrderedValue, Readable, Scoped}, read_request::ScopedReadRequest},\n    address::AztecAddress, constants::{NULLIFIER_LENGTH, SCOPED_NULLIFIER_LENGTH},\n    hash::compute_siloed_nullifier, traits::{Empty, Hash, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct Nullifier {\n    value: Field,\n    counter: u32,\n    note_hash: Field,\n}\n\nimpl Ordered for Nullifier {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for Nullifier {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for Nullifier {\n    fn eq(self, other: Nullifier) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.note_hash == other.note_hash) \n    }\n}\n\nimpl Empty for Nullifier {\n    fn empty() -> Self {\n        Nullifier {\n            value: 0,\n            counter: 0,\n            note_hash: 0,\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_LENGTH> for Nullifier {\n    fn serialize(self) -> [Field; NULLIFIER_LENGTH] {\n        [self.value, self.counter as Field, self.note_hash]\n    }\n}\n\nimpl Deserialize<NULLIFIER_LENGTH> for Nullifier {\n    fn deserialize(values: [Field; NULLIFIER_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            note_hash: values[2],\n        }\n    }\n}\n\nimpl Readable for Nullifier {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        // Public kernels output Nullifier instead of ScopedNullifier.\n        // The nullifier value has been siloed.\n        let siloed_request_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.value, siloed_request_value, \"Value of the nullifier does not match read request\");\n        assert(\n            read_request.counter() > self.counter, \"Read request counter must be greater than the counter of the nullifier\"\n        );\n    }\n}\n\nimpl Nullifier {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedNullifier {\n        ScopedNullifier { nullifier: self, contract_address }\n    }\n}\n\nstruct ScopedNullifier {\n    nullifier: Nullifier,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<Nullifier> for ScopedNullifier {\n    fn inner(self) -> Nullifier {\n        self.nullifier\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedNullifier {\n    fn counter(self) -> u32 {\n        self.nullifier.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedNullifier {\n    fn value(self) -> Field {\n        self.nullifier.value\n    }\n    fn counter(self) -> u32 {\n        self.nullifier.counter\n    }\n}\n\nimpl Eq for ScopedNullifier {\n    fn eq(self, other: ScopedNullifier) -> bool {\n        (self.nullifier == other.nullifier)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedNullifier {\n    fn empty() -> Self {\n        ScopedNullifier {\n            nullifier: Nullifier::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_NULLIFIER_LENGTH> for ScopedNullifier {\n    fn serialize(self) -> [Field; SCOPED_NULLIFIER_LENGTH] {\n        array_concat(self.nullifier.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_NULLIFIER_LENGTH> for ScopedNullifier {\n    fn deserialize(values: [Field; SCOPED_NULLIFIER_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            nullifier: reader.read_struct(Nullifier::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl Readable for ScopedNullifier {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        assert_eq(self.nullifier.value, read_request.value(), \"Value of the nullifier does not match read request\");\n        assert_eq(self.contract_address, read_request.contract_address, \"Contract address of the nullifier does not match read request\");\n        assert(\n            read_request.counter() > self.nullifier.counter, \"Read request counter must be greater than the counter of the nullifier\"\n        );\n    }\n}\n\nimpl ScopedNullifier {\n    pub fn nullified_note_hash(self) -> Field {\n        self.nullifier.note_hash\n    }\n\n    pub fn expose_to_public(self) -> Nullifier {\n        // Hide the actual counter and note hash when exposing it to the public kernel.\n        Nullifier { value: self.nullifier.value, counter: 0, note_hash: 0 }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = Nullifier::empty();\n    let serialized = item.serialize();\n    let deserialized = Nullifier::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedNullifier::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedNullifier::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"193":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"},"194":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_request.nr","source":"use crate::{\n    abis::{\n    private_call_stack_item::PrivateCallStackItem, call_context::CallContext,\n    function_data::FunctionData, caller_context::CallerContext,\n    side_effect::{Ordered, RangeOrdered, Scoped}\n},\n    address::AztecAddress, constants::{PRIVATE_CALL_REQUEST_LENGTH, SCOPED_PRIVATE_CALL_REQUEST_LENGTH},\n    traits::{Empty, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PrivateCallRequest {\n    target: AztecAddress,\n    call_context: CallContext,\n    function_data: FunctionData,\n    args_hash: Field,\n    returns_hash: Field,\n    caller_context: CallerContext,\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n}\n\nimpl Ordered for PrivateCallRequest {\n    fn counter(self) -> u32 {\n        self.start_side_effect_counter\n    }\n}\n\nimpl RangeOrdered for PrivateCallRequest {\n    fn counter_start(self) -> u32 {\n        self.start_side_effect_counter\n    }\n    fn counter_end(self) -> u32 {\n        self.end_side_effect_counter\n    }\n}\n\nimpl Eq for PrivateCallRequest {\n    fn eq(self, other: PrivateCallRequest) -> bool {\n        (self.target == other.target) \n            & (self.call_context == other.call_context) \n            & (self.function_data == other.function_data) \n            & (self.args_hash == other.args_hash) \n            & (self.returns_hash == other.returns_hash)\n            & (self.caller_context == other.caller_context)\n            & (self.start_side_effect_counter == other.start_side_effect_counter)\n            & (self.end_side_effect_counter == other.end_side_effect_counter)\n    }\n}\n\nimpl Empty for PrivateCallRequest {\n    fn empty() -> Self {\n        PrivateCallRequest {\n            target: AztecAddress::empty(),\n            call_context: CallContext::empty(),\n            function_data: FunctionData::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            caller_context: CallerContext::empty(),\n            start_side_effect_counter: 0,\n            end_side_effect_counter: 0,\n        }\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_REQUEST_LENGTH> for PrivateCallRequest {\n    fn serialize(self) -> [Field; PRIVATE_CALL_REQUEST_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_REQUEST_LENGTH> = BoundedVec::new();\n\n        fields.push(self.target.to_field());\n        fields.extend_from_array(self.call_context.serialize());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n        fields.extend_from_array(self.caller_context.serialize());\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        assert_eq(fields.len(), PRIVATE_CALL_REQUEST_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_REQUEST_LENGTH> for PrivateCallRequest {\n    fn deserialize(fields: [Field; PRIVATE_CALL_REQUEST_LENGTH]) -> PrivateCallRequest {\n        let mut reader = Reader::new(fields);\n        let item = PrivateCallRequest {\n            target: reader.read_struct(AztecAddress::deserialize),\n            call_context: reader.read_struct(CallContext::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            caller_context: reader.read_struct(CallerContext::deserialize),\n            start_side_effect_counter: reader.read_u32(),\n            end_side_effect_counter: reader.read_u32(),\n        };\n        reader.finish();\n        item\n    }\n}\n\nimpl PrivateCallRequest {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedPrivateCallRequest {\n        ScopedPrivateCallRequest { call_request: self, contract_address }\n    }\n\n    pub fn matches_stack_item(self, stack_item: PrivateCallStackItem) -> bool {\n        (self.target == stack_item.contract_address)\n            & (self.call_context == stack_item.public_inputs.call_context)\n            & (self.function_data == stack_item.function_data)\n            & (self.args_hash == stack_item.public_inputs.args_hash)\n            & (self.returns_hash == stack_item.public_inputs.returns_hash)\n            & (self.start_side_effect_counter\n                                == stack_item.public_inputs.start_side_effect_counter)\n            & (self.end_side_effect_counter\n                                    == stack_item.public_inputs.end_side_effect_counter)\n    }\n}\n\nstruct ScopedPrivateCallRequest {\n    call_request: PrivateCallRequest,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<PrivateCallRequest> for ScopedPrivateCallRequest {\n    fn inner(self) -> PrivateCallRequest {\n        self.call_request\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedPrivateCallRequest {\n    fn counter(self) -> u32 {\n        self.call_request.counter_start()\n    }\n}\n\nimpl RangeOrdered for ScopedPrivateCallRequest {\n    fn counter_start(self) -> u32 {\n        self.call_request.counter_start()\n    }\n    fn counter_end(self) -> u32 {\n        self.call_request.counter_end()\n    }\n}\n\nimpl Eq for ScopedPrivateCallRequest {\n    fn eq(self, other: ScopedPrivateCallRequest) -> bool {\n        (self.call_request == other.call_request)\n            & (self.contract_address == other.contract_address)\n    }\n}\n\nimpl Empty for ScopedPrivateCallRequest {\n    fn empty() -> Self {\n        ScopedPrivateCallRequest {\n            call_request: PrivateCallRequest::empty(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_PRIVATE_CALL_REQUEST_LENGTH> for ScopedPrivateCallRequest {\n    fn serialize(self) -> [Field; SCOPED_PRIVATE_CALL_REQUEST_LENGTH] {\n        let mut fields: BoundedVec<Field, SCOPED_PRIVATE_CALL_REQUEST_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.call_request.serialize());\n        fields.extend_from_array(self.contract_address.serialize());\n\n        assert_eq(fields.len(), SCOPED_PRIVATE_CALL_REQUEST_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<SCOPED_PRIVATE_CALL_REQUEST_LENGTH> for ScopedPrivateCallRequest {\n    fn deserialize(fields: [Field; SCOPED_PRIVATE_CALL_REQUEST_LENGTH]) -> ScopedPrivateCallRequest {\n        let mut reader = Reader::new(fields);\n        let item = ScopedPrivateCallRequest {\n            call_request: reader.read_struct(PrivateCallRequest::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        item\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = ScopedPrivateCallRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedPrivateCallRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"199":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_settings.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress}, abis::gas::Gas,\n    abis::gas_fees::GasFees,\n    constants::{\n    GAS_SETTINGS_LENGTH, DEFAULT_GAS_LIMIT, DEFAULT_TEARDOWN_GAS_LIMIT, DEFAULT_MAX_FEE_PER_GAS,\n    DEFAULT_INCLUSION_FEE\n},\n    hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered,\n    utils::reader::Reader\n};\n\nstruct GasSettings {\n    gas_limits: Gas,\n    teardown_gas_limits: Gas,\n    max_fees_per_gas: GasFees,\n    inclusion_fee: Field,\n}\n\nimpl GasSettings {\n    pub fn new(\n        gas_limits: Gas,\n        teardown_gas_limits: Gas,\n        max_fees_per_gas: GasFees,\n        inclusion_fee: Field\n    ) -> Self {\n        Self { gas_limits, teardown_gas_limits, max_fees_per_gas, inclusion_fee }\n    }\n\n    pub fn default() -> Self {\n        GasSettings::new(\n            Gas::new(DEFAULT_GAS_LIMIT, DEFAULT_GAS_LIMIT),\n            Gas::new(DEFAULT_TEARDOWN_GAS_LIMIT, DEFAULT_TEARDOWN_GAS_LIMIT),\n            GasFees::new(DEFAULT_MAX_FEE_PER_GAS, DEFAULT_MAX_FEE_PER_GAS),\n            DEFAULT_INCLUSION_FEE\n        )\n    }\n}\n\nimpl Eq for GasSettings {\n    fn eq(self, other: Self) -> bool {\n        (self.gas_limits == other.gas_limits) & (self.teardown_gas_limits == other.teardown_gas_limits) & (self.max_fees_per_gas == other.max_fees_per_gas) & (self.inclusion_fee == other.inclusion_fee)\n    }\n}\n\nimpl Empty for GasSettings {\n    fn empty() -> Self {\n        GasSettings::new(\n            Gas::empty(), Gas::empty(), GasFees::empty(), 0\n        )\n    }\n}\n\nimpl Serialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn serialize(self) -> [Field; GAS_SETTINGS_LENGTH] {\n        let mut serialized: BoundedVec<Field, GAS_SETTINGS_LENGTH> = BoundedVec::new();\n\n        serialized.extend_from_array(self.gas_limits.serialize());\n        serialized.extend_from_array(self.teardown_gas_limits.serialize());\n        serialized.extend_from_array(self.max_fees_per_gas.serialize());\n        serialized.push(self.inclusion_fee);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn deserialize(serialized: [Field; GAS_SETTINGS_LENGTH]) -> GasSettings {\n        let mut reader = Reader::new(serialized);\n        GasSettings::new(reader.read_struct(Gas::deserialize), reader.read_struct(Gas::deserialize), reader.read_struct(GasFees::deserialize), reader.read())\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = GasSettings::empty();\n    let serialized = item.serialize();\n    let deserialized = GasSettings::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"208":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_stack_item.nr","source":"use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl Empty for PrivateCallStackItem {\n    fn empty() -> Self {\n        PrivateCallStackItem {\n            contract_address: AztecAddress::empty(),\n            function_data: FunctionData::empty(),\n            public_inputs: PrivateCircuitPublicInputs::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = PrivateCallStackItem::empty();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item = PrivateCallStackItem::empty();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x065f2831db9ac0db5e710bd3a865b5facd8cf83f1585e1af8fd1d6ce9c47f685;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"209":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/caller_context.nr","source":"use crate::address::AztecAddress;\nuse crate::traits::{Empty, Serialize, Deserialize};\nuse crate::constants::CALLER_CONTEXT_LENGTH;\nuse crate::utils::reader::Reader;\n\nstruct CallerContext {\n    msg_sender: AztecAddress,\n    storage_contract_address: AztecAddress,\n    is_static_call: bool,\n}\n\nimpl Eq for CallerContext {\n    fn eq(self, other: CallerContext) -> bool {\n        other.msg_sender.eq(self.msg_sender)\n            & other.storage_contract_address.eq(self.storage_contract_address)\n            & other.is_static_call == self.is_static_call\n    }\n}\n\nimpl Empty for CallerContext {\n    fn empty() -> Self {\n        CallerContext {\n            msg_sender: AztecAddress::zero(),\n            storage_contract_address: AztecAddress::zero(),\n            is_static_call: false,\n        }\n    }\n}\n\nimpl CallerContext {\n    pub fn is_empty(self) -> bool {\n        self.msg_sender.is_zero() & self.storage_contract_address.is_zero() & !self.is_static_call\n    }\n\n    // Different to an empty context, a hidden context won't reveal the caller's msg_sender and storage_contract_address,\n    // but will still propagate the is_static_call flag.\n    pub fn is_hidden(self) -> bool {\n        self.msg_sender.is_zero() & self.storage_contract_address.is_zero()\n    }\n}\n\nimpl Serialize<CALLER_CONTEXT_LENGTH> for CallerContext {\n  fn serialize(self) -> [Field; CALLER_CONTEXT_LENGTH] {\n    let mut fields: BoundedVec<Field, CALLER_CONTEXT_LENGTH> = BoundedVec::new();\n\n    fields.extend_from_array(self.msg_sender.serialize());\n    fields.extend_from_array(self.storage_contract_address.serialize());\n    fields.push(self.is_static_call as Field);\n\n    assert_eq(fields.len(), CALLER_CONTEXT_LENGTH);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CALLER_CONTEXT_LENGTH> for CallerContext {\n  fn deserialize(fields: [Field; CALLER_CONTEXT_LENGTH]) -> CallerContext {\n    let mut reader = Reader::new(fields);\n\n    let item = CallerContext {\n      msg_sender: reader.read_struct(AztecAddress::deserialize),\n      storage_contract_address: reader.read_struct(AztecAddress::deserialize),\n      is_static_call: reader.read_bool(),\n    };\n    reader.finish();\n    item\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = CallerContext::empty();\n    let serialized = item.serialize();\n    let deserialized = CallerContext::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"21":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\nstruct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    fn new(x: Field, y: Field, is_infinite: bool) -> Self {\n        Self { x, y, is_infinite }\n    }\n\n    fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    fn neg(self) -> EmbeddedCurvePoint { \n        EmbeddedCurvePoint {\n            x: self.x,\n            y: -self.y,\n            is_infinite: self.is_infinite\n        }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite) | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n// Scalar represented as low and high limbs\nstruct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    pub fn derive_public_key(self) -> EmbeddedCurvePoint {\n        let public_key = fixed_base_scalar_mul(self.lo, self.hi);\n        EmbeddedCurvePoint { x: public_key[0], y: public_key[1], is_infinite: false }\n    }\n\n    #[field(bn254)]\n    fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, key: EmbeddedCurveScalar) -> bool {\n        (key.hi == self.hi) & (key.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n#[foreign(multi_scalar_mul)]\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> [Field; 3]\n// docs:end:multi_scalar_mul\n{}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(\n    scalar_low: Field,\n    scalar_high: Field\n) -> [Field; 3]\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    let scalar = EmbeddedCurveScalar { lo: scalar_low, hi: scalar_high };\n    multi_scalar_mul([g1], [scalar])\n}\n\n// This is a hack as returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\nfn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint\n) -> EmbeddedCurvePoint\n// docs:end:embedded_curve_add\n{\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n    EmbeddedCurvePoint { x, y, is_infinite: point_array[2] == 1 }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n"},"211":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/log_hash.nr","source":"use crate::{\n    abis::side_effect::{Ordered, OrderedValue, Scoped}, address::AztecAddress,\n    constants::{\n    LOG_HASH_LENGTH, NOTE_LOG_HASH_LENGTH, ENCRYPTED_LOG_HASH_LENGTH, SCOPED_LOG_HASH_LENGTH,\n    SCOPED_ENCRYPTED_LOG_HASH_LENGTH\n},\n    traits::{Empty, Serialize, Deserialize}, utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct LogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n}\n\nimpl Ordered for LogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for LogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for LogHash {\n    fn eq(self, other: LogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n    }\n}\n\nimpl Empty for LogHash {\n    fn empty() -> Self {\n        LogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n        }\n    }\n}\n\nimpl Serialize<LOG_HASH_LENGTH> for LogHash {\n    fn serialize(self) -> [Field; LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length]\n    }\n}\n\nimpl Deserialize<LOG_HASH_LENGTH> for LogHash {\n    fn deserialize(values: [Field; LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n        }\n    }\n}\n\nimpl LogHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedLogHash {\n        ScopedLogHash { log_hash: self, contract_address }\n    }\n}\n\nstruct ScopedLogHash {\n    log_hash: LogHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<LogHash> for ScopedLogHash {\n    fn inner(self) -> LogHash {\n        self.log_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedLogHash {\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedLogHash {\n    fn value(self) -> Field {\n        self.log_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl Eq for ScopedLogHash {\n    fn eq(self, other: ScopedLogHash) -> bool {\n        (self.log_hash == other.log_hash)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedLogHash {\n    fn empty() -> Self {\n        ScopedLogHash {\n            log_hash: LogHash::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_LOG_HASH_LENGTH> for ScopedLogHash {\n    fn serialize(self) -> [Field; SCOPED_LOG_HASH_LENGTH] {\n       array_concat(self.log_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_LOG_HASH_LENGTH> for ScopedLogHash {\n    fn deserialize(values: [Field; SCOPED_LOG_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            log_hash: reader.read_struct(LogHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl ScopedLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the counter when exposing to public.\n        // The log hash must already be siloed when we call this.\n        LogHash { value: self.log_hash.value, counter: 0, length: self.log_hash.length }\n    }\n}\n\nstruct EncryptedLogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n    randomness: Field,\n}\n\nimpl Ordered for EncryptedLogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for EncryptedLogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for EncryptedLogHash {\n    fn eq(self, other: EncryptedLogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n            & (self.randomness == other.randomness) \n    }\n}\n\nimpl Empty for EncryptedLogHash {\n    fn empty() -> Self {\n        EncryptedLogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n            randomness: 0,\n        }\n    }\n}\n\nimpl Serialize<ENCRYPTED_LOG_HASH_LENGTH> for EncryptedLogHash {\n    fn serialize(self) -> [Field; ENCRYPTED_LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length, self.randomness]\n    }\n}\n\nimpl Deserialize<ENCRYPTED_LOG_HASH_LENGTH> for EncryptedLogHash {\n    fn deserialize(values: [Field; ENCRYPTED_LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n            randomness: values[3],\n        }\n    }\n}\n\nimpl EncryptedLogHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedEncryptedLogHash {\n        ScopedEncryptedLogHash { log_hash: self, contract_address }\n    }\n}\n\nstruct ScopedEncryptedLogHash {\n    log_hash: EncryptedLogHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<EncryptedLogHash> for ScopedEncryptedLogHash {\n    fn inner(self) -> EncryptedLogHash {\n        self.log_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl ScopedEncryptedLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the secret randomness and counter when exposing to public\n        // Expose as a LogHash rather than EncryptedLogHash to avoid bringing an unnec. 0 value around\n        // The log hash will already be silo'd when we call this\n        LogHash { value: self.log_hash.value, counter: 0, length: self.log_hash.length }\n    }\n}\n\nimpl Ordered for ScopedEncryptedLogHash {\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedEncryptedLogHash {\n    fn value(self) -> Field {\n        self.log_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl Eq for ScopedEncryptedLogHash {\n    fn eq(self, other: ScopedEncryptedLogHash) -> bool {\n        (self.log_hash == other.log_hash)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedEncryptedLogHash {\n    fn empty() -> Self {\n        ScopedEncryptedLogHash {\n            log_hash: EncryptedLogHash::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_ENCRYPTED_LOG_HASH_LENGTH> for ScopedEncryptedLogHash {\n    fn serialize(self) -> [Field; SCOPED_ENCRYPTED_LOG_HASH_LENGTH] {\n       array_concat(self.log_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_ENCRYPTED_LOG_HASH_LENGTH> for ScopedEncryptedLogHash {\n    fn deserialize(values: [Field; SCOPED_ENCRYPTED_LOG_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            log_hash: reader.read_struct(EncryptedLogHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nstruct NoteLogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n    note_hash_counter: u32,\n}\n\nimpl NoteLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the actual counter and note hash counter when exposing it to the public kernel.\n        // The counter is usually note_hash.counter + 1, so it can be revealing.\n        // Expose as a LogHash rather than NoteLogHash to avoid bringing an unnec. 0 value around\n        LogHash { value: self.value, counter: 0, length: self.length }\n    }\n}\n\nimpl Ordered for NoteLogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for NoteLogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for NoteLogHash {\n    fn eq(self, other: NoteLogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n            & (self.note_hash_counter == other.note_hash_counter) \n    }\n}\n\nimpl Empty for NoteLogHash {\n    fn empty() -> Self {\n        NoteLogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n            note_hash_counter: 0,\n        }\n    }\n}\n\nimpl Serialize<NOTE_LOG_HASH_LENGTH> for NoteLogHash {\n    fn serialize(self) -> [Field; NOTE_LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length, self.note_hash_counter as Field]\n    }\n}\n\nimpl Deserialize<NOTE_LOG_HASH_LENGTH> for NoteLogHash {\n    fn deserialize(values: [Field; NOTE_LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n            note_hash_counter: values[3] as u32,\n        }\n    }\n}\n"},"215":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/append_only_tree_snapshot.nr","source":"struct AppendOnlyTreeSnapshot {\n    root : Field,\n    // TODO(Alvaro) change this to a u64\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: u32 = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n"},"216":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n}\n// docs:end:call-context\n\nimpl Eq for CallContext {\n    fn eq(self, other: CallContext) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        let mut serialized: BoundedVec<Field, CALL_CONTEXT_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.msg_sender.to_field());\n        serialized.push(self.storage_contract_address.to_field());\n        serialized.push(self.function_selector.to_field());\n        serialized.push(self.is_delegate_call as Field);\n        serialized.push(self.is_static_call as Field);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        let mut reader = Reader::new(serialized);\n        CallContext {\n            msg_sender: AztecAddress::from_field(reader.read()),\n            storage_contract_address: AztecAddress::from_field(reader.read()),\n            function_selector: FunctionSelector::from_field(reader.read()),\n            is_delegate_call: reader.read() as bool,\n            is_static_call: reader.read() as bool,\n        }\n    }\n}\n\nimpl Empty for CallContext {\n    fn empty() -> Self {\n        CallContext {\n            msg_sender: AztecAddress::empty(),\n            storage_contract_address: AztecAddress::empty(),\n            function_selector: FunctionSelector::empty(),\n            is_delegate_call: false,\n            is_static_call: false,\n        }\n    }\n}\n\n#[test]\nfn serialize_deserialize_of_empty() {\n    let context = CallContext::empty();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = true;\n\n    let address: AztecAddress = AztecAddress::from_field(69420);\n    context1.msg_sender = address;\n    context2.msg_sender = address;\n\n    assert(context1.eq(context2));\n}\n\n#[test(should_fail)]\nfn not_eq_test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = false;\n\n    let address1: AztecAddress = AztecAddress::from_field(69420);\n    let address2: AztecAddress = AztecAddress::from_field(42069);\n\n    context1.msg_sender = address1;\n    context2.msg_sender = address2;\n\n    assert(context1.eq(context2));\n}\n\n#[test]\nfn hash_smoke() {\n    let context = CallContext::empty();\n    let _hashed = context.hash();\n}\n"},"217":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/max_block_number.nr","source":"use crate::{constants::MAX_BLOCK_NUMBER_LENGTH, traits::{Deserialize, Serialize, Empty}};\n\nstruct MaxBlockNumber {\n    _opt: Option<u32>\n}\n\nimpl Empty for MaxBlockNumber {\n    fn empty() -> Self {\n        Self { _opt: Option::none() }\n    }\n}\n\nimpl Eq for MaxBlockNumber {\n    fn eq(self, other: Self) -> bool {\n        self._opt == other._opt\n    }\n}\n\nimpl Serialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn serialize(self) -> [Field; MAX_BLOCK_NUMBER_LENGTH] {\n        [self._opt._is_some as Field, self._opt._value as Field]\n    }\n}\n\nimpl Deserialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn deserialize(serialized: [Field; MAX_BLOCK_NUMBER_LENGTH]) -> MaxBlockNumber {\n        MaxBlockNumber {\n            _opt: Option {\n                _is_some: serialized[0] as bool,\n                _value: serialized[1] as u32,\n            }\n        }\n    }\n}\n\nimpl MaxBlockNumber {\n    pub fn new(max_block_number: u32) -> Self {\n        Self { _opt: Option::some(max_block_number) }\n    }\n\n    pub fn is_none(self) -> bool {\n        self._opt.is_none()\n    }\n\n    pub fn is_some(self) -> bool {\n        self._opt.is_some()\n    }\n\n    pub fn unwrap(self) -> u32 {\n        self._opt.unwrap()\n    }\n\n    pub fn unwrap_unchecked(self) -> u32 {\n        self._opt.unwrap_unchecked()\n    }\n\n    pub fn min(lhs: MaxBlockNumber, rhs: MaxBlockNumber) -> MaxBlockNumber {\n        if rhs.is_none() {\n            lhs // lhs might also be none, but in that case both would be\n        } else {\n            MaxBlockNumber::min_with_u32(lhs, rhs.unwrap_unchecked())\n        }\n    }\n\n    pub fn min_with_u32(lhs: MaxBlockNumber, rhs: u32) -> MaxBlockNumber {\n        if lhs._opt.is_none() {\n            MaxBlockNumber::new(rhs)\n        } else {\n            let lhs_value = lhs._opt.unwrap_unchecked();\n\n            MaxBlockNumber::new(if lhs_value < rhs { lhs_value } else { rhs })\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = MaxBlockNumber::empty();\n    let serialized = item.serialize();\n    let deserialized = MaxBlockNumber::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn zeroed_is_none() {\n    // Large parts of the kernel rely on zeroed to initialize structs. This conveniently matches what `default` does,\n    // and though we should eventually move everything to use `default`, it's good to check for now that both are\n    // equivalent.\n    let a = MaxBlockNumber::empty();\n    assert(a.is_none());\n}\n\n#[test]\nfn serde_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert(b.is_none());\n}\n\n#[test]\nfn serde_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert_eq(b.unwrap(), 13);\n}\n\n#[test(should_fail)]\nfn default_unwrap_panics() {\n    let a = MaxBlockNumber::empty();\n    let _ = a.unwrap();\n}\n\n#[test]\nfn min_default_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::empty();\n\n    assert(MaxBlockNumber::min(a, b).is_none());\n}\n\n#[test]\nfn min_default_some() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::new(13);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_some_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::new(42);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_with_u32_default() {\n    let a = MaxBlockNumber::empty();\n    let b = 42;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 42);\n}\n\n#[test]\nfn min_with_u32_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = 42;\n    let c = 8;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min_with_u32(a, c).unwrap(), 8);\n}\n"},"22":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.to_le_radix(256, num_bytes);\n    let y_bytes = y.to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    let borrow = lte_16_hint(alo, blo);\n\n    let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n    let rhi = ahi - bhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Take hints of the decomposition\n        let (xlo, xhi) = decompose_hint(x);\n\n        // Range check the limbs\n        xlo.assert_max_bit_size(128);\n        xhi.assert_max_bit_size(128);\n\n        // Check that the decomposition is correct\n        assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n        // Assert that the decomposition of P is greater than the decomposition of x\n        assert_gt_limbs((PLO, PHI), (xlo, xhi));\n        (xlo, xhi)\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else  {\n        // Take a hint of the comparison and verify it\n        if lt_32_hint(a, b) {\n            assert_gt(b, a);\n            false\n        } else {\n            assert_gt(a, b);\n            true\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose_hint, decompose, compute_lt, assert_gt, gt, lt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"220":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize, Empty}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        (self.is_private == other.is_private)\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nimpl Empty for FunctionData {\n    fn empty() -> Self {\n        FunctionData {\n            selector: FunctionSelector::empty(),\n            is_private: false\n        }\n    }\n\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data = FunctionData::empty();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data = FunctionData::empty();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty function data hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"227":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/messaging/l2_to_l1_message.nr","source":"use crate::{\n    address::{AztecAddress, EthAddress},\n    constants::{L2_TO_L1_MESSAGE_LENGTH, SCOPED_L2_TO_L1_MESSAGE_LENGTH},\n    abis::side_effect::{Ordered, Scoped}, traits::{Deserialize, Empty, Serialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\n// Note: Not to be confused with L2ToL1Msg in Solidity\nstruct L2ToL1Message {\n    recipient: EthAddress,\n    content: Field,\n    counter: u32,\n}\n\nimpl Ordered for L2ToL1Message {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Empty for L2ToL1Message {\n    fn empty() -> Self {\n        Self {\n            recipient: EthAddress::empty(),\n            content: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Eq for L2ToL1Message {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient) & (self.content == other.content) & (self.counter == other.counter)\n    }\n}\n\nimpl Serialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn serialize(self) -> [Field; L2_TO_L1_MESSAGE_LENGTH] {\n        [self.recipient.to_field(), self.content, self.counter as Field]\n    }\n}\n\nimpl Deserialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn deserialize(values: [Field; L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        Self {\n            recipient: EthAddress::from_field(values[0]),\n            content: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n\nimpl L2ToL1Message {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedL2ToL1Message {\n        ScopedL2ToL1Message { message: self, contract_address }\n    }\n}\n\nstruct ScopedL2ToL1Message {\n    message: L2ToL1Message,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<L2ToL1Message> for ScopedL2ToL1Message {\n    fn inner(self) -> L2ToL1Message {\n        self.message\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedL2ToL1Message {\n    fn counter(self) -> u32 {\n        self.message.counter\n    }\n}\n\nimpl Eq for ScopedL2ToL1Message {\n    fn eq(self, other: ScopedL2ToL1Message) -> bool {\n        (self.message == other.message)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedL2ToL1Message {\n    fn empty() -> Self {\n        ScopedL2ToL1Message {\n            message: L2ToL1Message::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_L2_TO_L1_MESSAGE_LENGTH> for ScopedL2ToL1Message {\n    fn serialize(self) -> [Field; SCOPED_L2_TO_L1_MESSAGE_LENGTH] {\n        array_concat(self.message.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_L2_TO_L1_MESSAGE_LENGTH> for ScopedL2ToL1Message {\n    fn deserialize(values: [Field; SCOPED_L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            message: reader.read_struct(L2ToL1Message::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\n#[test]\nfn serialization_of_empty_l2() {\n    let item = L2ToL1Message::empty();\n    let serialized = item.serialize();\n    let deserialized = L2ToL1Message::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped_l2() {\n    let item = ScopedL2ToL1Message::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedL2ToL1Message::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"229":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::pedersen_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n"},"23":{"path":"std/field/mod.nr","source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n"},"234":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U64_SERIALIZED_LEN: Field = 1;\nglobal U128_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n"},"235":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<N> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<N> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\nimpl<N> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let mut result = [0; N];\n        let bytes: [u8; N] = self.as_bytes();\n        for i in 0..N {\n            result[i] = field_from_bytes([bytes[i];1], true);\n        }\n        result\n    }\n}\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<N> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n"},"237":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/content_commitment.nr","source":"use crate::{\n    constants::CONTENT_COMMITMENT_LENGTH, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct ContentCommitment {\n  num_txs: Field,\n  txs_effects_hash: Field,\n  in_hash: Field,\n  out_hash: Field,\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new();\n\n    fields.push(self.num_txs);\n    fields.push(self.txs_effects_hash);\n    fields.push(self.in_hash);\n    fields.push(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let num_txs = serialized[0];\n\n    let txs_effects_hash = serialized[1];\n\n    let in_hash = serialized[2];\n\n    let out_hash = serialized[3];\n\n    Self {\n      num_txs,\n      txs_effects_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      num_txs: 0,\n      txs_effects_hash: 0,\n      in_hash: 0,\n      out_hash: 0,\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.num_txs == other.num_txs)\n      & (self.txs_effects_hash == other.txs_effects_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n"},"238":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            std::hash::pedersen_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"239":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/header.nr","source":"use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, STATE_REFERENCE_LENGTH, CONTENT_COMMITMENT_LENGTH},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n    total_fees: Field\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables) &\n        self.total_fees.eq(other.total_fees)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n        fields.push(self.total_fees);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n        offset = offset + GLOBAL_VARIABLES_LENGTH;\n\n        let total_fees = serialized[offset];\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n            total_fees\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n            total_fees: 0\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header = Header::empty();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header = Header::empty();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header = Header::empty();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x124e8c40a6eca2e3ad10c04050b01a3fad00df3cea47b13592c7571b6914c7a7;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"240":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path, messaging::l2_to_l1_message::ScopedL2ToL1Message,\n    recursion::verification_key::VerificationKey, traits::is_empty,\n    utils::field::field_from_bytes_32_trunc\n};\nuse std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    pedersen_hash(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, inner_note_hash: Field) -> Field {\n    let inputs = [nonce, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_encrypted_log_hash(address: AztecAddress, randomness: Field, log_hash: Field) -> Field {\n    // TODO: Using 0 GENERATOR_INDEX here as interim before we move to posiedon\n    // NB: A unique separator will be needed for masked_contract_address\n    let mut masked_contract_address = pedersen_hash([address.to_field(), randomness], 0);\n    if randomness == 0 {\n        // In some cases, we actually want to reveal the contract address we are siloing with:\n        // e.g. 'handshaking' contract w/ known address\n        // An app providing randomness = 0 signals to not mask the address.\n        masked_contract_address = address.to_field();\n    }\n    accumulate_sha256([masked_contract_address, log_hash])\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedEncryptedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_encrypted_log_hash(\n            log_hash.contract_address,\n            log_hash.log_hash.randomness,\n            log_hash.log_hash.value\n        )\n    }\n}\n\npub fn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly. \npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<N>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n"},"241":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/partial_state_reference.nr","source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0], \n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial = PartialStateReference::empty();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n"},"243":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/transaction/tx_context.nr","source":"use crate::{\n    constants::{GENERATOR_INDEX__TX_CONTEXT, TX_CONTEXT_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader,\n    abis::gas_settings::GasSettings\n};\n\n// docs:start:tx-context\nstruct TxContext {\n    chain_id : Field,\n    version : Field,\n    gas_settings: GasSettings,\n}\n// docs:end:tx-context\n\nimpl TxContext {\n    pub fn new(chain_id: Field, version: Field, gas_settings: GasSettings) -> Self {\n        TxContext { chain_id, version, gas_settings }\n    }\n}\n\nimpl Eq for TxContext {\n    fn eq(self, other: Self) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.gas_settings.eq(other.gas_settings))\n    }\n}\n\nimpl Empty for TxContext {\n    fn empty() -> Self {\n        TxContext {\n            chain_id: 0,\n            version: 0,\n            gas_settings: GasSettings::empty(),\n        }\n    }\n}\n\nimpl Serialize<TX_CONTEXT_LENGTH> for TxContext {\n    fn serialize(self) -> [Field; TX_CONTEXT_LENGTH] {\n        let mut fields: BoundedVec<Field, TX_CONTEXT_LENGTH> = BoundedVec::new();\n\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.extend_from_array(self.gas_settings.serialize());\n\n        assert_eq(fields.len(), TX_CONTEXT_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<TX_CONTEXT_LENGTH> for TxContext {\n    fn deserialize(serialized: [Field; TX_CONTEXT_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let context = Self {\n            chain_id: reader.read(),\n            version: reader.read(),\n            gas_settings: reader.read_struct(GasSettings::deserialize),\n        };\n\n        reader.finish();\n        context\n    }\n}\n\nimpl Hash for TxContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__TX_CONTEXT)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context = TxContext::empty();\n    let serialized = context.serialize();\n    let deserialized = TxContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let context = TxContext::empty();\n    let hash = context.hash();\n\n    // Value from tx_context.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x17e4357684c5a4349b4587c95b0b6161dcb4a3c5b02d4eb2ecc3b02c80193261;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"246":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: Field = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point {\n            x: 0,\n            y: 0,\n            is_infinite: false\n        }\n    }\n}\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn pub_key_to_bytes(pk: Point) -> [u8; 64] {\n    assert(!pk.is_infinite, \"Point at infinity is not a valid public key.\");\n    let mut result = [0 as u8; 64];\n    let x_bytes = pk.x.to_be_bytes(32);\n    let y_bytes = pk.y.to_be_bytes(32);\n    for i in 0..32 {\n        result[i] = x_bytes[i];\n        result[i + 32] = y_bytes[i];\n    }\n    result\n}\n"},"249":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/state_reference.nr","source":"use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state = StateReference::empty();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n"},"25":{"path":"std/hash/mod.nr","source":"mod poseidon;\nmod mimc;\nmod poseidon2;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::sha256::{digest, sha256_var};\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul};\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n#[no_predicates]\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    let value = pedersen_commitment_with_separator(input, 0);\n    if (value.x == 0) & (value.y == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value.x, y: value.y, is_infinite: false }\n    }\n}\n\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        points[i] = EmbeddedCurveScalar::from_field(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let values = multi_scalar_mul(generators, points);\n    EmbeddedCurvePoint { x: values[0], y: values[1], is_infinite: values[2] as bool }\n}\n\n#[no_predicates]\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    EmbeddedCurvePoint { x: values[0], y: values[1], is_infinite: false }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    crate::assert_constant(starting_index);\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let v1 = pedersen_commitment_with_separator(input, separator);\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    multi_scalar_mul(\n        [length_generator[0], v1],\n        [EmbeddedCurveScalar { lo: N as Field, hi: 0 }, EmbeddedCurveScalar { lo: 1, hi: 0 }]\n    )[0]\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes(32).as_array();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n#[test]\nfn assert_pedersen_noir() {\n    // TODO: make this a fuzzer test once fuzzer supports curve-specific blackbox functions.\n    let input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    assert_eq(pedersen_hash_with_separator(input, 4), pedersen_hash_with_separator_noir(input, 4));\n    assert_eq(pedersen_commitment_with_separator(input, 4), pedersen_commitment_with_separator_noir(input, 4));\n}\n"},"263":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"struct Reader<N> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"273":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes = field.to_be_bytes(31);\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2 = field.to_be_bytes(31);\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n"},"274":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/arrays.nr","source":"mod assert_sorted_array;\nmod assert_sorted_transformed_value_array;\nmod assert_split_sorted_transformed_value_arrays;\nmod sort_by_counters;\nmod sort_get_order_hints;\nmod sort_get_sorted_hints;\nmod sort_get_sorted_tuple;\nmod sort_get_split_order_hints;\n\n// Re-exports.\nuse assert_sorted_array::assert_sorted_array;\nuse assert_split_sorted_transformed_value_arrays::{assert_split_sorted_transformed_value_arrays_asc, assert_split_sorted_transformed_value_arrays_desc};\nuse assert_sorted_transformed_value_array::assert_sorted_transformed_value_array;\nuse sort_by_counters::{sort_by_counters_asc, sort_by_counters_desc};\nuse sort_get_order_hints::{OrderHint, sort_get_order_hints_asc, sort_get_order_hints_desc};\nuse sort_get_sorted_hints::sort_get_sorted_hints;\nuse sort_get_split_order_hints::{sort_get_split_order_hints_asc, sort_get_split_order_hints_desc, SplitOrderHints};\n\nuse crate::traits::{Empty, is_empty};\nuse crate::abis::side_effect::{Positioned, Ordered};\n\npub fn array_to_bounded_vec<T, N>(array: [T; N]) -> BoundedVec<T, N> where T: Empty + Eq {\n    let mut len = 0;\n    for elem in array {\n        if !is_empty(elem) {\n            len += 1;\n        }\n    }\n\n    BoundedVec { storage: array, len }\n}\n\nunconstrained fn filter_array_to_bounded_vec_unsafe<T, N>(arr: [T; N], should_propagate: [bool; N]) -> BoundedVec<T, N> {\n    let mut vec = BoundedVec::new();\n    for i in 0..N {\n        if should_propagate[i] {\n            vec.push(arr[i]);\n        }\n    }\n    vec\n}\n\npub fn filter_array_to_bounded_vec<T, N>(arr: [T; N], should_propagate: [bool; N]) -> BoundedVec<T, N> where T: Eq {\n    let vec_hint = filter_array_to_bounded_vec_unsafe(arr, should_propagate);\n    let mut verifying_index = 0;\n\n    for i in 0..N {\n        if should_propagate[i] {\n            assert_eq(arr[i], vec_hint.get(verifying_index));\n            verifying_index += 1;\n        }\n    }\n    assert_eq(verifying_index, vec_hint.len());\n\n    vec_hint\n}\n\nunconstrained pub fn find_index_hint<T, N>(array: [T; N], find: T) -> u32 where T: Eq {\n    let mut index = 0;\n    for i in 0..array.len() {\n        if array[i] == find {\n            index = i;\n        }\n    }\n    index\n}\n\n// Routine which validates that all zero values of an array form a contiguous region at the end, i.e.,\n// of the form: [*,*,*...,0,0,0,0] where any * is non-zero. Note that a full array of non-zero values is\n// valid.\npub fn validate_array<T, N>(array: [T; N]) -> u32 where T: Empty + Eq {\n    let mut seen_empty = false;\n    let mut length = 0;\n    for i in 0..N {\n        if is_empty(array[i]) {\n            seen_empty = true;\n        } else {\n            assert(seen_empty == false, \"invalid array\");\n            length += 1;\n        }\n    }\n    length\n}\n\nunconstrained fn count_non_empty_elements<T, N>(array: [T; N]) -> u32 where T: Empty + Eq {\n    let mut length = 0;\n    let mut seen_empty = false;\n    for elem in array {\n        if is_empty(elem) {\n            seen_empty = true;\n        } else if !seen_empty {\n            length += 1;\n        }\n    }\n    length\n}\n\n// Helper function to count the number of non-empty elements in a validated array.\n// Important: Only use it for validated arrays: validate_array(array) should be true.\npub fn array_length<T, N>(array: [T; N]) -> u32 where T: Empty + Eq {\n    let length = count_non_empty_elements(array);\n    if length != 0 {\n        assert(!is_empty(array[length - 1]));\n    }\n    if length != N {\n        assert(is_empty(array[length]));\n    }\n    length\n}\n\n// Deprecated. Use tests/utils/assert_array_eq instead.\npub fn array_eq<T, N, S>(array: [T; N], expected: [T; S]) -> bool where T: Empty + Eq {\n    let mut eq = array_length(array) == S;\n\n    for i in 0..S {\n        eq &= array[i].eq(expected[i]);\n    }\n\n    eq\n}\n\npub fn find_index<T, N, Env>(array: [T; N], find: fn[Env](T) -> bool) -> u32 {\n    let mut index = N;\n    for i in 0..N {\n        if (index == N) & find(array[i]) {\n            index = i;\n        }\n    }\n    index\n}\n\npub fn array_cp<T, N, S>(array: [T; N]) -> [T; S] where T: Empty {\n    let mut result: [T; S] = [T::empty(); S];\n    for i in 0..S {\n        result[i] = array[i];\n    }\n    result\n}\n\npub fn array_concat<T, N, M, S>(array1: [T; N], array2: [T; M]) -> [T; S] {\n    assert_eq(N + M, S, \"combined array length does not match return array length\");\n    let mut result = [array1[0]; S];\n    for i in 1..N {\n        result[i] = array1[i];\n    }\n    for i in 0..M {\n        result[i + N] = array2[i];\n    }\n    result\n}\n\npub fn array_merge<T, N>(array1: [T; N], array2: [T; N]) -> [T; N] where T: Empty + Eq {\n    let mut result: [T; N] = [T::empty(); N];\n    let mut i = 0;\n    for elem in array1 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    for elem in array2 {\n        if !is_empty(elem) {\n            result[i] = elem;\n            i += 1;\n        }\n    }\n    result\n}\n\npub fn check_permutation<T, N>(\n    original_array: [T; N],\n    permuted_array: [T; N],\n    original_indexes: [u32; N]\n) where T: Eq + Empty {\n    let mut seen_value = [false; N];\n    for i in 0..N {\n        let index = original_indexes[i];\n        let original_value = original_array[index];\n        assert(permuted_array[i].eq(original_value), \"Invalid index\");\n        assert(!seen_value[index], \"Duplicated index\");\n        seen_value[index] = true;\n    }\n}\n\npub fn assert_deduped_array<T, N, Env>(\n    original_array: [T; N],\n    deduped_array: [T; N],\n    run_lengths: [u32; N]\n) where T: Positioned + Ordered + Empty + Eq {\n    /*\n    The original_array here needs to be sorted based on the `position` field of the container,\n    *and* a secondary sort based on the `counter` field of the container. \n\n    For example, the storage slot in the case of public data update requests.\n    The run_lengths array should contain the length of each run of the original_array.\n    The deduped_array should contain the deduplicated array.\n\n    For example, if the original array is writing `(position,value,counter)`s:\n    [ (1,1,1), (1,2,4), (2,3,3), (3,4,2), (3,5,5), (3,6,6), (4,7,8), (4,8,9), (5,9,7), (0,0,0), ... padding with zeros ]\n    then run_lengths array is:\n    [\n        2, // run of 1s\n        1, // run of 2\n        3, // run of 3s\n        2, // run of 4s\n        1, // run of 5\n        0,\n        0,\n        ... padding with zeros\n    ]\n    \n    then the deduped_array should be:\n    [ (1,2,4), (2,3,3), (3,6,6), (4,8,9), (5,9,7), (0,0,0), ... padding with zeros ]\n    */\n\n    let deduped_len = validate_array(deduped_array); // This also makes sure that the array is padded with empty items.  \n    let run_lengths_len = array_length(run_lengths); // Don't have to be a \"validated\" array because non zero padded values don't hurt.  \n    assert_eq(deduped_len, run_lengths_len, \"Deduped array length does not match number of run lengths\");\n\n    let mut seen_empty = false;\n    // container at the start of the current run\n    let mut start_run_index = 0;\n    // the index we are collapsing into\n    let mut deduped_index = 0;\n    // the length of the current run we are collapsing\n    let mut run_counter = run_lengths[deduped_index];\n    for i in 0..N {\n        let current_container = original_array[i];\n        if is_empty(current_container) {\n            seen_empty = true;\n        } else {\n            assert(!seen_empty, \"Empty values must be padded to the right\");\n            assert(run_counter > 0, \"Invalid run length\");\n            assert(\n                current_container.position().eq(original_array[start_run_index].position()), \"The position of the current container must match the start of the run\"\n            );\n            run_counter -= 1;\n            if run_counter == 0 {\n                assert(\n                    deduped_array[deduped_index].eq(current_container), \"The container we are collapsing into must match the current container\"\n                );\n                start_run_index = i + 1;\n                deduped_index += 1;\n                run_counter = run_lengths[deduped_index];\n            } else {\n                // we're in a run, so this container must have a lower counter.\n                // note we don't check for overflow here, as the run_lengths array must be correct.\n                assert(\n                    current_container.counter() <= original_array[i + 1].counter(), \"Containers in a run must be sorted by counter\"\n                );\n            }\n        }\n    }\n\n    assert_eq(deduped_index, deduped_len, \"Final deduped index does not match deduped array length\");\n}\n\nmod tests {\n\n    use crate::utils::arrays::assert_deduped_array;\n    use crate::abis::side_effect::{Positioned, Ordered};\n    use crate::traits::{Empty, is_empty};\n\n    struct TestContainer {\n        value: Field,\n        position: Field,\n        counter: u32,\n    }\n\n    impl Positioned for TestContainer {\n        fn position(self) -> Field {\n            self.position\n        }\n    }\n\n    impl Ordered for TestContainer {\n        fn counter(self) -> u32 {\n            self.counter\n        }\n    }\n\n    impl Empty for TestContainer {\n        fn empty() -> Self {\n            TestContainer { value: 0, position: 0, counter: 0 }\n        }\n    }\n\n    impl Eq for TestContainer {\n        fn eq(self, other: Self) -> bool {\n            self.value.eq(other.value) & self.position.eq(other.position) & self.counter.eq(other.counter)\n        }\n    }\n\n    #[test]\n    fn assert_deduped_array_basic_test() {\n        let original_array = [\n            TestContainer { value: 1, position: 1, counter: 1 },\n            TestContainer { value: 2, position: 1, counter: 4 },\n            TestContainer { value: 3, position: 2, counter: 3 },\n            TestContainer { value: 4, position: 3, counter: 2 },\n            TestContainer { value: 5, position: 3, counter: 5 },\n            TestContainer { value: 6, position: 3, counter: 6 },\n            TestContainer { value: 7, position: 4, counter: 8 },\n            TestContainer { value: 8, position: 4, counter: 9 },\n            TestContainer { value: 9, position: 5, counter: 7 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 0, position: 0, counter: 0 }\n        ];\n        let deduped_array = [\n            TestContainer { value: 2, position: 1, counter: 4 },\n            TestContainer { value: 3, position: 2, counter: 3 },\n            TestContainer { value: 6, position: 3, counter: 6 },\n            TestContainer { value: 8, position: 4, counter: 9 },\n            TestContainer { value: 9, position: 5, counter: 7 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 0, position: 0, counter: 0 }\n        ];\n        let run_lengths = [2, 1, 3, 2, 1, 0, 0, 0, 0, 0, 0, 0];\n        assert_deduped_array(original_array, deduped_array, run_lengths);\n    }\n\n    #[test]\n    fn assert_deduped_array_empty_arrays() {\n        let original_array = [TestContainer { value: 0, position: 0, counter: 0 }; 12];\n        let deduped_array = [TestContainer { value: 0, position: 0, counter: 0 }; 12];\n        let run_lengths = [0; 12];\n        assert_deduped_array(original_array, deduped_array, run_lengths);\n    }\n\n    #[test]\n    fn assert_deduped_array_no_duplicates() {\n        let original_array = [\n            TestContainer { value: 1, position: 1, counter: 1 },\n            TestContainer { value: 2, position: 2, counter: 2 },\n            TestContainer { value: 3, position: 3, counter: 3 },\n            TestContainer { value: 4, position: 4, counter: 4 },\n            TestContainer { value: 5, position: 5, counter: 5 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 0, position: 0, counter: 0 }\n        ];\n        let deduped_array = original_array;\n        let run_lengths = [1, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0];\n        assert_deduped_array(original_array, deduped_array, run_lengths);\n    }\n\n    #[test]\n    fn assert_deduped_array_single_run_at_end() {\n        let original_array = [\n            TestContainer { value: 1, position: 1, counter: 1 },\n            TestContainer { value: 2, position: 2, counter: 2 },\n            TestContainer { value: 3, position: 3, counter: 3 },\n            TestContainer { value: 4, position: 4, counter: 4 },\n            TestContainer { value: 5, position: 5, counter: 5 },\n            TestContainer { value: 6, position: 6, counter: 7 },\n            TestContainer { value: 7, position: 6, counter: 8 },\n            TestContainer { value: 8, position: 6, counter: 9 }\n        ];\n        let deduped_array = [\n            TestContainer { value: 1, position: 1, counter: 1 },\n            TestContainer { value: 2, position: 2, counter: 2 },\n            TestContainer { value: 3, position: 3, counter: 3 },\n            TestContainer { value: 4, position: 4, counter: 4 },\n            TestContainer { value: 5, position: 5, counter: 5 },\n            TestContainer { value: 8, position: 6, counter: 9 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 0, position: 0, counter: 0 }\n        ];\n        let run_lengths = [1, 1, 1, 1, 1, 3, 0, 0];\n        assert_deduped_array(original_array, deduped_array, run_lengths);\n    }\n\n    #[test]\n    fn assert_deduped_array_all_duplicates() {\n        let original_array = [\n            TestContainer { value: 1, position: 1, counter: 1 },\n            TestContainer { value: 2, position: 1, counter: 2 },\n            TestContainer { value: 3, position: 1, counter: 3 },\n            TestContainer { value: 4, position: 1, counter: 4 },\n            TestContainer { value: 5, position: 1, counter: 5 },\n            TestContainer { value: 6, position: 1, counter: 6 },\n            TestContainer { value: 7, position: 1, counter: 7 },\n            TestContainer { value: 8, position: 1, counter: 8 },\n            TestContainer { value: 9, position: 1, counter: 9 }\n        ];\n        let deduped_array = [\n            TestContainer { value: 9, position: 1, counter: 9 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 0, position: 0, counter: 0 }\n        ];\n        let run_lengths = [9, 0, 0, 0, 0, 0, 0, 0, 0];\n        assert_deduped_array(original_array, deduped_array, run_lengths);\n    }\n\n    #[test(should_fail_with = \"Empty values must be padded to the right\")]\n    fn test_empty_not_padded_right() {\n        let original_array = [\n            TestContainer { value: 1, position: 1, counter: 1 },\n            TestContainer { value: 2, position: 1, counter: 2 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 3, position: 2, counter: 3 }\n        ];\n        let deduped_array = [\n            TestContainer { value: 2, position: 1, counter: 2 },\n            TestContainer { value: 3, position: 2, counter: 3 },\n            TestContainer { value: 0, position: 0, counter: 0 },\n            TestContainer { value: 0, position: 0, counter: 0 }\n        ];\n        let run_lengths = [2, 1, 0, 0];\n        assert_deduped_array(original_array, deduped_array, run_lengths);\n    }\n\n    #[test(should_fail_with = \"The position of the current container must match the start of the run\")]\n    fn test_mismatched_position_in_run() {\n        let original_array = [\n            TestContainer { value: 1, position: 1, counter: 1 },\n            TestContainer { value: 2, position: 1, counter: 2 },\n            TestContainer { value: 3, position: 2, counter: 3 },\n            TestContainer { value: 4, position: 3, counter: 4 }\n        ];\n        let deduped_array = [\n            TestContainer { value: 2, position: 1, counter: 2 },\n            TestContainer { value: 3, position: 2, counter: 3 },\n            TestContainer { value: 4, position: 3, counter: 4 },\n            TestContainer { value: 0, position: 0, counter: 0 }\n        ];\n        let run_lengths = [3, 1, 1, 0];\n        assert_deduped_array(original_array, deduped_array, run_lengths);\n    }\n\n    #[test(should_fail_with = \"The container we are collapsing into must match the current container\")]\n    fn test_mismatched_deduped_value() {\n        let original_array = [\n            TestContainer { value: 1, position: 1, counter: 1 },\n            TestContainer { value: 2, position: 1, counter: 2 },\n            TestContainer { value: 3, position: 2, counter: 3 },\n            TestContainer { value: 4, position: 3, counter: 4 }\n        ];\n        let deduped_array = [\n            TestContainer { value: 1, position: 1, counter: 1 },\n            TestContainer { value: 3, position: 2, counter: 3 },\n            TestContainer { value: 4, position: 3, counter: 4 },\n            TestContainer { value: 0, position: 0, counter: 0 }\n        ];\n        let run_lengths = [2, 1, 1, 0];\n        assert_deduped_array(original_array, deduped_array, run_lengths);\n    }\n\n    #[test(should_fail_with = \"Deduped array length does not match number of run lengths\")]\n    fn test_run_lengths_not_zero_padded() {\n        let original_array = [\n            TestContainer { value: 1, position: 1, counter: 1 },\n            TestContainer { value: 2, position: 1, counter: 2 },\n            TestContainer { value: 3, position: 2, counter: 3 },\n            TestContainer { value: 4, position: 3, counter: 4 }\n        ];\n        let deduped_array = [\n            TestContainer { value: 2, position: 1, counter: 2 },\n            TestContainer { value: 3, position: 2, counter: 3 },\n            TestContainer { value: 4, position: 3, counter: 4 },\n            TestContainer { value: 0, position: 0, counter: 0 }\n        ];\n        let run_lengths = [2, 1, 1, 1]; // Last element should be 0\n        assert_deduped_array(original_array, deduped_array, run_lengths);\n    }\n\n    #[test(should_fail_with = \"Deduped array length does not match number of run lengths\")]\n    fn test_deduped_padding_not_zero_padded() {\n        let original_array = [\n            TestContainer { value: 1, position: 1, counter: 1 },\n            TestContainer { value: 2, position: 1, counter: 2 },\n            TestContainer { value: 3, position: 2, counter: 3 },\n            TestContainer { value: 4, position: 3, counter: 4 }\n        ];\n        let deduped_array = [\n            TestContainer { value: 2, position: 1, counter: 2 },\n            TestContainer { value: 3, position: 2, counter: 3 },\n            TestContainer { value: 4, position: 3, counter: 4 },\n            TestContainer { value: 1, position: 1, counter: 1 }// Last element should be 0\n        ];\n        let run_lengths = [2, 1, 1, 0];\n        assert_deduped_array(original_array, deduped_array, run_lengths);\n    }\n}\n\n#[test]\nfn smoke_validate_array() {\n    let valid_array: [Field; 0] = [];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [0];\n    assert(validate_array(valid_array) == 0);\n\n    let valid_array = [3];\n    assert(validate_array(valid_array) == 1);\n\n    let valid_array = [1, 2, 3];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0];\n    assert(validate_array(valid_array) == 3);\n\n    let valid_array = [1, 2, 3, 0, 0];\n    assert(validate_array(valid_array) == 3);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case0() {\n    let invalid_array = [0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case1() {\n    let invalid_array = [1, 0, 0, 1, 0];\n    let _ = validate_array(invalid_array);\n}\n\n#[test(should_fail_with = \"invalid array\")]\nfn smoke_validate_array_invalid_case2() {\n    let invalid_array = [0, 0, 0, 0, 1];\n    let _ = validate_array(invalid_array);\n}\n\n#[test]\nfn test_empty_array_length() {\n    assert_eq(array_length([0]), 0);\n    assert_eq(array_length([0, 0, 0]), 0);\n}\n\n#[test]\nfn test_array_length() {\n    assert_eq(array_length([123]), 1);\n    assert_eq(array_length([123, 0, 0]), 1);\n    assert_eq(array_length([123, 456]), 2);\n    assert_eq(array_length([123, 456, 0]), 2);\n}\n\n#[test]\nfn test_array_length_invalid_arrays() {\n    // Result can be misleading (but correct) for invalid arrays.\n    assert_eq(array_length([0, 0, 123]), 0);\n    assert_eq(array_length([0, 123, 0]), 0);\n    assert_eq(array_length([0, 123, 456]), 0);\n    assert_eq(array_length([123, 0, 456]), 1);\n}\n\n#[test]\nfn find_index_greater_than_min() {\n    let values = [10, 20, 30, 40];\n    let min = 22;\n    let index = find_index(values, |v: Field| min.lt(v));\n    assert_eq(index, 2);\n}\n\n#[test]\nfn find_index_not_found() {\n    let values = [10, 20, 30, 40];\n    let min = 100;\n    let index = find_index(values, |v: Field| min.lt(v));\n    assert_eq(index, 4);\n}\n\n#[test]\nfn test_array_concat() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let concated = array_concat(array0, array1);\n    assert_eq(concated, [1, 2, 3, 4, 5]);\n}\n\n#[test(should_fail_with=\"combined array length does not match return array length\")]\nfn array_concat_fails_inconsistent_lengths() {\n    let array0 = [1, 2, 3];\n    let array1 = [4, 5];\n    let _concated: [Field; 4] = array_concat(array0, array1);\n}\n\n#[test]\nfn check_permutation_basic_test() {\n    let original_array = [1, 2, 3];\n    let permuted_array = [3, 1, 2];\n    let indexes = [2, 0, 1];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Duplicated index\")]\nfn check_permutation_duplicated_index() {\n    let original_array = [0, 1, 0];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 0];\n    check_permutation(original_array, permuted_array, indexes);\n}\n\n#[test(should_fail_with = \"Invalid index\")]\nfn check_permutation_invalid_index() {\n    let original_array = [0, 1, 2];\n    let permuted_array = [1, 0, 0];\n    let indexes = [1, 0, 2];\n    check_permutation(original_array, permuted_array, indexes);\n}\n"},"275":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"289":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr","source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n"},"290":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId, hash::poseidon2_hash,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash([pub_keys_hash.to_field(), partial_address.to_field(), GENERATOR_INDEX__CONTRACT_ADDRESS_V1])\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x1b6ead051e7b42665064ca6cf1ec77da0a36d86e00d1ff6e44077966c0c3a9fa;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"30":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\nglobal RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) -> [Field; RATE] {\n        // zero-pad the cache\n        for i in 0..RATE {\n            if i >= self.cache_size {\n                self.cache[i] = 0;\n            }\n        }\n        // add the cache into sponge state\n        for i in 0..RATE {\n            self.state[i] += self.cache[i];\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n        // return `RATE` number of field elements from the sponge state.\n        let mut result = [0; RATE];\n        for i in 0..RATE {\n            result[i] = self.state[i];\n        }\n        result\n    }\n\n    fn absorb(&mut self, input: Field) {\n        if (!self.squeeze_mode) & (self.cache_size == RATE) {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            let _ = self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else if (!self.squeeze_mode) & (self.cache_size != RATE) {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        } else if self.squeeze_mode {\n            // If we're in squeeze mode, switch to absorb mode and add the input into the cache.\n            // N.B. I don't think this code path can be reached?!\n            self.cache[0] = input;\n            self.cache_size = 1;\n            self.squeeze_mode = false;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        if self.squeeze_mode & (self.cache_size == 0) {\n            // If we're in squeze mode and the cache is empty, there is nothing left to squeeze out of the sponge!\n            // Switch to absorb mode.\n            self.squeeze_mode = false;\n            self.cache_size = 0;\n        }\n        if !self.squeeze_mode {\n            // If we're in absorb mode, apply sponge permutation to compress the cache, populate cache with compressed\n            // state and switch to squeeze mode. Note: this code block will execute if the previous `if` condition was\n            // matched\n            let new_output_elements = self.perform_duplex();\n            self.squeeze_mode = true;\n            for i in 0..RATE {\n                self.cache[i] = new_output_elements[i];\n            }\n            self.cache_size = RATE;\n        }\n        // By this point, we should have a non-empty cache. Pop one item off the top of the cache and return it.\n        let result = self.cache[0];\n        for i in 1..RATE {\n            if i < self.cache_size {\n                self.cache[i - 1] = self.cache[i];\n            }\n        }\n        self.cache_size -= 1;\n        self.cache[self.cache_size] = 0;\n        result\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n"},"32":{"path":"std/merkle.nr","source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<let N: u32>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n"},"346":{"path":"/usr/src/noir-projects/noir-contracts/contracts/docs_example_contract/src/main.nr","source":"mod options;\nmod types;\n\n// Following is a very simple game to show case use of PrivateMutable in as minimalistic way as possible\n// It also serves as an e2e test that you can read and then replace the PrivateMutable in the same call\n// (tests ordering in the circuit)\n\n// you have a card (PrivateMutable). Anyone can create a bigger card. Whoever is bigger will be the leader.\n// it also has dummy methods and other examples used for documentation e.g. \n// how to create custom notes, a custom struct for public state, a custom note that may be unencrypted\n// also has `options.nr` which shows various ways of using `NoteGetterOptions` to query notes\n// it also shows what our macros do behind the scenes!\n\ncontract DocsExample {\n    // how to import dependencies defined in your workspace\n    use dep::aztec::prelude::{\n        AztecAddress, FunctionSelector, NoteHeader, NoteGetterOptions, NoteViewerOptions,\n        PrivateContext, Map, PublicMutable, PublicImmutable, PrivateMutable, PrivateImmutable,\n        PrivateSet, SharedImmutable, Deserialize\n    };\n    use dep::aztec::encrypted_logs::encrypted_note_emission::{encode_and_encrypt_note, encode_and_encrypt_note_with_keys};\n    use dep::aztec::note::note_getter_options::Comparator;\n    // how to import methods from other files/folders within your workspace\n    use crate::types::{card_note::{CardNote, CARD_NOTE_LEN}, leader::Leader};\n\n    #[aztec(storage)]\n    struct Storage {\n        // Shows how to create a custom struct in PublicMutable\n        // docs:start:storage-leader-declaration\n        leader: PublicMutable<Leader>,\n        // docs:end:storage-leader-declaration\n        // docs:start:storage-private-mutable-declaration\n        legendary_card: PrivateMutable<CardNote>,\n        // docs:end:storage-private-mutable-declaration\n        // just used for docs example to show how to create a private mutable map. \n        profiles: Map<AztecAddress, PrivateMutable<CardNote>>,\n        // docs:start:storage-set-declaration\n        set: PrivateSet<CardNote>,\n        // docs:end:storage-set-declaration\n        // docs:start:storage-private-immutable-declaration\n        private_immutable: PrivateImmutable<CardNote>,\n        // docs:end:storage-private-immutable-declaration\n        // docs:start:storage-shared-immutable-declaration\n        shared_immutable: SharedImmutable<Leader>,\n        // docs:end:storage-shared-immutable-declaration\n        // docs:start:storage-minters-declaration\n        minters: Map<AztecAddress, PublicMutable<bool>>,\n        // docs:end:storage-minters-declaration\n        // docs:start:storage-public-immutable-declaration\n        public_immutable: PublicImmutable<Leader>,\n        // docs:end:storage-public-immutable-declaration\n    }\n\n    // Note: The following is no longer necessary to implement manually as our macros do this for us. It is left here\n    // for documentation purposes only.\n    impl<Context> Storage<Context> {\n        fn init(context: Context) -> Self {\n            Storage {\n                // docs:start:storage-leader-init\n                leader: PublicMutable::new(context, 1),\n                // docs:end:storage-leader-init\n                // docs:start:start_vars_private_mutable\n                legendary_card: PrivateMutable::new(context, 3),\n                // docs:end:start_vars_private_mutable\n                // just used for docs example (not for game play):\n                // docs:start:state_vars-MapPrivateMutable\n                profiles: Map::new(\n                    context,\n                    4,\n                    |context, slot| {\n                        PrivateMutable::new(context, slot)\n                    }\n                ),\n                // docs:end:state_vars-MapPrivateMutable\n                // docs:start:storage-set-init\n                set: PrivateSet::new(context, 5),\n                // docs:end:storage-set-init\n                private_immutable: PrivateImmutable::new(context, 6),\n                shared_immutable: SharedImmutable::new(context, 7),\n                // docs:start:storage-minters-init\n                minters: Map::new(\n                    context,\n                    8,\n                    |context, slot| {\n                        PublicMutable::new(context, slot)\n                    }\n                ),\n                // docs:end:storage-minters-init\n                // docs:start:storage-public-immutable\n                public_immutable: PublicImmutable::new(context, 9)// docs:end:storage-public-immutable\n            }\n        }\n    }\n\n    #[aztec(public)]\n    fn initialize_shared_immutable(points: u8) {\n        let mut new_leader = Leader { account: context.msg_sender(), points };\n        storage.shared_immutable.initialize(new_leader);\n    }\n\n    #[aztec(private)]\n    fn match_shared_immutable(account: AztecAddress, points: u8) {\n        let expected = Leader { account, points };\n        let read = storage.shared_immutable.read_private();\n\n        assert(read.account == expected.account, \"Invalid account\");\n        assert(read.points == expected.points, \"Invalid points\");\n    }\n\n    #[aztec(private)]\n    fn get_shared_immutable_constrained_private_indirect() -> pub Leader {\n        // This is a private function that calls another private function\n        // and returns the response.\n        // Used to test that we can retrieve values through calls and \n        // correctly return them in the simulation\n        let mut leader = DocsExample::at(context.this_address()).get_shared_immutable_constrained_private().view(&mut context);\n        leader.points += 1;\n        leader\n    }\n\n    #[aztec(public)]\n    fn get_shared_immutable_constrained_public_indirect() -> pub Leader {\n        // This is a public function that calls another public function\n        // and returns the response.\n        // Used to test that we can retrieve values through calls and \n        // correctly return them in the simulation\n        let mut leader = DocsExample::at(context.this_address()).get_shared_immutable_constrained_public().view(&mut context);\n        leader.points += 1;\n        leader\n    }\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn get_shared_immutable_constrained_public() -> pub Leader {\n        storage.shared_immutable.read_public()\n    }\n\n    #[aztec(public)]\n    fn get_shared_immutable_constrained_public_multiple() -> pub [Leader; 5] {\n        let a = storage.shared_immutable.read_public();\n        [a, a, a, a, a]\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn get_shared_immutable_constrained_private() -> pub Leader {\n        storage.shared_immutable.read_private()\n    }\n\n    unconstrained fn get_shared_immutable() -> pub Leader {\n        storage.shared_immutable.read_public()\n    }\n\n    #[aztec(public)]\n    fn initialize_public_immutable(points: u8) {\n        // docs:start:initialize_public_immutable\n        let mut new_leader = Leader { account: context.msg_sender(), points };\n        storage.public_immutable.initialize(new_leader);\n        // docs:end:initialize_public_immutable\n    }\n\n    unconstrained fn get_public_immutable() -> pub Leader {\n        // docs:start:read_public_immutable\n        storage.public_immutable.read()\n        // docs:end:read_public_immutable\n    }\n\n    // docs:start:initialize-private-mutable\n    #[aztec(private)]\n    fn initialize_private_immutable(randomness: Field, points: u8) {\n        let header = context.get_header();\n        let msg_sender_npk_m_hash = header.get_npk_m_hash(&mut context, context.msg_sender());\n\n        let mut new_card = CardNote::new(points, randomness, msg_sender_npk_m_hash);\n        storage.private_immutable.initialize(&mut new_card).emit(encode_and_encrypt_note(&mut context, context.msg_sender(), context.msg_sender()));\n    }\n    // docs:end:initialize-private-mutable\n\n    #[aztec(private)]\n    // msg_sender() is 0 at deploy time. So created another function\n    fn initialize_private(randomness: Field, points: u8) {\n        let header = context.get_header();\n        let msg_sender_npk_m_hash = header.get_npk_m_hash(&mut context, context.msg_sender());\n\n        let mut legendary_card = CardNote::new(points, randomness, msg_sender_npk_m_hash);\n        // create and broadcast note\n        storage.legendary_card.initialize(&mut legendary_card).emit(encode_and_encrypt_note(&mut context, context.msg_sender(), context.msg_sender()));\n    }\n\n    #[aztec(private)]\n    fn insert_notes(amounts: [u8; 3]) {\n        let header = context.get_header();\n        let msg_sender_npk_m_hash = header.get_npk_m_hash(&mut context, context.msg_sender());\n        let msg_sender_ovpk_m = header.get_ovpk_m(&mut context, context.msg_sender());\n        let msg_sender_ivpk_m = header.get_ivpk_m(&mut context, context.msg_sender());\n\n        for i in 0..amounts.len() {\n            let mut note = CardNote::new(amounts[i], 1, msg_sender_npk_m_hash);\n            storage.set.insert(&mut note).emit(encode_and_encrypt_note_with_keys(&mut context, msg_sender_ovpk_m, msg_sender_ivpk_m));\n        }\n    }\n\n    #[aztec(private)]\n    fn insert_note(amount: u8, randomness: Field) {\n        let header = context.get_header();\n        let msg_sender_npk_m_hash = header.get_npk_m_hash(&mut context, context.msg_sender());\n\n        let mut note = CardNote::new(amount, randomness, msg_sender_npk_m_hash);\n        storage.set.insert(&mut note).emit(encode_and_encrypt_note(&mut context, context.msg_sender(), context.msg_sender()));\n    }\n\n    // docs:start:state_vars-NoteGetterOptionsComparatorExampleNoir\n    unconstrained fn read_note(amount: Field, comparator: u8) -> pub BoundedVec<CardNote, 10> {\n        let mut options = NoteViewerOptions::new();\n        storage.set.view_notes(\n            options.select(\n                CardNote::properties().points,\n                amount,\n                Option::some(comparator)\n            )\n        )\n    }\n    // docs:end:state_vars-NoteGetterOptionsComparatorExampleNoir\n\n    #[aztec(private)]\n    fn update_legendary_card(randomness: Field, points: u8) {\n        let header = context.get_header();\n        let msg_sender_npk_m_hash = header.get_npk_m_hash(&mut context, context.msg_sender());\n\n        let mut new_card = CardNote::new(points, randomness, msg_sender_npk_m_hash);\n        storage.legendary_card.replace(&mut new_card).emit(encode_and_encrypt_note(&mut context, context.msg_sender(), context.msg_sender()));\n        DocsExample::at(context.this_address()).update_leader(context.msg_sender(), points).enqueue(&mut context);\n    }\n\n    #[aztec(private)]\n    fn increase_legendary_points() {\n        // Ensure `points` > current value\n        // Also serves as a e2e test that you can `get_note()` and then `replace()`\n\n        let header = context.get_header();\n        let msg_sender_npk_m_hash = header.get_npk_m_hash(&mut context, context.msg_sender());\n\n        // docs:start:state_vars-PrivateMutableGet\n        let card = storage.legendary_card.get_note().note;\n\n        // docs:end:state_vars-PrivateMutableGet\n\n        let points = card.points + 1;\n\n        let mut new_card = CardNote::new(points, card.randomness, msg_sender_npk_m_hash);\n        // docs:start:state_vars-PrivateMutableReplace\n        storage.legendary_card.replace(&mut new_card).emit(encode_and_encrypt_note(&mut context, context.msg_sender(), context.msg_sender()));\n        // docs:end:state_vars-PrivateMutableReplace\n\n        DocsExample::at(context.this_address()).update_leader(context.msg_sender(), points).enqueue(&mut context);\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn verify_private_authwit(inner_hash: Field) -> Field {\n        1\n    }\n\n    #[aztec(public)]\n    fn spend_public_authwit(inner_hash: Field) -> Field {\n        1\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn update_leader(account: AztecAddress, points: u8) {\n        let new_leader = Leader { account, points };\n        storage.leader.write(new_leader);\n    }\n\n    unconstrained fn get_leader() -> pub Leader {\n        storage.leader.read()\n    }\n\n    unconstrained fn get_legendary_card() -> pub CardNote {\n        storage.legendary_card.view_note()\n    }\n\n    // docs:start:private_mutable_is_initialized\n    unconstrained fn is_legendary_initialized() -> pub bool {\n        storage.legendary_card.is_initialized()\n    }\n    // docs:end:private_mutable_is_initialized\n\n    // docs:start:get_note-private-immutable\n    #[aztec(private)]\n    fn get_imm_card() -> CardNote {\n        storage.private_immutable.get_note()\n    }\n    // docs:end:get_note-private-immutable\n\n    unconstrained fn view_imm_card() -> pub CardNote {\n        storage.private_immutable.view_note()\n    }\n\n    unconstrained fn is_priv_imm_initialized() -> pub bool {\n        storage.private_immutable.is_initialized()\n    }\n\n    /// Macro equivalence section\n    use dep::aztec::hash::hash_args;\n\n    use dep::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs;\n    use dep::aztec::context::inputs::PrivateContextInputs;\n\n    // docs:start:simple_macro_example\n    #[aztec(private)]\n    fn simple_macro_example(a: Field, b: Field) -> Field {\n        a + b\n    }\n    // docs:end:simple_macro_example\n\n    // docs:start:simple_macro_example_expanded\n    fn simple_macro_example_expanded(\n        // ************************************************************\n        // The private context inputs are made available to the circuit by the kernel\n        // docs:start:context-example-inputs\n        inputs: PrivateContextInputs,\n        // docs:end:context-example-inputs\n        // ************************************************************\n\n        // Our original inputs!\n        a: Field,\n        b: Field // The actual return type of our circuit is the PrivateCircuitPublicInputs struct, this will be the \n        // input to our kernel! \n        // docs:start:context-example-return\n    ) -> pub PrivateCircuitPublicInputs {\n        // docs:end:context-example-return\n        // ************************************************************\n        // The hasher is a structure used to generate a hash of the circuits inputs. \n        // docs:start:context-example-hasher\n        let mut args_hasher = dep::aztec::hash::ArgsHasher::new();\n        args_hasher.add(a);\n        args_hasher.add(b);\n        // docs:end:context-example-hasher\n\n        // The context object is created with the inputs and the hash of the inputs\n        // docs:start:context-example-context\n        let mut context = PrivateContext::new(inputs, args_hasher.hash());\n        // docs:end:context-example-context\n\n        // docs:start:storage-example-context\n        let mut storage = Storage::init(&mut context);\n        // docs:end:storage-example-context\n        // ************************************************************\n\n        // Our actual program\n        let result = a + b;\n\n        // ************************************************************\n        // Return values are pushed into the context\n        // docs:start:context-example-context-return\n        let mut return_hasher = dep::aztec::hash::ArgsHasher::new();\n        return_hasher.add(result);\n        context.set_return_hash(return_hasher);\n        // docs:end:context-example-context-return\n\n        // The context is returned to be consumed by the kernel circuit!\n        // docs:start:context-example-finish\n        context.finish()\n        // docs:end:context-example-finish\n        // ************************************************************\n    }\n    // docs:end:simple_macro_example_expanded\n}\n"},"348":{"path":"/usr/src/noir-projects/noir-contracts/contracts/docs_example_contract/src/types/card_note.nr","source":"use dep::aztec::prelude::{AztecAddress, NoteInterface, NoteHeader, PrivateContext};\nuse dep::aztec::{\n    note::{utils::compute_note_hash_for_consumption}, keys::getters::get_nsk_app,\n    protocol_types::{traits::{Empty, Serialize}, constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash}\n};\n\n// Shows how to create a custom note\n\nglobal CARD_NOTE_LEN: Field = 3;\n// CARD_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal CARD_NOTE_BYTES_LEN: Field = 3 * 32 + 64;\n\n// docs:start:state_vars-CardNote\n#[aztec(note)]\nstruct CardNote {\n    points: u8,\n    randomness: Field,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n}\n// docs:end:state_vars-CardNote\n\nimpl CardNote {\n    pub fn new(points: u8, randomness: Field, npk_m_hash: Field) -> Self {\n        CardNote { points, randomness, npk_m_hash, header: NoteHeader::empty() }\n    }\n}\n\nimpl NoteInterface<CARD_NOTE_LEN, CARD_NOTE_BYTES_LEN> for CardNote {\n    fn compute_note_hash_and_nullifier(self, context: &mut PrivateContext) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n\n    fn compute_note_hash_and_nullifier_without_context(self) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n}\n\nimpl Serialize<3> for CardNote {\n    fn serialize(self) -> [Field; 3] {\n        [ self.points.to_field(), self.randomness, self.npk_m_hash.to_field() ]\n    }\n}\n"},"349":{"path":"/usr/src/noir-projects/noir-contracts/contracts/docs_example_contract/src/types/leader.nr","source":"use dep::aztec::protocol_types::{address::AztecAddress, traits::{Serialize, Deserialize}};\n\n// Shows how to create a custom struct in Public\nstruct Leader {\n    account: AztecAddress,\n    points: u8,\n}\n\nglobal LEADER_SERIALIZED_LEN: Field = 2;\n\nimpl Deserialize<LEADER_SERIALIZED_LEN> for Leader {\n    fn deserialize(fields: [Field; LEADER_SERIALIZED_LEN]) -> Self {\n        Leader { account: AztecAddress::from_field(fields[0]), points: fields[1] as u8 }\n    }\n}\n\nimpl Serialize<LEADER_SERIALIZED_LEN> for Leader {\n    fn serialize(self) -> [Field; LEADER_SERIALIZED_LEN] {\n        [self.account.to_field(), self.points as Field]\n    }\n}\n\n"},"38":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n"},"4":{"path":"std/cmp.nr","source":"// docs:start:eq-trait\ntrait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\nimpl Eq for Field { fn eq(self, other: Field) -> bool { self == other } }\n\nimpl Eq for u64 { fn eq(self, other: u64) -> bool { self == other } }\nimpl Eq for u32 { fn eq(self, other: u32) -> bool { self == other } }\nimpl Eq for u8 { fn eq(self, other: u8) -> bool { self == other } }\nimpl Eq for u1 { fn eq(self, other: u1) -> bool { self == other } }\n\nimpl Eq for i8 { fn eq(self, other: i8) -> bool { self == other } }\nimpl Eq for i32 { fn eq(self, other: i32) -> bool { self == other } }\nimpl Eq for i64 { fn eq(self, other: i64) -> bool { self == other } }\n\nimpl Eq for () { fn eq(_self: Self, _other: ()) -> bool { true } }\nimpl Eq for bool { fn eq(self, other: bool) -> bool { self == other } }\n\nimpl<T, let N: u32> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T] where T: Eq {\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3) & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\nstruct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n// docs:start:ord-trait\ntrait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v1 } else { v2 }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v2 } else { v1 }\n}\n\nmod cmp_tests {\n    use crate::cmp::{min, max};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"},"47":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\nuse crate::println;\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\nstruct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_be_bytes(8);\n        let hi = self.hi.to_be_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_le_bytes(8);\n        let hi = self.hi.to_le_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    fn decode_ascii(ascii: u8) -> Field {\n        if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (U128::uconstrained_check_is_upper_ascii(ascii) as u8);\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        } as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;  \n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi*b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo*b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo+self.hi)*(b.lo+b.hi) - low + carry\n        } else {\n            self.lo*b.hi + self.hi*b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        q\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        r\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n        \n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 { \n    fn not(self) -> U128 {\n        U128 {\n            lo: (!(self.lo as u64)) as Field,\n            hi: (!(self.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitOr for U128 { \n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 { \n    fn shl(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    } \n}\n\nimpl Shr for U128 { \n    fn shr(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    } \n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c= b.to_le_bytes(17);\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        let (q,r) = a.unconstrained_div(b);\n        assert_eq(q, c);\n        assert_eq(r, d);\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        let (c,d ) = a.unconstrained_div(b);\n        assert_eq((c, d), (a, U128::zero()));\n\n        // Check where b is a multiple of a\n        let (c,d) = b.unconstrained_div(a);\n        assert_eq((c, d), (U128::zero(), b));\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        let (c,d)= a.unconstrained_div(b);\n        assert_eq((c, d), (U128::zero(), U128::zero()));\n\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        let (c,d )= a.unconstrained_div(b);\n        assert_eq((c, d), (U128::one(), U128::zero()));\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"5":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\nstruct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Get an element from the vector at the given index.\n    /// Panics if the given index points beyond the end of the vector (`self.len()`).\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len);\n        self.get_unchecked(index)\n    }\n\n    /// Get an element from the vector at the given index.\n    /// Responds with undefined data for `index` where `self.len < index < self.max_len()`.\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Write an element to the vector at the given index.\n    /// Panics if the given index points beyond the end of the vector (`self.len()`).\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Write an element to the vector at the given index.\n    /// Does not check whether the passed `index` is a valid index within the vector.\n    ///\n    /// Silently writes past the end of the vector for `index` where `self.len < index < self.max_len()`\n    /// Panics if the given index points beyond the maximum length of the vector (`self.max_len()`).\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        \n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen>  {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n    // TODO: Allow imports from \"super\"\n    use crate::collections::bounded_vec::BoundedVec;\n\n    #[test]\n    fn empty_equality() {\n        let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n        let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n        assert_eq(bounded_vec1, bounded_vec2);\n    }\n\n    #[test]\n    fn inequality() {\n        let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n        let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n        bounded_vec1.push(1);\n        bounded_vec2.push(2);\n\n        assert(bounded_vec1 != bounded_vec2);\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n}\n"},"64":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::{Point, pub_key_to_bytes},\n    utils::arr_copy_slice\n};\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret_fields = multi_scalar_mul([point], [secret]);\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/6061): make the func return Point struct directly\n    let shared_secret = pub_key_to_bytes(Point::new(shared_secret_fields[0], shared_secret_fields[1], false));\n    let mut shared_secret_bytes_with_separator = [0 as u8; 65];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[64] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nfn check_point_to_symmetric_key() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar::new(\n        0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    );\n    let point = Point::new(\n        0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        false\n    );\n\n    let key = point_to_symmetric_key(secret, point);\n    // The following value gets updated when running encrypt_buffer.test.ts with AZTEC_GENERATE_TEST_DATA=1\n    let expected_key = [\n        49, 167, 146, 222, 151, 129, 138, 184, 87, 210, 245, 249, 99, 100, 1, 59, 223, 180, 5, 99, 14, 7, 177, 236, 159, 203, 231, 72, 220, 180, 241, 23\n    ];\n    assert_eq(key, expected_key);\n}\n"},"65":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/getters.nr","source":"use dep::protocol_types::{\n    header::Header, abis::validation_requests::KeyValidationRequest, address::AztecAddress,\n    constants::CANONICAL_KEY_REGISTRY_ADDRESS, point::Point, storage::map::derive_storage_slot_in_map,\n    traits::is_empty\n};\nuse crate::{\n    context::PrivateContext,\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX, TAGGING_INDEX}},\n    state_vars::{shared_mutable::shared_mutable_private_getter::SharedMutablePrivateGetter}\n};\n\nglobal DELAY = 5;\n\n// docs:start:key-getters\ntrait KeyGetters {\n  fn get_npk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_ivpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_ovpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_tpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_npk_m_hash(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Field;\n}\n\nimpl KeyGetters for Header {\n    fn get_npk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, NULLIFIER_INDEX, self)\n    }\n\n    fn get_ivpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, INCOMING_INDEX, self)\n    }\n\n    fn get_ovpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, OUTGOING_INDEX, self)\n    }\n\n    fn get_tpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, TAGGING_INDEX, self)\n    }\n\n    fn get_npk_m_hash(self, context: &mut PrivateContext, address: AztecAddress) -> Field {\n        get_master_key(context, address, NULLIFIER_INDEX, self).hash()\n    }\n}\n// docs:end:key-getters\n\nfn get_master_key(\n    context: &mut PrivateContext,\n    address: AztecAddress,\n    key_index: Field,\n    header: Header\n) -> Point {\n    let key = fetch_key_from_registry(context, key_index, address, header);\n    if is_empty(key) {\n        // Keys were not registered in registry yet --> fetch key from PXE\n        let keys = fetch_and_constrain_keys(address);\n        // Return the corresponding to index\n        keys.get_key_by_index(key_index)\n    } else {\n        // Keys were registered --> return the key\n        key\n    }\n}\n\nfn fetch_key_from_registry(\n    context: &mut PrivateContext,\n    key_index: Field,\n    address: AztecAddress,\n    header: Header\n) -> Point {\n    let x_coordinate_map_slot = key_index * 2 + 1;\n    let y_coordinate_map_slot = x_coordinate_map_slot + 1;\n    let x_coordinate_derived_slot = derive_storage_slot_in_map(x_coordinate_map_slot, address);\n    let y_coordinate_derived_slot = derive_storage_slot_in_map(y_coordinate_map_slot, address);\n\n    let x_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        x_coordinate_derived_slot\n    );\n    let y_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        y_coordinate_derived_slot\n    );\n    let x_coordinate = x_coordinate_registry.get_value_in_private(header);\n    let y_coordinate = y_coordinate_registry.get_value_in_private(header);\n\n    Point::new(x_coordinate, y_coordinate, false)\n}\n\n// Passes only when keys were not rotated - is expected to be called only when keys were not registered yet\nfn fetch_and_constrain_keys(address: AztecAddress) -> PublicKeys {\n    let (public_keys, partial_address) = get_public_keys_and_partial_address(address);\n\n    let computed_address = AztecAddress::compute(public_keys.hash(), partial_address);\n\n    assert(computed_address.eq(address));\n\n    public_keys\n}\n\n// A helper function since requesting nsk_app is very common\n// TODO(#6543)\npub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n"},"66":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH, hash::poseidon2_hash,\n    point::Point, traits::{Deserialize, Serialize, Empty, is_empty}\n};\nuse crate::keys::constants::{NUM_KEY_TYPES, NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX};\n\nglobal PUBLIC_KEYS_LENGTH = 12;\n\nstruct PublicKeys {\n    npk_m: Point,\n    ivpk_m: Point,\n    ovpk_m: Point,\n    tpk_m: Point,\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m : Point::empty(),\n            ivpk_m : Point::empty(),\n            ovpk_m : Point::empty(),\n            tpk_m : Point::empty()\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        ( self.npk_m == other.npk_m ) &\n        ( self.ivpk_m == other.ivpk_m ) &\n        ( self.ovpk_m == other.ovpk_m ) &\n        ( self.tpk_m == other.tpk_m )\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash(\n                [\n                self.npk_m.x,\n                self.npk_m.y,\n                self.npk_m.is_infinite as Field,\n                self.ivpk_m.x,\n                self.ivpk_m.y,\n                self.ivpk_m.is_infinite as Field,\n                self.ovpk_m.x,\n                self.ovpk_m.y,\n                self.ovpk_m.is_infinite as Field,\n                self.tpk_m.x,\n                self.tpk_m.y,\n                self.tpk_m.is_infinite as Field,\n                GENERATOR_INDEX__PUBLIC_KEYS_HASH\n            ]\n            )\n        }\n        )\n    }\n\n    pub fn get_key_by_index(self, index: Field) -> Point {\n        assert(index as u8 < NUM_KEY_TYPES, \"Invalid key index\");\n        if index == NULLIFIER_INDEX {\n            self.npk_m\n        } else if index == INCOMING_INDEX {\n            self.ivpk_m\n        } else if index == OUTGOING_INDEX {\n            self.ovpk_m\n        } else {\n            self.tpk_m\n        }\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.x,\n            self.npk_m.y,\n            self.npk_m.is_infinite as Field,\n            self.ivpk_m.x,\n            self.ivpk_m.y,\n            self.ivpk_m.is_infinite as Field,\n            self.ovpk_m.x,\n            self.ovpk_m.y,\n            self.ovpk_m.is_infinite as Field,\n            self.tpk_m.x,\n            self.tpk_m.y,\n            self.tpk_m.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: Point::new(serialized[0], serialized[1], serialized[2] as bool),\n            ivpk_m: Point::new(serialized[3], serialized[4], serialized[5] as bool),\n            ovpk_m: Point::new(serialized[6], serialized[7], serialized[8] as bool),\n            tpk_m: Point::new(serialized[9], serialized[10], serialized[11] as bool)\n        }\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: Point { x: 1, y: 2, is_infinite: false },\n        ivpk_m: Point { x: 3, y: 4, is_infinite: false },\n        ovpk_m: Point { x: 5, y: 6, is_infinite: false },\n        tpk_m: Point { x: 7, y: 8, is_infinite: false }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x146f68c0e0ba4067d61a3304bbfdec0797d5df1357db6c01247c48bfb345c7d7;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nfn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nfn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: Point { x: 1, y: 2, is_infinite: false },\n        ivpk_m: Point { x: 3, y: 4, is_infinite: false },\n        ovpk_m: Point { x: 5, y: 6, is_infinite: false },\n        tpk_m: Point { x: 7, y: 8, is_infinite: false }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.x, deserialized.npk_m.x);\n    assert_eq(keys.npk_m.y, deserialized.npk_m.y);\n    assert_eq(keys.ivpk_m.x, deserialized.ivpk_m.x);\n    assert_eq(keys.ivpk_m.y, deserialized.ivpk_m.y);\n    assert_eq(keys.ovpk_m.x, deserialized.ovpk_m.x);\n    assert_eq(keys.ovpk_m.y, deserialized.ovpk_m.y);\n    assert_eq(keys.tpk_m.x, deserialized.tpk_m.x);\n    assert_eq(keys.tpk_m.y, deserialized.tpk_m.y);\n}\n"},"80":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::pedersen_hash, address::AztecAddress,\n    header::Header, utils::field::full_field_less_than\n};\nuse std::merkle::compute_merkle_root;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header { \n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf slot by siloing the storage slot with the contract address\n        let public_value_leaf_slot = pedersen_hash(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness of the slot\n        let witness = get_public_data_witness(\n            self.global_variables.block_number as u32,\n            public_value_leaf_slot\n        );\n\n        // 3) Extract the value from the witness leaf and check that the storage slot is correct\n        let preimage = witness.leaf_preimage;\n\n        // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n        // 1. The value is the same as the one in the witness\n        // 2. The value was never initialized and is zero\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_value_leaf_slot);\n        let is_next_greater_than = full_field_less_than(public_value_leaf_slot, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_value_leaf_slot, \"Public data slot doesn't match witness\");\n            preimage.value\n        };\n\n        // 4) Prove that the leaf exists in the public data tree. Note that `hash` returns not just the hash of the value\n        // but also the metadata (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == compute_merkle_root(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        value\n    }\n}\n"},"88":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::storage::{raw_storage_read, storage_read};\n\nstruct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = block_number_oracle();\n        let contract_address = contract_address_oracle();\n        let chain_id = chain_id_oracle();\n        let version = version_oracle();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<N>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, N>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n\n#[oracle(getContractAddress)]\nunconstrained fn contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn version_oracle() -> Field {}\n"},"89":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\nstruct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<N>(self) -> [Field; N] {\n        let unpacked: [Field; N] = unpack_returns(self.packed_returns);\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, N>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"93":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    public_context::FunctionReturns, inputs::{PrivateContextInputs, PublicContextInputs}\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\ntrait CallInterface<N, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateStaticCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateStaticVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> T {\n        self.original\n    }\n}\n\nstruct PublicCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](PublicContextInputs) -> T,\n    is_static: bool\n}\n\nimpl<N, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> () {\n        self.original\n    }\n}\n\nstruct PublicVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<N, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> T {\n        self.original\n    }\n}\n\nstruct PublicStaticCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<N, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> () {\n        self.original\n    }\n}\n\nstruct PublicStaticVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<N, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"94":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, set_public_teardown_function_call_internal,\n    parse_public_call_stack_item_from_oracle\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    caller_context::CallerContext, function_selector::FunctionSelector,\n    max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_function_hash: Field,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    // TODO(#7112): This function is called with non-zero note hash only in 1 of 25 cases in aztec-packages repo\n    // - consider creating a separate function with 1 arg for the zero note hash case.\n    fn push_nullifier(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            public_teardown_function_hash: self.public_teardown_function_hash,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one \n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<M>(&mut self, randomness: Field, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<M>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.start_side_effect_counter, start_side_effect_counter);\n        let end_side_effect_counter = item.public_inputs.end_side_effect_counter;\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        let mut caller_context = CallerContext::empty();\n        caller_context.is_static_call = self.inputs.call_context.is_static_call;\n        if is_delegate_call {\n            caller_context.msg_sender = self.inputs.call_context.msg_sender;\n            caller_context.storage_contract_address = self.inputs.call_context.storage_contract_address;\n        }\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            target: item.contract_address,\n            call_context: item.public_inputs.call_context,\n            function_data: item.function_data,\n            args_hash: item.public_inputs.args_hash,\n            returns_hash: item.public_inputs.returns_hash,\n            caller_context,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(item.public_inputs.returns_hash)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_call_stack_hashes.push(item.get_compressed().hash());\n    }\n\n    pub fn set_public_teardown_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_teardown_function_hash = item.get_compressed().hash();\n    }\n\n    fn validate_call_stack_item_from_oracle(\n        self,\n        item: PublicCallStackItem,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"95":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::inputs::public_context_inputs::PublicContextInputs;\nuse crate::context::gas::GasOpts;\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs) -> Self {\n        PublicContext { inputs }\n    }\n\n    pub fn emit_unencrypted_log<T, N>(&mut self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0);\n    }\n\n    fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        assert(false, \"'delegate_call_public_function' not implemented!\");\n        FunctionReturns::new([0; RETURNS_COUNT])\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        // Cannot nullify pending commitments in AVM, so `nullified_commitment` is not used\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(self) -> AztecAddress {\n        sender()\n    }\n    fn selector(self) -> FunctionSelector {\n        FunctionSelector::from_u32(function_selector())\n    }\n    fn get_args_hash(self) -> Field {\n        self.inputs.args_hash\n    }\n    fn transaction_fee(self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(self) -> Field {\n        chain_id()\n    }\n    fn version(self) -> Field {\n        version()\n    }\n    fn block_number(self) -> Field {\n        block_number()\n    }\n    fn timestamp(self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(self) -> Field {\n        da_gas_left()\n    }\n\n    fn raw_storage_read<N>(_self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(storage_slot)\n    }\n\n    fn storage_read<T, N>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<N>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        storage_write(storage_slot, values);\n    }\n\n    fn storage_write<T, N>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    let MAX_POSSIBLE_FIELD: Field = 0 - 1;\n    [\n        user_gas.l2_gas.unwrap_or(MAX_POSSIBLE_FIELD),\n        user_gas.da_gas.unwrap_or(MAX_POSSIBLE_FIELD)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/6420): reconsider.\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\nunconstrained fn function_selector() -> u32 {\n    function_selector_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<RET_SIZE>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<RET_SIZE>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_opcode(storage_slot, N)\n}\n\nunconstrained fn storage_write<N>(storage_slot: Field, values: [Field; N]) {\n    storage_write_opcode(storage_slot, values);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(PublicContextInputs::empty())\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n#[oracle(avmOpcodeFunctionSelector)]\nunconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<RET_SIZE>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<RET_SIZE>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode<N>(storage_slot: Field, length: Field) -> [Field; N] {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode<N>(storage_slot: Field, values: [Field; N]) {}\n\nstruct FunctionReturns<N> {\n    values: [Field; N]\n}\n\nimpl<N> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn assert_empty(returns: FunctionReturns<0>) {\n        assert(returns.values.len() == 0);\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n"}}}