{"transpiled":true,"noir_version":"0.31.0+6237d96a0bc23a5ed656e7ba172fb57facd9c807","name":"Test","functions":[{"name":"deploy_contract","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"assert_public_global_vars","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"chain_id","type":{"kind":"field"},"visibility":"private"},{"name":"version","type":{"kind":"field"},"visibility":"private"},{"name":"block_number","type":{"kind":"field"},"visibility":"private"},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"},{"name":"fee_per_da_gas","type":{"kind":"field"},"visibility":"private"},{"name":"fee_per_l2_gas","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"H4sIAAAAAAAC/72Y227bRhCGV7IkO07KUBRJWdbBOlGWLMtVDFSXBXpZFOg79NyiTVv0CPRRel0g1wX6FAV6XSBPk52ZHc6SVBRMYEjwStTsfJzZw/xLa25OjDk7M/Y1NO51Bn+BadmPGrT3DV/Zi7pttcDU2BSYhv1oQsuItT6ZI8wJXgHTwCsbzJCfpUwLryxrTvGqBW94dWrfHk3tW/ie4fxieDtvQl7mHO5o2+M55G9C24KM839i0AivAN7IB9J5Zy49c1P70H4+JecnzjnM6mQ0oWAh+QQcyaLfi5nRNqLg0Ba0LWjbob+JmdEIUXCIBI0EjRz6iZgZ7SAKDh1BO4J2HPqdmBmNEQWHWNBY0Nih34iZ0QRRcEgETQRNHPq5mBlNEQWHVNBU0NShYzEz2kUUHLqCdgXtOvQzMTN6gSg4XAh6IeiFQ78WM6M9RMGhJ2hP0B59VpFIj8R6JNQj6VESSw4jE6jCP6SG2wgaKVyuVPA2GVezvWPDyOsSQ10WQ/UJ7tEl98BE9cVpKFowauHlyPlf2X0AHuMaOsJGvIKGGf9O33i4wIwzdhtIYOqokxE6OQLI7Aicn3tplRLe1VgzYBJNg0QPxg1ieU7g08KEPS5NmAz0cu73nJAvrUEudoG4B5JL8Dok1CNtPRLpkY4eifVIokfSB58xu0m/EDOjfUSD4lav1kPtJzEzOkAUHAaCejt64NCfxczoMN/oQ6/ABB1WxzjMJ/8AYqP9IGZGR4hiHQk6KpZebx8SHkawvl9KgaF7XmA9KbBRrkg9uqOvSFcY6qoYyqv/sfRA5Y3FaSqFOiNFmjn/uVOkjBQpw/q2DTP+n77xcIHJMnabSGDqqJMROjkCPGfNIMx/XlqlhHdOwk0IO9k0SZFAjVCZCIwLE3ZemjAZ6NXc7zkhX1qDXJGqJ8dI1qqKhHqkrUciPdLRI7EeSfRIehixO+5TMZ8XTrRecd+W98o+pKNHhnqkexixY/pWzIxOEAWHiaBe3Uyq0Sb5DCqR8DBiE/xVzIxO86KdemIh6NShz8XM6AxRLHBBZ0VNGO1Denok0CP9wwgMufax6EuCoClKh3HeJMgjuqMvyHMMNS+G8uQvkx6ovEycrkWnliTIS+e/coJ8Q4J8AyZomPFH9I2HC8xNxm4LCUwddTJCJ0e4hk+7IWsfeGmVEt65E8wkXSfI/HgI/zu35JlaJqxRmjAZ6Hzu95yQL61BLsjVg3Mma1VFQj3S1iORHunokViPJHokPYzYHfeLmBuFA31U3LflvbIPifXIVI8EemSgR95i+NGDD9+uz49iZnSBKDgsBPU0ACp/hqrxj5RthKApVqRx3qRzM7qjr3PXGOq6GGpJ8MIpy0J0YSlON1L+a9K5tfO/dTq3IZ3bgAkaZvw3fePhArPJ2G0lgamj7jRyY/IIoIfrsb3TCy+tUsI7dzCYCP7JN6f04AkaBz8KNglMCxPWKk3YXkF3a9DiNch1rnoeLWStqkioR9p6JNIjHT0S65FEj6SHEbvjvhQzo0tEZ8V9W94r+5DgKEiqR7KjJNY/ylgSPRI9eGJ243wlZkZXiC7pmY1RT5xW1WirPEElMjiMgGjW70S1ugiaoiAZ500yv6A7+jJPT4w3xVBrgldOWFcii2tx2oj63ZHM3zn/d53Mb0nmt2CChhmv6RsPF5htxm63Epg66u6I2Jo8AhwHd2N7p4mXVinhnTsXTRd/vTwjmQeJfwRyL6BMWLM0YXvPM7cGTV6DXOarx/FK1qqKhHqkrUciPdLRI7EeSfRIqkdmeiQ4CvIWY8mOklj/KGN5wx6z4nEvZkbX+X+269fr1D4k1SNLPRLpkcFhBMXyhahVF0FTFCLjvEneV3RHX95vcwX1lVuemTfSk4qm10jEOcKW5H3r/J85eb8neYfFegYNM/6LvvFwgbnP2O1OAlNH3Wn6vckjwEmxHds7/emlVUp4585D08WfIy7+hfYKfsF+3XwgAAA=","debug_symbols":"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"},{"name":"call_create_note","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"value","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"outgoing_viewer","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"call_view_notes","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"active_or_nullified","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"emit_unencrypted","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"value","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"H4sIAAAAAAAC/51Xu67TQBDdteP4kfgZO/c2IC7EHUg0UFJQIUoKaoSAColHcz+QjpqChgZRUENJg2d2Z846sSJEpE3Wu3NmZudx1jmY2JhsGsbcMP5DK6Yy6+nH0nhkZDZNomnYylhZGmmTUNHoxUzMMxJc3Z6+igdGTBxIN2FNOoq1NRvkT0pfY+StrCEdLUlHKh3PpeN/AQauHHQn87r8mXLWvqIZxHMnk7mpye5bj4icDI0Vprl6kMGDfO5BAQ82B5OY+aeYxpbTYbZuiP3NNEr2kTZKKCydzMZNl5T2tOWUlgCI0oqV0kYFpRWUVstKb9KWU1oBIEprVkobNZTWUFrTL0czQ8QjBoqBDUJYI4TkZ6syNWTaeZibU49ZynlMwi0UdsDtkJ5+zVOKXjeN4WAsSewtC+5picYVyT51T7F3ljB7DkHrREXRjn5vTV+PeZfDMPrTztxwkM5DOpZuIGN40XiRhDQ+w3ly53niq69gF69pRoLPR+sNFmo6C1oEmaQezcajLJGBBOKrxJW+b56Ybb2gGdl6OUpVZ/T4YalBknnmtjhhuYZFV5+cgdpKObnSY5PvUYSFx9SjiEU4U6nVGaGASmkrcvINPE1AGdz5urgJgq1lnN7RyOYa2RDujKWeQ9LRSoyhLV4isSM+XSFCE/3ZJzjg2gtv9YDbILBGiWrroa+xLNBzHKNOTtC3WBboOSaJfbLi/4BM1t5hWaDnKEb6kKB3sSzQRpuvCRgD0MZDb2FZoK12YgtoC2jroddYFminhBA0egdodxqeTs94BjJZ+4hlge4Y2oHSAlqJPa3ES5DyPGSy9grLAu0ZyuwGaA9o76FXWBbowNDeMaxAB0AH3PJce+C2WOn3E80eWvC8GEjYgNcY9iL6bDjps6WLI67U4VjfQwKHL1TfHvoulvWxvNN3wdDIz/Zo7EvWdymc/QU7u0RJjuNNAbCR3Ctf9bB9cL8hZlQQLcfsG80Qs+B6DUotUd4kYMPA7zQjWz9Geb8Z6PH3UkiPruVqkdxbR1RM7oUj98KT0JZN/gJP5R5TjCJWo07chjR3AcaqhNx/sqcn5T348NRajAGp+Lsq8ZHoU30kwZw9/EMzRJPVDLPbPT/hi9wfPdfmcddGf3Sls59j8DanpTAPbmeVFLg6Ui0Uzbot5lm32tgsks7eOjjdlkLXHJ2s5ZY/qjTOr7rZwM1q7mZ9CHeEbyu9e9LFu6dauCfWSrm8y+7SP5vymAoaL1aOVhjO9d+OKV3e53aRvh3unNzap6NU6m+VUfauV5LT5jZ9pcgeOns9YgmekPSU6ezdxWXr3jxbHNxSOYEeLz/T+Avz6Hmg2g0AAA==","debug_symbols":"1ZzbbhM7FIbfJdfVlr0OXnZfZWtrK0BBkaoU0YCEKt6dKWSSog61IhXzzVVz8Or6LuLvn4M9D5t3N28+f/h/t39/d7+5/vdhc3v3dnvY3e2ndw+b9E9OPz69/7jdP35wf9h+Omyu09XmZv9u+vvtavN+d3uzuVav3/67eizIlxbIpQV6aYFdWuCXFpRLC+LSgrpUkHOEHYtyriK/FF49G1/cj6Mj62ls84WhUU7/OSKnp4N/AjUYkCQaUKYBCQ1IaUBGA3IaUKEBBQ2IZmr5jamryhmoxjggTTSgTAMSGpDSgIwG5DSgoAFVGhBNjEYTo9HEaDQPGc1DRvOQFRoQTYxG85DTPOQ0DzntAM1pYvTfibHFCai594CizE1SfhlImufj2Onl+fxKdCZyHFHBEQWOqOKIGo2oJBxRxhEpjghnyIIzZMEZsuAMWXCGLDhDBs6QgTNkCI4I5+zAOTtwzg6cswPn7MA5u46e/ZpkPoGcXvoCkeKIynAiSyciawtEgSOqOKJGI2oJR/TaRyNZnl0RajKghw7oYQN6+IAeZUCPGNCjDujR/nyPnNKIJnlEExnRREc0sRFNfESTMqJJjGhSRzQZMePziBmfR8z4PGLG5xEzPo+Y8XnEjM+vM+Nfcc14DhxRo51kZkk8pMxDwl2vyIK7YJHFhiPF+Uwz6hKS85AKDyl4SJWH1HBImnhImYckPCTlIfHsrTx7K8/eyrO38uytPHsbz97Gs7fx7G08exvP3sazt/HsbTx7G8/exrO38+ztPHs7z97Os7fz7O08ezvP3s6zt/Ps7Tx7F569C8/ehWfvwrN34dm78OxdePYuPHsXnr0Lz97Bs3fw7B08ewfP3sGzd/DsHTx7B8/ewbN38OxdefauPHtXnr0rz96VZ+/Ks3fl2bvy7F159q48ezeevRvP3o1n78azd+PZu/Hs3Xj2buPt7XJCqr8iPR89XbOYMeK8DltCZ/y6bvy2ZnxJad34sm58ZeM3nTGaLeHbuvF93fhl3fhw73fwM9s8E99xsDzZKvUEn22eLj77t6/nY7a6iI97eodk3OM7JOOe3yGCe4CH/IUtel0k4SEpD8l4SM5Dwj16SYRnb+HZW3j2Vp69lWdv5dlbefZWnr2VZ2/l2Vt59laevZVnb+PZ23j2Np69jWdv49nbePY2nr2NZ2/j2dt49naevZ1nb+fZ23n2dp69nWdvZ99g6V3id/aN9R5+Yd9Y7+JnNn6dMaTJEj787lwPH353rodv68Znrwvo4rPvjT7FL0v47OVsXXx46vbw4anbwQ946vbw15O6i/js1FWZV+Op5SV8dup28dmp28Vnp24XH74iqYfPTt0uPjt1u/js1O3hV3bqdvHZqdvFX3fq1nWn7l/Y9Pqq+OtO3bru1K2rSV1f2r5SV5O6y/j01K3z4LKE3+Cpm8vL+PDU7eHDU7eHD0/dzgaKBo+tHv66t6/Adxx38eGx1cOHx9bL+ArfcfwC/vTuy/bTbvvm9uZ+qnj88vP+7WF3tz++PXz9+PObaex3"},{"name":"assert_header_private","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"header_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"1ZPdisIwEIXfZa57kZlMfqavssgStS6FkoqtC0vpu2+qbUUUVETBq+RkvswcDkwH62K5//ku46ZuIP/qoKpXoS3rmFQHyIe3ZhviIJs27FrIVQZFXKezz2BTVgXk2vg+u+DIoowoWcaZRsIrtHZMI629khu0sPBIizF6polVv8gAzacat+8zzuhwpJk0PmncPWNce1JzhsbOtPCht39hb7nWG60y06d093RrBqKbZqBzp3C0PB4lqTssiTuztEjqN+zKsKyKYXWH4j6upk1Osv3bHiuJ/Qc="},{"name":"encrypt_with_padding","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"input","type":{"kind":"array","length":65,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"iv","type":{"kind":"array","length":16,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"key","type":{"kind":"array","length":16,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"5drdattAEIbhe9GxCfszszvjWymlOIlTDEYOsVMoxvdeOZblhrq0fd2ECB+ZteZbzYoHhFbaNvfz2+evXxbtw2rdTD9tm+XqbrZZrNputG1ijC9/rh9n7X683syeNs00TJp5e9/97ibNw2I5b6ZZbTf5pS6V6H1pKhKH6pjimepcJfXV2YL/odrFpa921TxUJwm7z5Ou8zTazvNoO5fRdq6j7byMtvM62s5ttJ37+3Uusca+WlKOF3aewiWdZ0thuIpahmqXw+TxLSc/eyeKkuoxFSWH1yd5yWWYE5hTmCswV2HOYM5ZLgeYizAHvWToJUMvGXrJ0EuGXjL0kqEXgV4EehHoRaAXgV4EehHoRaAXgV4EelHoRaEXhV4UelHoRaEXhV4UelHoRaGXAr0U6KVALwV6KdBLgV4K9FKglwK9FOilQi8VeqnQS4VeKvRSoZcKvVTopUIvFXox6MWgF4NeDHox6MWgF4NeDHox6MWgF4deHHpx6MWhF4deHHpx6MWhF4denHlJIcBchLkEcxftwxcp1pcWDaf9rMOmUApy0eSa0zC5vpr8Q+03pqDXscxyHcus17FMu45l+gdd5n9+cZBufrPVLHE4jdjpLLmecgZzznLnt5r/Ihf/Odfd3m7OvyPvHmyP90XXny5+F+tG32ZPi9ntcr7/PmB/8Lm9O34u0A033x8PR7raHw=="},{"name":"test_shared_mutable_private_getter_for_registry_contract","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"storage_slot_of_shared_mutable","type":{"kind":"field"},"visibility":"private"},{"name":"address_to_get_in_registry","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"consume_message_from_arbitrary_sender_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"content","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"},{"name":"message_leaf_index","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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"},{"name":"get_this_address","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"5ZTdisIwEIXfZa7L0plMJklfZZElal0KJRVbF5bSdzfVWPwDL4ogeBVO5svJnLmYHtblcv/7U4VN00Lx3UPdrHxXNSGqHpCPd+3Wh1G2nd91UOQZlGEdzyGDTVWXUChth+yOU5bOqLJaJtrxsMgA9Qu9ZY63sNiEis7VrbeZ5a0VTd76yvseJkGXYBLGCUbCRyMxTNNIcveEduw40e6yEeL8mNJ+REr3pikZDSaaSeHMlPKF9CgoiknP0OmLP8ywiOrP7yq/rMtxE4zFfVidF0OU3f/2VInsAQ=="},{"name":"is_time_equal","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"time","type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":64},"visibility":"public"}},"bytecode":"H4sIAAAAAAAC/zWOOw6AIBBEBxBDYYidNhb+jqCl94+nch/IJgMvw+yEQ0FKnWwW/YOjrN4uhx41MvAml+WalWXLyaOTHAWVSIdC7HSbHcOpWpHCxUOgbMKLkR5FkqZ+xRyh27V/leWSKkTW7+D8og/WLyxrywAAAA==","debug_symbols":"nZBRCsIwEETvst9BmqYJa68iImmbSiAkpUkFCb27ia2i6Efp387OGxgmQqea6XrRtnce6lME41oZtLNJRSgOtHx+/SBtfvggxwA1pRwFAWW7fIuCzwR6bRTUjONMfvgKabniFZbsTR/5H1igYCssEOknfCa5EttQibKvSkuw2hvkO4JJ3eSoZWNU3jKbk21f0yYZ7sPiJPYB"},{"name":"call_destroy_note","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"consume_note_from_secret","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"consume_mint_private_message","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"secret_hash_for_redeeming_minted_notes","type":{"kind":"field"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret_for_L1_to_L2_message_consumption","type":{"kind":"field"},"visibility":"private"},{"name":"portal_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"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"},{"name":"consume_message_from_arbitrary_sender_private","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"content","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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"},{"name":"compute_outgoing_log_body_ciphertext","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"eph_sk","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurveScalar"},"visibility":"private"},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"recipient_ivpk_app","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"},"visibility":"private"},{"name":"ovsk_app","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurveScalar"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"7d3fThtHFIDxd/E1qub8m53Dq1RRRRJSISETBVKpQrx7F+pdjLrIF55688W5ShwO428GlB8gNH7cfL7++P3PP262X+7uN5e/P25u7z5dPdzcbcdHjxuJl3+7/3q1fX54/3D17WFzWS4219vP459PF5svN7fXm0uL9nTxnzmtkrtRrS7ztKgsTNvgupu2VvLAdHr6bjojbJ5WL08fLjZSqeHD6cJdBtlNu5ocGd6OCbemZT7DqPN0+sva+f+trWVpbQnRabfj3+PQc4wzMo/vTS+epL4GaQvdH34OkneCapmfQWscCGo5fSKk7n1KFl/6yLa5vcjeB9aWNmpZp2G3N8PP7QpuN3C7g9sD3F7B7QO4vYHbk9tuBdwOdtXArhrYVQO7amBXDeyqgV01sKsGdtXBrjrYVQe76mBXHeyqg111sKsOdtXBrjrY1QC7GmBXA+xqgF0NsKsBdjXArgbY1QC7GmBXK9jVCna1gl2tYFcr2NUKdrWCXa1gVyvY1Qp2dejiatZhas/hdO0Cbldwu4HbHdwe4PYKbh/A7Q3cntz2Bna1gV1tYFcb2NUGdrWBXW1gVxvY1QZ2tYFdTbCrCXY1wa4m2NUEu5pgVxPsaoJdTbCrCXZVChjW8f3J8WBapYBtHdcnx4N1lQLmVQrYVylgYKWQhRWysEIWVsjCCllYIQsrZGGFLKyQhRWysNJF2PF7mjYX1dP9NpNoYecLO1/Z+cbOd3Z+sPMrO39g5zd2PltdY6trbHWNra6x1e1zYdN6+Wx1ja2usdU1trrGVtfZ6jpbXWer62x1+1zntF4+W11nq+tsdZ2trrPVDba6wVY32OoGW90+lz2tl89WN9jqBlvdYKsbbHUrW93KVrey1a1sdftcBbVePlvdyla3stXtcy2USM756vWE+YnO73M51Hr5ws5Xdr6x852dH+z8ys4f2PlsdQe2uo2tbmOr29jqNra6fa6RWi+frW5jq9vY6ja2uo2tbrLVTba6yVY32er2uWRqvXy2uslWN9nqJlvdRKurBa2uFrS6WtDqakGrqwWtrha0ulrQ6mpBq6sFra4WtrrCVlfY6gpbXWGr2+dGqvXy2eoKW90+91KJpk/j5nrC/MbOT3R+p7upVssXdr6y842d7+z8YOdXdj5bXWWrq2x1ja2usdU1trrGVrfT3VSr5bPVNba6xlbX2OoaW11nq+tsdZ2trrPV7XQ31Wr5bHWdra6z1XW2us5WN9jqBlvdYKsbbHU73U21Wj5b3WCrG2x1g61usNWtbHUrW93KVrey1e10N9Vq+Wx1O91NNcScn3tF7+RXmV+Yru6tPf7Ib2Hahqnf5fVV7Gx5NKdqa3sZi8MSr80xxIHhUudhebvyyykOv06xwym2n+gUXeeFXe3AKWobdDesLe24U8xfp3j8KXa6t+zcT1G6n6Ke7upA7XR92mr5xs53dn6w8ys7f2DnN3Z+ovNbYeez1W1sdRtb3U7Xp62Wz1a3sdVtbHUbW93GVjfZ6iZb3WSrm2x1O12ftlo+W91kq5tsdZOtbqLVtYJW1wpaXStoda2g1bWCVtcKWl0raHWtoNW1glbXCltdYasrbHWFra6w1e10fdpq+Wx1ha2usNUVtrrCVrfP9Wkq8yuZqlR7k//yLIs4Ts9QDqxevU6r1yivq+ducT1q8TCdF483iy/ss0pO+6wur/tUWZi2waelrZU8MJ0+/75z7oc8/6rbyzbtPLbp57HNOI9t1vPY5nAe22znsc08i20u3+H2821TzmOb5/FVkP2oXwW5DNMX5a4mx/4XJL+98xOZOszfJ8TekwxPH8ZHf119u7n6eHt9P77H8xu/bz893Nxtdw8f/v7671vG2X8A"},{"name":"emit_nullifier_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"nullifier","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"H4sIAAAAAAAC/zWNMQ6AMAwDL22FEENnFhagGysr/xevalw1kexYtqPcZFgdcDBHDpXFlwkfoVwkh1UsrKZQV6nNGnkoFcvptL3Ei0dULuX7L3TI4i1AfwAAAA==","debug_symbols":"bc7fCsIgFAbwdznXEkqaf14lItzmQpDjmC4I2buntSJod+c73+/iKzC4brldPY4xgTkXCLG32UesqQA9MPr6pslie6Rs5wxGSSEIOBzaqdlKYPTBgTkKtZI/zanSm+aM8a/WYgdLIeWG5YnqX3yp4W5nb7vg2rzWLdh/1taYH9O7qfYJ"},{"name":"create_l2_to_l1_message_arbitrary_recipient_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"content","type":{"kind":"field"},"visibility":"private"},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"}],"return_type":null},"bytecode":"H4sIAAAAAAAC/zVNywqAMAxL95CBsLMXL+o+wINX/5991ZKxFpKmbUoeRKAksE6s4lRQsbGZ8MMVRSCswnzVdNRXaMuGOJWMaSomIF+k/YOHvaIsyy3P0YUBbOcw8Y0AAAA=","debug_symbols":"bc5NCsMgEAXgu8w6FDURf65SSjGJKYJoiKZQJHfv2Dal0OzmvfkWr8Bo+/V2dWGKCfS5gI+DyS4GTAXIidJXm2YTapGyWTJo2XLZgA0jnh0hWwOT8xY01lvzpxkju2as41+t+AEWqhUfLJSkv/iC4W4WZ3pv67z6W8Owr8WYH/P7g/YJ"},{"name":"get_constant","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"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","debug_symbols":""},{"name":"get_random","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"kinda_seed","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"field"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/61SSwrCMBRsqv3YgqIn8AjVlUs/ILhx4cJ9bYIW2wTSeH0xwYS+hgpVOzBNmORN5yVBzhtIU8EDmg2jrfWY/IdFj14JsnOqz7BDM6hNnOgxBGvzvtKukqUPzO1wsaTrNAMEkj5YR1o3+6ZAM36R5FjPr0RsC5bdj4/yQjj848Dq3HRqQ7nNarcdo4KnmdhgzElVweq2Q39+cIyA4y3N6QHDKu83pzPhVc4orPK/cAJndkopZuU+J0UjV9DRTcG8INepb8vUx2AeAs3eN5J8AfQZxuCsAwAA","debug_symbols":"pZLLCoMwEEX/Zdah5GGT0V8pUqLGEpAoGgtF/PfGNrrR0oWr5GYO52YxE1SmGB936+p2gOw2QdOW2tvWhTQBvcjP49Bpt+TB695DRgkYV4VzJlDbxkAmrjiTHae4iqRKcGMR55wEtTqlRhZJpHKnxjNqFJv64NfpKbXiqxr3akaP3CxN6OoPdyb+dHApI81VurFMiFjCjksEqp8leUhP3VtdNGbZi2U4unJdkxD9q/tOAvsG"},{"name":"test_nullifier_key_freshness","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"public_nullifying_key","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":""},{"name":"compute_note_header_ciphertext","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"secret","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurveScalar"},"visibility":"private"},{"name":"point","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"7Z3dbtpAFITfxdeo2p+zu968ShVVJCEVUgRRIJWqiHevIbZjtFNRKS72UeYqcjgs448N810Q+616WN29/vyx3jxud9XN97fqaXu/3K+3m+borbLh9Lvd83JzPNztly/76sYsqtXmofl5WFSP66dVdeNDfVgUcy7a3I66KLafts6CaZ/EtdO+NvnCdJYs7XQOwffTTszhdlHZqDV4ul5wscm20+K8/WTw+jPBfe1MzzDEfjrLae38/9Z2Bq1tRfonWQnGXngNCR0byQOQJoDZ4LvZED92S3xPY6+dJtlu86achmnKUWv75NYGGeyAiPZL3W0ua+xgu3i0ss+xPz9/NnyE4gilhOIJpYQihFJCCYRSQomEUkJJhFJCqQmlhJIJpYDiDaGUUGi0AAqNFkCh0QIoQiglFBotgEKjBVBotAAKjRZAodGWUIRGC6DQaAEUGi2AQqMFUIRQSig0WgCFRgug0GgBFBotgEKjLaEEGi2AQqMFUGi0AAqNFkARQimh0GgBFBotgEKjBVBotAAKjbaEEmm0AAqNFkCh0QIoNFoARQilhEKjBVBotAAKjRZAodECKDTaEkqat9GmDyj5ilDmbbQTQZm30U4EZd5GOxEUIZQSyryNdiIo8zbaiaDM22gngjJvo50IyryNdhooNY0WQKHRAig0WgCFRgugCKGUUGi0AAqNFkCh0QIoNFoAhUZbQsk0WgCFRgug0GgBFBotgCKEUkKh0QIoNFoAhUYLoNBoARQabQnFGiotokKnRVQotYgKrRZREVIBVOi1iArFFlGh2SIqVFtEhW4LqFi6LaJCt0VU6LaICt0WURFSAVTotogK3RZRodsiKnRbROXqbtv8NvTpz7kcA13/5lmXAo1idMl0b1kScyHQiG/vOPe5miq81xxeNIcPmsNHzeGT5vC15vBZcfhx7hM0VXjNDes1N6zX3LDj3MdmqvCaG9ZrblivuWG95ob1mhtWNDesaG5Y0dyworlhx7mvxlThNTesaG5Y0dyworlhRXPDBs0NGzQ3bNDcsEFzw45znf+pwmtu2KC5YYPmhg2aGzZobtiouWGj5oaNmhs2am7Yca47PlV4zQ0bNTds1NywUXPDRs0NO851plPsw+dwFv70GrAIu/XNhbWjxLodjcF8nEB+/7YTvvzxPy8evOsXD2eLl8Mu2twOuyiDb2k5C6Z9km5pX5t8YTpL7r4AlodBXLMZTqfpv8Zpytc4zTDT05Tmj7WdFuftZ0/TfvvLP1LE1H26DD8vXDrcNke/li/r5d3Tatc84/jg6+Z+v95u2sP97+f3R5rZPw=="},{"name":"test_setting_fee_payer","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"tZXLCsIwEEX/ZdZFmsckaX9FRKJWKZRUbBWk9N9NldSFBfGCqzDJPbmbAzPQodpdT9s6HNuOyvVATbv3fd2GOA0k9POuO/swjV3vLz2VeUZVOMRzzOhYNxWVit2YfeSUkymqHJs5Xehxk5HgP/5tlv62lhNjrTVfGpyY006a/KNhpZZLnEgdxbtCKpMoC1EOogqE0jlECYiSEKUgSkMUQxTkhobc0JAbGnKDITcYcoMhNxhygyE3GHKDITcYcoMhNxhyw0BumGU3uJgpu0TJH6k43fyl9rummjbb9HgN+7To4tjfz6+XmH0A"},{"name":"call_view_notes_many","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"active_or_nullified","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"dummy_public_call","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"}],"return_type":null},"bytecode":"H4sIAAAAAAAC/73XWY7TQBAG4HYmk0mI9yVeMyST+Agg5oVHroHYHpDYhOCBK3Iquqq7/AOWLDoabMlLyv/n6nYSyT6rK6XWC6WXvbKL/rRWoVrpnUfrcyVH5qTyQuVJqaeTrHobU1d3erN5ouTCCW2WEW2vr+myakmHel2dqb16Rvle2t8oLtKyoY3J0IXXZ5w5K++F3j8y4Rsb3vYLU1RbsK3JbMwh0+8oC/WZUsAH9UF9Sz+hLDRgSoEANAANLH2DstCQKQVC0BA0tPQbykIjphSIQCPQyNL3KAuNmVIgBo1BY0s/oyw0YUqBBDQBTcx+TPxporsdUBaaMqVACpqCppa+RVloxpQCGWgGmo0Hmg0/gQmiu31EWWjOlAI5aA6aj7v9E9HdfqAstGBKgQK0AC0sfYmy0B1TCuxAd6A7S7+gLLRkSoEStAQtx3Mshzs6QXS31ygLrZhSoAKtQCtLP6AstGZKgRq0Bq3HA62Hf4QjCdxJ8eBd9G14hbLQhikFGtAGtBl3a4Y79/9J4k4Cd3LB9P1Z5hLPMrALvpd8lumX00T/ot+hLLRlSoEWtAVtx93aYYCOJHAntTupZiEX3LF0lpscuRPfnYQPfsf0z/MrykI7phToQDvQbtytG+bkSGp3Us1C8mlypHqHZ/97hgoP/PKETxnVy1uAvuJSYdlzq/2frW4N7syhnKGXi1uEDniHOK748Gjzd/pLpcTJ4+CJSrTyiGvzSaZLtVMvscdobE4sTJFOSocD7fXGi34b1l8DfurZ2d6faOLVT1p/AR89b16iDQAA","debug_symbols":"pdtdahxXFIXRufSzCLX3rV9NJYQg23IQiJax5EAQnntasRUCMSTLfhKlvgcufG+rTj2f3t2++fTbr3fn9w+Pp+ufn0/3D29vnu4ezpen59P00/HXPx8/3Jxfnh+fbj4+na6nq9Pt+d3l7+er0/u7+9vT9Vj2z1f/OjePzl+PzmP079PH8o3D69j3r4fXeRr/PPzL1eUmmX7oKtmW16tkn//jKh3b61W6fOMq+f9X+TJQHRg6MOvAogOrDmw6sOvAgQOddEBLV0tXS1dLV0tXS1dLV0tXSw8tPbT00NJDSw8tPbT00NJDSw8tPbT0rKVnLT1r6VlLz1p61tKzlp619KylZy29aOlFSy9aetHSi5ZetPSipRctvWjpRUuvWnrV0quWXrX0qqVXLb1q6VVLr1p61dKblt609KalNy29aelNS29aetPSm5betPSupXctvWvpXUvvWnrX0ruW3rX0rqV3LX1o6UNLH1r60NKHlj609KGlDy19aOlDS2eaeILtZGI8mVhPJuaTif1kYkCZWFAmJpSJm4ebu5c5mLmYOZm5mTmauZo5m7GbheEsdSPl5mxnYTwL61mYz8J+Fga0sKCFCS1saBkO49ycGS3saGFIC0tamNLClhbGtLCmhTkts78N4eYsamFSC5taGNXCqhZmtbCrhWEtLGthWgvbWhjXwroW5rWwr4WBLSxsYWILG1sY2bL6e09uzs4WhrawtIWpLWxtYWwLa1uY28Lels1fdnNzJrewuYXRLaxuYXYLu1sY3sLyFqa37L7hwM1Z38L8Fva3MMCFBS5McGGDCyNcWOFy+FqL77XwYgs7XNnhyg5Xdriyw5UdruxwZYcrO1zjy0zcnB2u7HBlhys7XNnhyg5Xdrj6/povsH3HBhs39x02X2LzLTZfY/M9Nl9kY4crO1zZ4Tp8bZGbs8OVHa7scGWHKztc2eHKDld2uLLDdfZdVW7ODld2uLLDlR2u7HBlhys7XNnhyg5Xdriyw5UdruxwZYcrO1zZ4coOV3a4ssOVHa6rb6Vzc3a4ssOVHa7scGWHKztc2eHKDld2uG7+KQI3Z4crO1zZ4coOV3a4ksNdnn6/+Xh38+b+9uXbsJcfP53fvn4qdnl8+uPDl18uZ/8E"},{"name":"get_master_incoming_viewing_public_key","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"create_l2_to_l1_message_arbitrary_recipient_private","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"content","type":{"kind":"field"},"visibility":"private"},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"1ZTbisIwEIbfJde9yJxy6KssyxK1LoWSiq0LS+m7b+rGIlrwQhS9Sv7Ml5mfGZhBbarV4furjtu2U+XHoJp2Hfq6jUkNCvj41u1CnGTXh32vSl2oKm7SORZqWzeVKkncWFxxaMBnFA3DTAPCAk2WMdPktL9Be/acaS9CM42sx89CgbyrcfM84wwWMs1IcKdxe49xcqjnHoqZac/H3O6Buf1Sbiee8h9nSG5UANDoMp7ubM9rLExJSNvTmITo0hLqF7OUxE/Y12HVVNNamGKHuD5tiST7391/JLF/"},{"name":"emit_nullifier","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"nullifier","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"1ZRNasMwEIXvorUXmj9J46uUUpTEKQYjh9gpFOO7V05tU1pDFqGlWYmn+XjzmIEZzKHaXV5f6nRsO1M+DaZp97Gv25TVYICvf90ppkl2fTz3prSFqdIhv2NhjnVTmZIkjMUPDh3ojKJjWGlA2KDJM840Bas3aGXlmVYRWmlkOz4XBuRRg7u/C87gYaYZCe4M7u8JTgHtOkNxK6189Q6/6K1b3kFpGU1Q5290ELULLYr2a4eNHQlZvyxJiL4HQvuvAmXxFs913DXVdBKm2iXtlwuRZf9++qxk9gM="},{"name":"emit_array_as_encrypted_log","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"fields","type":{"kind":"array","length":5,"type":{"kind":"field"}},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"outgoing_viewer","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nest","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"encrypt","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"input","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"iv","type":{"kind":"array","length":16,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"},{"name":"key","type":{"kind":"array","length":16,"type":{"kind":"integer","sign":"unsigned","width":8}},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/9WdBXAUWdeGJ4MFXdwluMNMdIIGd0iCWzzBk5AEgru72xrr7u7u7u7u7va/B+4sZ29dtr4qOvvX21VP5ZyXYXjOTMhMerpvR/iOb0f9Pt82//E6ApQzXyWKsrLwV12Xd2QVHX+3miOr4chqOrLajqw+SLKy5o7btXBkUY6spSNr68jagUgra+/IOjiyjo6skyPr7Mi6OLKujqybI+vuyAKOLOjIoh1ZjCOLdWRxjizekSU4spAjS3RkPRxZT0fWy5H1dmR9HFlfR5bkyPo5sv6ObIAjG+jIBjmywY5siCMb6siGObLhjmyEIxvpyEY5stGObIwjS3ZkKY4s1ZGNdWTjHNl4RzbBkU10ZJMc2WRHNsWRTXVk0xzZdEeW5sjSHVmGI8t0ZFmOLNuR5TiyXEeW58hmOLKZjmyWI5vtyOY4srmObJ4jy3dkBY6s0JHNd2RFjqzYkZU4sgWObKEjK3VkixzZYke2xJEtdWTLHNlyR7bCka10ZKsc2WpHtsaRrXVk6xzZepVV9h1/b+AzvbwO/2nq9qruoOqOqu6k6s6q7qLqrqrupuruqg6oOqjqaFXHqDpW1XGmln+zv989V7y6fYKqQ6pOVHUPVfdUdS9V91Z1H1X3VXWSqvupur+qB6h6oKoHqbkGnGSuwer2Q1Q9VNXDVD1c1SNUPVLVo1Q9WtVjVJ2s6hRVp6p6rKrHqXq8mmvgSeaaoG4/UdWTVD1Z1VNUPVXV01Q9XdVpqk5XdYaqM1WdpepsVeeoOlfNNegkc+Wp289Q9UxVz1L1bFXPUfVcVc9Tdb6qC1RdqOr5qi5SdbGqS1S9QM01+CRzLVS3L1X1IlUvVvUSVS9V9TJVL1f1ClWvVPUqVa9W9RpVr1X1OlWvV3MNMb+r+dRMsiWZrzGB+NjY3ITo3GBMMDMQnZgVigvExmXFh4KhYFwoLic6FBOTG4oNJSRmJSYEEoOxMbnBvLjEmLzA8W2o/8R9BU5xcz3+8nPv758nqh6o6kGqHqzqIaoe+v9Qy+M/zHr8/dbjHzi1LdjWw+dyuHfPZVC/Lsv9RuFrBXPf5dTzm+T79+/PwKltwXbe3VegrBzbEzh2IHDsSODYicCxM4FjFwLHrgSO3QgcuxM4BggcgwSO0QSOMQSOsQSOcQSO8QSOCQSOIQLHRALHHgSOPQkcexE49iZw7EPg2JfAMYnAsR+BY38CxwEEjgMJHAcROA4mcBxC4DiUwHEYgeNwAscRBI4jCRxHETiOJnAcQ+CYTOCYQuCYSuA4lsBxHIHjeALHCQSOEwkcJxE4TiZwnELgOJXAcRqB43QCxzQCx3QCxwwCx0wCxywCx2wCxxwCx1wPHcWtpu+fm9e+eQSP6QwCx5kEjrMIHGcTOM4hcJxL4DiPwDGfwLGAwLGQwHE+gWMRgWMxgWMJgeMCH9d7yYUEj2kpgeMiAsfFBI5LCByXEjguI3BcTuC4gsBxJYHjKgLH1QSOawgc1xI4riNwXO/z9r1k2DHZ1CP8Pt9IMAqMBmNAMkgBqWAsGAfGgwlgIpgEJoMpYCqYBqaDNJAOMkAmyALZIAfkgjwwA8wEs8BsMAfMBfNAPigAhWA+KALFoAQsAAtBKVgEFoMlYClYBpaDFWAlWAVWgzVgLVgH1oMNYCPYBDaDLWCr//gaeNvBDrAT7AK7wR6wF+wD+8EBcBAcAofBEb95MP9ePMvvWDzLkY1yZKMd2RhHluzIUhxZqiMb68jGObLxjmyCI5voyCY5ssmObIojm+rIpjmy6Y4szZGlO7IMR5bpyLIcWbYjy3FkuY4sz5HNcGQzHdksRzbbkc1xZHMd2TxHlu/IChxZoSOb78iKHFmxIytxZAsc2UJHVurIFjmyxY5siSNb6siWObLljmyFI1vpyFY5stWObI0jW+vI1jmy9Y5sgyPb6Mg2ObLNjmyLI9vqyLY5su2ObIcj2+nIdjmy3Y5sjyPb68j2ObL9juyAIzvoyA45ssOO7IjJKpheXktOtiWZr4FT2uKOvQFItu47wtN/IxCU10CP7qvsDvgmcBxF4DiawHEMgWMygWMKgWMqgeNYAsdxBI7jCRwnEDhOJHCcROA4mcBxCoHjVALHaQSO0wkc0wgc0wkcMwgcMwkcswgcswkccwgccwkc8wgcZxA4ziRwnEXgOJvAcQ6B41wCx3kEjvkEjgUEjoUEjvMJHIsIHIsJHEsIHBcQOC4kcCwlcFxE4LiYwHEJgeNSAsdlBI7LCRxXEDiuJHBcReC4msBxDYHjWgLHdQSO6wkcNxA4biRw3ETguJnAcQuB41YCx20EjtsJHHcQOO4kcNxF4LibwHEPgeNeAsd9BI77CRwPEDgeJHA8ROB4mMDxSBk4HpO0r3QtJ8H8fdV6VY9S9WhVj1F1sqpTVJ2q6rGqHqfq8aqeoOqJqp6k6smqnuI/caXr0/3uuaaq209T9XRVp6k6XdUZqs5UdZaqs1Wdo+pcVeepeoaqZ6p6lqpnq7nOOMlcc9Tt56p6nqrzVV2g6kJVz1d1kaqLVV2i6gWqXqjqUlUvUvViVS9Rc515krmWqtsvU/VyVa9Q9UpVr1L1alWvUfVaVa9T9XpVb1D1RlVvUvVmVW9Rc511krm2qttvU/V2Ve9Q9U5V71L1blXvUfVeVe9T9X5VH1D1QVUfUvVhVR9Rc519krlOV7c/Q9VnqvosVZ/t/2+ufv+/1DLXUb/vH1u4TTJfT/Wq9vq+Aqe2BTf4yuDFoAxmjvBw5o0kM/s9nHkTyczlPJx5M8nM5T2cect/NHPg1LbgVg8fv2F+jpm3eTjz0TKa2fMdmD4Ozx0knjtJPHeReO4m8dxD4rmXxHMfied+Es8DJJ4HSTwPkXgeJvE8QuJ5OonnGSSeZ5J4nkXieTaJ51ESz3NIPM8l8TyPxPN8Es8LSDwvJPG8iMTzYhLPS0g8LyXxvIzE83ISzytIPK8k8byKxPNqEs9rSDyvJfG8jsTzehLPG0g8byTxvInE82YSz1tIPG8l8byNxPN2Es87SDzvJPG8i8TzbhLPe0g87yXxvI/E834SzwdIPB8k8XyIxPNhEs9HSDwfJfF8jMTzcRLPJ0g8nyTxfIrE82kSz2dIPJ8l8XyOxPN5Es8XSDxfJPF8icTzZRLPV0g8XyXxfI3E83USzzdIPN8k8XyLxPNtEs93SDzfJfF8j8TzfRLPD0g8PyTx/IjE82MSz09IPD8l8fyMxPNzEs8vSDy/JPH8isTzaxLPb0g8vyXx/I7E83sSzx9IPH8k8fyJxPNnEs9fSDx/JfH8jcTzdxLPP0g8/yTx/IvEU+6QwTOCxNNP4lmOxLM8iWcFEs+KJJ6VSDwjSTwrk3hWIfGsSuJZjcSzOolnDRLP00g8a5J41iLxrE3iWYfEsy6JZz0Sz/okng1IPBuSeDYi8WxM4tmExLMpiWczEs/mJJ4tSDyjSDxbkni2IvFsTeLZhsSzLYlnOxLP9iSeHUg8O5J4diLx7Ezi2YXEsyuJZzcSz+4kngESzyCJZzSJZwyJZyyJZxyJZzyJZwKJZ4jEM5HEsweJZ08Sz14knr1JPPuQePYl8Uwi8exH4tmfxHMAiedAEs9BJJ6DSTyHkHgOJfEcRuI5nMRzBInnSBLPUSSeo0k8x5B4JpN4ppB4ppJ4jiXxHEfiOZ7EcwKJ50QSz0kknpNJPKeQeE4l8ZxG4jmdxDONxDOdxDODxDOTxDOLxDObxDOHxDOXxDOPxHMGiedMEs9ZJJ6zSTznkHjOJfGcR+KZT+JZQOJZSOI5n8SziMSzmMSzhMRzAYnnQhLPUhLPRSSei0k8l5B4LiXxXEbiuZzEcwWJ50oSz1UknqtJPNeQeK4l8VxH4rmexHMDiedGEs9NJJ6bSTy3kHhuJfHcRuK5ncRzB4nnThLPXSSeu0k895B47iXx3EfiuZ/E8wCJ50ESz0MknodJPI+QeJ5O4nkGieeZJJ5nkXieTeJ5lMTzHBLPc0k8zyPxPJ/E8wISzwtJPC8i8byYxPMSEs9LSTwvI/G8nMTzChLPK0k8ryLxvJrE8xoSz2tJPK8j8byexPMGEs8bSTxvIvG8mcTzFhLPW0k8byPxvJ3E8w4SzztJPO8i8bybxPMeEs97STzvKyNPv+UZE4iPjc1NiM4NxgQzA9GJWaG4QGxcVnwoGArGheJyokMxMbmh2FBCYlZiQiAxGBuTG8yLS4zJM/fd1sOZ7/+PZg6c2hZ8IMK7x2+4n+P78UGS/zcPkXg+TOL5CInnoySej5F4Pk7i+QSJ55Mknk+ReD5N4vkMieezJJ7PkXg+T+L5AonniySeL5F4vkzi+QqJ56sknq+ReL5O4vkGieebJJ5vkXi+TeL5DonnuySe75F4vk/i+QGJ54cknh+ReH5M4vkJieenJJ6fkXh+TuL5BYnnlySeX5F4fk3i+Q2J57cknt+ReH5P4vkDieePJJ4/kXj+TOL5C4nnrySev5F4/k7i+QeJ558knn+RePpIjluLIPH0k3iWI/EsT+JZgcSzIolnJRLPSBLPyiSeVUg8q5J4ViPxrE7iWYPE8zQSz5oknrVIPGuTeNYh8axL4lmPxLM+iWcDEs+GJJ6NSDwbk3g2IfFsSuLZjMSzOYlnCxLPKBLPlmXk6bc8T/U86AoeztyKZOaKHs7cmmTmSh7O3IZk5kgPZ25LMnNlD2duRzJzFQ9nbk8yc1UPZ+5AMnM1D2fuSDJzdQ9n7kQycw0PZ+5MMvNpHs7chWTmmh7O3JVk5loeztyNZObaHs7cnWTmOh7OHCCZua6HMwdJZq7n4czRJDPX93DmGJKZG3g4cyzJzA09nDmOZOZGHs4cTzJzYw9nTiCZuYmHM4dIZm7q4cyJJDM383DmHiQzN/dw5p4kM7fwcOZeJDNHeThzb5KZW3o4cx+SmVt5OHNfkplbezhzEsnMbTycuZ+HM8tn4+XNfW1Q80eYx6Cc+XP5LFk+W5XPGuWzN/ksSj6bkc8qZN+97MuWfbuyr1P2/cm+MNk3JPtKZN+B/C4tv1vK71ryu4e8F5f3pvJeTd67yGu5vLbJz/ooID8L5P+GfK/IYydrorcD7UEH0BF0Ap1BF9AVdAPd5TEBQRAtzxuIBXEgHiSAEEgEPUBP0Av0Bn1AX/M89QP9wQAwEAwCg8EQMBQMA8PBCDASjAKjwRiQDFJAKhgLxoHxYAKYCCaByWAKmAqmgekgDaSDDJAJskA2yAG5IA/MADPBLDAbzAFzwTyQDwpAIZgPikAxKAELwEJQChaBxWAJWAqWgeVgBVgJVoHVYA1YC9aB9b4T2+3mgAr5ftkINoHNYAvYCraB7WAH2Al2gd1gD9gL9oH94AA4CA6Bw+AIOB2cAc4EZ4GzwVFwDjgXnAfOBxeAC8FF4GJwCbgUXAYuB1eAK8FV4GpwDbgWXAeuBzeAG8FN4GZwC7gV3CbzgTvAneAucDe4B9wL7gP3gwfAg+Ah8DB4BDwKHgOPgyfAk+Ap8DR4BjwLngPPgxfAi+Al8DJ4BbwKXgOvgzfAm+At8DZ4B7wL3gPvgw/Ah+Aj8DH4BHwKPgOfgy/Al+Ar8DX4BnwLvgPfgx/Aj+An8DP4BfwKfgO/gz/An+AvID8MIoAflAPlQQVQEVQCkaAyqAKqgmqgOqgBTgM1QS1QG9QBdUE9UB80AA1BI9AYNAFNQTPQHLQAUaAlaAVagzagLWgH2oMOoCPoBDqDLqAr6Aa6A/khFwTRIAbEgjgQDxJACCSCHqAn6AV6gz6gr5w7CvqB/mAAGAgGgcFgCBgKhoHhYAQYCUaB0WAMSAYpIBWMBePAeDABTASTwGQwBUwF08B0kAbSQQbIBFkgG+SAXJAHZoCZYBaYDeaAuWAeyAcFoBDMB0WgGJSABWAhKAWLwGKwBCwFy8BysAKsBKvAarAGrAXrwHqwAWwEm8BmsAVsBdvAdrAD7AS7wG6wB+wF+8B+cAAcBIfAYSDXoZdrvMv10+Xa5HLdb7mm9lEg14KW6yzLNYzl+sBy7V25rq1cM1auxyrXOpXriMo1OuX6l3JtSbluo1wTUa43KNfyk+vkyTXo5Ppucu00uS6ZXPNLrqcl16qS60DJNZbk55tcG0iuuyPXtLkbyLVY5Doncg0RuaaGXK9Crt8g10aQ6w7Imv6yXr6sRS/rvMsa6rI+uaz9Letqy5rVsh60rLUs6xjLGsGy/q6sbSvrxsqarLLeqawlKut0yhqYsr6krN34NpA1B2U9P1krT9ahkzXeZP00WZtM1v2SNbVkvSpZC0rWWZI1jGR9IFl7R9a1kTVjZD0WWetE1hGRNTpk/QtZW0LWbZA1EWS9ATmXX86Tl3PQ5fxuOXda3gjIOb9yPq2cqyrngco5lnL+opwbKOfdyTltcr6YnIsl5znJOURyfo6c+yLnlcg5G3I+hJxrIMfxyzHycvy5HNstx03LMclyvK8cSyvHqcoxoHJ8pRy7GAXkmDs5Bk2OyZJjlOSYHTmGRY7pkGMc5DN/+QxcPhOWz0jlM0P5DE0+U5LPWOQzB9kHL/ukZR+t7LOUfXiyT0v28cg+D9kHIL8Ty++I8juT/A5x7D01kPdc8lCEt1JVNzVfM0tKcucVlkSVFERl5uRElc4qmRlVsDC3KG9uQWlE+A3lJvM1Ut1BlM+jN3ShrGMHwIXvPMP3z82v/+HIE18kjzB9hJX7Te+38nKmL2fl5U1f3sormL6ClVc0fUUrr2T6SlYeGe6tvLLpK1t5FdNXsfKqpq9q5dVMX83Kq5u+upXXMH0NKz/N9KdZeU3T17TyWqavZeW1TV/byuuYvo6V1zV9XSuvZ/p6Vl7f9PWtvIHpG1h5Q9M3tPJGpm9k5Y1N39jKm5i+iZU3NX1TK29m+mZW3tz0za28helbWHmU6aOsvKXpW1p5K9O3svLWpm9t5W1M38bK25q+rZW3M307K29v+vZW3sH0Hay8o+k7Wnkn03ey8s6m72zlXUzfxcq7mr6rlXczfTcr72767lYeMH3AyoOmD1p5tOmjrTzG9DFWHmv6WCuPM32clcebPt7KE0yfYOUh04esPNH0iVbew/Q9rLyn6XtaeS/T97Ly3qbvbeV9TN/Hyvuavq+VJ5k+ycr7mb6flfc3fX8rH2D6AVY+0PQDrXyQ6QdZ+WDTD7byIaYfYuVDTT/UyoeZfpiVDzf9cCsfYfoRVj7S9COtfJTpR1n5aNOPtvIxph9j5cmmT7byFNOnWHmq6VOtfKzpx1r5ONOPs/Lxph9v5RNMP8HKJ5p+opVPMv0kK59s+slWPsX0U6x8qumnWvk000+z8ummn27laaZPs/J006erPPxnskX5vHrPdfxg9HJe368saOE7sXPOO9/YY74Vysi3oue+ccd8K5WBb1XfibfD4e+LqqqOVFm4Lq+y8v9yu4oqq2jdTmZZoTLvn+P4MnqOy+65iFSPj4f3e2wHd2VzXxXMfUeqPvwcVDF1hIcz6X87whD+d8J5eVUvV7cN3y78eNjfk7LDPfx9VeVf/p79PVpD3aai+nuR1t/T36uyyWNVbGrZuZ8Rfh1T919N/f0kUwdOaYsLVLXcwr4+yze8VVM+lT33CQTlsatu7isztzgYHRqUn120uLAkwvFgJlvCEb5/ykeq25RTtwk/2UkqCz+RNVVW0crK/cu/k/Qvf1bzf/gzeSIqqTychR0qqyzsX0llYTd9+xrW/ckW5fPshSOod4ak+P65uXaGRFn+PvXmwfMX+FAZvcCbH9Jl8QKvn+/w4+F6bstqLvl+Cv8Hlx9CKdZPhvAnkrIVZmbPSc0tWVCUX6y/pfXPvPAmH3T4Ve9XX8Ojlbf+LDya33Ff8q39f/8rb7FD2wEA","debug_symbols":"5dlha1oxFMbx73JfS0lyzkly/CpjDNvaIYiWagdD/O6L9aorcxv8bUsvvtKr58k90Z8Ek013P719/v5ttnhYrrrxl003X95N1rPlol1tuhjDy4urx8lid71aT57W3TiMuunivj1uR93DbD7txmJ1O/qjLuXofWnKGo/VMcUz1VI09dVSg/+n2tW1r3YzOVYnDduvo9Z5HGznabCdy2A718F2boPtPH9c5xpL7Ks1Sby08zLYzuslnUtN4fj9Wz5Wu+4H93ccPJ1diaK2n26fas9VX93kJRdhLsGcwJzCnMFchrkCcxXmnOUEehHoRaAXgV4EehHoRaAXgV4EehHoRaEXhV4UelHoRaEXhV4UelHoRaEXhV4MejHoxaAXg14MejHoxaAXg14MejHoJUMvGXrJ0EuGXjL0kqGXDL1k6CVDLxl6KdBLgV4K9FKglwK9FOilQC8FeinQS4FeKvRSoZcKvVTopUIvFXqp0EuFXir0UqEXh14cenHoxaEXh14cenHoxaEXh16ceUkhwNxF+/BZc+1Ls4XTftZ+UyiFi7bKs0k6Dm6vBv9UO6UpyHVMU69jmnYd08zXMc3ySaf5tgcHKdz8Zcu4rQCH22g93UXKKVdgrsKcs9z5LeN/5trydnP+vLb90Tysi26/ffgt1q5+TJ5mk9v5dHfKvnvzeXF3OHRvl+ufj/t3Wu0v"},{"name":"compute_incoming_log_body_ciphertext","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"secret","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurveScalar"},"visibility":"private"},{"name":"point","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"7d3bahtJFIXhd+lrM9Su2nXyqwxhUBJnEBg5xMrAYPzu07bVbRmvQQYnrU7WugqKS9W1f0XxhzHqu+Hz1cfvf/+13X25uR0u/7wbrm8+bfbbm9346G6w/Ph3t183u4eHt/vNt/1wGS6Gq93n8c/7i+HL9vpquEy53V+8WheL9cPSWNzm1RYNrE7V42F1aqGfWN29+2F1zznNq6OH+w8Xg5Vf9eB1uYO7VTus9pjsnQdv7zl4ajHMDXOZV3d/3Lv/vL1jQHub1z49ybx5PnENb1PJbEchQ0FrY5mqZz/at6Po874W7Kh5Amst9TIfOb1Y/DCnkcwZSeZMJHM6yZyZZM5CMmclmbORzNk55kwkHkokHkokHkokHkpOMieJhxKJhxKJhxKJhxKJh5zEQ07iISfxkJN4yJ1kThIPOYmHnMRDTuIhJ/FQJvFQJvFQJvFQJvFQdpI5STyUSTyUSTyUSTyUSTxUSDxUSDxUSDxUSDxUnGROEg8VEg8VEg8VEg+VxT1USz2sbcEWm7MGkjmNZM5IMmcimdNJ5swkcxaSOSvJnI1kThIPNRIPNRIPNRIPNRIPNSeZk8RDjcRDjcRDjcRDjcRDncRDncRDncRDncRD3UnmJPFQJ/FQJ/FQJ/FQJ/GQBRIQjc9nGZSERBZITGTBWQYlUdF4FpZBSVxkgQRGFlhkZCwyMhYZGYuMjEVG5iyDssjIWGRkLDKyt8io9hODtjZ9tHSP/cSgOU0fFZ3L89ry9GHO1pc+TrXpA7prr8fHASltPvr4ln/+9fDo5ee+SG/6HGq+KqYqoEpUFVAlqQqo4qoCqmRVAVWKqoAqVVVAlaYqoIpsC6ok2RZVkW1RFdkWVZFtURVXFVBFtkVVZFtURbZFVWRbVEW2BVVctkVVZFtURbZFVWRbVMVVBVSRbVEV2RZVkW1RFdkWVZFtQZUs26Iqsi2qItuiKrItquKqAqrItqiKbIuqyLaoimyLqsi2oEqRbVEV2RZVkW1RFdkWVXFVAVVkW1RFtkVVZFtUZd22rc9V+pJV1m3bM1Wp67btuaqs27bnqrJu256ryrpte64qriqgyrpte64q67btuaqs27bnqiLboiqyLajSZFtURbZFVWRbVEW2RVVcVUAV2RZVkW1RFdkWVZFtURXZFlTpsi2qItuiKrItqiLboiquKqCKbIuqyLaoimyLqsi2qIps+7pKDLItqiLboiqyLaoi26IqriqgimyLqsi2qIpsi6rItqiKbAuqmGyLqsi2qIpsi6rItqiKqwqoItuiKrItqrK4bS3kPJ/+ZZfHA7W1HeiHiM7M5pfB8ssjPVzlx9zd6uRVbJGrxEWukha5CvwOM10hnNi9eGmHpSWH5zdff/qnhW+y8+bNc4rz5vnF5q8Xx2LTOyIWP7oPXzSwOlWftk4t9BOru/fpP69+fJDo4WnMwjFm5RizcYzZKcbEd575/cY0jjHjSsd0qxNZfXwx3vve9D/+56cE8/1jreeji9T7D+OjfzbftpuP11e34zMevvh992m/vdkdHu7//fr0lXHtfw=="},{"name":"assert_private_global_vars","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"chain_id","type":{"kind":"field"},"visibility":"private"},{"name":"version","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"1ZPRCsIwDEX/Jc97aNJ0a/YrIlJ1ymB04qYgY/9up9tkOPBhKPhUbnNyextIA/tsezlucn8oK0hXDRTlztV56YNqAPlxV52c72RVu3MNqYog8/twthEc8iKDVBvbRm8cxSg9SjHjSCPhDK0Tpp7WVskHWli4p8UYPdLEql1HgOZfg8e/C86YYE8zaVwYPFkSXFtS4wxNPNLCD2/7RW+Z80Zt7fBb1II8eSO0kZpvE0OvNjuNtg7q6s652xZZt15d8eJ3w7YFWd9Oz0pg7w=="},{"name":"test_setting_teardown","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"7ZzbbhoxEIbfZa9R5LHHHjuvUlUVSUiFhCAKpFKFePfupqyXPYCbyA1jDVewMD58Hwv7G2H21dPi4e3nj+X6ebOt7r/tq9Xmcb5bbtb10b4CfH9s+zJfN4fb3fx1V92rWbVYP9W3h1n1vFwtqntj/WE2qjNet6XGWxerAx6+zyqw/7FvN9U3WWjbkCNKjKC1UfZYXt9HPRyDcoyhg740hs/CYU0cA509HWOq3Ftsy43yI7Xh66dkQPk4Jei/2hOnBnanBjoTiwHVRDVRS0snrBBMA6uVJFiQBKslwRpJsCgJ1kqCdZJgSRKsZw9rXdu5cYqSsHQs9tCJ0Y2kUS04CsdiIN0lQA3uwxr5Z7MSNBr+qa8IjfzzZBEa+SfVIjTyz8BFaMSbxhwa+ef2IjTyXxEUoZH/WqMIjZJXMRS/NQYi29PYqJG8MrmsBiWvNhJqJK8gEmokrwoSaiQn/YQavKk5p0ZyIk+okZyyE2okJ2cffx8BXruRGslpOKFGchq+rMZKTsMJNZLTcEKN5DScUCM5DSfU4E3NOTWS03BCjeQ0nFDDPw079FHNSd/Tagx2HqGnpoHln28zwvJPrPlgHf8MmhGWf6rMCMs/J2aE5Z/8MsKiJFj+6SwjLP+8lRH2KgnKuQhrTro/U+6hK/fNDLryhsAXQEBdedB2SBD4EwTThnaNCoavASn2BKiM6wj65Q0B8CfQKm7dQ01qSKALIPDxUw6NHW4+JMOfIHTlVqEZEiB7Aqt8PIss0OidfI0rPULc92pwLNXxm9I1rpoYVJyS7X8ET3xxEuJeGa2gu+wDvV/2yZcOEAoHAHc3ieBM28qdbnGqQ0PTyN9N71zSluJgNXkvER7bhc+1m96b8g/t4JPt9Ifb1Ue/5q/L+cNq0fyJQPPk2/qx/U+B+nD3++XvM3XtHw=="},{"name":"emit_encrypted_logs_nested","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"value","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"outgoing_viewer","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"set_constant","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"value","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"5ZbtSsMwFIbvJb+L5HzlY7ciIt3WSWF0Y+sEGb1329nEqoGAm9PhrzbN05P3vLwJOaplNT88PdbNarNXs/ujWm8WZVtvmn50VMCnb/tt2QzDfVvuWjXThaqaZf/sCrWq15Wakbiu+MKhAT+iaBgiDQgJmizjSJPTPkN79jzSXoQijay7h0KB3Kpwcz3hDBZGmpHgTOH2HOHkUEcPxUTa86m2+8HaPlUbyAKNP/Xv4nPGM9lgPNv3NcBgitYcFCEIZOiM8ahvvQG4TAPOBEmCNiNJvA7RF496molEaSEdzRGizxFCvPUG6CINCLm4iHOZBmyErZmwQClWwqlm/SRskKwbGgU/Fey/kUv+4674wDpjM65ITIvRkmFztsj1bXEcAgBa2w++DIrM7yqabL+gyF5fEWiKxbXFTHiEXWhARLszzw/3v9qVu/TFWIyE3TtZA8h1D/3oudzV5XxdDTfrYfLQLMJFux+2L9u3mZ59BQ=="},{"name":"create_l2_to_l1_message_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret_hash","type":{"kind":"field"},"visibility":"private"},{"name":"portal_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"}],"return_type":null},"bytecode":"H4sIAAAAAAAC/32PPQ7DIAyFH4FQSKrMXbq0cIAOnSLl/sqp4meCYIhiyfCwP/+QYIEwQuyN0+QVsMDLZegbqhIxiJsFpoYyk6wa8onBqiLoVFn2VOXk8B85nn/UsYkbaNuY6wYPaJAWG8PeIfUZW1iFpqwTqRo+FSYWeV0y3pd0A9uq8+o6hv3mHxHPyJf/eO30A/6wdd5fAQAA","debug_symbols":"zZbLCsIwEEX/JesiyeQ5/RURibaVQklLH4KU/ruN1iqodDu73JkDOavLjCzLT8PlWIai7li6H1lVn31f1mFOI+M7AY9p1/gQB13v256lTiidsDxk8WnMlLCirHKWSu2m5IsWaBwuuEAr3QaPCtWCo9ZypUHx6ZBEKUlRSlGU0hSlDEUpS1HKUZRCglLAKUoJilIUGx0oNjpQbHSg2OhAsdGBYqPDn0bn5i1lNz4B4G6hAZReadQ/YIvSLrBFJz7hwxyuvi39qcrjuRd3Qzi/rr859rfmuZnZOw=="},{"name":"set_tx_max_block_number","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"max_block_number","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"enqueue_public_call","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"5ZzdbtpAEIXfxdco2pmd/curVFVFElIhRSQKpFKFePfalF2DcZkmcdCs5goMs95zPi3MWSO8bR4Wd28/fyxXj8/r5vbbtnl6vp9vls+r9mjbgN+/tn6Zr7rD9Wb+umluzaxZrB7ax92seVw+LZpb6+JudlaHHtKhFD1BqQaEkWoykQ7VBI6rTpRydXLOlmoks/s+ayDUKjxeUTgEyMLRflZ4+oxwGzGX2uh8qU7UnRvNF54bxs6NycU8xlhkZmiLMaPxJvQz2P0MOMUMPl2YwU4wg4dcnSLC8Qwj6wysz4sBwSUYQqWrC/JgiyDvTwSNLAnqlwT5fi1Du5bPq0PIXkPslw8c2Ds9Vr0eq0GP1ajHalJj1Ro9VkGPVdRj1eqxSsKtOp+r7XH4/JfVcCiOcLRL8GNCwIccayFg77EV9W6I0nNYFRClJ7wqIErPjlVAlJ5Kq4AoPe/WAJGkJ+kqIErP6FVAlJ7+q4AofV9RBURSCzE4KhCDO4HYgdG7C2HA6N1ZMGD07hYYMHp3AAwYvan+MhinN6kzYPSmbwaM3kTNgNGbkhkwpBZMNC6DiejPwOhNvgwYvcmXAaM3+TJg9CZfBoze5HsZjNebfBkwepMvA0Zv8mXA6E2+DBgSDsZTUeK9Y8BY6inCCZjOqvQsO6FV6el0QqvS8+aEVqUnyAmtSs+E01kN0lPehFal57YJrUpPYhNalZ6tJrRK17da/s2HECNetoo2gs/lNnbz9+Wdfle5fl+5/iBef+j1J3RD/VG6/mTz1gjJwBn/VLf+aCrXD5Xrx8r128r1i++/jH7p/ZeM9b3+EIb6pfdfQoNFPwYz1C+9/xLGWPRbh0P90vsvp196/2X0J+n9l5Ivn19nyA71S++/nH7p/deZcs8QdBCG3/9Jev/l9F+//6byh9z2OZ0JctIEXb9DplQuhrTdj7kYcizfQF8MYX+BIwVpPKM0QUmYIDBGnCIQpwiFKUK4gdFmAP03MIBJ/Qe0vRjTjbM347d2gQDld940+AX5MC59bNz4TUf+Yxx8cBy+e1x79Gv+upzfPS26O9x1b76t7vMN79rDze+Xv++0tX8A"},{"name":"test_code_gen","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"a_field","type":{"kind":"field"},"visibility":"private"},{"name":"a_bool","type":{"kind":"boolean"},"visibility":"private"},{"name":"a_number","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"},{"name":"an_array","type":{"kind":"array","length":2,"type":{"kind":"field"}},"visibility":"private"},{"name":"a_struct","type":{"fields":[{"name":"amount","type":{"kind":"field"}},{"name":"secret_hash","type":{"kind":"field"}}],"kind":"struct","path":"Test::DummyNote"},"visibility":"private"},{"name":"a_deep_struct","type":{"fields":[{"name":"a_field","type":{"kind":"field"}},{"name":"a_bool","type":{"kind":"boolean"}},{"name":"a_note","type":{"fields":[{"name":"amount","type":{"kind":"field"}},{"name":"secret_hash","type":{"kind":"field"}}],"kind":"struct","path":"Test::DummyNote"}},{"name":"many_notes","type":{"kind":"array","length":3,"type":{"fields":[{"name":"amount","type":{"kind":"field"}},{"name":"secret_hash","type":{"kind":"field"}}],"kind":"struct","path":"Test::DummyNote"}}}],"kind":"struct","path":"Test::DeepStruct"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"1ZbdioMwEIXfJdeyZJKZ/PgqS1nS1i6CxFLtwiK++8ZuDPsj9CJtqVcy5svxZDwkGdi+2p7f32p/aDtWvg6saXeur1sfqoGBvrzrjs5PZde7U89KXrDK78NzLNihbipWSjJj8Y8TCmxEhUJINAhYoKVGEWlpuL1CW7QYaUskEy2Qj5uCgVmrcbtS44I/zjiChkijkJBpHHKMSyN46iGpRFu8aIs7assl7fBLTZyjUdonzguu2z492v5tQ69ygqlQzctUxOXfYGYdGoqkSNr0Szu7g9zMPUGg3A6aZ13lbXPyAot7GCgdp4GlH9/Q4yZUH+5Uu21TTZeIafDsd/OdIpT95/F7JLBf"},{"name":"call_get_notes","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"active_or_nullified","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"consume_mint_public_message","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"message_leaf_index","type":{"kind":"field"},"visibility":"private"},{"name":"portal_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":""},{"name":"test_shared_mutable_private_getter","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"contract_address_to_read","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"storage_slot_of_shared_mutable","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":""},{"name":"call_get_notes_many","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"active_or_nullified","type":{"kind":"boolean"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"get_ovsk_app","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"ovpk_m_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/9WdBXQUxx/Hby9CSIK2QAU5ivtpcleFekuVttRbEnKBFEggXJAqdXd3d3ej7u4uVLAKEmgLVOj/+4Xdl+F6tK9ktu//3fc+7zaTu9nPb25ud1ZmxgmsXv5wAoFZzup1vuS5r0EQykrzXs31/BxphTk+W5ojrXWOtLY50trnSOsIhmaldc3xvm450kI50rrnSOvlppmLW1Srts0lFi6Lx9Pl0XQkFqkIR1OVyUQ4nqgsS0aSkUQyURVNxmLpZDxZnqpMlYdTkXgsHalOpGLV4dXLt05TXuFmLnRr6Zah59obrHTXuS2l9YFgtrM6LTuu2WKxZMc1xwmssQSz6lW4eUukl8U6OtdeHY2Yvy/mG1qzGKz/vuatu3ssO4FunQKr93mBf/G9z3PXvc/Nx9/fge/BD05TurfkWa4LvS2W53zHXl4/Wtz3Fbi/oayfVc46FW7eErHpbfoucHwUXuDYz3ehxcrgV9wLjRK2lO+qyhYINO20/axsvS1659C1lXfU3Iktcgthsfva6L4uMeqg9T39Qp+OUo1OUws3e++/yNjLLzbWG/9m778Uf/8Efga/OGvmZ7viLHTsl/Ovjt0K6Uc9WOpD3L85/vwQ8y17WtxhRJZa/E1ZrDcRm99FQaDpjHdtiy1vbz/iV71f4sNBfolP9d63ArB9KrXEYitnmeWmY/Zp8TKB09+/Oy1e7uQ+3V8uHtcKr7K7S9By3bdZ3/sE/PnB247ZsRhzX5GYgxZj7icSc57FmPuLxJxvMeYB/1HM4eYtkYEWy2+OoxHzIIsxr/ApZtsNysEBDc8hIp5hEc+IiGdUxDMm4hkX8UyIeJaJeJaLeCZFPFMinpuKeG4m4rm5iOcWIp5binhuJeI5VMRzmIjn1iKe24h4biviuZ2I5/YinjuIeO4o4rmTiOfOIp7DRTx3EfHcVcRzNxHP3UU89xDx3FPEc4SI514innuLeO4j4jlSxHNfEc/9RDz3F/E8QMTzQBHPg0Q8DxbxPETE81ARz1EinhUinpUinqNFPKtEPNMintUinmNEPMeKeNaIeB4m4jlOxHO8iOcEEc9aEc86Ec+JIp6TLHva9mP/MXboDVrOt97Iq7nPeC9y/v/LcLEPZTjZYhkuFijDRh/KMGOxDBtF+lc0WIx5mUjMU6zlFYvaGOEjXc1ldLUZs+3fzNSAxjFwmojndBHPw0U8jxDxPFLE8ygRz6NFPI8R8Zwh4nmsiOdxIp7Hi3ieIOJ5oojnSSKeJ4t4niLieaqI52kinqeLeJ4h4nmmiOdZIp5ni3ieI+J5rojneSKe54t4XiDieaGI50UinheLeF4i4nmpiOdlIp6Xi3heIeJ5pYjnVSKeV4t4XiPiea2I53UinteLeN4g4nmjiOdNIp43i3jeIuJ5q4jnbSKet4t43iHieaeI510inneLeN4j4nmviOd9Ip73i3g+IOL5oIjnQyKeD4t4PiLi+aiI52Mino+LeM4U8XxCxPNJEc+nRDyfFvF8RsTzWRHP50Q8nxfxfEHE88WAhudLIp4vi3i+IuL5qojnayKer4t4viHi+aaI51sinm+LeL4j4vmuiOd7Ip7vi3h+IOL5oYjnRyKeH4t4fiLi+amI52cinp+LeH4h4vmliOcsEc+vRDy/FvH8RsTzWxHP2SKec0Q854p4zhPxnC/i+Z2I5/cinj+IeP4o4rlAxHOhiOciEc/FIp6NIp5LRDyXinj+JOL5s4jnLyKey0Q8l4t4rhDx/FXE8zcRz99FPP8Q8Vwp4vmniCczVPB0RDyDIp55Ip75Ip4FIp6FIp4tRDyLRDxbingWi3iWiHiWini2EvFsLeLZRsSzrYhnOxHP9iKe64l4ri/i2UHEs6OIZycRzw1EPDcU8dxIxHNjEc/OIp5dRDy7inh2E/EMiXh2F/HcRMSzh4hnTxHPXiKevUU8+4h49hXx7Cfi2V/Ec4CI50ARz0EinoNFPIeIeIZFPCMinlERz5iIZ1zEMyHiWSbiWS7imRTxTIl4biriuZmI5+YinluIeG4p4rmViOdQEc9hIp5bi3huI+K5rYjndiKe24t47iDiuaOI504injuLeA4X8dxFxHNXEc/dRDx3F/HcQ8RzTxHPESKee4l47i3iuY+I50gRz31FPPcT8dxfxPMAEc8DRTwPEvE8WMTzEBHPQ0U8R4l4Voh4Vop4jhbxrPLJM5jlGQuXxePp8mg6EotUhKOpymQiHE9UliUjyUgimaiKJmOxdDKeLE9VpsrDqUg8lo5UJ1KxajfvXhZjTv9HMYebt0SqHXvlN1ekPo4R8Rwr4lkj4nmYiOc4Ec/xIp4TRDxrRTzrRDwninhOEvGsF/GcLOKZEfFsEPGcIuI5VcRzmojndBHPw0U8jxDxPFLE8ygRz6NFPI8R8Zwh4nmsiOdxIp7Hi3ieIOJ5oojnSSKeJ4t4niLieaqI52kinqeLeJ4h4nmmiOdZIp5ni3ieI+J5rojneSKe54t4XiDieaGI50UinheLeF4i4nmpiOdlIp6Xi3heIeJ5pYjnVSKeV4t4XiPiea2I53UinteLeN4g4nmjiOdNIp43i3jeIuJ5q4jnbSKet4t43iHieaeI510inneLeN4j4nmviOd9Ip73i3g+IOL5oIjnQyKeD4t4PiLi+aiI52Mino+LeM4U8XxCxPNJEc+nRDyfFvF8RsTzWZ88g1meze0HXWAx5udEYi60GPPzIjG3sBjzCyIxF1mM+UWRmFtajPklkZiLLcb8skjMJRZjfkUk5lKLMb8qEnMrizG/JhJza4sxvy4ScxuLMb8hEnNbizG/KRJzO4sxvyUSc3uLMb8tEvN6FmN+RyTm9S3G/K5IzB0sxvyeSMwdLcb8vkjMnSzG/IFIzBtYjPlDkZg3tBjzRyIxb2Qx5o9FYt7YYsyfiMTc2WLMn4rE3MVizJ+JxNzVYsyfi8TczWLMX4jEHLIY85ciMXe3GPMskZg3sRjzVyIx97AY89ciMfe0GPM3FmPmvfF8N68+RvyOWwZ57v95L5n3VnmvkffeeC+K92Z4r4LX7nktm9d2ea2T1/54LYzXhnithNcOeC7Nc0uea/Hcg21xtk3ZVmPbhcdyHtu4rw8B7gv422BdYdlxTPTeht9Mp8m5L+gH+oMBYCAYBAaDISwjEAFRfo8gDhKgDJSDJEiBTcFmYHOwBdgSbOV+b8PA1mAbsC3YDmwPdgA7gp3AzmA42AXsCnYDu4M9wJ5gBNgL7A32ASPBvmA/sD84ABwIDgIHg0PAoWAUqACVYDSoAmlQDcaAsaAGHAbGgfFgAqgFdWAimATqwWSQAQ1gCpgKpoHp4HBwBDgSHAWOBseAGeBYcBw4HpwATgQngZPBKeBUcBo4HZwBzgRngbPBOeBccB44H1wALgQXgYvBJeBScBm4HFwBrgRXgavBNeBacB24HtwAbgQ3gZvBLeBWcBu4HdwB7gR3gbvBPeBecB+4HzwAHgQPgYfBI+BR8Bh4HMwET4AnwVPgafAMeBY8B54HL4AXwUvgZfAKeBW8Bl4Hb4A3wVvgbfAOeBe8B94HH4APwUfgY/AJ+BR8Bj4HX4AvwSzwFfgafAO+BbPBHDAXzAPzwXfge/AD+BEsAAvBIrAYNIIlYCn4CfwMfgHLwHKwAvwKfgO/gz/ASvAn4M7AAUGQB/JBASgELUARaAmKQQkoBa1Aa9AGtAXtQHuwHlgfdAAdQSewAdgQbAQ2Bp1BF9AVdAMh0B1sAnqAnqAX6A36gL6gH+gPBoCBYBAYDIYA7uQiIApiIA4SoAyUA857zznlOV8750LnPOOcw5vzY6+aexpwzmTOR8y5fjmPLueo5fyvnFuV85ZyTlDOt8m5LDlPJOdg5PyGnDuQ8/JxzjvOJ8e52jgPGucY4/xdnBuL805xTifOl8S5iDjPD+fQ4fw0nPtlFOCcJZwPhHNtcB4LzuvAORM4hwDH5+fY9xxXnmO2czx0jjXOcbw5RjbHn+bYzhw3mWMSc7xfjqXLcWo5BizHV+XYpRwXlGNucjxLjhXJcRg5xuEMwLH5OO4dx5TjeG0cC43jjHEML46PxbGnOK4Tx0zieEQc64fj6HCMGo7/wrFVOG4JxwTheBscy4LjRHAMBo5vwLED2C+ffd7Zn5x9tdkPmn2M2X+XfWPZ75R9Otlfkn0R2c+PfejYP419v9ivin2W2B+IfW3Yj4V9RNj/gn0b2G+Az+TzeXc+S87ntPkMNJ8v5rO7fC6Wz5zy2MJnJfkcIp/x4/NzfDaNz33xOSg+F8TnZPjcCJ+j4HMFvM/O+868D8v7krxPx/tWvI/D+xq8zs/r3rwOzOuivE7I62a8jsTrKrzOwPNunofyvIznKWy3sx3Ldh3bOTzu8zjsLe2N9c7ua0Umk54wMRPK1IUqqqpCU2syY0N1U9L11ePr+FWvOu5y6WB81ksbVl9fMT1UU1uVnhaqa8iE6qpDlXUNtVWTzQ92XtcP9ljXDw76Vx/Mc9+Rcl+LjE+HApYaTslwWaGReTCw5lJiphU1pXlujpvGxlSx+Zms/FZ9xk3LM9Ly3bR8I63ATfMqSDsjv3xDpch2WYTD8RJjG97iZP0dMtaLjNcC+z4RlmknN68x6czw9PSRFeNrqioyNXW1I9KTGtKTM46h6annZ6k7gTXDWGm8x/zKzfW8HGkrjdci4z0hiyE7gTX3DSHjb297RYaXxW2H/apWjKmlm1eBm3fQiCXgfh/eezq6r20Df13MvDzP7O+ylVFWLY3t+BBbhHkW+1RmJVll5vkXG2XmvafLP5RZyVrKrMgoM6+sSoz/+RBblPmW+lRmrbLKzPMvNcrMe0/PfyizVmsps2KjzEqMdS5BY1slRl5B4z3e/1e66dl58P0+lVGM+ba2n++qsm/j5uWVvefvbS/feM9g93VtZd/G+DsUaCr7UqOsvPLy3ltirJuHWW/7Zv1ua6x7r+2MvL20YI5t5GXFZR42zXzNQ7i3fe8zPjVnon/XnAmaGy5q2nauZo4vx7fk6v1lvu183f2wH00Qlk2hm5dZp7z1QqPY/IiLTUuvzptNQW/xrt1xmVgxetyIdKahvnay2dzxFLObQLmaPt6lwkAgdxMp5P6dnRerdous7WVvk4vZdOHnhrrr4WYuAcO7IEdc+YHcX5lj3yVixpsX+GsZtMtRPv8D8eZZ+SpbAQA=","debug_symbols":"7ZltayIxEMe/y76WI/OYxK9ylMO29hBES7UHh/jdG60btzatsOuOW9pXEvc/85vNZDIJu6nup7fPf//MFg/LVTX+vanmy7vJerZcpNGmAt7/t3qcLHbD1XrytK7GblRNF/fpdzuqHmbzaTUmCdvROx0qxIMUlSGrAaGgJs94UFNw8Yw6cuSDOopQViO77c2oAvmqgatd4AweDmpGgo6B+y6BU0CX51A0qyPvfYcefceSb0Qv9UQS4BlCmhrKU9OY9kQoiL34WuwDfS6mUDtmkMaUa8mxQnasKm8SVFq1mj374/uVpIzZcVon9LkYg6+rAUM8Iwan9ZoCgDfilBp0P6kZamrgmqmJp0WMOKxwaFjh8LDCEeNwwIHWjQ4cNlp0Ua5aV4mHZjeP++D1KwfvzYNPJ4UcvHj82VI/3lLDdZMT5LRO48ACIje0gKDLuVRZw0Gq4ujUN3byLYTZt5w5yVzxukP0Ld6SB/qWF70BovyCYoWy1AUqAO96UrKCVlbYyopaWXErK2llpa2siq1dciuT3dJqWJU2O+/zXheOhzYIObvBgBH7Z5TvlRdmgAEDDRhkwODujBAyI/oSQwwYasDwBoxgwIj9M8gZMC5Q5zHmW4ELJQYaMMiAwQYMMWCoAcMbMMJFGVDa2yn2z2BnwOhe50BHBpfywWjAIAMGGzDEgKEGDN8zg+CDmxJoPpZFaTD89iaN/k2eZpPb+XT3GXj38HlxV38VTsP1/8fXJ0n7Ag=="},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":""}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000071421477"},{"kind":"string","value":"ValueNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000005be4c59b"},{"kind":"string","value":"TestNote"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"example_constant","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"example_set","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"events":[{"fields":[{"name":"value0","type":{"kind":"field"}},{"name":"value1","type":{"kind":"field"}},{"name":"value2","type":{"kind":"field"}},{"name":"value3","type":{"kind":"field"}},{"name":"value4","type":{"kind":"field"}}],"kind":"struct","path":"Test::ExampleEvent"}],"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"public_nullifying_key","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"Test::test_nullifier_key_freshness_parameters"}}],"kind":"struct","path":"Test::test_nullifier_key_freshness_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"Test::emit_unencrypted_parameters"}}],"kind":"struct","path":"Test::emit_unencrypted_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Test::get_master_incoming_viewing_public_key_parameters"}},{"name":"return_type","type":{"kind":"array","length":2,"type":{"kind":"field"}}}],"kind":"struct","path":"Test::get_master_incoming_viewing_public_key_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"eph_sk","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurveScalar"}},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"recipient_ivpk_app","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"ovsk_app","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurveScalar"}}],"kind":"struct","path":"Test::compute_outgoing_log_body_ciphertext_parameters"}},{"name":"return_type","type":{"kind":"array","length":176,"type":{"kind":"integer","sign":"unsigned","width":8}}}],"kind":"struct","path":"Test::compute_outgoing_log_body_ciphertext_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"active_or_nullified","type":{"kind":"boolean"}}],"kind":"struct","path":"Test::call_get_notes_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Test::call_get_notes_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"secret_hash_for_redeeming_minted_notes","type":{"kind":"field"}},{"name":"amount","type":{"kind":"field"}},{"name":"secret_for_L1_to_L2_message_consumption","type":{"kind":"field"}},{"name":"portal_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}}],"kind":"struct","path":"Test::consume_mint_private_message_parameters"}}],"kind":"struct","path":"Test::consume_mint_private_message_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Test::deploy_contract_parameters"}}],"kind":"struct","path":"Test::deploy_contract_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"fields","type":{"kind":"array","length":5,"type":{"kind":"field"}}},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"outgoing_viewer","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"nest","type":{"kind":"boolean"}}],"kind":"struct","path":"Test::emit_array_as_encrypted_log_parameters"}}],"kind":"struct","path":"Test::emit_array_as_encrypted_log_abi"},{"fields":[{"name":"return_type","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Test::get_this_address_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"content","type":{"kind":"field"}},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}}],"kind":"struct","path":"Test::create_l2_to_l1_message_arbitrary_recipient_private_parameters"}}],"kind":"struct","path":"Test::create_l2_to_l1_message_arbitrary_recipient_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"content","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"message_leaf_index","type":{"kind":"field"}}],"kind":"struct","path":"Test::consume_message_from_arbitrary_sender_public_parameters"}}],"kind":"struct","path":"Test::consume_message_from_arbitrary_sender_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"Test::set_constant_parameters"}}],"kind":"struct","path":"Test::set_constant_abi"},{"fields":[],"kind":"struct","path":"Test::dummy_public_call_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"input","type":{"kind":"array","length":65,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"iv","type":{"kind":"array","length":16,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"key","type":{"kind":"array","length":16,"type":{"kind":"integer","sign":"unsigned","width":8}}}],"kind":"struct","path":"Test::encrypt_with_padding_parameters"}},{"name":"return_type","type":{"kind":"array","length":80,"type":{"kind":"integer","sign":"unsigned","width":8}}}],"kind":"struct","path":"Test::encrypt_with_padding_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"content","type":{"kind":"field"}},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}}],"kind":"struct","path":"Test::create_l2_to_l1_message_arbitrary_recipient_public_parameters"}}],"kind":"struct","path":"Test::create_l2_to_l1_message_arbitrary_recipient_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"secret","type":{"kind":"field"}}],"kind":"struct","path":"Test::consume_note_from_secret_parameters"}}],"kind":"struct","path":"Test::consume_note_from_secret_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}}],"kind":"struct","path":"Test::assert_private_global_vars_parameters"}}],"kind":"struct","path":"Test::assert_private_global_vars_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"contract_address_to_read","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_slot_of_shared_mutable","type":{"kind":"field"}}],"kind":"struct","path":"Test::test_shared_mutable_private_getter_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Test::test_shared_mutable_private_getter_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"outgoing_viewer","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Test::emit_encrypted_logs_nested_parameters"}}],"kind":"struct","path":"Test::emit_encrypted_logs_nested_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"content","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}}],"kind":"struct","path":"Test::consume_message_from_arbitrary_sender_private_parameters"}}],"kind":"struct","path":"Test::consume_message_from_arbitrary_sender_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"amount","type":{"kind":"field"}},{"name":"secret_hash","type":{"kind":"field"}},{"name":"portal_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}}],"kind":"struct","path":"Test::create_l2_to_l1_message_public_parameters"}}],"kind":"struct","path":"Test::create_l2_to_l1_message_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"message_leaf_index","type":{"kind":"field"}},{"name":"portal_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}}],"kind":"struct","path":"Test::consume_mint_public_message_parameters"}}],"kind":"struct","path":"Test::consume_mint_public_message_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"ovpk_m_hash","type":{"kind":"field"}}],"kind":"struct","path":"Test::get_ovsk_app_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Test::get_ovsk_app_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"outgoing_viewer","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_slot","type":{"kind":"field"}}],"kind":"struct","path":"Test::call_create_note_parameters"}}],"kind":"struct","path":"Test::call_create_note_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"nullifier","type":{"kind":"field"}}],"kind":"struct","path":"Test::emit_nullifier_public_parameters"}}],"kind":"struct","path":"Test::emit_nullifier_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"storage_slot","type":{"kind":"field"}},{"name":"active_or_nullified","type":{"kind":"boolean"}}],"kind":"struct","path":"Test::call_get_notes_many_parameters"}},{"name":"return_type","type":{"kind":"array","length":2,"type":{"kind":"field"}}}],"kind":"struct","path":"Test::call_get_notes_many_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"nullifier","type":{"kind":"field"}}],"kind":"struct","path":"Test::emit_nullifier_parameters"}}],"kind":"struct","path":"Test::emit_nullifier_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"secret","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurveScalar"}},{"name":"point","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}}],"kind":"struct","path":"Test::compute_note_header_ciphertext_parameters"}},{"name":"return_type","type":{"kind":"array","length":48,"type":{"kind":"integer","sign":"unsigned","width":8}}}],"kind":"struct","path":"Test::compute_note_header_ciphertext_abi"},{"fields":[],"kind":"struct","path":"Test::test_setting_fee_payer_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"storage_slot_of_shared_mutable","type":{"kind":"field"}},{"name":"address_to_get_in_registry","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Test::test_shared_mutable_private_getter_for_registry_contract_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Test::test_shared_mutable_private_getter_for_registry_contract_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"input","type":{"kind":"array","length":64,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"iv","type":{"kind":"array","length":16,"type":{"kind":"integer","sign":"unsigned","width":8}}},{"name":"key","type":{"kind":"array","length":16,"type":{"kind":"integer","sign":"unsigned","width":8}}}],"kind":"struct","path":"Test::encrypt_parameters"}},{"name":"return_type","type":{"kind":"array","length":80,"type":{"kind":"integer","sign":"unsigned","width":8}}}],"kind":"struct","path":"Test::encrypt_abi"},{"fields":[],"kind":"struct","path":"Test::test_setting_teardown_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"secret","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurveScalar"}},{"name":"point","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"storage_slot","type":{"kind":"field"}},{"name":"value","type":{"kind":"field"}}],"kind":"struct","path":"Test::compute_incoming_log_body_ciphertext_parameters"}},{"name":"return_type","type":{"kind":"array","length":112,"type":{"kind":"integer","sign":"unsigned","width":8}}}],"kind":"struct","path":"Test::compute_incoming_log_body_ciphertext_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"Test::assert_public_global_vars_parameters"}}],"kind":"struct","path":"Test::assert_public_global_vars_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"header_hash","type":{"kind":"field"}}],"kind":"struct","path":"Test::assert_header_private_parameters"}}],"kind":"struct","path":"Test::assert_header_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"max_block_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"enqueue_public_call","type":{"kind":"boolean"}}],"kind":"struct","path":"Test::set_tx_max_block_number_parameters"}}],"kind":"struct","path":"Test::set_tx_max_block_number_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"time","type":{"kind":"integer","sign":"unsigned","width":64}}],"kind":"struct","path":"Test::is_time_equal_parameters"}},{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":64}}],"kind":"struct","path":"Test::is_time_equal_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"storage_slot","type":{"kind":"field"}}],"kind":"struct","path":"Test::call_destroy_note_parameters"}}],"kind":"struct","path":"Test::call_destroy_note_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"a_field","type":{"kind":"field"}},{"name":"a_bool","type":{"kind":"boolean"}},{"name":"a_number","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"an_array","type":{"kind":"array","length":2,"type":{"kind":"field"}}},{"name":"a_struct","type":{"fields":[{"name":"amount","type":{"kind":"field"}},{"name":"secret_hash","type":{"kind":"field"}}],"kind":"struct","path":"Test::DummyNote"}},{"name":"a_deep_struct","type":{"fields":[{"name":"a_field","type":{"kind":"field"}},{"name":"a_bool","type":{"kind":"boolean"}},{"name":"a_note","type":{"fields":[{"name":"amount","type":{"kind":"field"}},{"name":"secret_hash","type":{"kind":"field"}}],"kind":"struct","path":"Test::DummyNote"}},{"name":"many_notes","type":{"kind":"array","length":3,"type":{"fields":[{"name":"amount","type":{"kind":"field"}},{"name":"secret_hash","type":{"kind":"field"}}],"kind":"struct","path":"Test::DummyNote"}}}],"kind":"struct","path":"Test::DeepStruct"}}],"kind":"struct","path":"Test::test_code_gen_parameters"}},{"name":"return_type","type":{"kind":"field"}}],"kind":"struct","path":"Test::test_code_gen_abi"}]}},"file_map":{"102":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/payload.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::{Point, pub_key_to_bytes},\n    constants::{GENERATOR_INDEX__IVSK_M, GENERATOR_INDEX__OVSK_M}, hash::poseidon2_hash\n};\n\nuse std::field::bytes32_to_field;\n\nuse crate::oracle::unsafe_rand::unsafe_rand;\n\nuse crate::event::event_interface::EventInterface;\nuse crate::note::note_interface::NoteInterface;\n\nuse crate::encrypted_logs::{\n    header::EncryptedLogHeader, incoming_body::EncryptedLogIncomingBody,\n    outgoing_body::EncryptedLogOutgoingBody\n};\n\npub fn compute_encrypted_event_log<Event, NB, MB, OB>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    ovsk_app: Field,\n    ovpk: Point,\n    ivpk: Point,\n    event: Event\n) -> [u8; OB] where Event: EventInterface<NB, MB> {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    let eph_sk: Scalar = fr_to_fq(unsafe_rand());\n    let eph_pk = eph_sk.derive_public_key();\n\n    // TODO: (#7177) This value needs to be populated!\n    let recipient = AztecAddress::from_field(0);\n\n    let ivpk_app = compute_ivpk_app(ivpk, contract_address);\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_Header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_event(event, randomness).compute_ciphertext(eph_sk, ivpk_app);\n    let outgoing_body_ciphertext: [u8; 176] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk_app).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; OB] = [0; OB];\n    // @todo We ignore the tags for now \n\n    let eph_pk_bytes = pub_key_to_bytes(eph_pk);\n    for i in 0..64 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[128 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[176 + i] = outgoing_Header_ciphertext[i];\n    }\n    for i in 0..176 {\n        encrypted_bytes[224 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = OB - 400;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[400 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (64 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (176 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\npub fn compute_encrypted_note_log<Note, N, NB, M>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: Point,\n    ivpk: Point,\n    note: Note\n) -> [u8; M] where Note: NoteInterface<N, NB> {\n    // @todo Need to draw randomness from the full domain of Fq not only Fr\n    let eph_sk: Scalar = fr_to_fq(unsafe_rand());\n    let eph_pk = eph_sk.derive_public_key();\n\n    // TODO: (#7177) This value needs to be populated!\n    let recipient = AztecAddress::from_field(0);\n\n    let ivpk_app = compute_ivpk_app(ivpk, contract_address);\n\n    let header = EncryptedLogHeader::new(contract_address);\n\n    let incoming_header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ivpk);\n    let outgoing_Header_ciphertext: [u8; 48] = header.compute_ciphertext(eph_sk, ovpk);\n    let incoming_body_ciphertext = EncryptedLogIncomingBody::from_note(note, storage_slot).compute_ciphertext(eph_sk, ivpk_app);\n    let outgoing_body_ciphertext: [u8; 176] = EncryptedLogOutgoingBody::new(eph_sk, recipient, ivpk_app).compute_ciphertext(fr_to_fq(ovsk_app), eph_pk);\n\n    let mut encrypted_bytes: [u8; M] = [0; M];\n    // @todo We ignore the tags for now \n\n    let eph_pk_bytes = pub_key_to_bytes(eph_pk);\n    for i in 0..64 {\n        encrypted_bytes[64 + i] = eph_pk_bytes[i];\n    }\n    for i in 0..48 {\n        encrypted_bytes[128 + i] = incoming_header_ciphertext[i];\n        encrypted_bytes[176 + i] = outgoing_Header_ciphertext[i];\n    }\n    for i in 0..176 {\n        encrypted_bytes[224 + i] = outgoing_body_ciphertext[i];\n    }\n    // Then we fill in the rest as the incoming body ciphertext\n    let size = M - 400;\n    assert_eq(size, incoming_body_ciphertext.len(), \"ciphertext length mismatch\");\n    for i in 0..size {\n        encrypted_bytes[400 + i] = incoming_body_ciphertext[i];\n    }\n\n    // Current unoptimized size of the encrypted log\n    // incoming_tag (32 bytes)\n    // outgoing_tag (32 bytes)\n    // eph_pk (64 bytes)\n    // incoming_header (48 bytes)\n    // outgoing_header (48 bytes)\n    // outgoing_body (176 bytes)\n    // incoming_body_fixed (64 bytes)\n    // incoming_body_variable (N * 32 bytes + 16 bytes padding)\n    encrypted_bytes\n}\n\n/// Converts a base field elememt to scalar field element.\n/// This is fine because modulus of the base field is smaller than the modulus of the scalar field.\nfn fr_to_fq(r: Field) -> Scalar {\n    let r_bytes = r.to_be_bytes(32);\n\n    let mut high_bytes = [0; 32];\n    let mut low_bytes = [0; 32];\n\n    for i in 0..16 {\n        high_bytes[16 + i] = r_bytes[i];\n        low_bytes[16 + i] = r_bytes[i + 16];\n    }\n\n    let low = bytes32_to_field(low_bytes);\n    let high = bytes32_to_field(high_bytes);\n\n    Scalar::new(low, high)\n}\n\nfn compute_ivpk_app(ivpk: Point, contract_address: AztecAddress) -> Point {\n    // It is useless to compute this, it brings no value to derive fully.\n    // Issue(#6955)\n    ivpk\n    /*\n    // @todo Just setting infinite to false, but it should be checked.\n    // for example user could define ivpk = infinity using the registry\n    assert((ivpk.x != 0) & (ivpk.y != 0), \"ivpk is infinite\");\n\n    let i = fr_to_fq(poseidon2_hash([contract_address.to_field(), ivpk.x, ivpk.y, GENERATOR_INDEX__IVSK_M]));\n    let I = i.derive_public_key();\n\n    let embed_I = Point { x: I.x, y: I.y, is_infinite: false };\n    let embed_ivpk = Point { x: ivpk.x, y: ivpk.y, is_infinite: false };\n\n    let embed_result = embedded_curve_add(embed_I, embed_ivpk);\n\n    Point::new(embed_result.x, embed_result.y)*/\n}\n"},"103":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_note_emission.nr","source":"use crate::{\n    context::PrivateContext, note::{note_emission::NoteEmission, note_interface::NoteInterface},\n    encrypted_logs::payload::compute_encrypted_note_log, oracle::logs_traits::LensForEncryptedLog\n};\nuse dep::protocol_types::{\n    hash::sha256_to_field, address::AztecAddress, point::Point, abis::note_hash::NoteHash,\n    constants::MAX_NOTE_HASHES_PER_CALL, utils::arrays::find_index\n};\n\nunconstrained fn compute_unconstrained<Note, N, NB, M>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: Point,\n    ivpk: Point,\n    note: Note\n) -> ([u8; M], Field) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    compute(contract_address, storage_slot, ovsk_app, ovpk, ivpk, note)\n}\n\nfn compute<Note, N, NB, M>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    ovsk_app: Field,\n    ovpk: Point,\n    ivpk: Point,\n    note: Note\n) -> ([u8; M], Field) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    let encrypted_log: [u8; M] = compute_encrypted_note_log(contract_address, storage_slot, ovsk_app, ovpk, ivpk, note);\n    let log_hash = sha256_to_field(encrypted_log);\n    (encrypted_log, log_hash)\n}\n\nfn emit_with_keys<Note, N, NB, M>(\n    context: &mut PrivateContext,\n    note: Note,\n    ovpk: Point,\n    ivpk: Point,\n    inner_compute: fn(AztecAddress, Field, Field, Point, Point, Note) -> ([u8; M], Field)\n) where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    let note_header = note.get_header();\n    let note_hash_counter = note_header.note_hash_counter;\n    let storage_slot = note_header.storage_slot;\n\n    let note_exists_index = find_index(\n        context.note_hashes.storage,\n        |n: NoteHash| n.counter == note_hash_counter\n    );\n    assert(\n        note_exists_index as u32 != MAX_NOTE_HASHES_PER_CALL, \"Can only emit a note log for an existing note.\"\n    );\n\n    let contract_address: AztecAddress = context.this_address();\n    let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n\n    let (encrypted_log, log_hash) = inner_compute(contract_address, storage_slot, ovsk_app, ovpk, ivpk, note);\n\n    context.emit_raw_note_log(note_hash_counter, encrypted_log, log_hash);\n}\n\npub fn encode_and_encrypt_note<Note, N, NB, M>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let header = context.get_header();\n        let ovpk = header.get_ovpk_m(context, ov);\n        let ivpk = header.get_ivpk_m(context, iv);\n        emit_with_keys(context, e.note, ovpk, ivpk, compute);\n    }\n}\n\npub fn encode_and_encrypt_note_unconstrained<Note, N, NB, M>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        let header = context.get_header();\n        let ovpk = header.get_ovpk_m(context, ov);\n        let ivpk = header.get_ivpk_m(context, iv);\n        emit_with_keys(context, e.note, ovpk, ivpk, compute_unconstrained);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys<Note, N, NB, M>(\n    context: &mut PrivateContext,\n    ovpk: Point,\n    ivpk: Point\n) -> fn[(&mut PrivateContext, Point, Point)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        emit_with_keys(context, e.note, ovpk, ivpk, compute);\n    }\n}\n\npub fn encode_and_encrypt_note_with_keys_unconstrained<Note, N, NB, M>(\n    context: &mut PrivateContext,\n    ovpk: Point,\n    ivpk: Point\n) -> fn[(&mut PrivateContext, Point, Point)](NoteEmission<Note>) -> () where Note: NoteInterface<N, NB>, [Field; N]: LensForEncryptedLog<N, M> {\n    | e: NoteEmission<Note> | {\n        emit_with_keys(context, e.note, ovpk, ivpk, compute_unconstrained);\n    }\n}\n"},"104":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/outgoing_body.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, scalar::Scalar, point::Point, constants::GENERATOR_INDEX__SYMMETRIC_KEY,\n    hash::poseidon2_hash\n};\n\nuse std::aes128::aes128_encrypt;\n\nuse crate::keys::point_to_symmetric_key::point_to_symmetric_key;\n\nstruct EncryptedLogOutgoingBody {\n    eph_sk: Scalar,\n    recipient: AztecAddress,\n    recipient_ivpk_app: Point,\n}\n\nimpl EncryptedLogOutgoingBody {\n    pub fn new(eph_sk: Scalar, recipient: AztecAddress, recipient_ivpk_app: Point) -> Self {\n        Self { eph_sk, recipient, recipient_ivpk_app }\n    }\n\n    pub fn compute_ciphertext(self, ovsk_app: Scalar, eph_pk: Point) -> [u8; 176] {\n        // Again, we could compute `eph_pk` here, but we keep the interface more similar\n        // and also make it easier to optimise it later as we just pass it along\n\n        let mut buffer: [u8; 160] = [0; 160];\n\n        let serialized_eph_sk_high = self.eph_sk.hi.to_be_bytes(32);\n        let serialized_eph_sk_low = self.eph_sk.lo.to_be_bytes(32);\n\n        let address_bytes = self.recipient.to_field().to_be_bytes(32);\n        let serialized_recipient_ivpk_app = self.recipient_ivpk_app.serialize();\n        let serialized_recipient_ivpk_app_x = serialized_recipient_ivpk_app[0].to_be_bytes(32);\n        let serialized_recipient_ivpk_app_y = serialized_recipient_ivpk_app[1].to_be_bytes(32);\n\n        for i in 0..32 {\n            buffer[i] = serialized_eph_sk_high[i];\n            buffer[i + 32] = serialized_eph_sk_low[i];\n            buffer[i + 64] = address_bytes[i];\n            buffer[i + 96] = serialized_recipient_ivpk_app_x[i];\n            buffer[i + 128] = serialized_recipient_ivpk_app_y[i];\n        }\n\n        // We compute the symmetric key using poseidon.\n        let full_key: [u8; 32] = poseidon2_hash(\n            [\n            ovsk_app.hi, ovsk_app.lo, eph_pk.x, eph_pk.y,\n            GENERATOR_INDEX__SYMMETRIC_KEY as Field\n        ]\n        ).to_be_bytes(32).as_array();\n\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(buffer, iv, sym_key).as_array()\n    }\n}\n\nmod test {\n    use crate::encrypted_logs::outgoing_body::EncryptedLogOutgoingBody;\n    use dep::protocol_types::{\n        address::AztecAddress, traits::Empty, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        scalar::Scalar, point::Point, hash::poseidon2_hash\n    };\n\n    use crate::context::PrivateContext;\n\n    #[test]\n    fn test_encrypted_log_outgoing_body() {\n        let eph_sk = Scalar::new(\n            0x00000000000000000000000000000000d0d302ee245dfaf2807e604eec4715fe,\n            0x000000000000000000000000000000000f096b423017226a18461115fa8d34bb\n        );\n        let recipient_ivsk_app = Scalar::new(\n            0x000000000000000000000000000000004828f8f95676ebb481df163f87fd4022,\n            0x000000000000000000000000000000000f4d97c25d578f9348251a71ca17ae31\n        );\n        let sender_ovsk_app = Scalar::new(\n            0x0000000000000000000000000000000074d2e28c6bc5176ac02cf7c7d36a444e,\n            0x00000000000000000000000000000000089c6887cb1446d86c64e81afc78048b\n        );\n\n        let eph_pk = eph_sk.derive_public_key();\n        let recipient_ivpk_app = recipient_ivsk_app.derive_public_key();\n\n        let recipient = AztecAddress::from_field(0xdeadbeef);\n\n        let body = EncryptedLogOutgoingBody::new(eph_sk, recipient, recipient_ivpk_app);\n\n        let ciphertext = body.compute_ciphertext(sender_ovsk_app, eph_pk);\n\n        let expected_outgoing_body_ciphertext = [\n            127, 84, 96, 176, 101, 107, 236, 57, 68, 8, 53, 202, 138, 74, 186, 54, 74, 193, 245, 7, 109, 59, 218, 33, 1, 31, 205, 225, 241, 209, 64, 222, 94, 245, 4, 150, 47, 241, 187, 64, 152, 20, 102, 158, 200, 217, 213, 82, 1, 240, 170, 185, 51, 80, 27, 109, 63, 231, 235, 120, 174, 44, 133, 248, 10, 97, 60, 40, 222, 190, 147, 76, 187, 48, 91, 206, 48, 106, 56, 118, 38, 127, 82, 4, 182, 188, 44, 224, 31, 129, 47, 107, 134, 252, 20, 25, 122, 191, 158, 69, 35, 255, 215, 171, 196, 45, 91, 184, 83, 80, 238, 201, 1, 233, 235, 159, 171, 130, 158, 64, 176, 165, 132, 30, 84, 81, 71, 195, 145, 47, 82, 247, 210, 192, 23, 4, 220, 90, 56, 109, 46, 105, 79, 251, 165, 141, 185, 233, 191, 118, 219, 153, 191, 162, 99, 238, 241, 249, 9, 74, 210, 241, 54, 28, 126, 226, 85, 235, 174, 75, 239, 207, 100, 184, 248, 194\n        ];\n\n        for i in 0..expected_outgoing_body_ciphertext.len() {\n            assert_eq(ciphertext[i], expected_outgoing_body_ciphertext[i]);\n        }\n        assert_eq(expected_outgoing_body_ciphertext.len(), ciphertext.len());\n    }\n}\n"},"105":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/header.nr","source":"use dep::protocol_types::{address::AztecAddress, scalar::Scalar, point::Point};\n\nuse crate::keys::point_to_symmetric_key::point_to_symmetric_key;\n\nuse std::aes128::aes128_encrypt;\n\nstruct EncryptedLogHeader {\n    address: AztecAddress,\n}\n\nimpl EncryptedLogHeader {\n    fn new(address: AztecAddress) -> Self {\n        EncryptedLogHeader { address }\n    }\n\n    fn compute_ciphertext(self, secret: Scalar, point: Point) -> [u8; 48] {\n        let full_key = point_to_symmetric_key(secret, point);\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n\n        let input: [u8; 32] = self.address.to_field().to_be_bytes(32).as_array();\n        aes128_encrypt(input, iv, sym_key).as_array()\n    }\n}\n\n#[test]\nfn test_encrypted_log_header() {\n    let address = AztecAddress::from_field(0xdeadbeef);\n    let header = EncryptedLogHeader::new(address);\n    let secret = Scalar::new(\n        0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    );\n    let point = Point::new(\n        0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        false\n    );\n\n    let ciphertext = header.compute_ciphertext(secret, point);\n\n    let expected_header_ciphertext = [\n        228, 9, 65, 81, 62, 59, 249, 207, 90, 196, 206, 72, 39, 199, 82, 196, 23, 131, 32, 226, 26, 176, 43, 39, 239, 177, 177, 192, 85, 216, 17, 15, 18, 187, 35, 225, 135, 192, 63, 88, 29, 173, 232, 46, 72, 82, 187, 139\n    ];\n\n    assert_eq(ciphertext, expected_header_ciphertext);\n}\n"},"106":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/incoming_body.nr","source":"use crate::note::note_interface::NoteInterface;\nuse crate::event::event_interface::EventInterface;\nuse dep::protocol_types::{scalar::Scalar, point::Point};\n\nuse std::aes128::aes128_encrypt;\nuse crate::keys::point_to_symmetric_key::point_to_symmetric_key;\n\nstruct EncryptedLogIncomingBody<M> {\n    plaintext: [u8; M]\n}\n\nimpl<M> EncryptedLogIncomingBody<M> {\n    pub fn from_note<T, N>(note: T, storage_slot: Field) -> Self where T: NoteInterface<N, M> {\n        let mut plaintext = note.to_be_bytes(storage_slot);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn from_event<T, MR>(event: T, randomness: Field) -> Self where T: EventInterface<M, MR> {\n        let mut plaintext = event.private_to_be_bytes(randomness);\n        EncryptedLogIncomingBody { plaintext }\n    }\n\n    pub fn compute_ciphertext(self, eph_sk: Scalar, ivpk_app: Point) -> [u8] {\n        let full_key = point_to_symmetric_key(eph_sk, ivpk_app);\n        let mut sym_key = [0; 16];\n        let mut iv = [0; 16];\n\n        for i in 0..16 {\n            sym_key[i] = full_key[i];\n            iv[i] = full_key[i + 16];\n        }\n        aes128_encrypt(self.plaintext, iv, sym_key)\n    }\n}\n\nmod test {\n    use crate::encrypted_logs::incoming_body::EncryptedLogIncomingBody;\n    use dep::protocol_types::{\n        address::AztecAddress, traits::Empty, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n        scalar::Scalar, point::Point, traits::Serialize, abis::event_selector::EventSelector\n    };\n\n    use crate::{\n        note::{note_header::NoteHeader, note_interface::NoteInterface},\n        event::event_interface::EventInterface, oracle::unsafe_rand::unsafe_rand,\n        context::PrivateContext\n    };\n\n    struct AddressNote {\n        address: AztecAddress,\n        owner: AztecAddress,\n        randomness: Field,\n        header: NoteHeader,\n    }\n\n    global ADDRESS_NOTE_LEN: Field = 3;\n    global ADDRESS_NOTE_BYTES_LEN = 32 * 3 + 64;\n\n    impl NoteInterface<ADDRESS_NOTE_LEN, ADDRESS_NOTE_BYTES_LEN> for AddressNote {\n        fn compute_note_content_hash(self) -> Field {1}\n\n        fn get_note_type_id() -> Field {\n            1\n        }\n\n        fn get_header(self) -> NoteHeader { self.header}\n\n        fn set_header(&mut self, header: NoteHeader) {self.header = header; }\n\n        fn compute_note_hash_and_nullifier(self, context: &mut PrivateContext) -> (Field, Field) {\n            (1, 1)\n        }\n\n        fn compute_note_hash_and_nullifier_without_context(self) -> (Field, Field) {(1,1)}\n\n        fn serialize_content(self) -> [Field; ADDRESS_NOTE_LEN] { [self.address.to_field(), self.owner.to_field(), self.randomness]}\n\n        fn deserialize_content(fields: [Field; ADDRESS_NOTE_LEN]) -> Self {\n            AddressNote { address: AztecAddress::from_field(fields[0]), owner: AztecAddress::from_field(fields[1]), randomness: fields[2], header: NoteHeader::empty() }\n        }\n\n        fn to_be_bytes(self, storage_slot: Field) -> [u8; ADDRESS_NOTE_BYTES_LEN] {\n            let serialized_note = self.serialize_content();\n\n            let mut buffer: [u8; ADDRESS_NOTE_BYTES_LEN] = [0; ADDRESS_NOTE_BYTES_LEN];\n\n            let storage_slot_bytes = storage_slot.to_be_bytes(32);\n            let note_type_id_bytes = AddressNote::get_note_type_id().to_be_bytes(32);\n\n            for i in 0..32 {\n                buffer[i] = storage_slot_bytes[i];\n                buffer[32 + i] = note_type_id_bytes[i];\n            }\n\n            for i in 0..serialized_note.len() {\n                let bytes = serialized_note[i].to_be_bytes(32);\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n            buffer\n        }\n    }\n\n    impl AddressNote {\n        pub fn new(address: AztecAddress, owner: AztecAddress, randomness: Field) -> Self {\n            AddressNote { address, owner, randomness, header: NoteHeader::empty() }\n        }\n    }\n\n    #[test]\n    fn test_encrypted_note_log_incoming_body() {\n        let note = AddressNote::new(\n            AztecAddress::from_field(0x1),\n            AztecAddress::from_field(0x2),\n            3\n        );\n\n        let storage_slot = 2;\n\n        let eph_sk = Scalar::new(\n            0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        );\n        let ivpk_app = Point::new(\n            0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            false\n        );\n\n        let body = EncryptedLogIncomingBody::from_note(note, storage_slot);\n\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk_app);\n\n        let expected_note_body_ciphertext = [\n            228, 9, 65, 81, 62, 59, 249, 207, 90, 196, 206, 72, 39, 199, 82, 196, 63, 127, 188, 251, 150, 188, 238, 205, 3, 86, 102, 164, 175, 12, 137, 158, 163, 111, 205, 10, 229, 230, 46, 202, 110, 107, 156, 180, 67, 192, 161, 201, 48, 153, 169, 1, 25, 182, 93, 39, 39, 207, 251, 218, 234, 147, 156, 13, 110, 180, 190, 199, 41, 6, 211, 203, 176, 110, 165, 186, 110, 127, 199, 22, 201, 149, 92, 249, 219, 68, 145, 68, 179, 29, 233, 34, 98, 123, 197, 234, 169, 53, 44, 14, 81, 60, 92, 27, 250, 134, 49, 248, 57, 119, 236, 118, 158, 104, 82, 243, 98, 164, 60, 72, 74, 27, 177, 194, 221, 225, 193, 150, 67, 235, 205, 106, 150, 24, 126, 186, 220, 178, 199, 189, 113, 54, 181, 55, 46, 15, 236, 236, 9, 159, 5, 172, 237, 154, 110, 50, 241, 64, 92, 13, 37, 53, 20, 140, 42, 146, 229, 63, 97, 25, 159, 63, 235, 104, 68, 100\n        ];\n\n        assert_eq(expected_note_body_ciphertext.len(), ciphertext.len());\n\n        for i in 0..expected_note_body_ciphertext.len() {\n            assert_eq(ciphertext[i], expected_note_body_ciphertext[i]);\n        }\n    }\n\n    struct TestEvent {\n        value0: Field,\n        value1: Field,\n        value2: Field,\n    }\n\n    impl Serialize<3> for TestEvent {\n        fn serialize(self) -> [Field; 3] {\n            [self.value0, self.value1, self.value2]\n        }\n    }\n\n    global TEST_EVENT_LEN: Field = 3;\n    global TEST_EVENT_BYTES_LEN = 32 * 3 + 64;\n    global TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS = 32 * 3 + 32;\n\n    impl EventInterface<TEST_EVENT_BYTES_LEN, TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS> for TestEvent {\n        fn get_event_type_id() -> EventSelector {\n            EventSelector::from_signature(\"TestEvent(Field,Field,Field)\")\n        }\n\n        fn private_to_be_bytes(self, randomness: Field) -> [u8; TEST_EVENT_BYTES_LEN] {\n            let mut buffer: [u8; TEST_EVENT_BYTES_LEN] = [0; TEST_EVENT_BYTES_LEN];\n\n            let randomness_bytes = randomness.to_be_bytes(32);\n            let event_type_id_bytes = TestEvent::get_event_type_id().to_field().to_be_bytes(32);\n\n            for i in 0..32 {\n                buffer[i] = randomness_bytes[i];\n                buffer[32 + i] = event_type_id_bytes[i];\n            }\n\n            let serialized_event = self.serialize();\n\n            for i in 0..serialized_event.len() {\n                let bytes = serialized_event[i].to_be_bytes(32);\n                for j in 0..32 {\n                    buffer[64 + i * 32 + j] = bytes[j];\n                }\n            }\n\n            buffer\n        }\n\n        fn to_be_bytes(self) -> [u8; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS] {\n             let mut buffer: [u8; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS] = [0; TEST_EVENT_BYTES_LEN_WITHOUT_RANDOMNESS];\n\n             let event_type_id_bytes = TestEvent::get_event_type_id().to_field().to_be_bytes(32);\n\n             for i in 0..32 {\n                 buffer[i] = event_type_id_bytes[i];\n            }\n\n             let serialized_event = self.serialize();\n\n             for i in 0..serialized_event.len() {\n                 let bytes = serialized_event[i].to_be_bytes(32);\n                 for j in 0..32 {\n                     buffer[32 + i * 32 + j] = bytes[j];\n                }\n            }\n\n             buffer\n        }\n\n        fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n            _emit(self);\n        }\n    }\n\n    #[test]\n    fn test_encrypted_log_event_incoming_body() {\n        let test_event = TestEvent { value0: 1, value1: 2, value2: 3 };\n\n        let eph_sk = Scalar::new(\n            0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n            0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n        );\n\n        let ivpk_app = Point::new(\n            0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n            0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n            false\n        );\n\n        let randomness = 2;\n\n        let body = EncryptedLogIncomingBody::from_event(test_event, randomness);\n\n        let ciphertext = body.compute_ciphertext(eph_sk, ivpk_app);\n\n        let expected_event_body_ciphertext = [\n            228, 9, 65, 81, 62, 59, 249, 207, 90, 196, 206, 72, 39, 199, 82, 196, 63, 127, 188, 251, 150, 188, 238, 205, 3, 86, 102, 164, 175, 12, 137, 158, 163, 111, 205, 10, 229, 230, 46, 202, 110, 107, 156, 180, 67, 192, 161, 201, 66, 122, 29, 35, 42, 33, 153, 216, 199, 208, 103, 207, 126, 153, 189, 136, 19, 220, 238, 15, 169, 29, 255, 11, 123, 107, 70, 192, 53, 40, 36, 93, 187, 32, 123, 136, 104, 23, 229, 245, 152, 90, 84, 2, 136, 112, 42, 27, 82, 214, 104, 14, 250, 48, 199, 245, 88, 22, 200, 77, 38, 51, 127, 56, 138, 255, 16, 46, 179, 129, 215, 185, 185, 116, 148, 16, 133, 62, 56, 180, 10, 132, 109, 77, 206, 199, 21, 167, 7, 163, 171, 158, 244, 23, 18, 121, 108, 42, 107, 7, 48, 84, 212, 104, 39, 16, 109, 7, 108, 129, 60, 80, 112, 241, 223, 140, 186, 158, 38, 74, 230, 213, 159, 175, 142, 228, 128, 160\n        ];\n\n        assert_eq(expected_event_body_ciphertext.len(), ciphertext.len());\n\n        for i in 0..expected_event_body_ciphertext.len() {\n            assert_eq(ciphertext[i], expected_event_body_ciphertext[i]);\n        }\n    }\n}\n"},"107":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/encrypted_logs/encrypted_event_emission.nr","source":"use crate::{\n    context::PrivateContext, event::event_interface::EventInterface,\n    encrypted_logs::payload::compute_encrypted_event_log, oracle::logs_traits::LensForEncryptedEvent,\n    oracle::unsafe_rand::unsafe_rand\n};\nuse dep::protocol_types::{address::AztecAddress, point::Point, hash::sha256_to_field};\n\nunconstrained fn compute_unconstrained<Event, NB, MB, OB>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    ovsk_app: Field,\n    ovpk: Point,\n    ivpk: Point,\n    event: Event\n) -> ([u8; OB], Field) where Event: EventInterface<NB, MB>, [u8; NB]: LensForEncryptedEvent<NB, OB> {\n    compute(contract_address, randomness, ovsk_app, ovpk, ivpk, event)\n}\n\nfn compute<Event, NB, MB, OB>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    ovsk_app: Field,\n    ovpk: Point,\n    ivpk: Point,\n    event: Event\n) -> ([u8; OB], Field) where Event: EventInterface<NB, MB>, [u8; NB]: LensForEncryptedEvent<NB, OB> {\n    let encrypted_log: [u8; OB] = compute_encrypted_event_log(contract_address, randomness, ovsk_app, ovpk, ivpk, event);\n    let log_hash = sha256_to_field(encrypted_log);\n    (encrypted_log, log_hash)\n}\n\nfn emit_with_keys<Event, NB, MB, OB>(\n    context: &mut PrivateContext,\n    randomness: Field,\n    event: Event,\n    ovpk: Point,\n    ivpk: Point,\n    inner_compute: fn(AztecAddress, Field, Field, Point, Point, Event) -> ([u8; OB], Field)\n) where Event: EventInterface<NB, MB>, [u8; NB]: LensForEncryptedEvent<NB, OB> {\n    let contract_address: AztecAddress = context.this_address();\n    let ovsk_app: Field  = context.request_ovsk_app(ovpk.hash());\n    let (encrypted_log, log_hash) = inner_compute(contract_address, randomness, ovsk_app, ovpk, ivpk, event);\n    context.emit_raw_event_log_with_masked_address(randomness, encrypted_log, log_hash);\n}\n\npub fn encode_and_encrypt_event<Event, NB, MB, OB>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](Event) -> () where Event: EventInterface<NB, MB>, [u8; NB]: LensForEncryptedEvent<NB, OB> {\n    | e: Event | {\n        let header = context.get_header();\n        let ovpk = header.get_ovpk_m(context, ov);\n        let ivpk = header.get_ivpk_m(context, iv);\n        let randomness = unsafe_rand();\n        emit_with_keys(context, randomness, e, ovpk, ivpk, compute);\n    }\n}\n\npub fn encode_and_encrypt_event_unconstrained<Event, NB, MB, OB>(\n    context: &mut PrivateContext,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress)](Event) -> () where Event: EventInterface<NB, MB>, [u8; NB]: LensForEncryptedEvent<NB, OB> {\n    | e: Event | {\n        let header = context.get_header();\n        let ovpk = header.get_ovpk_m(context, ov);\n        let ivpk = header.get_ivpk_m(context, iv);\n        let randomness = unsafe_rand();\n        emit_with_keys(context, randomness, e, ovpk, ivpk, compute_unconstrained);\n    }\n}\n\npub fn encode_and_encrypt_event_with_randomness<Event, NB, MB, OB>(\n    context: &mut PrivateContext,\n    randomness: Field,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress, Field)](Event) -> () where Event: EventInterface<NB, MB>, [u8; NB]: LensForEncryptedEvent<NB, OB> {\n    | e: Event | {\n        let header = context.get_header();\n        let ovpk = header.get_ovpk_m(context, ov);\n        let ivpk = header.get_ivpk_m(context, iv);\n        emit_with_keys(context, randomness, e, ovpk, ivpk, compute);\n    }\n}\n\npub fn encode_and_encrypt_event_with_randomness_unconstrained<Event, NB, MB, OB>(\n    context: &mut PrivateContext,\n    randomness: Field,\n    ov: AztecAddress,\n    iv: AztecAddress\n) -> fn[(&mut PrivateContext, AztecAddress, AztecAddress, Field)](Event) -> () where Event: EventInterface<NB, MB>, [u8; NB]: LensForEncryptedEvent<NB, OB> {\n    | e: Event | {\n        let header = context.get_header();\n        let ovpk = header.get_ovpk_m(context, ov);\n        let ivpk = header.get_ivpk_m(context, iv);\n        emit_with_keys(context, randomness, e, ovpk, ivpk, compute_unconstrained);\n    }\n}\n\npub fn encode_and_encrypt_event_with_keys<Event, NB, MB, OB>(\n    context: &mut PrivateContext,\n    ovpk: Point,\n    ivpk: Point\n) -> fn[(&mut PrivateContext, Point, Point)](Event) -> () where Event: EventInterface<NB, MB>, [u8; NB]: LensForEncryptedEvent<NB, OB> {\n    | e: Event | {\n        let randomness = unsafe_rand();\n        emit_with_keys(context, randomness, e, ovpk, ivpk, compute);\n    }\n}\n\npub fn encode_and_encrypt_event_with_keys_unconstrained<Event, NB, MB, OB>(\n    context: &mut PrivateContext,\n    ovpk: Point,\n    ivpk: Point\n) -> fn[(&mut PrivateContext, Point, Point)](Event) -> () where Event: EventInterface<NB, MB>, [u8; NB]: LensForEncryptedEvent<NB, OB> {\n    | e: Event | {\n        let randomness = unsafe_rand();\n        emit_with_keys(context, randomness, e, ovpk, ivpk, compute_unconstrained);\n    }\n}\n\npub fn encode_and_encrypt_event_with_keys_with_randomness<Event, NB, MB, OB>(\n    context: &mut PrivateContext,\n    randomness: Field,\n    ovpk: Point,\n    ivpk: Point\n) -> fn[(&mut PrivateContext, Field, Point, Point)](Event) -> () where Event: EventInterface<NB, MB>, [u8; NB]: LensForEncryptedEvent<NB, OB> {\n    | e: Event | {\n        emit_with_keys(context, randomness, e, ovpk, ivpk, compute);\n    }\n}\n\npub fn encode_and_encrypt_event_with_keys_with_randomness_unconstrained<Event, NB, MB, OB>(\n    context: &mut PrivateContext,\n    randomness: Field,\n    ovpk: Point,\n    ivpk: Point\n) -> fn[(&mut PrivateContext, Field, Point, Point)](Event) -> () where Event: EventInterface<NB, MB>, [u8; NB]: LensForEncryptedEvent<NB, OB> {\n    | e: Event | {\n        emit_with_keys(context, randomness, e, ovpk, ivpk, compute_unconstrained);\n    }\n}\n"},"110":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/note_getter/mod.nr","source":"use dep::protocol_types::{constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, GET_NOTES_ORACLE_RETURN_LENGTH}};\nuse crate::context::PrivateContext;\nuse crate::note::{\n    constants::{GET_NOTE_ORACLE_RETURN_LENGTH, MAX_NOTES_PER_PAGE, VIEW_NOTE_ORACLE_RETURN_LENGTH},\n    note_getter_options::{NoteGetterOptions, Select, Sort, SortOrder, Comparator, NoteStatus, PropertySelector},\n    note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request\n};\nuse crate::oracle;\n\nmod test;\n\nfn extract_property_value_from_selector<N>(\n    serialized_note: [Field; N],\n    selector: PropertySelector\n) -> Field {\n    // Selectors use PropertySelectors in order to locate note properties inside the serialized note. \n    // This allows easier packing and custom (de)serialization schemas. A note property is located\n    // inside the serialized note using the index inside the array, a byte offset and a length.\n    let value = serialized_note[selector.index].to_be_bytes(32);\n    let offset = selector.offset;\n    let length = selector.length;\n    let mut value_field = 0 as Field;\n    let mut acc: Field = 1;\n    for i in 0..32 {\n        if i < length {\n            value_field += value[31 + offset - i] as Field * acc;\n            acc = acc * 256;\n        }\n    }\n    value_field\n}\n\nfn check_note_header<Note, N, M>(\n    context: PrivateContext,\n    storage_slot: Field,\n    note: Note\n) where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    let contract_address = context.this_address();\n    assert(header.contract_address.eq(contract_address), \"Mismatch note header contract address.\");\n    assert(header.storage_slot == storage_slot, \"Mismatch note header storage slot.\");\n}\n\nfn check_note_fields<N>(serialized_note: [Field; N], selects: BoundedVec<Option<Select>, N>) {\n    for i in 0..selects.len {\n        let select = selects.get_unchecked(i).unwrap_unchecked();\n        let value_field = extract_property_value_from_selector(serialized_note, select.property_selector);\n\n        // Values are computed ahead of time because circuits evaluate all branches\n        let is_equal = value_field == select.value.to_field();\n        let is_lt = value_field.lt(select.value.to_field());\n\n        if (select.comparator == Comparator.EQ) {\n            assert(is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.NEQ) {\n            assert(!is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LT) {\n            assert(is_lt, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.LTE) {\n            assert(is_lt | is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GT) {\n            assert(!is_lt & !is_equal, \"Mismatch return note field.\");\n        } else if (select.comparator == Comparator.GTE) {\n            assert(!is_lt, \"Mismatch return note field.\");\n        }\n    }\n}\n\nfn check_notes_order<N>(\n    fields_0: [Field; N],\n    fields_1: [Field; N],\n    sorts: BoundedVec<Option<Sort>, N>\n) {\n    for i in 0..sorts.len {\n        let sort = sorts.get_unchecked(i).unwrap_unchecked();\n        let field_0 = extract_property_value_from_selector(fields_0, sort.property_selector);\n        let field_1 = extract_property_value_from_selector(fields_1, sort.property_selector);\n        let eq = field_0 == field_1;\n        let lt = field_0.lt(field_1);\n        if sort.order == SortOrder.ASC {\n            assert(eq | lt, \"Return notes not sorted in ascending order.\");\n        } else if !eq {\n            assert(!lt, \"Return notes not sorted in descending order.\");\n        }\n    }\n}\n\npub fn get_note<Note, N, M>(\n    context: &mut PrivateContext,\n    storage_slot: Field\n) -> Note where Note: NoteInterface<N, M> {\n    let note = get_note_internal(storage_slot);\n\n    check_note_header(*context, storage_slot, note);\n\n    let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n\n    context.push_note_hash_read_request(note_hash_for_read_request);\n    note\n}\n\npub fn get_notes<Note, N, M, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, M, FILTER_ARGS>\n) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> where Note: NoteInterface<N, M> {\n    let opt_notes = get_notes_internal(storage_slot, options);\n\n    constrain_get_notes_internal(context, storage_slot, opt_notes, options)\n}\n\nfn constrain_get_notes_internal<Note, N, M, FILTER_ARGS>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    opt_notes: [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    options: NoteGetterOptions<Note, N, M, FILTER_ARGS>\n) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> where Note: NoteInterface<N, M> {\n    let mut returned_notes = BoundedVec::new();\n\n    // The filter is applied first to avoid pushing note read requests for notes we're not interested in. Note that\n    // while the filter function can technically mutate the contents of the notes (as opposed to simply removing some),\n    // the private kernel will later validate that these note actually exist, so transformations would cause for that\n    // check to fail.\n    let filter_fn = options.filter;\n    let filter_args = options.filter_args;\n    let filtered_notes = filter_fn(opt_notes, filter_args);\n\n    let mut prev_fields = [0; N];\n    for i in 0..options.limit {\n        let opt_note = filtered_notes[i];\n        if opt_note.is_some() {\n            let note = opt_note.unwrap_unchecked();\n            let fields = note.serialize_content();\n            check_note_header(*context, storage_slot, note);\n            check_note_fields(fields, options.selects);\n            if i != 0 {\n                check_notes_order(prev_fields, fields, options.sorts);\n            }\n            prev_fields = fields;\n\n            let note_hash_for_read_request = compute_note_hash_for_read_request(note);\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1410): test to ensure\n            // failure if malicious oracle injects 0 nonce here for a \"pre-existing\" note.\n            context.push_note_hash_read_request(note_hash_for_read_request);\n\n            // The below code is used to collapse a sparse array into one where the values are guaranteed to be at the \n            // front of the array. This is highly useful because the caller knows that the returned array won't have\n            // more than option.limits notes, and can therefore loop over this limit value instead of the entire array,\n            // resulting in a smaller circuit and faster proving times.\n            // We write at returned_notes[num_notes] because num_notes is only advanced when we have a value in \n            // filtered_notes.\n            returned_notes.push(note);\n        };\n    }\n\n    // As long as we only loop till `options.limit` the array will be guaranteed to be at most of length `options.limit`.\n    assert(returned_notes.len() <= options.limit, \"Got more notes than limit.\");\n    // We will however check that nothing else was returned after the limit.\n    for i in options.limit..filtered_notes.len() {\n        assert(filtered_notes[i].is_none(), \"Got more notes than limit.\");\n    }\n\n    assert(returned_notes.len() != 0, \"Cannot return zero notes\");\n\n    returned_notes\n}\n\nunconstrained fn get_note_internal<Note, N, M>(storage_slot: Field) -> Note where Note: NoteInterface<N, M> {\n    let placeholder_note = [Option::none()];\n    let placeholder_fields = [0; GET_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n    oracle::notes::get_notes(\n        storage_slot,\n        0,\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        [],\n        1, // limit\n        0, // offset\n        NoteStatus.ACTIVE,\n        placeholder_note,\n        placeholder_fields,\n        placeholder_note_length\n    )[0].unwrap() // Notice: we don't allow dummies to be returned from get_note (singular).\n}\n\nunconstrained fn get_notes_internal<Note, N, M, FILTER_ARGS>(\n    storage_slot: Field,\n    options: NoteGetterOptions<Note, N, M, FILTER_ARGS>\n) -> [Option<Note>; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL] where Note: NoteInterface<N, M> {\n    // This function simply performs some transformations from NoteGetterOptions into the types required by the oracle.\n\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL];\n    let placeholder_fields = [0; GET_NOTES_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    )\n}\n\nunconstrained pub fn view_notes<Note, N, M>(\n    storage_slot: Field,\n    options: NoteViewerOptions<Note, N, M>\n) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N, M> {\n    let (num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order) = flatten_options(options.selects, options.sorts);\n    let placeholder_opt_notes = [Option::none(); MAX_NOTES_PER_PAGE];\n    let placeholder_fields = [0; VIEW_NOTE_ORACLE_RETURN_LENGTH];\n    let placeholder_note_length = [0; N];\n\n    let notes_array = oracle::notes::get_notes(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        options.limit,\n        options.offset,\n        options.status,\n        placeholder_opt_notes,\n        placeholder_fields,\n        placeholder_note_length\n    );\n\n    let mut notes = BoundedVec::new();\n    for i in 0..notes_array.len() {\n        if notes_array[i].is_some() {\n            notes.push(notes_array[i].unwrap_unchecked());\n        }\n    }\n\n    notes\n}\n\nunconstrained fn flatten_options<Note, N>(\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>\n) -> (u8, [u8; N], [u8; N], [u8; N], [Field; N], [u8; N], [u8; N], [u8; N], [u8; N], [u8; N]) {\n    let mut num_selects = 0;\n    let mut select_by_indexes = [0; N];\n    let mut select_by_offsets = [0; N];\n    let mut select_by_lengths = [0; N];\n    let mut select_values = [0; N];\n    let mut select_comparators = [0; N];\n\n    for i in 0..selects.len {\n        let select = selects.get(i);\n        if select.is_some() {\n            select_by_indexes[num_selects] = select.unwrap_unchecked().property_selector.index;\n            select_by_offsets[num_selects] = select.unwrap_unchecked().property_selector.offset;\n            select_by_lengths[num_selects] = select.unwrap_unchecked().property_selector.length;\n            select_values[num_selects] = select.unwrap_unchecked().value;\n            select_comparators[num_selects] = select.unwrap_unchecked().comparator;\n            num_selects += 1;\n        };\n    }\n\n    let mut sort_by_indexes = [0; N];\n    let mut sort_by_offsets = [0; N];\n    let mut sort_by_lengths = [0; N];\n    let mut sort_order = [0; N];\n    for i in 0..sorts.len {\n        let sort = sorts.get(i);\n        if sort.is_some() {\n            sort_by_indexes[i] = sort.unwrap_unchecked().property_selector.index;\n            sort_by_offsets[i] = sort.unwrap_unchecked().property_selector.offset;\n            sort_by_lengths[i] = sort.unwrap_unchecked().property_selector.length;\n            sort_order[i] = sort.unwrap_unchecked().order;\n        };\n    }\n\n    (\n        num_selects, select_by_indexes, select_by_offsets, select_by_lengths, select_values, select_comparators, sort_by_indexes, sort_by_offsets, sort_by_lengths, sort_order\n    )\n}\n"},"112":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    constants::GENERATOR_INDEX__INNER_NOTE_HASH,\n    hash::{\n    pedersen_hash, compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_inner_note_hash_from_preimage(storage_slot: Field, note_content_hash: Field) -> Field {\n    pedersen_hash(\n        [storage_slot, note_content_hash],\n        GENERATOR_INDEX__INNER_NOTE_HASH\n    )\n}\n\nfn compute_inner_note_hash<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    compute_inner_note_hash_from_preimage(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N, M>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note_with_header.get_header();\n    let (_, inner_nullifier) = note_with_header.compute_note_hash_and_nullifier(context);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\nfn compute_note_hash_for_read_request_from_innter_and_nonce(\n    inner_note_hash: Field,\n    nonce: Field\n) -> Field {\n    // TODO(#1386): This if-else can be nuked once we have nonces injected from public\n    if (nonce == 0) {\n        // If nonce is zero, that means we are reading a public note.\n        inner_note_hash\n    } else {\n        compute_unique_note_hash(nonce, inner_note_hash)\n    }\n}\n\npub fn compute_note_hash_for_read_request<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let inner_note_hash = compute_inner_note_hash(note);\n    let nonce = note.get_header().nonce;\n\n    compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, nonce)\n}\n\npub fn compute_note_hash_for_consumption<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    if (header.note_hash_counter != 0) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        inner_note_hash\n    } else {\n        // If a note is not transient, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the siloed_note_hash which has already been hashed with\n        // nonce and then contract address. This hash will match the existing leaf in the note hash\n        // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        let unique_note_hash = compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, header.nonce);\n        compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n        // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n        // nullification, it is not strictly necessary to silo the note hash before computing\n        // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n        // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n        // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n        // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n        // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n    }\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, N, M, S>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N, M> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n    let unique_note_hash = compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, note_header.nonce);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        let (_, nullifier) = note.compute_note_hash_and_nullifier_without_context();\n        nullifier\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [inner_note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"113":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/lifecycle.nr","source":"use crate::context::{PrivateContext, PublicContext};\nuse crate::note::{\n    note_header::NoteHeader, note_interface::NoteInterface,\n    utils::{compute_inner_note_hash, compute_note_hash_for_consumption}, note_emission::NoteEmission\n};\nuse crate::oracle::notes::{notify_created_note, notify_nullified_note};\n\npub fn create_note<Note, N, M>(\n    context: &mut PrivateContext,\n    storage_slot: Field,\n    note: &mut Note\n) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    let note_hash_counter = context.side_effect_counter;\n\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter };\n    note.set_header(header);\n    let inner_note_hash = compute_inner_note_hash(*note);\n\n    let serialized_note = Note::serialize_content(*note);\n    assert(\n        notify_created_note(\n        storage_slot,\n        Note::get_note_type_id(),\n        serialized_note,\n        inner_note_hash,\n        note_hash_counter\n    )\n        == 0\n    );\n\n    context.push_note_hash(inner_note_hash);\n\n    NoteEmission::new(*note)\n}\n\npub fn create_note_hash_from_public<Note, N, M>(\n    context: &mut PublicContext,\n    storage_slot: Field,\n    note: &mut Note\n) where Note: NoteInterface<N, M> {\n    let contract_address = (*context).this_address();\n    // Public note hashes are transient, but have no side effect counters, so we just need note_hash_counter != 0\n    let header = NoteHeader { contract_address, storage_slot, nonce: 0, note_hash_counter: 1 };\n    note.set_header(header);\n    let inner_note_hash = compute_inner_note_hash(*note);\n\n    context.push_note_hash(inner_note_hash);\n}\n\npub fn destroy_note<Note, N, M>(\n    context: &mut PrivateContext,\n    note: Note\n) where Note: NoteInterface<N, M> {\n    let (note_hash, nullifier) = note.compute_note_hash_and_nullifier(context);\n\n    let note_hash_counter = note.get_header().note_hash_counter;\n    let note_hash_for_consumption = if (note_hash_counter == 0) {\n        // Counter is zero, so we're nullifying a non-transient note and we don't populate the note_hash with real\n        // value (if we did so the `notifyNullifiedNote` oracle would throw).\n        0\n    } else {\n        // A non-zero note hash counter implies that we're nullifying a transient note (i.e. one that has not yet been\n        // persisted in the trees and is instead in the pending new note hashes array). In such a case we populate its\n        // hash with real value to inform the kernel which note we're nullifyng so that it can find it and squash both\n        // the note and the nullifier.\n        note_hash\n    };\n\n    let nullifier_counter = context.side_effect_counter;\n    assert(notify_nullified_note(nullifier, note_hash_for_consumption, nullifier_counter) == 0);\n\n    context.push_nullifier(nullifier, note_hash_for_consumption)\n}\n"},"114":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/note_emission.nr","source":"/**\n * A note emission struct containing the information required for emitting a note.\n * The exact `emit` logic is passed in by the application code\n */\nstruct NoteEmission<Note> {\n    note: Note\n}\n\nimpl<Note> NoteEmission<Note> {\n    pub fn new(note: Note) -> Self {\n        Self { note }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](Self) -> ()) {\n        _emit(self);\n    }\n\n    pub fn discard(self) {}\n}\n\n/**\n * A struct wrapping note emission in `Option<T>`.\n * This is the struct provided to application codes, which can be used to emit\n * only when a note was actually inserted.\n * It is fairly common to have cases where a function conditionally inserts,\n * and this allows us to keep the same API for emission in both cases (e.g. inserting  \n * a change note in a token's transfer function only when there is \"change\" left).\n */\nstruct OuterNoteEmission<Note> {\n    emission: Option<NoteEmission<Note>>,\n}\n\nimpl<Note> OuterNoteEmission<Note> {\n    pub fn new(emission: Option<NoteEmission<Note>>) -> Self {\n        Self { emission }\n    }\n\n    pub fn emit<Env>(self, _emit: fn[Env](NoteEmission<Note>) -> ()) {\n        if self.emission.is_some() {\n            _emit(self.emission.unwrap());\n        }\n    }\n\n    pub fn discard(self) {}\n}\n"},"116":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/note_viewer_options.nr","source":"use std::option::Option;\nuse crate::note::note_getter_options::{PropertySelector, Select, Sort, Comparator, NoteStatus};\nuse dep::protocol_types::traits::ToField;\nuse crate::note::note_interface::NoteInterface;\nuse crate::note::constants::MAX_NOTES_PER_PAGE;\n\n// docs:start:NoteViewerOptions\nstruct NoteViewerOptions<Note, N, M> {\n    selects: BoundedVec<Option<Select>, N>,\n    sorts: BoundedVec<Option<Sort>, N>,\n    limit: u32,\n    offset: u32,\n    status: u8,\n}\n// docs:end:NoteViewerOptions\n\nimpl<Note, N, M> NoteViewerOptions<Note, N, M> {\n    pub fn new() -> NoteViewerOptions<Note, N, M> where Note: NoteInterface<N, M> {\n        NoteViewerOptions {\n            selects: BoundedVec::new(),\n            sorts: BoundedVec::new(),\n            limit: MAX_NOTES_PER_PAGE as u32,\n            offset: 0,\n            status: NoteStatus.ACTIVE\n        }\n    }\n\n    // This method adds a `Select` criterion to the options.\n    // It takes a field_index indicating which field to select,\n    // a value representing the specific value to match in that field, and\n    // a comparator (For possible values of comparators, please see the Comparator enum from note_getter_options)\n    pub fn select<T>(\n        &mut self,\n        property_selector: PropertySelector,\n        value: T,\n        comparator: Option<u8>\n    ) -> Self where T: ToField {\n        self.selects.push(\n            Option::some(\n                Select::new(\n                    property_selector,\n                    value.to_field(),\n                    comparator.unwrap_or(Comparator.EQ)\n                )\n            )\n        );\n        *self\n    }\n\n    pub fn sort(&mut self, property_selector: PropertySelector, order: u8) -> Self {\n        self.sorts.push(Option::some(Sort::new(property_selector, order)));\n        *self\n    }\n\n    pub fn set_limit(&mut self, limit: u32) -> Self {\n        assert(limit <= MAX_NOTES_PER_PAGE as u32);\n        // By requesting that the limit is a constant, we guarantee that it will be possible to loop over it, reducing\n        // gate counts when a limit has been set. This isn't required in unconstrained code, but we still keep this\n        // requirement here for API consistency.\n        assert_constant(limit);\n        self.limit = limit;\n        *self\n    }\n\n    pub fn set_offset(&mut self, offset: u32) -> Self {\n        self.offset = offset;\n        *self\n    }\n\n    // This method sets the status value, which determines whether to retrieve active or nullified notes.\n    pub fn set_status(&mut self, status: u8) -> Self {\n        self.status = status;\n        *self\n    }\n}\n"},"121":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH, MAX_ARGS_LENGTH\n},\n    traits::Hash, hash::{pedersen_hash, compute_siloed_nullifier, sha256_to_field}\n};\nuse crate::oracle::logs_traits::{LensForEncryptedLog, ToBytesForUnencryptedLog};\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    pedersen_hash([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, N, M>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes = (n as Field).to_be_bytes(4);\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    pedersen_hash(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<N>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() <= MAX_ARGS_LENGTH, \"Args length exceeds maximum\");\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..MAX_ARGS_LENGTH {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x11e40f2a780822f7971803048c9a2100579de352e7dadd99981760964da65b57);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"124":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/logs.nr","source":"use dep::protocol_types::{address::AztecAddress, point::Point};\n\n// = 480 + 32 * N bytes\n#[oracle(emitEncryptedNoteLog)]\nunconstrained fn emit_encrypted_note_log_oracle<M>(_note_hash_counter: u32, _encrypted_note: [u8; M], _counter: u32) {}\n\nunconstrained pub fn emit_encrypted_note_log<M>(\n    note_hash_counter: u32,\n    encrypted_note: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_note_log_oracle(note_hash_counter, encrypted_note, counter)\n}\n\n#[oracle(emitEncryptedEventLog)]\nunconstrained fn emit_encrypted_event_log_oracle<M>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _encrypted_event: [u8; M],\n    _counter: u32\n) {}\n\nunconstrained pub fn emit_encrypted_event_log<M>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    encrypted_event: [u8; M],\n    counter: u32\n) {\n    emit_encrypted_event_log_oracle(contract_address, randomness, encrypted_event, counter)\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedNoteLog)]\nunconstrained fn compute_encrypted_note_log_oracle<N, M>(\n    _contract_address: AztecAddress,\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_note_log<N, M>(\n    contract_address: AztecAddress,\n    storage_slot: Field,\n    note_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_note_log_oracle(\n        contract_address,\n        storage_slot,\n        note_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        preimage\n    )\n}\n\n// = 480 + 32 * N bytes\n#[oracle(computeEncryptedEventLog)]\nunconstrained fn compute_encrypted_event_log_oracle<N, M>(\n    _contract_address: AztecAddress,\n    _randomness: Field,\n    _event_type_id: Field,\n    _ovsk_app: Field,\n    _ovpk_m: Point,\n    _ivpk_m: Point,\n    _preimage: [Field; N]\n) -> [u8; M] {}\n\nunconstrained pub fn compute_encrypted_event_log<N, M>(\n    contract_address: AztecAddress,\n    randomness: Field,\n    event_type_id: Field,\n    ovsk_app: Field,\n    ovpk_m: Point,\n    ivpk_m: Point,\n    preimage: [Field; N]\n) -> [u8; M] {\n    compute_encrypted_event_log_oracle(\n        contract_address,\n        randomness,\n        event_type_id,\n        ovsk_app,\n        ovpk_m,\n        ivpk_m,\n        preimage\n    )\n}\n\n#[oracle(emitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_oracle_private<T>(_contract_address: AztecAddress, _message: T, _counter: u32) -> Field {}\n\nunconstrained pub fn emit_unencrypted_log_private_internal<T>(\n    contract_address: AztecAddress,\n    message: T,\n    counter: u32\n) -> Field {\n    emit_unencrypted_log_oracle_private(contract_address, message, counter)\n}\n\n#[oracle(emitContractClassUnencryptedLog)]\nunconstrained fn emit_contract_class_unencrypted_log_private<N>(contract_address: AztecAddress, message: [Field; N], counter: u32) -> Field {}\n\nunconstrained pub fn emit_contract_class_unencrypted_log_private_internal<N>(contract_address: AztecAddress, message: [Field; N], counter: u32) -> Field {\n    emit_contract_class_unencrypted_log_private(contract_address, message, counter)\n}\n"},"125":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<N>(_args: [Field; N]) -> Field {}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n/// - Pack arguments (array version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments_array<N>(args: [Field; N]) -> Field {\n    pack_arguments_array_oracle(args)\n}\n\n/// - Pack arguments (slice version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments(args: [Field]) -> Field {\n    pack_arguments_oracle(args)\n}\n\n"},"127":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle<N>(_returns: [Field]) -> Field {}\n\nunconstrained pub fn pack_returns(returns: [Field]) {\n    let _unused = pack_returns_oracle(returns);\n}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<N>(_return_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn unpack_returns<N>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n"},"128":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, hash::pedersen_hash,\n    public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage, traits::{Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _leaf_slot: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, leaf_slot: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, leaf_slot);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"129":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub fn get_key_validation_request(pk_m_hash: Field, key_index: Field) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n\n"},"132":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/storage.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<N>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field\n) -> [Field; N] {}\n\nunconstrained pub fn raw_storage_read<N>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> [Field; N] {\n    storage_read_oracle(address.to_field(), storage_slot, block_number as Field, N)\n}\n\nunconstrained pub fn storage_read<T, N>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> T where T: Deserialize<N> {\n    T::deserialize(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::address::AztecAddress;\n\n    use std::test::OracleMock;\n    use crate::test::mocks::mock_struct::MockStruct;\n\n    global address = AztecAddress::from_field(29);\n    global slot = 7;\n    global block_number = 17;\n\n    #[test]\n    fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"},"133":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/unsafe_rand.nr","source":"#[oracle(getRandomField)]\nunconstrained fn rand_oracle() -> Field {}\n\n// Called `unsafe_rand` because we do not constrain in circuit that we are dealing with an actual random value.\n// Instead we just trust our PXE.\nunconstrained pub fn unsafe_rand() -> Field {\n    rand_oracle()\n}\n"},"135":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n"},"136":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/keys.nr","source":"use crate::keys::PublicKeys;\nuse dep::protocol_types::{address::{AztecAddress, PartialAddress}, point::Point};\n\n#[oracle(getPublicKeysAndPartialAddress)]\nunconstrained fn get_public_keys_and_partial_address_oracle(_address: AztecAddress) -> [Field; 13] {}\n\nunconstrained fn get_public_keys_and_partial_address_oracle_wrapper(address: AztecAddress) -> [Field; 13] {\n    get_public_keys_and_partial_address_oracle(address)\n}\n\nfn get_public_keys_and_partial_address(address: AztecAddress) -> (PublicKeys, PartialAddress) {\n    let result = get_public_keys_and_partial_address_oracle_wrapper(address);\n\n    let keys = PublicKeys {\n        npk_m: Point::new(result[0], result[1], result[2] as bool),\n        ivpk_m: Point::new(result[3], result[4], result[5] as bool),\n        ovpk_m: Point::new(result[6], result[7], result[8] as bool),\n        tpk_m: Point::new(result[9], result[10], result[11] as bool)\n    };\n\n    let partial_address = PartialAddress::from_field(result[12]);\n\n    (keys, partial_address)\n}\n"},"137":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/encryption.nr","source":"#[oracle(aes128Encrypt)]\npub fn aes128_encrypt_oracle<N, M>(input: [u8; N], iv: [u8; 16], key: [u8; 16]) -> [u8; M] {}\n\n// AES 128 CBC with PKCS7 is padding to multiples of 16 bytes so M has to be a multiple of 16!\n// (e.g. from 65 bytes long input you get 80 bytes long output and M has to be set to `80`)\nunconstrained pub fn aes128_encrypt<N, M>(input: [u8; N], iv: [u8; 16], key: [u8; 16]) -> [u8; M] {\n    aes128_encrypt_oracle(input, iv, key)\n}\n"},"138":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/notes.nr","source":"use crate::note::{note_header::NoteHeader, note_interface::NoteInterface};\n\nuse dep::protocol_types::{address::AztecAddress, utils::arr_copy_slice};\n\n#[oracle(notifyCreatedNote)]\nunconstrained fn notify_created_note_oracle<N>(\n    _storage_slot: Field,\n    _note_type_id: Field,\n    _serialized_note: [Field; N],\n    _inner_note_hash: Field,\n    _counter: u32\n) -> Field {}\n\nunconstrained pub fn notify_created_note<N>(\n    storage_slot: Field,\n    note_type_id: Field,\n    serialized_note: [Field; N],\n    inner_note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_created_note_oracle(\n        storage_slot,\n        note_type_id,\n        serialized_note,\n        inner_note_hash,\n        counter\n    )\n}\n\n#[oracle(notifyNullifiedNote)]\nunconstrained fn notify_nullified_note_oracle<N>(_nullifier: Field, _inner_note_hash: Field, _counter: u32) -> Field {}\n\nunconstrained pub fn notify_nullified_note<N>(\n    nullifier: Field,\n    inner_note_hash: Field,\n    counter: u32\n) -> Field {\n    notify_nullified_note_oracle(nullifier, inner_note_hash, counter)\n}\n\n#[oracle(getNotes)]\nunconstrained fn get_notes_oracle<N, S>(\n    _storage_slot: Field,\n    _num_selects: u8,\n    _select_by_indexes: [u8; N],\n    _select_by_offsets: [u8; N],\n    _select_by_lengths: [u8; N],\n    _select_values: [Field; N],\n    _select_comparators: [u8; N],\n    _sort_by_indexes: [u8; N],\n    _sort_by_offsets: [u8; N],\n    _sort_by_lengths: [u8; N],\n    _sort_order: [u8; N],\n    _limit: u32,\n    _offset: u32,\n    _status: u8,\n    _return_size: u32,\n    _placeholder_fields: [Field; S]\n) -> [Field; S] {}\n\nunconstrained fn get_notes_oracle_wrapper<N, S>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; N],\n    select_by_offsets: [u8; N],\n    select_by_lengths: [u8; N],\n    select_values: [Field; N],\n    select_comparators: [u8; N],\n    sort_by_indexes: [u8; N],\n    sort_by_offsets: [u8; N],\n    sort_by_lengths: [u8; N],\n    sort_order: [u8; N],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_fields: [Field; S]\n) -> [Field; S] {\n    let return_size = placeholder_fields.len() as u32;\n    get_notes_oracle(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        return_size,\n        placeholder_fields\n    )\n}\n\nunconstrained pub fn get_notes<Note, N, NB, M, S, NS>(\n    storage_slot: Field,\n    num_selects: u8,\n    select_by_indexes: [u8; M],\n    select_by_offsets: [u8; M],\n    select_by_lengths: [u8; M],\n    select_values: [Field; M],\n    select_comparators: [u8; M],\n    sort_by_indexes: [u8; M],\n    sort_by_offsets: [u8; M],\n    sort_by_lengths: [u8; M],\n    sort_order: [u8; M],\n    limit: u32,\n    offset: u32,\n    status: u8,\n    mut placeholder_opt_notes: [Option<Note>; S], // TODO: Remove it and use `limit` to initialize the note array.\n    placeholder_fields: [Field; NS], // TODO: Remove it and use `limit` to initialize the note array.\n    _placeholder_note_length: [Field; N] // Turbofish hack? Compiler breaks calculating read_offset unless we add this parameter\n) -> [Option<Note>; S] where Note: NoteInterface<N, NB> {\n    let fields = get_notes_oracle_wrapper(\n        storage_slot,\n        num_selects,\n        select_by_indexes,\n        select_by_offsets,\n        select_by_lengths,\n        select_values,\n        select_comparators,\n        sort_by_indexes,\n        sort_by_offsets,\n        sort_by_lengths,\n        sort_order,\n        limit,\n        offset,\n        status,\n        placeholder_fields\n    );\n    let num_notes = fields[0] as u32;\n    let contract_address = AztecAddress::from_field(fields[1]);\n    for i in 0..placeholder_opt_notes.len() {\n        if i < num_notes {\n            // lengths named as per typescript.\n            let return_header_length: u32 = 2; // num_notes & contract_address.\n            let extra_preimage_length: u32 = 2; // nonce & note_hash_counter.\n            let read_offset: u32 = return_header_length + i * (N + extra_preimage_length);\n            let nonce = fields[read_offset];\n            let note_hash_counter = fields[read_offset + 1] as u32;\n            let header = NoteHeader { contract_address, nonce, storage_slot, note_hash_counter };\n            let serialized_note = arr_copy_slice(fields, [0; N], read_offset + 2);\n            let mut note = Note::deserialize_content(serialized_note);\n            note.set_header(header);\n            placeholder_opt_notes[i] = Option::some(note);\n        };\n    }\n    placeholder_opt_notes\n}\n\n// Only ever use this in private!\n#[oracle(checkNullifierExists)]\nunconstrained fn check_nullifier_exists_oracle(_inner_nullifier: Field) -> Field {}\n\n// Only ever use this in private!\nunconstrained pub fn check_nullifier_exists(inner_nullifier: Field) -> bool {\n    check_nullifier_exists_oracle(inner_nullifier) == 1\n}\n"},"139":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, utils::arr_copy_slice,\n    constants::CONTRACT_INSTANCE_LENGTH, utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"140":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{\n    abis::{\n    function_selector::FunctionSelector, public_call_stack_item::PublicCallStackItem,\n    function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs,\n    call_context::CallContext, read_request::ReadRequest, note_hash::NoteHash, nullifier::Nullifier,\n    log_hash::LogHash, global_variables::GlobalVariables, gas::Gas\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    messaging::l2_to_l1_message::L2ToL1Message, header::Header, address::AztecAddress,\n    utils::reader::Reader,\n    constants::{\n    MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n}\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn parse_public_call_stack_item_from_oracle(fields: [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH]) -> PublicCallStackItem {\n    let mut reader = Reader::new(fields);\n\n    // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n    // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n    // WARNING: if updating, see comment in public_call_stack_item.ts's PublicCallStackItem.hash()\n    let item = PublicCallStackItem {\n        contract_address: AztecAddress::from_field(reader.read()),\n        function_data: FunctionData { selector: FunctionSelector::from_field(reader.read()), is_private: false },\n        public_inputs: PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            start_side_effect_counter: reader.read_u32(),\n            args_hash: reader.read(),\n            returns_hash: 0,\n            note_hash_read_requests: [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n            l1_to_l2_msg_read_requests: [ReadRequest::empty(); MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL],\n            contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n            contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            note_hashes: [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL],\n            nullifiers: [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL],\n            l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL],\n            end_side_effect_counter: 0,\n            unencrypted_logs_hashes: [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL],\n            historical_header: Header::empty(),\n            global_variables: GlobalVariables::empty(),\n            prover_address: AztecAddress::zero(),\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty(),\n            transaction_fee: 0\n        },\n        is_execution_request: true\n    };\n    reader.finish();\n\n    item\n}\n"},"143":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_l1_to_l2_membership_witness.nr","source":"use dep::protocol_types::{address::AztecAddress};\n\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: u64 = 17;\n\n// Obtains membership witness (index and sibling path) for a message in the L1 to L2 message tree.\n#[oracle(getL1ToL2MembershipWitness)]\nunconstrained fn get_l1_to_l2_membership_witness_oracle(\n    _contract_address: AztecAddress,\n    _message_hash: Field,\n    _secret: Field\n) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {}\n\nunconstrained pub fn get_l1_to_l2_membership_witness(\n    contract_address: AztecAddress,\n    message_hash: Field,\n    secret: Field\n) -> [Field; L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH] {\n    get_l1_to_l2_membership_witness_oracle(contract_address, message_hash, secret)\n}\n"},"153":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/private_set.nr","source":"use dep::protocol_types::{constants::MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, abis::read_request::ReadRequest};\nuse crate::context::{PrivateContext, PublicContext, UnconstrainedContext};\nuse crate::note::{\n    constants::MAX_NOTES_PER_PAGE, lifecycle::{create_note, create_note_hash_from_public, destroy_note},\n    note_getter::{get_notes, view_notes}, note_getter_options::NoteGetterOptions,\n    note_header::NoteHeader, note_interface::NoteInterface, note_viewer_options::NoteViewerOptions,\n    utils::compute_note_hash_for_read_request, note_emission::NoteEmission\n};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateSet<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateSet<T, Context> {}\n\nimpl<Note, Context> PrivateSet<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PrivateSet { context, storage_slot }\n    }\n    // docs:end:new\n}\n\nimpl<Note> PrivateSet<Note, &mut PublicContext> {\n    // docs:start:insert_from_public\n    pub fn insert_from_public<N, M>(self, note: &mut Note) where Note: NoteInterface<N, M> {\n        create_note_hash_from_public(self.context, self.storage_slot, note);\n    }\n    // docs:end:insert_from_public\n}\n\nimpl<Note> PrivateSet<Note, &mut PrivateContext> {\n    // docs:start:insert\n    pub fn insert<N, M>(self, note: &mut Note) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:insert\n\n    // docs:start:remove\n    pub fn remove<N, M>(self, note: Note) where Note: NoteInterface<N, M> {\n        let note_hash = compute_note_hash_for_read_request(note);\n        let has_been_read = self.context.note_hash_read_requests.any(|r: ReadRequest| r.value == note_hash);\n        assert(has_been_read, \"Can only remove a note that has been read from the set.\");\n\n        destroy_note(self.context, note);\n    }\n    // docs:end:remove\n\n    // docs:start:get_notes\n    pub fn get_notes<N, M, FILTER_ARGS>(\n        self,\n        options: NoteGetterOptions<Note, N, M, FILTER_ARGS>\n    ) -> BoundedVec<Note, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> where Note: NoteInterface<N, M> {\n        get_notes(self.context, self.storage_slot, options)\n    }\n    // docs:end:get_notes\n}\n\nimpl<Note> PrivateSet<Note, UnconstrainedContext> {\n    // docs:start:view_notes\n    unconstrained pub fn view_notes<N, M>(\n        self,\n        options: NoteViewerOptions<Note, N, M>\n    ) -> BoundedVec<Note, MAX_NOTES_PER_PAGE> where Note: NoteInterface<N, M> {\n        view_notes(self.storage_slot, options)\n    }\n    // docs:end:view_notes\n}\n"},"155":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_delay_change.nr","source":"use dep::protocol_types::traits::{Serialize, Deserialize, FromField, ToField};\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to store the minimum delay with which a ScheduledValueChange object can\n// schedule a change.\n// This delay is initally equal to INITIAL_DELAY, and can be safely mutated to any other value over time. This mutation \n// is performed via `schedule_change` in order to satisfy ScheduleValueChange constraints: if e.g. we allowed for the \n// delay to be decreased immediately then it'd be possible for the state variable to schedule a value change with a \n// reduced delay, invalidating prior private reads.\nstruct ScheduledDelayChange<INITIAL_DELAY> {\n    // Both pre and post are stored in public storage, so by default they are zeroed. By wrapping them in an Option, \n    // they default to Option::none(), which we detect and replace with INITIAL_DELAY. The end result is that a\n    // ScheduledDelayChange that has not been initialized has a delay equal to INITIAL_DELAY, which is the desired\n    // effect. Once initialized, the Option will never be none again.\n    pre: Option<u32>,\n    post: Option<u32>,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n    // The _dummy variable forces INITIAL_DELAY to be interpreted as a numeric value. This is a workaround to\n    // https://github.com/noir-lang/noir/issues/4633. Remove once resolved.\n    _dummy: [Field; INITIAL_DELAY],\n}\n\nimpl<INITIAL_DELAY> ScheduledDelayChange<INITIAL_DELAY> {\n    pub fn new(pre: Option<u32>, post: Option<u32>, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change, _dummy: [0; INITIAL_DELAY] }\n    }\n\n    /// Returns the current value of the delay stored in the data structure.\n    /// This function only returns a meaningful value when called in public with the current block number - for\n    /// historical private reads use `get_effective_minimum_delay_at` instead.\n    pub fn get_current(self, current_block_number: u32) -> u32 {\n        // The post value becomes the current one at the block of change, so any transaction that is included in the\n        // block of change will use the post value.\n\n        if current_block_number < self.block_of_change {\n            self.pre.unwrap_or(INITIAL_DELAY)\n        } else {\n            self.post.unwrap_or(INITIAL_DELAY)\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change delay and the block at which it will become the current\n    /// delay. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (u32, u32) {\n        (self.post.unwrap_or(INITIAL_DELAY), self.block_of_change)\n    }\n\n    /// Mutates the delay change by scheduling a change at the current block number. This function is only meaningful\n    /// when called in public with the current block number.\n    /// The block at which the new delay will become effective is determined automatically:\n    ///  - when increasing the delay, the change is effective immediately\n    ///  - when reducing the delay, the change will take effect after a delay equal to the difference between old and\n    ///    new delay. For example, if reducing from 3 days to 1 day, the reduction will be scheduled to happen after 2\n    ///    days.\n    pub fn schedule_change(&mut self, new: u32, current_block_number: u32) {\n        let current = self.get_current(current_block_number);\n\n        // When changing the delay value we must ensure that it is not possible to produce a value change with a delay\n        // shorter than the current one.\n        let blocks_until_change = if new > current {\n            // Increasing the delay value can therefore be done immediately: this does not invalidate prior contraints\n            // about how quickly a value might be changed (indeed it strengthens them).\n            0\n        } else {\n            // Decreasing the delay requires waiting for the difference between current and new delay in order to ensure\n            // that overall the current delay is respected.\n            //\n            //      current                    delay              earliest value block of change\n            //       block                 block of change         if delay remained unchanged\n            //  =======N=========================|================================X=================>\n            //         ^                         ^                                ^\n            //         |-------------------------|--------------------------------|\n            //         |   blocks until change               new delay            |\n            //         ------------------------------------------------------------\n            //                            current delay\n            current - new\n        };\n\n        self.pre = Option::some(current);\n        self.post = Option::some(new);\n        self.block_of_change = current_block_number + blocks_until_change;\n    }\n\n    /// Returns the minimum delay before a value might mutate due to a scheduled change, from the perspective of some\n    /// historical block number. It only returns a meaningful value when called in private with historical blocks. This \n    /// function can be used alongside `ScheduledValueChange.get_block_horizon` to properly constrain the\n    /// `max_block_number` transaction property when reading mutable shared state.\n    /// This value typically equals the current delay at the block following the historical one (the earliest one in\n    /// which a value change could be scheduled), but it also considers scenarios in which a delay reduction is \n    /// scheduled to happen in the near future, resulting in a way to schedule a change with an overall delay lower than\n    /// the current one.\n    pub fn get_effective_minimum_delay_at(self, historical_block_number: u32) -> u32 {\n        if self.block_of_change <= historical_block_number {\n            // If no delay changes were scheduled, then the delay value at the historical block (post) is guaranteed to\n            // hold due to how further delay changes would be scheduled by `schedule_change`.\n            self.post.unwrap_or(INITIAL_DELAY)\n        } else {\n            // If a change is scheduled, then the effective delay might be lower than the current one (pre). At the\n            // block of change the current delay will be the scheduled one, with an overall delay from the historical\n            // block number equal to the number of blocks until the change plus the new delay. If this value is lower\n            // than the current delay, then that is the effective minimum delay.\n            //\n            //       historical\n            //         block                  delay                  actual earliest value\n            //           v                block of change              block of change\n            //  =========NS=====================|=============================X===========Y=====>\n            //            ^                     ^                             ^           ^\n            //     earliest block in            |                             |           |\n            //   which to schedule change       |                             |           |\n            //           |                      |                             |           |\n            //           |----------------------|------------------------------           |\n            //           |         blocks                  new delay                      |\n            //           |      until change                                              |\n            //           |                                                                |\n            //           |----------------------------------------------------------------|\n            //                        current delay at the earliest block in \n            //                             which to scheduled value change\n\n            let blocks_until_change = self.block_of_change - (historical_block_number + 1);\n\n            min(\n                self.pre.unwrap_or(INITIAL_DELAY),\n                blocks_until_change + self.post.unwrap_or(INITIAL_DELAY)\n            )\n        }\n    }\n}\n\nimpl<INITIAL_DELAY> Serialize<1> for ScheduledDelayChange<INITIAL_DELAY> {\n    fn serialize(self) -> [Field; 1] {\n        // We pack all three u32 values into a single U128, which is made up of two u64 limbs.\n        // Low limb: [ pre_inner: u32 | post_inner: u32 ]\n        // High limb: [ empty | pre_is_some: u8 |  post_is_some: u8 | block_of_change: u32 ]\n\n        let lo = ((self.pre.unwrap_unchecked() as u64) * (1 << 32))\n            + (self.post.unwrap_unchecked() as u64);\n\n        let hi = (self.pre.is_some() as u64) * (1 << 33) \n            + (self.post.is_some() as u64 * (1 << 32)) \n            + self.block_of_change as u64;\n\n        let packed = U128::from_u64s_le(lo, hi);\n\n        [packed.to_integer()]\n    }\n}\n\nimpl<INITIAL_DELAY> Deserialize<1> for ScheduledDelayChange<INITIAL_DELAY> {\n    fn deserialize(input: [Field; 1]) -> Self {\n        let packed = U128::from_integer(input[0]);\n\n        // We use division and modulo to clear the bits that correspond to other values when unpacking.\n\n        let pre_is_some = ((packed.hi as u64) / (1 << 33)) as bool;\n        let pre_inner = ((packed.lo as u64) / (1 << 32)) as u32;\n\n        let post_is_some = (((packed.hi as u64) / (1 << 32)) % (1 << 1)) as bool;\n        let post_inner = ((packed.lo as u64) % (1 << 32)) as u32;\n\n        let block_of_change = ((packed.hi as u64) % (1 << 32)) as u32;\n\n        Self {\n            pre: if pre_is_some { Option::some(pre_inner) } else { Option::none() },\n            post: if post_is_some { Option::some(post_inner) } else { Option::none() },\n            block_of_change,\n            _dummy: [0; INITIAL_DELAY],\n        }\n    }\n}\n\nimpl<INITIAL_DELAY> Eq for ScheduledDelayChange<INITIAL_DELAY> {\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre) & (self.post == other.post) & (self.block_of_change == other.block_of_change)\n    }\n}\n"},"157":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/shared_mutable_private_getter.nr","source":"use dep::protocol_types::{\n    hash::{pedersen_hash, poseidon2_hash}, traits::{FromField, ToField}, address::AztecAddress,\n    header::Header\n};\n\nuse crate::context::PrivateContext;\nuse crate::state_vars::{\n    storage::Storage,\n    shared_mutable::{\n    shared_mutable::SharedMutable, scheduled_delay_change::ScheduledDelayChange,\n    scheduled_value_change::ScheduledValueChange\n}\n};\n\nstruct SharedMutablePrivateGetter<T, INITIAL_DELAY> {\n    context: &mut PrivateContext,\n    // The contract address of the contract we want to read from\n    other_contract_address: AztecAddress,\n    // The storage slot where the SharedMutable is stored on the other contract\n    storage_slot: Field,\n    // The _dummy variable forces INITIAL_DELAY to be interpreted as a numberic value. This is a workaround to\n    // https://github.com/noir-lang/noir/issues/4633. Remove once resolved.\n    _dummy: [Field; INITIAL_DELAY],\n}\n\n// We have this as a view-only interface to reading Shared Mutables in other contracts.\n// Currently the Shared Mutable does not support this. We can adapt SharedMutable at a later date\nimpl<T, INITIAL_DELAY> SharedMutablePrivateGetter<T, INITIAL_DELAY> {\n    pub fn new(\n        context: &mut PrivateContext,\n        other_contract_address: AztecAddress,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        assert(other_contract_address.to_field() != 0, \"Other contract address cannot be 0\");\n        Self { context, other_contract_address, storage_slot, _dummy: [0; INITIAL_DELAY] }\n    }\n\n    pub fn get_value_in_private(self, header: Header) -> T where T: FromField + ToField + Eq {\n        // We create a dummy SharedMutable state variable so that we can reuse its historical_read_from_public_storage\n        // method, greatly reducing code duplication. \n        let dummy: SharedMutable<T, INITIAL_DELAY, ()> = SharedMutable::new((), self.storage_slot);\n        let (value_change, delay_change, historical_block_number) = dummy.historical_read_from_public_storage(header, self.other_contract_address);\n\n        let effective_minimum_delay = delay_change.get_effective_minimum_delay_at(historical_block_number);\n        let block_horizon = value_change.get_block_horizon(historical_block_number, effective_minimum_delay);\n\n        // If our context has the same header as the one we pass in via the parameter, we are trying to read the \"current\" value\n        // and thus need to set the tx max block number below. If the context header is not the same as the one we pass in, this means\n        // we are trying to read a historical value and thus have no constraint on the max block number that this transaction can be included in.\n        if (self.context.historical_header.global_variables.block_number.eq(header.global_variables.block_number)) {\n            self.context.set_tx_max_block_number(block_horizon);\n        }\n\n        value_change.get_current_at(historical_block_number)\n    }\n}\n"},"159":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_value_change.nr","source":"use dep::protocol_types::traits::{Serialize, Deserialize, FromField, ToField};\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to represent a value that changes from `pre` to `post` at some block\n// called the `block_of_change`. The value can only be made to change by scheduling a change event at some future block\n// of change after some minimum delay measured in blocks has elapsed. This means that at any given block number we know\n// both the current value and the smallest block number at which the value might change - this is called the\n// 'block horizon'.\nstruct ScheduledValueChange<T> {\n    pre: T,\n    post: T,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n}\n\nimpl<T> ScheduledValueChange<T> {\n    pub fn new(pre: T, post: T, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the value stored in the data structure at a given block. This function can be called both in public\n    /// (where `block_number` is simply the current block number, i.e. the number of the block in which the current\n    /// transaction will be included) and in private (where `block_number` is the historical block number that is used\n    /// to construct the proof).\n    /// Reading in private is only safe if the transaction's `max_block_number` property is set to a value lower or\n    /// equal to the block horizon (see `get_block_horizon()`).\n    pub fn get_current_at(self, block_number: u32) -> T {\n        // The post value becomes the current one at the block of change. This means different things in each realm:\n        // - in public, any transaction that is included in the block of change will use the post value\n        // - in private, any transaction that includes the block of change as part of the historical state will use the\n        //   post value (barring any follow-up changes)\n\n        if block_number < self.block_of_change {\n            self.pre\n        } else {\n            self.post\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change value and the block at which it will become the current\n    /// value. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (T, u32) {\n        (self.post, self.block_of_change)\n    }\n\n    /// Returns the largest block number at which the value returned by `get_current_at` is known to remain the current\n    /// value. This value is only meaningful in private when constructing a proof at some `historical_block_number`,\n    /// since due to its asynchronous nature private execution cannot know about any later scheduled changes.\n    /// The caller of this function must know how quickly the value can change due to a scheduled change in the form of\n    /// `minimum_delay`. If the delay itself is immutable, then this is just its duration. If the delay is mutable\n    /// however, then this value is the 'effective minimum delay' (obtained by calling\n    /// `ScheduledDelayChange.get_effective_minimum_delay_at`), which equals the minimum number of blocks that need to\n    /// elapse from the next block until the value changes, regardless of further delay changes.\n    /// The value returned by `get_current_at` in private when called with a historical block number is only safe to use\n    /// if the transaction's `max_block_number` property is set to a value lower or equal to the block horizon computed\n    /// using the same historical block number.\n    pub fn get_block_horizon(self, historical_block_number: u32, minimum_delay: u32) -> u32 {\n        // The block horizon is the very last block in which the current value is known. Any block past the horizon\n        // (i.e. with a block number larger than the block horizon) may have a different current value. Reading the\n        // current value in private typically requires constraining the maximum valid block number to be equal to the\n        // block horizon.\n\n        if historical_block_number >= self.block_of_change {\n            // Once the block of change has been mined, the current value (post) will not change unless a new value\n            // change is scheduled. This did not happen at the historical block number (or else it would not be\n            // greater or equal to the block of change), and therefore could only happen after the historical block\n            // number. The earliest would be the immediate next block, and so the smallest possible next block of change\n            // equals `historical_block_number + 1 + minimum_delay`. Our block horizon is simply the previous block to\n            // that one.\n            //\n            //      block of      historical\n            //       change         block            block horizon\n            //   =======|=============N===================H===========>\n            //                         ^                   ^\n            //                         ---------------------\n            //                             minimum delay\n\n            historical_block_number + minimum_delay\n        } else {\n            // If the block of change has not yet been mined however, then there are two possible scenarios.\n            //   a) It could be so far into the future that the block horizon is actually determined by the minimum\n            //      delay, because a new change could be scheduled and take place _before_ the currently scheduled one.\n            //      This is similar to the scenario where the block of change is in the past: the time horizon is the\n            //      block prior to the earliest one in which a new block of change might land.\n            //\n            //         historical\n            //           block                        block horizon      block of change\n            //        =====N=================================H=================|=========>\n            //              ^                                 ^\n            //              |                                 |\n            //              -----------------------------------\n            //                        minimum delay\n            //\n            //   b) It could be fewer than `minimum_delay` blocks away from the historical block number, in which case\n            //      the block of change would become the limiting factor for the time horizon, which would equal the\n            //      block right before the block of change (since by definition the value changes at the block of\n            //      change).\n            //\n            //           historical                         block horizon\n            //             block     block of change       if not scheduled\n            //        =======N=============|===================H=================>\n            //                ^           ^                     ^\n            //                |     actual horizon              |\n            //                -----------------------------------\n            //                          minimum delay\n            //\n            // Note that the current implementation does not allow the caller to set the block of change to an arbitrary\n            // value, and therefore scenario a) is not currently possible. However implementing #5501 would allow for\n            // this to happen.\n\n            // Because historical_block_number < self.block_of_change, then block_of_change > 0 and we can safely\n            // subtract 1.\n            min(\n                self.block_of_change - 1,\n                historical_block_number + minimum_delay\n            )\n        }\n    }\n\n    /// Mutates the value by scheduling a change at the current block number. This function is only meaningful when\n    /// called in public with the current block number.\n    pub fn schedule_change(\n        &mut self,\n        new_value: T,\n        current_block_number: u32,\n        minimum_delay: u32,\n        block_of_change: u32\n    ) {\n        assert(block_of_change >= current_block_number + minimum_delay);\n\n        self.pre = self.get_current_at(current_block_number);\n        self.post = new_value;\n        self.block_of_change = block_of_change;\n    }\n}\n\nimpl<T> Serialize<3> for ScheduledValueChange<T> {\n    fn serialize(self) -> [Field; 3] where T: ToField {\n        [self.pre.to_field(), self.post.to_field(), self.block_of_change.to_field()]\n    }\n}\n\nimpl<T> Deserialize<3> for ScheduledValueChange<T> {\n  fn deserialize(input: [Field; 3]) -> Self  where T: FromField {\n    Self {\n        pre: FromField::from_field(input[0]),\n        post: FromField::from_field(input[1]),\n        block_of_change: FromField::from_field(input[2]),\n    }\n  }\n}\n\nimpl<T> Eq for ScheduledValueChange<T>  {\n    fn eq(self, other: Self) -> bool where T: Eq {\n        (self.pre == other.pre) & (self.post == other.post) & (self.block_of_change == other.block_of_change)\n    }\n}\n"},"160":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/shared_mutable.nr","source":"use dep::protocol_types::{\n    hash::{pedersen_hash, poseidon2_hash}, header::Header, address::AztecAddress,\n    traits::{FromField, ToField}\n};\n\nuse crate::context::{PrivateContext, PublicContext};\nuse crate::state_vars::{\n    storage::Storage,\n    shared_mutable::{scheduled_value_change::ScheduledValueChange, scheduled_delay_change::ScheduledDelayChange}\n};\nuse crate::oracle::storage::storage_read;\nuse dep::std::unsafe::zeroed;\n\nmod test;\n\nstruct SharedMutable<T, INITIAL_DELAY, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n\n// This will make the Aztec macros require that T implements the Serialize<N> trait, and allocate N storage slots to\n// this state variable. This is incorrect, since what we actually store is:\n//  - a ScheduledValueChange<T>, which requires 1 + 2 * M storage slots, where M is the serialization length of T\n//  - a ScheduledDelayChange, which requires another storage slot\n//\n// TODO https://github.com/AztecProtocol/aztec-packages/issues/5736: change the storage allocation scheme so that we\n// can actually use it here\nimpl<T, INITIAL_DELAY, Context> Storage<T> for SharedMutable<T, INITIAL_DELAY, Context> {}\n\n// TODO: extract into a utils module once  we can do arithmetic on generics, i.e. https://github.com/noir-lang/noir/issues/4784\nfn concat_arrays<N, M, O>(arr_n: [Field; N], arr_m: [Field; M]) -> [Field; O] {\n    assert_eq(N + M, O);\n    let mut out: [Field; O] = [0; O];\n    for i in 0..N {\n        out[i] = arr_n[i];\n    }\n    for i in 0..M {\n        out[N+i] = arr_m[i];\n    }\n    out\n}\n\n// SharedMutable<T> stores a value of type T that is:\n//  - publicly known (i.e. unencrypted)\n//  - mutable in public\n//  - readable in private with no contention (i.e. multiple parties can all read the same value without blocking one\n//    another nor needing to coordinate)\n// This is famously a hard problem to solve. SharedMutable makes it work by introducing a delay to public mutation:\n// the value is not changed immediately but rather a value change is scheduled to happen in the future after some delay\n// measured in blocks. Reads in private are only valid as long as they are included in a block not too far into the\n// future, so that they can guarantee the value will not have possibly changed by then (because of the delay).\n// The delay for changing a value is initially equal to INITIAL_DELAY, but can be changed by calling\n// `schedule_delay_change`.\nimpl<T, INITIAL_DELAY, Context> SharedMutable<T, INITIAL_DELAY, Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n\n    fn hash_scheduled_data(\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>\n    ) -> Field where T: ToField {\n        // TODO(#5491 and https://github.com/noir-lang/noir/issues/4784): update this so that we don't need to rely on\n        // ScheduledValueChange serializing to 3 and ScheduledDelayChange serializing to 1\n        let concatenated: [Field; 4] = concat_arrays(value_change.serialize(), delay_change.serialize());\n        poseidon2_hash(concatenated)\n    }\n\n    // Since we can't rely on the native storage allocation scheme, we hash the storage slot to get a unique location in\n    // which we can safely store as much data as we need.\n    // See https://github.com/AztecProtocol/aztec-packages/issues/5492 and\n    // https://github.com/AztecProtocol/aztec-packages/issues/5736\n    // We store three things in public storage:\n    //  - a ScheduledValueChange\n    //  - a ScheduledDelaChange\n    //  - the hash of both of these (via `hash_scheduled_data`)\n    fn get_value_change_storage_slot(self) -> Field {\n        pedersen_hash([self.storage_slot, 0], 0)\n    }\n\n    fn get_delay_change_storage_slot(self) -> Field {\n        pedersen_hash([self.storage_slot, 1], 0)\n    }\n\n    fn get_hash_storage_slot(self) -> Field {\n        pedersen_hash([self.storage_slot, 2], 0)\n    }\n\n    // It may seem odd that we take a header and address instead of reading from e.g. a PrivateContext, but this lets us\n    // reuse this function in SharedMutablePrivateGetter.\n    fn historical_read_from_public_storage(\n        self,\n        header: Header,\n        address: AztecAddress\n    ) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>, u32) where T: FromField + ToField + Eq {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for both the ScheduledValueChange and\n        // ScheduledDelayChange, but that'd require one full sibling path per storage slot (since due to kernel siloing\n        // the storage is not contiguous), and in the best case in which T is a single field that'd be 4 slots.\n        // Instead, we get an oracle to provide us the correct values for both the value and delay changes, and instead\n        // prove inclusion of their hash, which is both a much smaller proof (a single slot), and also independent of\n        // the size of T.\n        let (value_change_hint, delay_change_hint) = get_public_storage_hints(address, self.storage_slot, historical_block_number);\n\n        // Ideally the following would be simply public_storage::read_historical, but we can't implement that yet.\n        let hash = header.public_storage_historical_read(self.get_hash_storage_slot(), address);\n\n        // @todo This is written strangely to bypass a formatting issue with the if that is breaking ci.\n        let (a, b, c) = if hash != 0 {\n            let a = SharedMutable::hash_scheduled_data(value_change_hint, delay_change_hint);\n            (a, value_change_hint, delay_change_hint)\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized, meaning no value or delay change was ever\n            // scheduled. Therefore, the hints must then correspond to uninitialized scheduled changes.\n            let b = ScheduledValueChange::deserialize(zeroed());\n            let c = ScheduledDelayChange::deserialize(zeroed());\n            (hash, b, c)\n        };\n\n        assert_eq(hash, a, \"Hint values do not match hash\");\n        assert_eq(value_change_hint, b, \"Non-zero value change for zero hash\");\n        assert_eq(delay_change_hint, c, \"Non-zero delay change for zero hash\");\n\n        (value_change_hint, delay_change_hint, historical_block_number)\n    }\n}\n\nimpl<T, INITIAL_DELAY> SharedMutable<T, INITIAL_DELAY, &mut PublicContext> {\n    pub fn schedule_value_change(self, new_value: T) where T: ToField {\n        let mut value_change = self.read_value_change();\n        let delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n        let current_delay = delay_change.get_current(block_number);\n\n        // TODO: make this configurable\n        // https://github.com/AztecProtocol/aztec-packages/issues/5501\n        let block_of_change = block_number + current_delay;\n        value_change.schedule_change(new_value, block_number, current_delay, block_of_change);\n\n        self.write(value_change, delay_change);\n    }\n\n    pub fn schedule_delay_change(self, new_delay: u32) where T: ToField {\n        let mut delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n\n        delay_change.schedule_change(new_delay, block_number);\n\n        self.write(self.read_value_change(), delay_change);\n    }\n\n    pub fn get_current_value_in_public(self) -> T {\n        let block_number = self.context.block_number() as u32;\n        self.read_value_change().get_current_at(block_number)\n    }\n\n    pub fn get_current_delay_in_public(self) -> u32 {\n        let block_number = self.context.block_number() as u32;\n        self.read_delay_change().get_current(block_number)\n    }\n\n    pub fn get_scheduled_value_in_public(self) -> (T, u32) {\n        self.read_value_change().get_scheduled()\n    }\n\n    pub fn get_scheduled_delay_in_public(self) -> (u32, u32) {\n        self.read_delay_change().get_scheduled()\n    }\n\n    fn read_value_change(self) -> ScheduledValueChange<T> {\n        self.context.storage_read(self.get_value_change_storage_slot())\n    }\n\n    fn read_delay_change(self) -> ScheduledDelayChange<INITIAL_DELAY> {\n        self.context.storage_read(self.get_delay_change_storage_slot())\n    }\n\n    fn write(\n        self,\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>\n    ) where T: ToField {\n        // Whenever we write to public storage, we write both the value change and delay change as well as the hash of\n        // them both. This guarantees that the hash is always kept up to date.\n        // While this makes for more costly writes, it also makes private proofs much simpler because they only need to\n        // produce a historical proof for the hash, which results in a single inclusion proof (as opposed to 4 in the\n        // best case scenario in which T is a single field). Private shared mutable reads are assumed to be much more\n        // frequent than public writes, so this tradeoff makes sense.\n        self.context.storage_write(self.get_value_change_storage_slot(), value_change);\n        self.context.storage_write(self.get_delay_change_storage_slot(), delay_change);\n        self.context.storage_write(\n            self.get_hash_storage_slot(),\n            SharedMutable::hash_scheduled_data(value_change, delay_change)\n        );\n    }\n}\n\nimpl<T, INITIAL_DELAY> SharedMutable<T, INITIAL_DELAY, &mut PrivateContext> {\n    pub fn get_current_value_in_private(self) -> T where T: FromField + ToField + Eq {\n        // When reading the current value in private we construct a historical state proof for the public value.\n        // However, since this value might change, we must constrain the maximum transaction block number as this proof\n        // will only be valid for however many blocks we can ensure the value will not change, which will depend on the\n        // current delay and any scheduled delay changes.\n\n        let (value_change, delay_change, historical_block_number) = self.historical_read_from_public_storage(self.context.get_header(), self.context.this_address());\n\n        // We use the effective minimum delay as opposed to the current delay at the historical block as this one also\n        // takes into consideration any scheduled delay changes.\n        // For example, consider a scenario in which at block 200 the current delay was 50. We may naively think that\n        // the earliest we could change the value would be at block 251 by scheduling immediately after the historical\n        // block, i.e. at block 201. But if there was a delay change scheduled for block 210 to reduce the delay to 20\n        // blocks, then if a value change was scheduled at block 210 it would go into effect at block 230, which is\n        // earlier than what we'd expect if we only considered the current delay.\n        let effective_minimum_delay = delay_change.get_effective_minimum_delay_at(historical_block_number);\n        let block_horizon = value_change.get_block_horizon(historical_block_number, effective_minimum_delay);\n\n        // We prevent this transaction from being included in any block after the block horizon, ensuring that the\n        // historical public value matches the current one, since it can only change after the horizon.\n        self.context.set_tx_max_block_number(block_horizon);\n        value_change.get_current_at(historical_block_number)\n    }\n}\n\nunconstrained fn get_public_storage_hints<T, INITIAL_DELAY>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>) {\n    // This function cannot be part of the &mut PrivateContext impl because that'd mean that by passing `self` we'd also\n    // be passing a mutable reference to an unconstrained function, which is not allowed. We therefore create a dummy\n    // state variable here so that we can access the methods to compute storage slots. This will all be removed in the\n    // future once we do proper storage slot allocation (#5492).\n    let dummy = SharedMutable::new((), storage_slot);\n\n    (\n        storage_read(address, dummy.get_value_change_storage_slot(), block_number), storage_read(address, dummy.get_delay_change_storage_slot(), block_number)\n    )\n}\n"},"162":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/private_immutable.nr","source":"use dep::protocol_types::{address::AztecAddress, constants::GENERATOR_INDEX__INITIALIZATION_NULLIFIER, hash::pedersen_hash};\n\nuse crate::context::{PrivateContext, UnconstrainedContext};\nuse crate::note::{\n    lifecycle::create_note, note_getter::{get_note, view_notes}, note_interface::NoteInterface,\n    note_viewer_options::NoteViewerOptions, note_emission::NoteEmission\n};\nuse crate::oracle::notes::check_nullifier_exists;\nuse crate::state_vars::storage::Storage;\n\n// docs:start:struct\nstruct PrivateImmutable<Note, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:struct\n\nimpl<T, Context> Storage<T> for PrivateImmutable<T, Context> {}\n\nimpl<Note, Context> PrivateImmutable<Note, Context> {\n    // docs:start:new\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n    // docs:end:new\n\n    // The following computation is leaky, in that it doesn't hide the storage slot that has been initialized, nor does it hide the contract address of this contract.\n    // When this initialization nullifier is emitted, an observer could do a dictionary or rainbow attack to learn the preimage of this nullifier to deduce the storage slot and contract address.\n    // For some applications, leaking the details that a particular state variable of a particular contract has been initialized will be unacceptable.\n    // Under such circumstances, such application developers might wish to _not_ use this state variable type.\n    // This is especially dangerous for initial assignment to elements of a `Map<AztecAddress, PrivateImmutable>` type (for example), because the storage slot often also identifies an actor. \n    // e.g. the initial assignment to `my_map.at(msg.sender)` will leak: `msg.sender`, the fact that an element of `my_map` was assigned-to for the first time, and the contract_address.\n    pub fn compute_initialization_nullifier(self) -> Field {\n        pedersen_hash(\n            [self.storage_slot],\n            GENERATOR_INDEX__INITIALIZATION_NULLIFIER\n        )\n    }\n}\n\nimpl<Note> PrivateImmutable<Note, &mut PrivateContext> {\n    // docs:start:initialize\n    pub fn initialize<N, M>(\n        self,\n        note: &mut Note\n    ) -> NoteEmission<Note> where Note: NoteInterface<N, M> {\n        // Nullify the storage slot.\n        let nullifier = self.compute_initialization_nullifier();\n        self.context.push_nullifier(nullifier, 0);\n\n        create_note(self.context, self.storage_slot, note)\n    }\n    // docs:end:initialize\n\n    // docs:start:get_note\n    pub fn get_note<N, M>(self) -> Note where Note: NoteInterface<N, M> {\n        let storage_slot = self.storage_slot;\n        get_note(self.context, storage_slot)\n    }\n    // docs:end:get_note\n}\n\nimpl<Note> PrivateImmutable<Note, UnconstrainedContext> {\n    // docs:start:is_initialized\n    unconstrained pub fn is_initialized(self) -> bool {\n        let nullifier = self.compute_initialization_nullifier();\n        check_nullifier_exists(nullifier)\n    }\n    // docs:end:is_initialized\n\n    // view_note does not actually use the context, but it calls oracles that are only available in private\n    // docs:start:view_note\n    unconstrained pub fn view_note<N, M>(self) -> Note  where Note: NoteInterface<N, M> {\n        let mut options = NoteViewerOptions::new();\n        view_notes(self.storage_slot, options.set_limit(1)).get(0)\n    }\n    // docs:end:view_note\n}\n"},"167":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{GAS_LENGTH, FIXED_DA_GAS, FIXED_L2_GAS}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered, utils::reader::Reader,\n    abis::gas_fees::GasFees\n};\nuse std::ops::{Add, Sub};\n\nstruct Gas {\n    da_gas: u32,\n    l2_gas: u32,\n}\n\nimpl Gas {\n    pub fn new(da_gas: u32, l2_gas: u32) -> Self {\n        Self { da_gas, l2_gas }\n    }\n\n    pub fn tx_overhead() -> Self {\n        Self { da_gas: FIXED_DA_GAS, l2_gas: FIXED_L2_GAS }\n    }\n\n    pub fn compute_fee(self, fees: GasFees) -> Field {\n        (self.da_gas as Field) * fees.fee_per_da_gas + (self.l2_gas as Field) * fees.fee_per_l2_gas\n    }\n\n    pub fn is_empty(self) -> bool {\n        (self.da_gas == 0) & (self.l2_gas == 0)\n    }\n\n    pub fn within(self, limits: Gas) -> bool {\n        (self.da_gas <= limits.da_gas) & (self.l2_gas <= limits.l2_gas)\n    }\n}\n\nimpl Add for Gas {\n    fn add(self, other: Gas) -> Self {\n        Gas::new(self.da_gas + other.da_gas, self.l2_gas + other.l2_gas)\n    }\n}\n\nimpl Sub for Gas {\n    fn sub(self, other: Gas) -> Self {\n        Gas::new(self.da_gas - other.da_gas, self.l2_gas - other.l2_gas)\n    }\n}\n\nimpl Serialize<GAS_LENGTH> for Gas {\n    fn serialize(self) -> [Field; GAS_LENGTH] {\n        [self.da_gas as Field, self.l2_gas as Field]\n    }\n}\n\nimpl Deserialize<GAS_LENGTH> for Gas {\n    fn deserialize(serialized: [Field; GAS_LENGTH]) -> Gas {\n        Gas::new(serialized[0] as u32, serialized[1] as u32)\n    }\n}\n\nimpl Eq for Gas {\n    fn eq(self, other : Gas) -> bool {\n        (self.da_gas == other.da_gas) & (self.l2_gas == other.l2_gas)\n    }\n}\n\nimpl Empty for Gas {\n    fn empty() -> Self {\n        Gas::new(0, 0)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = Gas::empty();\n    let serialized = item.serialize();\n    let deserialized = Gas::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n"},"169":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/note_hash.nr","source":"use crate::{\n    abis::read_request::ScopedReadRequest, address::AztecAddress,\n    abis::side_effect::{Ordered, OrderedValue, Readable, Scoped},\n    constants::{NOTE_HASH_LENGTH, SCOPED_NOTE_HASH_LENGTH}, traits::{Empty, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct NoteHash {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for NoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for NoteHash {\n    fn eq(self, other: NoteHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter) \n    }\n}\n\nimpl Empty for NoteHash {\n    fn empty() -> Self {\n        NoteHash {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<NOTE_HASH_LENGTH> for NoteHash {\n    fn serialize(self) -> [Field; NOTE_HASH_LENGTH] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<NOTE_HASH_LENGTH> for NoteHash {\n    fn deserialize(values: [Field; NOTE_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl NoteHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedNoteHash {\n        ScopedNoteHash { note_hash: self, contract_address }\n    }\n}\n\nstruct ScopedNoteHash {\n    note_hash: NoteHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<NoteHash> for ScopedNoteHash {\n    fn inner(self) -> NoteHash {\n        self.note_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedNoteHash {\n    fn counter(self) -> u32 {\n        self.note_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedNoteHash {\n    fn value(self) -> Field {\n        self.note_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.note_hash.counter\n    }\n}\n\nimpl Eq for ScopedNoteHash {\n    fn eq(self, other: ScopedNoteHash) -> bool {\n        (self.note_hash == other.note_hash)\n            & (self.contract_address == other.contract_address)\n    }\n}\n\nimpl Empty for ScopedNoteHash {\n    fn empty() -> Self {\n        ScopedNoteHash {\n            note_hash: NoteHash::empty(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_NOTE_HASH_LENGTH> for ScopedNoteHash {\n    fn serialize(self) -> [Field; SCOPED_NOTE_HASH_LENGTH] {\n        array_concat(self.note_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_NOTE_HASH_LENGTH> for ScopedNoteHash {\n    fn deserialize(values: [Field; SCOPED_NOTE_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            note_hash: reader.read_struct(NoteHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl Readable for ScopedNoteHash {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        assert_eq(self.note_hash.value, read_request.value(), \"Value of the note hash does not match read request\");\n        assert_eq(self.contract_address, read_request.contract_address, \"Contract address of the note hash does not match read request\");\n        assert(\n            read_request.counter() > self.note_hash.counter, \"Read request counter must be greater than the counter of the note hash\"\n        );\n    }\n}\n\nimpl ScopedNoteHash {\n    pub fn expose_to_public(self) -> NoteHash {\n        // Hide the actual counter when exposing it to the public kernel.\n        NoteHash { value: self.note_hash.value, counter: 0 }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NoteHash::empty();\n    let serialized = item.serialize();\n    let deserialized = NoteHash::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedNoteHash::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedNoteHash::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"170":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_fees.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::GAS_FEES_LENGTH, hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty},\n    abis::side_effect::Ordered, utils::reader::Reader\n};\n\nstruct GasFees {\n    fee_per_da_gas: Field,\n    fee_per_l2_gas: Field,\n}\n\nimpl GasFees {\n    pub fn new(fee_per_da_gas: Field, fee_per_l2_gas: Field) -> Self {\n        Self { fee_per_da_gas, fee_per_l2_gas }\n    }\n\n    pub fn default() -> Self {\n        GasFees::new(1, 1)\n    }\n\n    pub fn is_empty(self) -> bool {\n        (self.fee_per_da_gas == 0) & (self.fee_per_l2_gas == 0)\n    }\n}\n\nimpl Serialize<GAS_FEES_LENGTH> for GasFees {\n    fn serialize(self) -> [Field; GAS_FEES_LENGTH] {\n        [self.fee_per_da_gas, self.fee_per_l2_gas]\n    }\n}\n\nimpl Deserialize<GAS_FEES_LENGTH> for GasFees {\n    fn deserialize(serialized: [Field; GAS_FEES_LENGTH]) -> GasFees {\n        GasFees::new(serialized[0], serialized[1])\n    }\n}\n\nimpl Eq for GasFees {\n    fn eq(self, other : GasFees) -> bool {\n        (self.fee_per_da_gas == other.fee_per_da_gas) & (self.fee_per_l2_gas == other.fee_per_l2_gas)\n    }\n}\n\nimpl Empty for GasFees {\n    fn empty() -> Self {\n        GasFees::new(0, 0)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = GasFees::empty();\n    let serialized = item.serialize();\n    let deserialized = GasFees::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"172":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_circuit_public_inputs.nr","source":"use crate::{\n    abis::{\n    call_context::CallContext, max_block_number::MaxBlockNumber, gas_settings::GasSettings,\n    validation_requests::KeyValidationRequestAndGenerator, note_hash::NoteHash, nullifier::Nullifier,\n    private_call_request::PrivateCallRequest, read_request::ReadRequest,\n    log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_L2_TO_L1_MSGS_PER_CALL, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS, MAX_ENCRYPTED_LOGS_PER_CALL,\n    MAX_UNENCRYPTED_LOGS_PER_CALL, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, hash::pedersen_hash, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader,\n    transaction::tx_context::TxContext, utils::arrays::validate_array\n};\n\nstruct PrivateCircuitPublicInputsArrayLengths {\n    note_hash_read_requests: u32,\n    nullifier_read_requests: u32,\n    key_validation_requests_and_generators: u32,\n    note_hashes: u32,\n    nullifiers: u32,\n    l2_to_l1_msgs: u32,\n    private_call_requests: u32,\n    public_call_stack_hashes: u32,\n    note_encrypted_logs_hashes: u32,\n    encrypted_logs_hashes: u32,\n    unencrypted_logs_hashes: u32,\n}\n\nimpl PrivateCircuitPublicInputsArrayLengths {\n    pub fn new(public_inputs: PrivateCircuitPublicInputs) -> Self {\n        PrivateCircuitPublicInputsArrayLengths {\n            note_hash_read_requests: validate_array(public_inputs.note_hash_read_requests),\n            nullifier_read_requests: validate_array(public_inputs.nullifier_read_requests),\n            key_validation_requests_and_generators: validate_array(public_inputs.key_validation_requests_and_generators),\n            note_hashes: validate_array(public_inputs.note_hashes),\n            nullifiers: validate_array(public_inputs.nullifiers),\n            l2_to_l1_msgs: validate_array(public_inputs.l2_to_l1_msgs),\n            private_call_requests: validate_array(public_inputs.private_call_requests),\n            public_call_stack_hashes: validate_array(public_inputs.public_call_stack_hashes),\n            note_encrypted_logs_hashes: validate_array(public_inputs.note_encrypted_logs_hashes),\n            encrypted_logs_hashes: validate_array(public_inputs.encrypted_logs_hashes),\n            unencrypted_logs_hashes: validate_array(public_inputs.unencrypted_logs_hashes)\n        }\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    returns_hash: Field,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: [ReadRequest; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    key_validation_requests_and_generators: [KeyValidationRequestAndGenerator; MAX_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    note_hashes: [NoteHash; MAX_NOTE_HASHES_PER_CALL],\n    nullifiers: [Nullifier; MAX_NULLIFIERS_PER_CALL],\n    private_call_requests: [PrivateCallRequest; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    public_teardown_function_hash: Field,\n    l2_to_l1_msgs: [L2ToL1Message; MAX_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter : u32,\n    end_side_effect_counter : u32,\n    note_encrypted_logs_hashes: [NoteLogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_CALL],\n    encrypted_logs_hashes: [EncryptedLogHash; MAX_ENCRYPTED_LOGS_PER_CALL],\n    unencrypted_logs_hashes: [LogHash; MAX_UNENCRYPTED_LOGS_PER_CALL],\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // Note: The chain_id and version here are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    tx_context: TxContext,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.returns_hash == other.returns_hash) &\n        (self.min_revertible_side_effect_counter == other.min_revertible_side_effect_counter) &\n        (self.is_fee_payer == other.is_fee_payer) &\n        (self.max_block_number == other.max_block_number) &\n        (self.note_hash_read_requests == other.note_hash_read_requests) &\n        (self.nullifier_read_requests == other.nullifier_read_requests) &\n        (self.key_validation_requests_and_generators == other.key_validation_requests_and_generators) &\n        (self.note_hashes == other.note_hashes) &\n        (self.nullifiers == other.nullifiers) &\n        (self.private_call_requests == other.private_call_requests) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.l2_to_l1_msgs == other.l2_to_l1_msgs) &\n        (self.start_side_effect_counter == other.start_side_effect_counter) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.note_encrypted_logs_hashes == other.note_encrypted_logs_hashes) &\n        (self.encrypted_logs_hashes == other.encrypted_logs_hashes) &\n        (self.unencrypted_logs_hashes == other.unencrypted_logs_hashes) &\n        self.historical_header.eq(other.historical_header) &\n        self.tx_context.eq(other.tx_context)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n\n        fields.push(self.min_revertible_side_effect_counter as Field);\n        fields.push(if self.is_fee_payer { 1 } else { 0 } as Field);\n\n        fields.extend_from_array(self.max_block_number.serialize());\n\n        for i in 0..self.note_hash_read_requests.len() {\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..self.nullifier_read_requests.len() {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..self.key_validation_requests_and_generators.len() {\n            fields.extend_from_array(self.key_validation_requests_and_generators[i].serialize());\n        }\n        for i in 0..self.note_hashes.len() {\n            fields.extend_from_array(self.note_hashes[i].serialize());\n        }\n        for i in 0..self.nullifiers.len() {\n            fields.extend_from_array(self.nullifiers[i].serialize());\n        }\n        for i in 0..self.private_call_requests.len() {\n            fields.extend_from_array(self.private_call_requests[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n        fields.push(self.public_teardown_function_hash);\n        for i in 0..self.l2_to_l1_msgs.len() {\n            fields.extend_from_array(self.l2_to_l1_msgs[i].serialize());\n        }\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n        for i in 0..self.note_encrypted_logs_hashes.len() {\n            fields.extend_from_array(self.note_encrypted_logs_hashes[i].serialize());\n        }\n        for i in 0..self.encrypted_logs_hashes.len() {\n            fields.extend_from_array(self.encrypted_logs_hashes[i].serialize());\n        }\n        for i in 0..self.unencrypted_logs_hashes.len() {\n            fields.extend_from_array(self.unencrypted_logs_hashes[i].serialize());\n        }\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.extend_from_array(self.tx_context.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            min_revertible_side_effect_counter: reader.read() as u32,\n            is_fee_payer: reader.read() == 1,\n            max_block_number: reader.read_struct(MaxBlockNumber::deserialize),\n            note_hash_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            key_validation_requests_and_generators: reader.read_struct_array(KeyValidationRequestAndGenerator::deserialize, [KeyValidationRequestAndGenerator::empty(); MAX_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            note_hashes: reader.read_struct_array(NoteHash::deserialize, [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL]),\n            nullifiers: reader.read_struct_array(Nullifier::deserialize, [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL]),\n            private_call_requests: reader.read_struct_array(PrivateCallRequest::deserialize, [PrivateCallRequest::empty(); MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            public_teardown_function_hash: reader.read(),\n            l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            note_encrypted_logs_hashes: reader.read_struct_array(NoteLogHash::deserialize, [NoteLogHash::empty(); MAX_NOTE_ENCRYPTED_LOGS_PER_CALL]),\n            encrypted_logs_hashes: reader.read_struct_array(EncryptedLogHash::deserialize, [EncryptedLogHash::empty(); MAX_ENCRYPTED_LOGS_PER_CALL]),\n            unencrypted_logs_hashes: reader.read_struct_array(LogHash::deserialize, [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL]),\n            historical_header: reader.read_struct(Header::deserialize),\n            tx_context: reader.read_struct(TxContext::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\nimpl Empty for PrivateCircuitPublicInputs {\n    fn empty() -> Self {\n        PrivateCircuitPublicInputs {\n            call_context: CallContext::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            key_validation_requests_and_generators: [KeyValidationRequestAndGenerator::empty(); MAX_KEY_VALIDATION_REQUESTS_PER_CALL],\n            note_hashes: [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL],\n            nullifiers: [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL],\n            private_call_requests: [PrivateCallRequest::empty(); MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL],\n            start_side_effect_counter : 0 as u32,\n            end_side_effect_counter : 0 as u32,\n            note_encrypted_logs_hashes: [NoteLogHash::empty(); MAX_NOTE_ENCRYPTED_LOGS_PER_CALL],\n            encrypted_logs_hashes: [EncryptedLogHash::empty(); MAX_ENCRYPTED_LOGS_PER_CALL],\n            unencrypted_logs_hashes: [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL],\n            historical_header: Header::empty(),\n            tx_context: TxContext::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi = PrivateCircuitPublicInputs::empty();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs = PrivateCircuitPublicInputs::empty();\n    let hash = inputs.hash();\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x15c9b0a92b9b541598e24c9f0b0b4b04b7f2408599751c45aa12de671fd9b363;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"173":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item_compressed.nr","source":"use crate::abis::{call_context::CallContext, function_data::FunctionData, gas::Gas};\nuse crate::address::AztecAddress;\nuse crate::constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH};\nuse crate::traits::{Hash, Empty, Serialize, Deserialize};\nuse crate::utils::reader::Reader;\n\n/**\n * A compressed version of the PublicCallStackItem struct used to compute the \"hash\"\n * of a PublicCallStackItem.\n * \n * Historically, we have been zeroing most values in the PublicCallStackItem struct\n * to compute the hash involved when adding a PublicCallStackItem to the PublicCallStack.\n * \n * This struct is used to store the values that we did not zero out, and allow us to hash\n * only these, thereby skipping a lot of computation and saving us a lot of constraints\n * \n * Essentially this struct exists such that we don't have a `hash` function in the \n * PublicCallStackItem struct that practically throws away some values of the struct\n * without clearly indicating that it does so.\n */\nstruct PublicCallStackItemCompressed {\n    contract_address: AztecAddress,\n    call_context: CallContext,\n    function_data: FunctionData,\n    args_hash: Field,\n    returns_hash: Field,\n    revert_code: u8,\n    start_gas_left: Gas,\n    end_gas_left: Gas,\n}\n\nimpl Eq for PublicCallStackItemCompressed {\n    fn eq(self, other: PublicCallStackItemCompressed) -> bool {\n        (self.contract_address == other.contract_address)\n            & (self.call_context == other.call_context)\n            & (self.function_data == other.function_data)\n            & (self.args_hash == other.args_hash)\n            & (self.returns_hash == other.returns_hash)\n            & (self.revert_code == other.revert_code)\n            & (self.start_gas_left == other.start_gas_left)\n            & (self.end_gas_left == other.end_gas_left)\n    }\n}\n\nimpl Hash for PublicCallStackItemCompressed {\n    fn hash(self) -> Field {\n        std::hash::pedersen_hash_with_separator(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl Empty for PublicCallStackItemCompressed {\n    fn empty() -> Self {\n        PublicCallStackItemCompressed {\n            contract_address: AztecAddress::empty(),\n            call_context: CallContext::empty(),\n            function_data: FunctionData::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty(),\n        }\n    }\n}\n\nimpl Serialize<PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> for PublicCallStackItemCompressed {\n    fn serialize(self) -> [Field; PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.call_context.serialize());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n        fields.push(self.revert_code as Field);\n        fields.extend_from_array(self.start_gas_left.serialize());\n        fields.extend_from_array(self.end_gas_left.serialize());\n\n        assert_eq(fields.len(), PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> for PublicCallStackItemCompressed {\n  fn deserialize(fields: [Field; PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH]) -> PublicCallStackItemCompressed {\n    let mut reader = Reader::new(fields);\n\n    let item = PublicCallStackItemCompressed {\n      contract_address: reader.read_struct(AztecAddress::deserialize),\n      call_context: reader.read_struct(CallContext::deserialize),\n      function_data: reader.read_struct(FunctionData::deserialize),\n      args_hash: reader.read(),\n      returns_hash: reader.read(),\n      revert_code: reader.read() as u8,\n      start_gas_left: reader.read_struct(Gas::deserialize),\n      end_gas_left: reader.read_struct(Gas::deserialize),\n    };\n    reader.finish();\n    item\n  }\n}\n"},"175":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/global_variables.nr","source":"use crate::{\n    address::{AztecAddress, EthAddress}, abis::gas_fees::GasFees,\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}, utils::reader::Reader\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : u64,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n    gas_fees : GasFees\n}\n// docs:end:global-variables\n\nimpl GlobalVariables {\n    fn is_empty(self) -> bool {\n        (self.chain_id == 0)\n            & (self.version == 0)\n            & (self.block_number == 0)\n            & (self.timestamp == 0)\n            & (self.coinbase.is_zero())\n            & (self.fee_recipient.is_zero())\n            & (self.gas_fees.is_empty())\n    }\n}\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        let mut serialized: BoundedVec<Field, GLOBAL_VARIABLES_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.chain_id);\n        serialized.push(self.version);\n        serialized.push(self.block_number);\n        serialized.push(self.timestamp as Field);\n        serialized.push(self.coinbase.to_field());\n        serialized.push(self.fee_recipient.to_field());\n        serialized.extend_from_array(self.gas_fees.serialize());\n\n        serialized.storage\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        let mut reader = Reader::new(serialized);\n        GlobalVariables {\n            chain_id: reader.read(),\n            version: reader.read(),\n            block_number: reader.read(),\n            timestamp: reader.read() as u64,\n            coinbase: EthAddress::from_field(reader.read()),\n            fee_recipient: AztecAddress::from_field(reader.read()),\n            gas_fees: reader.read_struct(GasFees::deserialize)\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient) &\n        (self.gas_fees == other.gas_fees) \n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n            gas_fees: GasFees::empty()\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars = GlobalVariables::empty();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n"},"176":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/read_request.nr","source":"use crate::{\n    abis::side_effect::{Ordered, Scoped}, traits::{Empty, Serialize, Deserialize},\n    address::AztecAddress, constants::{READ_REQUEST_LENGTH, SCOPED_READ_REQUEST_LEN},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct ReadRequest {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for ReadRequest {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for ReadRequest {\n    fn eq(self, read_request: ReadRequest) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n    }\n}\n\nimpl Empty for ReadRequest {\n    fn empty() -> Self {\n        ReadRequest {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_LENGTH> for ReadRequest {\n    fn serialize(self) -> [Field; READ_REQUEST_LENGTH] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_LENGTH> for ReadRequest {\n    fn deserialize(values: [Field; READ_REQUEST_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl ReadRequest {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedReadRequest {\n        ScopedReadRequest { read_request: self, contract_address }\n    }\n}\n\nstruct ScopedReadRequest {\n    read_request: ReadRequest,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<ReadRequest> for ScopedReadRequest {\n    fn inner(self) -> ReadRequest {\n        self.read_request\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Eq for ScopedReadRequest {\n    fn eq(self, other: ScopedReadRequest) -> bool {\n        (self.read_request == other.read_request)\n        & (self.contract_address.eq(other.contract_address))\n    }\n}\n\nimpl Empty for ScopedReadRequest {\n    fn empty() -> Self {\n        ScopedReadRequest {\n            read_request: ReadRequest::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_READ_REQUEST_LEN> for ScopedReadRequest {\n    fn serialize(self) -> [Field; SCOPED_READ_REQUEST_LEN] {\n        array_concat(self.read_request.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_READ_REQUEST_LEN> for ScopedReadRequest {\n    fn deserialize(values: [Field; SCOPED_READ_REQUEST_LEN]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            read_request: reader.read_struct(ReadRequest::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl ScopedReadRequest {\n    pub fn value(self) -> Field {\n        self.read_request.value\n    }\n    pub fn counter(self) -> u32 {\n        self.read_request.counter\n    }\n}\n\n#[test]\nfn serialization_of_empty_read() {\n    let item = ReadRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ReadRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedReadRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedReadRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"179":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request_and_generator.nr","source":"use crate::{\n    address::AztecAddress,\n    abis::validation_requests::{\n    key_validation_request::KeyValidationRequest,\n    scoped_key_validation_request_and_generator::ScopedKeyValidationRequestAndGenerator\n},\n    constants::KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH, traits::{Empty, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct KeyValidationRequestAndGenerator {\n    request: KeyValidationRequest,\n    sk_app_generator: Field,\n}\n\nimpl Eq for KeyValidationRequestAndGenerator {\n    fn eq(self, other: KeyValidationRequestAndGenerator) -> bool {\n        (self.request == other.request) & (self.sk_app_generator == other.sk_app_generator)\n    }\n}\n\nimpl Empty for KeyValidationRequestAndGenerator {\n    fn empty() -> Self {\n        KeyValidationRequestAndGenerator {\n            request: KeyValidationRequest::empty(),\n            sk_app_generator: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH> for KeyValidationRequestAndGenerator {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH] {\n        array_concat(self.request.serialize(), [self.sk_app_generator])\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH> for KeyValidationRequestAndGenerator {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH]) -> Self {\n        let mut reader = Reader::new(fields);\n        let res = Self {\n            request: reader.read_struct(KeyValidationRequest::deserialize),\n            sk_app_generator: reader.read(),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl KeyValidationRequestAndGenerator {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedKeyValidationRequestAndGenerator {\n        ScopedKeyValidationRequestAndGenerator { request: self, contract_address }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = KeyValidationRequestAndGenerator::empty();\n    let serialized = item.serialize();\n    let deserialized = KeyValidationRequestAndGenerator::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"180":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{constants::KEY_VALIDATION_REQUEST_LENGTH, traits::{Empty, Serialize, Deserialize}, point::Point};\n\nstruct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m))\n            & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest {\n            pk_m: Point::empty(),\n            sk_app: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app,\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point::new(fields[0], fields[1], fields[2] as bool),\n            sk_app: fields[3],\n        }\n    }\n}\n\n"},"184":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier.nr","source":"use crate::{\n    abis::{side_effect::{Ordered, OrderedValue, Readable, Scoped}, read_request::ScopedReadRequest},\n    address::AztecAddress, constants::{NULLIFIER_LENGTH, SCOPED_NULLIFIER_LENGTH},\n    hash::compute_siloed_nullifier, traits::{Empty, Hash, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct Nullifier {\n    value: Field,\n    counter: u32,\n    note_hash: Field,\n}\n\nimpl Ordered for Nullifier {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for Nullifier {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for Nullifier {\n    fn eq(self, other: Nullifier) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.note_hash == other.note_hash) \n    }\n}\n\nimpl Empty for Nullifier {\n    fn empty() -> Self {\n        Nullifier {\n            value: 0,\n            counter: 0,\n            note_hash: 0,\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_LENGTH> for Nullifier {\n    fn serialize(self) -> [Field; NULLIFIER_LENGTH] {\n        [self.value, self.counter as Field, self.note_hash]\n    }\n}\n\nimpl Deserialize<NULLIFIER_LENGTH> for Nullifier {\n    fn deserialize(values: [Field; NULLIFIER_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            note_hash: values[2],\n        }\n    }\n}\n\nimpl Readable for Nullifier {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        // Public kernels output Nullifier instead of ScopedNullifier.\n        // The nullifier value has been siloed.\n        let siloed_request_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.value, siloed_request_value, \"Value of the nullifier does not match read request\");\n        assert(\n            read_request.counter() > self.counter, \"Read request counter must be greater than the counter of the nullifier\"\n        );\n    }\n}\n\nimpl Nullifier {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedNullifier {\n        ScopedNullifier { nullifier: self, contract_address }\n    }\n}\n\nstruct ScopedNullifier {\n    nullifier: Nullifier,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<Nullifier> for ScopedNullifier {\n    fn inner(self) -> Nullifier {\n        self.nullifier\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedNullifier {\n    fn counter(self) -> u32 {\n        self.nullifier.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedNullifier {\n    fn value(self) -> Field {\n        self.nullifier.value\n    }\n    fn counter(self) -> u32 {\n        self.nullifier.counter\n    }\n}\n\nimpl Eq for ScopedNullifier {\n    fn eq(self, other: ScopedNullifier) -> bool {\n        (self.nullifier == other.nullifier)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedNullifier {\n    fn empty() -> Self {\n        ScopedNullifier {\n            nullifier: Nullifier::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_NULLIFIER_LENGTH> for ScopedNullifier {\n    fn serialize(self) -> [Field; SCOPED_NULLIFIER_LENGTH] {\n        array_concat(self.nullifier.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_NULLIFIER_LENGTH> for ScopedNullifier {\n    fn deserialize(values: [Field; SCOPED_NULLIFIER_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            nullifier: reader.read_struct(Nullifier::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl Readable for ScopedNullifier {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        assert_eq(self.nullifier.value, read_request.value(), \"Value of the nullifier does not match read request\");\n        assert_eq(self.contract_address, read_request.contract_address, \"Contract address of the nullifier does not match read request\");\n        assert(\n            read_request.counter() > self.nullifier.counter, \"Read request counter must be greater than the counter of the nullifier\"\n        );\n    }\n}\n\nimpl ScopedNullifier {\n    pub fn nullified_note_hash(self) -> Field {\n        self.nullifier.note_hash\n    }\n\n    pub fn expose_to_public(self) -> Nullifier {\n        // Hide the actual counter and note hash when exposing it to the public kernel.\n        Nullifier { value: self.nullifier.value, counter: 0, note_hash: 0 }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = Nullifier::empty();\n    let serialized = item.serialize();\n    let deserialized = Nullifier::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedNullifier::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedNullifier::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"193":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"},"194":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_request.nr","source":"use crate::{\n    abis::{\n    private_call_stack_item::PrivateCallStackItem, call_context::CallContext,\n    function_data::FunctionData, caller_context::CallerContext,\n    side_effect::{Ordered, RangeOrdered, Scoped}\n},\n    address::AztecAddress, constants::{PRIVATE_CALL_REQUEST_LENGTH, SCOPED_PRIVATE_CALL_REQUEST_LENGTH},\n    traits::{Empty, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PrivateCallRequest {\n    target: AztecAddress,\n    call_context: CallContext,\n    function_data: FunctionData,\n    args_hash: Field,\n    returns_hash: Field,\n    caller_context: CallerContext,\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n}\n\nimpl Ordered for PrivateCallRequest {\n    fn counter(self) -> u32 {\n        self.start_side_effect_counter\n    }\n}\n\nimpl RangeOrdered for PrivateCallRequest {\n    fn counter_start(self) -> u32 {\n        self.start_side_effect_counter\n    }\n    fn counter_end(self) -> u32 {\n        self.end_side_effect_counter\n    }\n}\n\nimpl Eq for PrivateCallRequest {\n    fn eq(self, other: PrivateCallRequest) -> bool {\n        (self.target == other.target) \n            & (self.call_context == other.call_context) \n            & (self.function_data == other.function_data) \n            & (self.args_hash == other.args_hash) \n            & (self.returns_hash == other.returns_hash)\n            & (self.caller_context == other.caller_context)\n            & (self.start_side_effect_counter == other.start_side_effect_counter)\n            & (self.end_side_effect_counter == other.end_side_effect_counter)\n    }\n}\n\nimpl Empty for PrivateCallRequest {\n    fn empty() -> Self {\n        PrivateCallRequest {\n            target: AztecAddress::empty(),\n            call_context: CallContext::empty(),\n            function_data: FunctionData::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            caller_context: CallerContext::empty(),\n            start_side_effect_counter: 0,\n            end_side_effect_counter: 0,\n        }\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_REQUEST_LENGTH> for PrivateCallRequest {\n    fn serialize(self) -> [Field; PRIVATE_CALL_REQUEST_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_REQUEST_LENGTH> = BoundedVec::new();\n\n        fields.push(self.target.to_field());\n        fields.extend_from_array(self.call_context.serialize());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n        fields.extend_from_array(self.caller_context.serialize());\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        assert_eq(fields.len(), PRIVATE_CALL_REQUEST_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_REQUEST_LENGTH> for PrivateCallRequest {\n    fn deserialize(fields: [Field; PRIVATE_CALL_REQUEST_LENGTH]) -> PrivateCallRequest {\n        let mut reader = Reader::new(fields);\n        let item = PrivateCallRequest {\n            target: reader.read_struct(AztecAddress::deserialize),\n            call_context: reader.read_struct(CallContext::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            caller_context: reader.read_struct(CallerContext::deserialize),\n            start_side_effect_counter: reader.read_u32(),\n            end_side_effect_counter: reader.read_u32(),\n        };\n        reader.finish();\n        item\n    }\n}\n\nimpl PrivateCallRequest {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedPrivateCallRequest {\n        ScopedPrivateCallRequest { call_request: self, contract_address }\n    }\n\n    pub fn matches_stack_item(self, stack_item: PrivateCallStackItem) -> bool {\n        (self.target == stack_item.contract_address)\n            & (self.call_context == stack_item.public_inputs.call_context)\n            & (self.function_data == stack_item.function_data)\n            & (self.args_hash == stack_item.public_inputs.args_hash)\n            & (self.returns_hash == stack_item.public_inputs.returns_hash)\n            & (self.start_side_effect_counter\n                                == stack_item.public_inputs.start_side_effect_counter)\n            & (self.end_side_effect_counter\n                                    == stack_item.public_inputs.end_side_effect_counter)\n    }\n}\n\nstruct ScopedPrivateCallRequest {\n    call_request: PrivateCallRequest,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<PrivateCallRequest> for ScopedPrivateCallRequest {\n    fn inner(self) -> PrivateCallRequest {\n        self.call_request\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedPrivateCallRequest {\n    fn counter(self) -> u32 {\n        self.call_request.counter_start()\n    }\n}\n\nimpl RangeOrdered for ScopedPrivateCallRequest {\n    fn counter_start(self) -> u32 {\n        self.call_request.counter_start()\n    }\n    fn counter_end(self) -> u32 {\n        self.call_request.counter_end()\n    }\n}\n\nimpl Eq for ScopedPrivateCallRequest {\n    fn eq(self, other: ScopedPrivateCallRequest) -> bool {\n        (self.call_request == other.call_request)\n            & (self.contract_address == other.contract_address)\n    }\n}\n\nimpl Empty for ScopedPrivateCallRequest {\n    fn empty() -> Self {\n        ScopedPrivateCallRequest {\n            call_request: PrivateCallRequest::empty(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_PRIVATE_CALL_REQUEST_LENGTH> for ScopedPrivateCallRequest {\n    fn serialize(self) -> [Field; SCOPED_PRIVATE_CALL_REQUEST_LENGTH] {\n        let mut fields: BoundedVec<Field, SCOPED_PRIVATE_CALL_REQUEST_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.call_request.serialize());\n        fields.extend_from_array(self.contract_address.serialize());\n\n        assert_eq(fields.len(), SCOPED_PRIVATE_CALL_REQUEST_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<SCOPED_PRIVATE_CALL_REQUEST_LENGTH> for ScopedPrivateCallRequest {\n    fn deserialize(fields: [Field; SCOPED_PRIVATE_CALL_REQUEST_LENGTH]) -> ScopedPrivateCallRequest {\n        let mut reader = Reader::new(fields);\n        let item = ScopedPrivateCallRequest {\n            call_request: reader.read_struct(PrivateCallRequest::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        item\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = ScopedPrivateCallRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedPrivateCallRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"199":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_settings.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress}, abis::gas::Gas,\n    abis::gas_fees::GasFees,\n    constants::{\n    GAS_SETTINGS_LENGTH, DEFAULT_GAS_LIMIT, DEFAULT_TEARDOWN_GAS_LIMIT, DEFAULT_MAX_FEE_PER_GAS,\n    DEFAULT_INCLUSION_FEE\n},\n    hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered,\n    utils::reader::Reader\n};\n\nstruct GasSettings {\n    gas_limits: Gas,\n    teardown_gas_limits: Gas,\n    max_fees_per_gas: GasFees,\n    inclusion_fee: Field,\n}\n\nimpl GasSettings {\n    pub fn new(\n        gas_limits: Gas,\n        teardown_gas_limits: Gas,\n        max_fees_per_gas: GasFees,\n        inclusion_fee: Field\n    ) -> Self {\n        Self { gas_limits, teardown_gas_limits, max_fees_per_gas, inclusion_fee }\n    }\n\n    pub fn default() -> Self {\n        GasSettings::new(\n            Gas::new(DEFAULT_GAS_LIMIT, DEFAULT_GAS_LIMIT),\n            Gas::new(DEFAULT_TEARDOWN_GAS_LIMIT, DEFAULT_TEARDOWN_GAS_LIMIT),\n            GasFees::new(DEFAULT_MAX_FEE_PER_GAS, DEFAULT_MAX_FEE_PER_GAS),\n            DEFAULT_INCLUSION_FEE\n        )\n    }\n}\n\nimpl Eq for GasSettings {\n    fn eq(self, other: Self) -> bool {\n        (self.gas_limits == other.gas_limits) & (self.teardown_gas_limits == other.teardown_gas_limits) & (self.max_fees_per_gas == other.max_fees_per_gas) & (self.inclusion_fee == other.inclusion_fee)\n    }\n}\n\nimpl Empty for GasSettings {\n    fn empty() -> Self {\n        GasSettings::new(\n            Gas::empty(), Gas::empty(), GasFees::empty(), 0\n        )\n    }\n}\n\nimpl Serialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn serialize(self) -> [Field; GAS_SETTINGS_LENGTH] {\n        let mut serialized: BoundedVec<Field, GAS_SETTINGS_LENGTH> = BoundedVec::new();\n\n        serialized.extend_from_array(self.gas_limits.serialize());\n        serialized.extend_from_array(self.teardown_gas_limits.serialize());\n        serialized.extend_from_array(self.max_fees_per_gas.serialize());\n        serialized.push(self.inclusion_fee);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn deserialize(serialized: [Field; GAS_SETTINGS_LENGTH]) -> GasSettings {\n        let mut reader = Reader::new(serialized);\n        GasSettings::new(reader.read_struct(Gas::deserialize), reader.read_struct(Gas::deserialize), reader.read_struct(GasFees::deserialize), reader.read())\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = GasSettings::empty();\n    let serialized = item.serialize();\n    let deserialized = GasSettings::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"208":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_stack_item.nr","source":"use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl Empty for PrivateCallStackItem {\n    fn empty() -> Self {\n        PrivateCallStackItem {\n            contract_address: AztecAddress::empty(),\n            function_data: FunctionData::empty(),\n            public_inputs: PrivateCircuitPublicInputs::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = PrivateCallStackItem::empty();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item = PrivateCallStackItem::empty();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x065f2831db9ac0db5e710bd3a865b5facd8cf83f1585e1af8fd1d6ce9c47f685;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"209":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/caller_context.nr","source":"use crate::address::AztecAddress;\nuse crate::traits::{Empty, Serialize, Deserialize};\nuse crate::constants::CALLER_CONTEXT_LENGTH;\nuse crate::utils::reader::Reader;\n\nstruct CallerContext {\n    msg_sender: AztecAddress,\n    storage_contract_address: AztecAddress,\n    is_static_call: bool,\n}\n\nimpl Eq for CallerContext {\n    fn eq(self, other: CallerContext) -> bool {\n        other.msg_sender.eq(self.msg_sender)\n            & other.storage_contract_address.eq(self.storage_contract_address)\n            & other.is_static_call == self.is_static_call\n    }\n}\n\nimpl Empty for CallerContext {\n    fn empty() -> Self {\n        CallerContext {\n            msg_sender: AztecAddress::zero(),\n            storage_contract_address: AztecAddress::zero(),\n            is_static_call: false,\n        }\n    }\n}\n\nimpl CallerContext {\n    pub fn is_empty(self) -> bool {\n        self.msg_sender.is_zero() & self.storage_contract_address.is_zero() & !self.is_static_call\n    }\n\n    // Different to an empty context, a hidden context won't reveal the caller's msg_sender and storage_contract_address,\n    // but will still propagate the is_static_call flag.\n    pub fn is_hidden(self) -> bool {\n        self.msg_sender.is_zero() & self.storage_contract_address.is_zero()\n    }\n}\n\nimpl Serialize<CALLER_CONTEXT_LENGTH> for CallerContext {\n  fn serialize(self) -> [Field; CALLER_CONTEXT_LENGTH] {\n    let mut fields: BoundedVec<Field, CALLER_CONTEXT_LENGTH> = BoundedVec::new();\n\n    fields.extend_from_array(self.msg_sender.serialize());\n    fields.extend_from_array(self.storage_contract_address.serialize());\n    fields.push(self.is_static_call as Field);\n\n    assert_eq(fields.len(), CALLER_CONTEXT_LENGTH);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CALLER_CONTEXT_LENGTH> for CallerContext {\n  fn deserialize(fields: [Field; CALLER_CONTEXT_LENGTH]) -> CallerContext {\n    let mut reader = Reader::new(fields);\n\n    let item = CallerContext {\n      msg_sender: reader.read_struct(AztecAddress::deserialize),\n      storage_contract_address: reader.read_struct(AztecAddress::deserialize),\n      is_static_call: reader.read_bool(),\n    };\n    reader.finish();\n    item\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = CallerContext::empty();\n    let serialized = item.serialize();\n    let deserialized = CallerContext::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"21":{"path":"std/embedded_curve_ops.nr","source":"use crate::ops::arith::{Add, Sub, Neg};\nuse crate::cmp::Eq;\n\nstruct EmbeddedCurvePoint {\n    x: Field,\n    y: Field,\n    is_infinite: bool\n}\n\nimpl EmbeddedCurvePoint {\n    fn new(x: Field, y: Field, is_infinite: bool) -> Self {\n        Self { x, y, is_infinite }\n    }\n\n    fn double(self) -> EmbeddedCurvePoint {\n        embedded_curve_add(self, self)\n    }\n\n    fn point_at_infinity() -> EmbeddedCurvePoint {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    }\n}\n\nimpl Add for EmbeddedCurvePoint {\n    fn add(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        embedded_curve_add(self, other)\n    }\n}\n\nimpl Sub for EmbeddedCurvePoint {\n    fn sub(self, other: EmbeddedCurvePoint) -> EmbeddedCurvePoint { \n        self + other.neg()\n    }\n}\n\nimpl Neg for EmbeddedCurvePoint {\n    fn neg(self) -> EmbeddedCurvePoint { \n        EmbeddedCurvePoint {\n            x: self.x,\n            y: -self.y,\n            is_infinite: self.is_infinite\n        }\n    }\n}\n\nimpl Eq for EmbeddedCurvePoint {\n    fn eq(self: Self, b: EmbeddedCurvePoint) -> bool {\n        (self.is_infinite & b.is_infinite) | ((self.is_infinite == b.is_infinite) & (self.x == b.x) & (self.y == b.y))\n    }\n}\n\n// Scalar represented as low and high limbs\nstruct EmbeddedCurveScalar {\n    lo: Field,\n    hi: Field,\n}\n\nimpl EmbeddedCurveScalar {\n    pub fn new(lo: Field, hi: Field) -> Self {\n        EmbeddedCurveScalar { lo, hi }\n    }\n\n    pub fn derive_public_key(self) -> EmbeddedCurvePoint {\n        let public_key = fixed_base_scalar_mul(self.lo, self.hi);\n        EmbeddedCurvePoint { x: public_key[0], y: public_key[1], is_infinite: false }\n    }\n\n    #[field(bn254)]\n    fn from_field(scalar: Field) -> EmbeddedCurveScalar {\n        let (a,b) = crate::field::bn254::decompose(scalar);\n        EmbeddedCurveScalar { lo: a, hi: b }\n    }\n}\n\nimpl Eq for EmbeddedCurveScalar {\n    fn eq(self, key: EmbeddedCurveScalar) -> bool {\n        (key.hi == self.hi) & (key.lo == self.lo)\n    }\n}\n\n// Computes a multi scalar multiplication over the embedded curve.\n// For bn254, We have Grumpkin and Baby JubJub.\n// For bls12-381, we have JubJub and Bandersnatch.\n//\n// The embedded curve being used is decided by the \n// underlying proof system.\n#[foreign(multi_scalar_mul)]\n// docs:start:multi_scalar_mul\npub fn multi_scalar_mul<let N: u32>(\n    points: [EmbeddedCurvePoint; N],\n    scalars: [EmbeddedCurveScalar; N]\n) -> [Field; 3]\n// docs:end:multi_scalar_mul\n{}\n\n// docs:start:fixed_base_scalar_mul\npub fn fixed_base_scalar_mul(\n    scalar_low: Field,\n    scalar_high: Field\n) -> [Field; 3]\n// docs:end:fixed_base_scalar_mul\n{\n    let g1 = EmbeddedCurvePoint { x: 1, y: 17631683881184975370165255887551781615748388533673675138860, is_infinite: false };\n    let scalar = EmbeddedCurveScalar { lo: scalar_low, hi: scalar_high };\n    multi_scalar_mul([g1], [scalar])\n}\n\n// This is a hack as returning an `EmbeddedCurvePoint` from a foreign function in brillig returns a [BrilligVariable::SingleAddr; 2] rather than BrilligVariable::BrilligArray\n// as is defined in the brillig bytecode format. This is a workaround which allows us to fix this without modifying the serialization format.\n// docs:start:embedded_curve_add\nfn embedded_curve_add(\n    point1: EmbeddedCurvePoint,\n    point2: EmbeddedCurvePoint\n) -> EmbeddedCurvePoint\n// docs:end:embedded_curve_add\n{\n    let point_array = embedded_curve_add_array_return(point1, point2);\n    let x = point_array[0];\n    let y = point_array[1];\n    EmbeddedCurvePoint { x, y, is_infinite: point_array[2] == 1 }\n}\n\n#[foreign(embedded_curve_add)]\nfn embedded_curve_add_array_return(_point1: EmbeddedCurvePoint, _point2: EmbeddedCurvePoint) -> [Field; 3] {}\n"},"211":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/log_hash.nr","source":"use crate::{\n    abis::side_effect::{Ordered, OrderedValue, Scoped}, address::AztecAddress,\n    constants::{\n    LOG_HASH_LENGTH, NOTE_LOG_HASH_LENGTH, ENCRYPTED_LOG_HASH_LENGTH, SCOPED_LOG_HASH_LENGTH,\n    SCOPED_ENCRYPTED_LOG_HASH_LENGTH\n},\n    traits::{Empty, Serialize, Deserialize}, utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct LogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n}\n\nimpl Ordered for LogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for LogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for LogHash {\n    fn eq(self, other: LogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n    }\n}\n\nimpl Empty for LogHash {\n    fn empty() -> Self {\n        LogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n        }\n    }\n}\n\nimpl Serialize<LOG_HASH_LENGTH> for LogHash {\n    fn serialize(self) -> [Field; LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length]\n    }\n}\n\nimpl Deserialize<LOG_HASH_LENGTH> for LogHash {\n    fn deserialize(values: [Field; LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n        }\n    }\n}\n\nimpl LogHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedLogHash {\n        ScopedLogHash { log_hash: self, contract_address }\n    }\n}\n\nstruct ScopedLogHash {\n    log_hash: LogHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<LogHash> for ScopedLogHash {\n    fn inner(self) -> LogHash {\n        self.log_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedLogHash {\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedLogHash {\n    fn value(self) -> Field {\n        self.log_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl Eq for ScopedLogHash {\n    fn eq(self, other: ScopedLogHash) -> bool {\n        (self.log_hash == other.log_hash)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedLogHash {\n    fn empty() -> Self {\n        ScopedLogHash {\n            log_hash: LogHash::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_LOG_HASH_LENGTH> for ScopedLogHash {\n    fn serialize(self) -> [Field; SCOPED_LOG_HASH_LENGTH] {\n       array_concat(self.log_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_LOG_HASH_LENGTH> for ScopedLogHash {\n    fn deserialize(values: [Field; SCOPED_LOG_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            log_hash: reader.read_struct(LogHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl ScopedLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the counter when exposing to public.\n        // The log hash must already be siloed when we call this.\n        LogHash { value: self.log_hash.value, counter: 0, length: self.log_hash.length }\n    }\n}\n\nstruct EncryptedLogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n    randomness: Field,\n}\n\nimpl Ordered for EncryptedLogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for EncryptedLogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for EncryptedLogHash {\n    fn eq(self, other: EncryptedLogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n            & (self.randomness == other.randomness) \n    }\n}\n\nimpl Empty for EncryptedLogHash {\n    fn empty() -> Self {\n        EncryptedLogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n            randomness: 0,\n        }\n    }\n}\n\nimpl Serialize<ENCRYPTED_LOG_HASH_LENGTH> for EncryptedLogHash {\n    fn serialize(self) -> [Field; ENCRYPTED_LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length, self.randomness]\n    }\n}\n\nimpl Deserialize<ENCRYPTED_LOG_HASH_LENGTH> for EncryptedLogHash {\n    fn deserialize(values: [Field; ENCRYPTED_LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n            randomness: values[3],\n        }\n    }\n}\n\nimpl EncryptedLogHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedEncryptedLogHash {\n        ScopedEncryptedLogHash { log_hash: self, contract_address }\n    }\n}\n\nstruct ScopedEncryptedLogHash {\n    log_hash: EncryptedLogHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<EncryptedLogHash> for ScopedEncryptedLogHash {\n    fn inner(self) -> EncryptedLogHash {\n        self.log_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl ScopedEncryptedLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the secret randomness and counter when exposing to public\n        // Expose as a LogHash rather than EncryptedLogHash to avoid bringing an unnec. 0 value around\n        // The log hash will already be silo'd when we call this\n        LogHash { value: self.log_hash.value, counter: 0, length: self.log_hash.length }\n    }\n}\n\nimpl Ordered for ScopedEncryptedLogHash {\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedEncryptedLogHash {\n    fn value(self) -> Field {\n        self.log_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl Eq for ScopedEncryptedLogHash {\n    fn eq(self, other: ScopedEncryptedLogHash) -> bool {\n        (self.log_hash == other.log_hash)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedEncryptedLogHash {\n    fn empty() -> Self {\n        ScopedEncryptedLogHash {\n            log_hash: EncryptedLogHash::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_ENCRYPTED_LOG_HASH_LENGTH> for ScopedEncryptedLogHash {\n    fn serialize(self) -> [Field; SCOPED_ENCRYPTED_LOG_HASH_LENGTH] {\n       array_concat(self.log_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_ENCRYPTED_LOG_HASH_LENGTH> for ScopedEncryptedLogHash {\n    fn deserialize(values: [Field; SCOPED_ENCRYPTED_LOG_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            log_hash: reader.read_struct(EncryptedLogHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nstruct NoteLogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n    note_hash_counter: u32,\n}\n\nimpl NoteLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the actual counter and note hash counter when exposing it to the public kernel.\n        // The counter is usually note_hash.counter + 1, so it can be revealing.\n        // Expose as a LogHash rather than NoteLogHash to avoid bringing an unnec. 0 value around\n        LogHash { value: self.value, counter: 0, length: self.length }\n    }\n}\n\nimpl Ordered for NoteLogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for NoteLogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for NoteLogHash {\n    fn eq(self, other: NoteLogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n            & (self.note_hash_counter == other.note_hash_counter) \n    }\n}\n\nimpl Empty for NoteLogHash {\n    fn empty() -> Self {\n        NoteLogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n            note_hash_counter: 0,\n        }\n    }\n}\n\nimpl Serialize<NOTE_LOG_HASH_LENGTH> for NoteLogHash {\n    fn serialize(self) -> [Field; NOTE_LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length, self.note_hash_counter as Field]\n    }\n}\n\nimpl Deserialize<NOTE_LOG_HASH_LENGTH> for NoteLogHash {\n    fn deserialize(values: [Field; NOTE_LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n            note_hash_counter: values[3] as u32,\n        }\n    }\n}\n"},"215":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/append_only_tree_snapshot.nr","source":"struct AppendOnlyTreeSnapshot {\n    root : Field,\n    // TODO(Alvaro) change this to a u64\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: u32 = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n"},"216":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n}\n// docs:end:call-context\n\nimpl Eq for CallContext {\n    fn eq(self, other: CallContext) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        let mut serialized: BoundedVec<Field, CALL_CONTEXT_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.msg_sender.to_field());\n        serialized.push(self.storage_contract_address.to_field());\n        serialized.push(self.function_selector.to_field());\n        serialized.push(self.is_delegate_call as Field);\n        serialized.push(self.is_static_call as Field);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        let mut reader = Reader::new(serialized);\n        CallContext {\n            msg_sender: AztecAddress::from_field(reader.read()),\n            storage_contract_address: AztecAddress::from_field(reader.read()),\n            function_selector: FunctionSelector::from_field(reader.read()),\n            is_delegate_call: reader.read() as bool,\n            is_static_call: reader.read() as bool,\n        }\n    }\n}\n\nimpl Empty for CallContext {\n    fn empty() -> Self {\n        CallContext {\n            msg_sender: AztecAddress::empty(),\n            storage_contract_address: AztecAddress::empty(),\n            function_selector: FunctionSelector::empty(),\n            is_delegate_call: false,\n            is_static_call: false,\n        }\n    }\n}\n\n#[test]\nfn serialize_deserialize_of_empty() {\n    let context = CallContext::empty();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = true;\n\n    let address: AztecAddress = AztecAddress::from_field(69420);\n    context1.msg_sender = address;\n    context2.msg_sender = address;\n\n    assert(context1.eq(context2));\n}\n\n#[test(should_fail)]\nfn not_eq_test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = false;\n\n    let address1: AztecAddress = AztecAddress::from_field(69420);\n    let address2: AztecAddress = AztecAddress::from_field(42069);\n\n    context1.msg_sender = address1;\n    context2.msg_sender = address2;\n\n    assert(context1.eq(context2));\n}\n\n#[test]\nfn hash_smoke() {\n    let context = CallContext::empty();\n    let _hashed = context.hash();\n}\n"},"217":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/max_block_number.nr","source":"use crate::{constants::MAX_BLOCK_NUMBER_LENGTH, traits::{Deserialize, Serialize, Empty}};\n\nstruct MaxBlockNumber {\n    _opt: Option<u32>\n}\n\nimpl Empty for MaxBlockNumber {\n    fn empty() -> Self {\n        Self { _opt: Option::none() }\n    }\n}\n\nimpl Eq for MaxBlockNumber {\n    fn eq(self, other: Self) -> bool {\n        self._opt == other._opt\n    }\n}\n\nimpl Serialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn serialize(self) -> [Field; MAX_BLOCK_NUMBER_LENGTH] {\n        [self._opt._is_some as Field, self._opt._value as Field]\n    }\n}\n\nimpl Deserialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn deserialize(serialized: [Field; MAX_BLOCK_NUMBER_LENGTH]) -> MaxBlockNumber {\n        MaxBlockNumber {\n            _opt: Option {\n                _is_some: serialized[0] as bool,\n                _value: serialized[1] as u32,\n            }\n        }\n    }\n}\n\nimpl MaxBlockNumber {\n    pub fn new(max_block_number: u32) -> Self {\n        Self { _opt: Option::some(max_block_number) }\n    }\n\n    pub fn is_none(self) -> bool {\n        self._opt.is_none()\n    }\n\n    pub fn is_some(self) -> bool {\n        self._opt.is_some()\n    }\n\n    pub fn unwrap(self) -> u32 {\n        self._opt.unwrap()\n    }\n\n    pub fn unwrap_unchecked(self) -> u32 {\n        self._opt.unwrap_unchecked()\n    }\n\n    pub fn min(lhs: MaxBlockNumber, rhs: MaxBlockNumber) -> MaxBlockNumber {\n        if rhs.is_none() {\n            lhs // lhs might also be none, but in that case both would be\n        } else {\n            MaxBlockNumber::min_with_u32(lhs, rhs.unwrap_unchecked())\n        }\n    }\n\n    pub fn min_with_u32(lhs: MaxBlockNumber, rhs: u32) -> MaxBlockNumber {\n        if lhs._opt.is_none() {\n            MaxBlockNumber::new(rhs)\n        } else {\n            let lhs_value = lhs._opt.unwrap_unchecked();\n\n            MaxBlockNumber::new(if lhs_value < rhs { lhs_value } else { rhs })\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = MaxBlockNumber::empty();\n    let serialized = item.serialize();\n    let deserialized = MaxBlockNumber::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn zeroed_is_none() {\n    // Large parts of the kernel rely on zeroed to initialize structs. This conveniently matches what `default` does,\n    // and though we should eventually move everything to use `default`, it's good to check for now that both are\n    // equivalent.\n    let a = MaxBlockNumber::empty();\n    assert(a.is_none());\n}\n\n#[test]\nfn serde_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert(b.is_none());\n}\n\n#[test]\nfn serde_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert_eq(b.unwrap(), 13);\n}\n\n#[test(should_fail)]\nfn default_unwrap_panics() {\n    let a = MaxBlockNumber::empty();\n    let _ = a.unwrap();\n}\n\n#[test]\nfn min_default_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::empty();\n\n    assert(MaxBlockNumber::min(a, b).is_none());\n}\n\n#[test]\nfn min_default_some() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::new(13);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_some_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::new(42);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_with_u32_default() {\n    let a = MaxBlockNumber::empty();\n    let b = 42;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 42);\n}\n\n#[test]\nfn min_with_u32_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = 42;\n    let c = 8;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min_with_u32(a, c).unwrap(), 8);\n}\n"},"22":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.to_le_radix(256, num_bytes);\n    let y_bytes = y.to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    let borrow = lte_16_hint(alo, blo);\n\n    let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n    let rhi = ahi - bhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Take hints of the decomposition\n        let (xlo, xhi) = decompose_hint(x);\n\n        // Range check the limbs\n        xlo.assert_max_bit_size(128);\n        xhi.assert_max_bit_size(128);\n\n        // Check that the decomposition is correct\n        assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n        // Assert that the decomposition of P is greater than the decomposition of x\n        assert_gt_limbs((PLO, PHI), (xlo, xhi));\n        (xlo, xhi)\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else  {\n        // Take a hint of the comparison and verify it\n        if lt_32_hint(a, b) {\n            assert_gt(b, a);\n            false\n        } else {\n            assert_gt(a, b);\n            true\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose_hint, decompose, compute_lt, assert_gt, gt, lt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"220":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize, Empty}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        (self.is_private == other.is_private)\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nimpl Empty for FunctionData {\n    fn empty() -> Self {\n        FunctionData {\n            selector: FunctionSelector::empty(),\n            is_private: false\n        }\n    }\n\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data = FunctionData::empty();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data = FunctionData::empty();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty function data hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"227":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/messaging/l2_to_l1_message.nr","source":"use crate::{\n    address::{AztecAddress, EthAddress},\n    constants::{L2_TO_L1_MESSAGE_LENGTH, SCOPED_L2_TO_L1_MESSAGE_LENGTH},\n    abis::side_effect::{Ordered, Scoped}, traits::{Deserialize, Empty, Serialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\n// Note: Not to be confused with L2ToL1Msg in Solidity\nstruct L2ToL1Message {\n    recipient: EthAddress,\n    content: Field,\n    counter: u32,\n}\n\nimpl Ordered for L2ToL1Message {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Empty for L2ToL1Message {\n    fn empty() -> Self {\n        Self {\n            recipient: EthAddress::empty(),\n            content: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Eq for L2ToL1Message {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient) & (self.content == other.content) & (self.counter == other.counter)\n    }\n}\n\nimpl Serialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn serialize(self) -> [Field; L2_TO_L1_MESSAGE_LENGTH] {\n        [self.recipient.to_field(), self.content, self.counter as Field]\n    }\n}\n\nimpl Deserialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn deserialize(values: [Field; L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        Self {\n            recipient: EthAddress::from_field(values[0]),\n            content: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n\nimpl L2ToL1Message {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedL2ToL1Message {\n        ScopedL2ToL1Message { message: self, contract_address }\n    }\n}\n\nstruct ScopedL2ToL1Message {\n    message: L2ToL1Message,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<L2ToL1Message> for ScopedL2ToL1Message {\n    fn inner(self) -> L2ToL1Message {\n        self.message\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedL2ToL1Message {\n    fn counter(self) -> u32 {\n        self.message.counter\n    }\n}\n\nimpl Eq for ScopedL2ToL1Message {\n    fn eq(self, other: ScopedL2ToL1Message) -> bool {\n        (self.message == other.message)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedL2ToL1Message {\n    fn empty() -> Self {\n        ScopedL2ToL1Message {\n            message: L2ToL1Message::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_L2_TO_L1_MESSAGE_LENGTH> for ScopedL2ToL1Message {\n    fn serialize(self) -> [Field; SCOPED_L2_TO_L1_MESSAGE_LENGTH] {\n        array_concat(self.message.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_L2_TO_L1_MESSAGE_LENGTH> for ScopedL2ToL1Message {\n    fn deserialize(values: [Field; SCOPED_L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            message: reader.read_struct(L2ToL1Message::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\n#[test]\nfn serialization_of_empty_l2() {\n    let item = L2ToL1Message::empty();\n    let serialized = item.serialize();\n    let deserialized = L2ToL1Message::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped_l2() {\n    let item = ScopedL2ToL1Message::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedL2ToL1Message::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"229":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::pedersen_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n"},"23":{"path":"std/field/mod.nr","source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n"},"235":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<N> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<N> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\nimpl<N> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let mut result = [0; N];\n        let bytes: [u8; N] = self.as_bytes();\n        for i in 0..N {\n            result[i] = field_from_bytes([bytes[i];1], true);\n        }\n        result\n    }\n}\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<N> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n"},"236":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr","source":"// Utility function to console.log data in the acir simulator\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<M, N>(_msg: str<M>, args: [Field]) {}\n\n/// NOTE: call this with a str<N> msg of form\n/// \"some string with {0} and {1} ... {N}\"\n/// and an array of N field which will be formatted\n/// into the string in the simulator.\n/// Example:\n/// debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n/// debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\nunconstrained pub fn debug_log_format<M, N>(msg: str<M>, args: [Field; N]) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n/// NOTE: call this with a str<N> msg of length > 1\n/// Example:\n/// `debug_log(\"blah blah this is a debug string\");`\nunconstrained pub fn debug_log<N>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n"},"237":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/content_commitment.nr","source":"use crate::{\n    constants::CONTENT_COMMITMENT_LENGTH, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct ContentCommitment {\n  num_txs: Field,\n  txs_effects_hash: Field,\n  in_hash: Field,\n  out_hash: Field,\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new();\n\n    fields.push(self.num_txs);\n    fields.push(self.txs_effects_hash);\n    fields.push(self.in_hash);\n    fields.push(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let num_txs = serialized[0];\n\n    let txs_effects_hash = serialized[1];\n\n    let in_hash = serialized[2];\n\n    let out_hash = serialized[3];\n\n    Self {\n      num_txs,\n      txs_effects_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      num_txs: 0,\n      txs_effects_hash: 0,\n      in_hash: 0,\n      out_hash: 0,\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.num_txs == other.num_txs)\n      & (self.txs_effects_hash == other.txs_effects_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n"},"238":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            std::hash::pedersen_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"239":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/header.nr","source":"use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, STATE_REFERENCE_LENGTH, CONTENT_COMMITMENT_LENGTH},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n    total_fees: Field\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables) &\n        self.total_fees.eq(other.total_fees)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n        fields.push(self.total_fees);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n        offset = offset + GLOBAL_VARIABLES_LENGTH;\n\n        let total_fees = serialized[offset];\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n            total_fees\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n            total_fees: 0\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header = Header::empty();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header = Header::empty();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header = Header::empty();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x124e8c40a6eca2e3ad10c04050b01a3fad00df3cea47b13592c7571b6914c7a7;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"240":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path, messaging::l2_to_l1_message::ScopedL2ToL1Message,\n    recursion::verification_key::VerificationKey, traits::is_empty,\n    utils::field::field_from_bytes_32_trunc\n};\nuse std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    pedersen_hash(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, inner_note_hash: Field) -> Field {\n    let inputs = [nonce, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_encrypted_log_hash(address: AztecAddress, randomness: Field, log_hash: Field) -> Field {\n    // TODO: Using 0 GENERATOR_INDEX here as interim before we move to posiedon\n    // NB: A unique separator will be needed for masked_contract_address\n    let mut masked_contract_address = pedersen_hash([address.to_field(), randomness], 0);\n    if randomness == 0 {\n        // In some cases, we actually want to reveal the contract address we are siloing with:\n        // e.g. 'handshaking' contract w/ known address\n        // An app providing randomness = 0 signals to not mask the address.\n        masked_contract_address = address.to_field();\n    }\n    accumulate_sha256([masked_contract_address, log_hash])\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedEncryptedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_encrypted_log_hash(\n            log_hash.contract_address,\n            log_hash.log_hash.randomness,\n            log_hash.log_hash.value\n        )\n    }\n}\n\npub fn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly. \npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<N>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n"},"241":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/partial_state_reference.nr","source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0], \n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial = PartialStateReference::empty();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n"},"243":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/transaction/tx_context.nr","source":"use crate::{\n    constants::{GENERATOR_INDEX__TX_CONTEXT, TX_CONTEXT_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader,\n    abis::gas_settings::GasSettings\n};\n\n// docs:start:tx-context\nstruct TxContext {\n    chain_id : Field,\n    version : Field,\n    gas_settings: GasSettings,\n}\n// docs:end:tx-context\n\nimpl TxContext {\n    pub fn new(chain_id: Field, version: Field, gas_settings: GasSettings) -> Self {\n        TxContext { chain_id, version, gas_settings }\n    }\n}\n\nimpl Eq for TxContext {\n    fn eq(self, other: Self) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.gas_settings.eq(other.gas_settings))\n    }\n}\n\nimpl Empty for TxContext {\n    fn empty() -> Self {\n        TxContext {\n            chain_id: 0,\n            version: 0,\n            gas_settings: GasSettings::empty(),\n        }\n    }\n}\n\nimpl Serialize<TX_CONTEXT_LENGTH> for TxContext {\n    fn serialize(self) -> [Field; TX_CONTEXT_LENGTH] {\n        let mut fields: BoundedVec<Field, TX_CONTEXT_LENGTH> = BoundedVec::new();\n\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.extend_from_array(self.gas_settings.serialize());\n\n        assert_eq(fields.len(), TX_CONTEXT_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<TX_CONTEXT_LENGTH> for TxContext {\n    fn deserialize(serialized: [Field; TX_CONTEXT_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let context = Self {\n            chain_id: reader.read(),\n            version: reader.read(),\n            gas_settings: reader.read_struct(GasSettings::deserialize),\n        };\n\n        reader.finish();\n        context\n    }\n}\n\nimpl Hash for TxContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__TX_CONTEXT)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context = TxContext::empty();\n    let serialized = context.serialize();\n    let deserialized = TxContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let context = TxContext::empty();\n    let hash = context.hash();\n\n    // Value from tx_context.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x17e4357684c5a4349b4587c95b0b6161dcb4a3c5b02d4eb2ecc3b02c80193261;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"246":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/point.nr","source":"use dep::std::embedded_curve_ops::EmbeddedCurvePoint as Point;\nuse crate::{traits::{Empty, Hash, Serialize}, hash::poseidon2_hash};\n\nglobal POINT_LENGTH: Field = 3;\n\nimpl Serialize<POINT_LENGTH> for Point {\n    fn serialize(self: Self) -> [Field; POINT_LENGTH] {\n        [self.x, self.y, self.is_infinite as Field]\n    }\n}\n\nimpl Hash for Point {\n    fn hash(self) -> Field {\n        poseidon2_hash(self.serialize())\n    }\n}\n\nimpl Empty for Point {\n    /// Note: Does not return a valid point on curve - instead represents an empty/\"unpopulated\" point struct (e.g.\n    /// empty/unpopulated value in an array of points).\n    fn empty() -> Self {\n        Point {\n            x: 0,\n            y: 0,\n            is_infinite: false\n        }\n    }\n}\n\n/// Converts a public key to a byte array.\n///\n/// We don't serialize the point at infinity flag because this function is used in situations where we do not want\n/// to waste the extra byte (encrypted log).\npub fn pub_key_to_bytes(pk: Point) -> [u8; 64] {\n    assert(!pk.is_infinite, \"Point at infinity is not a valid public key.\");\n    let mut result = [0 as u8; 64];\n    let x_bytes = pk.x.to_be_bytes(32);\n    let y_bytes = pk.y.to_be_bytes(32);\n    for i in 0..32 {\n        result[i] = x_bytes[i];\n        result[i + 32] = y_bytes[i];\n    }\n    result\n}\n"},"247":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"249":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/state_reference.nr","source":"use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state = StateReference::empty();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n"},"25":{"path":"std/hash/mod.nr","source":"mod poseidon;\nmod mimc;\nmod poseidon2;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::sha256::{digest, sha256_var};\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul};\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n#[no_predicates]\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    let value = pedersen_commitment_with_separator(input, 0);\n    if (value.x == 0) & (value.y == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value.x, y: value.y, is_infinite: false }\n    }\n}\n\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        points[i] = EmbeddedCurveScalar::from_field(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let values = multi_scalar_mul(generators, points);\n    EmbeddedCurvePoint { x: values[0], y: values[1], is_infinite: values[2] as bool }\n}\n\n#[no_predicates]\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    EmbeddedCurvePoint { x: values[0], y: values[1], is_infinite: false }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    crate::assert_constant(starting_index);\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let v1 = pedersen_commitment_with_separator(input, separator);\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    multi_scalar_mul(\n        [length_generator[0], v1],\n        [EmbeddedCurveScalar { lo: N as Field, hi: 0 }, EmbeddedCurveScalar { lo: 1, hi: 0 }]\n    )[0]\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes(32).as_array();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n#[test]\nfn assert_pedersen_noir() {\n    // TODO: make this a fuzzer test once fuzzer supports curve-specific blackbox functions.\n    let input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    assert_eq(pedersen_hash_with_separator(input, 4), pedersen_hash_with_separator_noir(input, 4));\n    assert_eq(pedersen_commitment_with_separator(input, 4), pedersen_commitment_with_separator_noir(input, 4));\n}\n"},"263":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"struct Reader<N> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"273":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes = field.to_be_bytes(31);\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2 = field.to_be_bytes(31);\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n"},"275":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"289":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr","source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n"},"290":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId, hash::poseidon2_hash,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash([pub_keys_hash.to_field(), partial_address.to_field(), GENERATOR_INDEX__CONTRACT_ADDRESS_V1])\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x1b6ead051e7b42665064ca6cf1ec77da0a36d86e00d1ff6e44077966c0c3a9fa;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"292":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\n    address::{\n    eth_address::EthAddress, salted_initialization_hash::SaltedInitializationHash,\n    aztec_address::AztecAddress\n},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::pedersen_hash, traits::{ToField, FromField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH = 1;\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n       PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"293":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\n    address::{eth_address::EthAddress, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"30":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\nglobal RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) -> [Field; RATE] {\n        // zero-pad the cache\n        for i in 0..RATE {\n            if i >= self.cache_size {\n                self.cache[i] = 0;\n            }\n        }\n        // add the cache into sponge state\n        for i in 0..RATE {\n            self.state[i] += self.cache[i];\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n        // return `RATE` number of field elements from the sponge state.\n        let mut result = [0; RATE];\n        for i in 0..RATE {\n            result[i] = self.state[i];\n        }\n        result\n    }\n\n    fn absorb(&mut self, input: Field) {\n        if (!self.squeeze_mode) & (self.cache_size == RATE) {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            let _ = self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else if (!self.squeeze_mode) & (self.cache_size != RATE) {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        } else if self.squeeze_mode {\n            // If we're in squeeze mode, switch to absorb mode and add the input into the cache.\n            // N.B. I don't think this code path can be reached?!\n            self.cache[0] = input;\n            self.cache_size = 1;\n            self.squeeze_mode = false;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        if self.squeeze_mode & (self.cache_size == 0) {\n            // If we're in squeze mode and the cache is empty, there is nothing left to squeeze out of the sponge!\n            // Switch to absorb mode.\n            self.squeeze_mode = false;\n            self.cache_size = 0;\n        }\n        if !self.squeeze_mode {\n            // If we're in absorb mode, apply sponge permutation to compress the cache, populate cache with compressed\n            // state and switch to squeeze mode. Note: this code block will execute if the previous `if` condition was\n            // matched\n            let new_output_elements = self.perform_duplex();\n            self.squeeze_mode = true;\n            for i in 0..RATE {\n                self.cache[i] = new_output_elements[i];\n            }\n            self.cache_size = RATE;\n        }\n        // By this point, we should have a non-empty cache. Pop one item off the top of the cache and return it.\n        let result = self.cache[0];\n        for i in 1..RATE {\n            if i < self.cache_size {\n                self.cache[i - 1] = self.cache[i];\n            }\n        }\n        self.cache_size -= 1;\n        self.cache[self.cache_size] = 0;\n        result\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n"},"32":{"path":"std/merkle.nr","source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<let N: u32>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n"},"330":{"path":"/usr/src/noir-projects/aztec-nr/value-note/src/value_note.nr","source":"use dep::aztec::{\n    protocol_types::{\n    address::AztecAddress, traits::{Deserialize, Serialize}, constants::GENERATOR_INDEX__NOTE_NULLIFIER,\n    hash::poseidon2_hash\n},\n    note::{note_header::NoteHeader, note_interface::NoteInterface, utils::compute_note_hash_for_consumption},\n    oracle::unsafe_rand::unsafe_rand, keys::getters::get_nsk_app, context::PrivateContext\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n// VALUE_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal VALUE_NOTE_BYTES_LEN: Field = 3 * 32 + 64;\n\n// docs:start:value-note-def\n#[aztec(note)]\nstruct ValueNote {\n    value: Field,\n   // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    randomness: Field,\n}\n// docs:end:value-note-def\n\nimpl NoteInterface<VALUE_NOTE_LEN, VALUE_NOTE_BYTES_LEN> for ValueNote {\n    // docs:start:nullifier\n\n    fn compute_note_hash_and_nullifier(self, context: &mut PrivateContext) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n\n    // docs:end:nullifier\n\n    fn compute_note_hash_and_nullifier_without_context(self) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, npk_m_hash: Field) -> Self {\n        let randomness = unsafe_rand();\n        let header = NoteHeader::empty();\n        ValueNote { value, npk_m_hash, randomness, header }\n    }\n}\n\nimpl Serialize<7> for ValueNote {\n    fn serialize(self) -> [Field; 7] {\n        let header = self.header.serialize();\n\n        [self.value, self.npk_m_hash, self.randomness, header[0], header[1], header[2], header[3]]\n    }\n}\n"},"358":{"path":"/usr/src/noir-projects/noir-contracts/contracts/test_contract/src/main.nr","source":"mod test_note;\n\n// A contract used for testing a random hodgepodge of small features from simulator and end-to-end tests.\ncontract Test {\n\n    use dep::aztec::prelude::{\n        AztecAddress, EthAddress, FunctionSelector, NoteHeader, NoteGetterOptions, NoteViewerOptions,\n        PrivateContext, PrivateImmutable, PrivateSet, SharedImmutable\n    };\n    use dep::aztec::encrypted_logs::encrypted_note_emission::encode_and_encrypt_note;\n    use dep::aztec::encrypted_logs::encrypted_event_emission::encode_and_encrypt_event_with_keys_with_randomness;\n\n    use dep::aztec::protocol_types::{\n        abis::private_circuit_public_inputs::PrivateCircuitPublicInputs,\n        constants::{MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, CANONICAL_KEY_REGISTRY_ADDRESS},\n        traits::{Serialize, ToField, FromField}, point::Point, scalar::Scalar,\n        storage::map::derive_storage_slot_in_map\n    };\n\n    use dep::aztec::encrypted_logs::header::EncryptedLogHeader;\n    use dep::aztec::encrypted_logs::incoming_body::EncryptedLogIncomingBody;\n    use dep::aztec::encrypted_logs::outgoing_body::EncryptedLogOutgoingBody;\n\n    use dep::aztec::note::constants::MAX_NOTES_PER_PAGE;\n\n    use dep::aztec::state_vars::{shared_mutable::SharedMutablePrivateGetter};\n\n    use dep::aztec::{\n        context::inputs::private_context_inputs::PrivateContextInputs,\n        hash::{pedersen_hash, compute_secret_hash, ArgsHasher},\n        note::{\n        lifecycle::{create_note, destroy_note}, note_getter::{get_notes, view_notes},\n        note_getter_options::NoteStatus\n    },\n        deploy::deploy_contract as aztec_deploy_contract,\n        oracle::{encryption::aes128_encrypt, unsafe_rand::unsafe_rand}\n    };\n    use dep::token_portal_content_hash_lib::{get_mint_private_content_hash, get_mint_public_content_hash};\n    use dep::value_note::value_note::ValueNote;\n\n    use crate::test_note::TestNote;\n\n    #[aztec(event)]\n    struct ExampleEvent {\n        value0: Field,\n        value1: Field,\n        value2: Field,\n        value3: Field,\n        value4: Field,\n    }\n\n    #[aztec(storage)]\n    struct Storage {\n        example_constant: PrivateImmutable<TestNote>,\n        example_set: PrivateSet<TestNote>,\n    }\n\n    #[aztec(private)]\n    fn get_ovsk_app(ovpk_m_hash: Field) -> Field {\n        context.request_ovsk_app(ovpk_m_hash)\n    }\n\n    #[aztec(private)]\n    fn get_master_incoming_viewing_public_key(address: AztecAddress) -> [Field; 2] {\n        let header = context.get_header();\n        let pub_key = header.get_ivpk_m(&mut context, address);\n\n        [pub_key.x, pub_key.y]\n    }\n\n    // Get the address of this contract (taken from the input context)\n    #[aztec(private)]\n    fn get_this_address() -> AztecAddress {\n        context.this_address()\n    }\n\n    #[aztec(private)]\n    fn set_tx_max_block_number(max_block_number: u32, enqueue_public_call: bool) {\n        context.set_tx_max_block_number(max_block_number);\n\n        if enqueue_public_call {\n            Test::at(context.this_address()).dummy_public_call().enqueue(&mut context)\n        }\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn dummy_public_call() {}\n\n    #[aztec(private)]\n    fn call_create_note(\n        value: Field,\n        owner: AztecAddress,\n        outgoing_viewer: AztecAddress,\n        storage_slot: Field\n    ) {\n        assert(\n            storage_slot != storage.example_constant.get_storage_slot(), \"this storage slot is reserved for example_constant\"\n        );\n\n        let header = context.get_header();\n        let owner_npk_m_hash = header.get_npk_m_hash(&mut context, owner);\n\n        let mut note = ValueNote::new(value, owner_npk_m_hash);\n        create_note(&mut context, storage_slot, &mut note).emit(encode_and_encrypt_note(&mut context, outgoing_viewer, owner));\n    }\n\n    #[aztec(private)]\n    fn call_get_notes(storage_slot: Field, active_or_nullified: bool) -> Field {\n        assert(\n            storage_slot != storage.example_constant.get_storage_slot(), \"this storage slot is reserved for example_constant\"\n        );\n\n        let mut options = NoteGetterOptions::new();\n        if (active_or_nullified) {\n            options = options.set_status(NoteStatus.ACTIVE_OR_NULLIFIED);\n        }\n\n        let notes: BoundedVec<ValueNote, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = get_notes(&mut context, storage_slot, options);\n\n        notes.get(0).value\n    }\n\n    #[aztec(private)]\n    fn call_get_notes_many(storage_slot: Field, active_or_nullified: bool) -> [Field; 2] {\n        assert(\n            storage_slot != storage.example_constant.get_storage_slot(), \"this storage slot is reserved for example_constant\"\n        );\n\n        let mut options = NoteGetterOptions::new();\n        if (active_or_nullified) {\n            options = options.set_status(NoteStatus.ACTIVE_OR_NULLIFIED);\n        }\n\n        let notes: BoundedVec<ValueNote, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = get_notes(&mut context, storage_slot, options);\n\n        [notes.get(0).value, notes.get(1).value]\n    }\n\n    unconstrained fn call_view_notes(storage_slot: Field, active_or_nullified: bool) -> pub Field {\n        assert(\n            storage_slot != storage.example_constant.get_storage_slot(), \"this storage slot is reserved for example_constant\"\n        );\n\n        let mut options = NoteViewerOptions::new();\n        if (active_or_nullified) {\n            options = options.set_status(NoteStatus.ACTIVE_OR_NULLIFIED);\n        }\n\n        let notes: BoundedVec<ValueNote, MAX_NOTES_PER_PAGE> = view_notes(storage_slot, options);\n\n        notes.get(0).value\n    }\n\n    unconstrained fn call_view_notes_many(storage_slot: Field, active_or_nullified: bool) -> pub [Field; 2] {\n        assert(\n            storage_slot != storage.example_constant.get_storage_slot(), \"this storage slot is reserved for example_constant\"\n        );\n\n        let mut options = NoteViewerOptions::new();\n        if (active_or_nullified) {\n            options = options.set_status(NoteStatus.ACTIVE_OR_NULLIFIED);\n        }\n\n        let notes: BoundedVec<ValueNote, MAX_NOTES_PER_PAGE> = view_notes(storage_slot, options);\n\n        [notes.get(0).value, notes.get(1).value]\n    }\n\n    #[aztec(private)]\n    fn call_destroy_note(storage_slot: Field) {\n        assert(\n            storage_slot != storage.example_constant.get_storage_slot(), \"this storage slot is reserved for example_constant\"\n        );\n\n        let options = NoteGetterOptions::new();\n        let notes: BoundedVec<ValueNote, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL> = get_notes(&mut context, storage_slot, options);\n\n        let note = notes.get(0);\n\n        destroy_note(&mut context, note);\n    }\n\n    #[aztec(private)]\n    fn test_code_gen(\n        a_field: Field,\n        a_bool: bool,\n        a_number: u32,\n        an_array: [Field; 2],\n        a_struct: DummyNote,\n        a_deep_struct: DeepStruct\n    ) -> Field {\n        let mut args = ArgsHasher::new();\n        args.add(a_field);\n        args.add(a_bool as Field);\n        args.add(a_number as Field);\n        args.add_multiple(an_array);\n        args.add(a_struct.amount);\n        args.add(a_struct.secret_hash);\n        args.add(a_deep_struct.a_field);\n        args.add(a_deep_struct.a_bool as Field);\n        args.add(a_deep_struct.a_note.amount);\n        args.add(a_deep_struct.a_note.secret_hash);\n        for note in a_deep_struct.many_notes {\n            args.add(note.amount);\n            args.add(note.secret_hash);\n        }\n        args.hash()\n    }\n\n    #[aztec(private)]\n    fn test_setting_teardown() {\n        context.set_public_teardown_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"dummy_public_call()\"),\n            []\n        );\n    }\n\n    #[aztec(private)]\n    fn test_setting_fee_payer() {\n        context.set_as_fee_payer();\n    }\n\n    // Purely exists for testing\n    #[aztec(public)]\n    fn create_l2_to_l1_message_public(amount: Field, secret_hash: Field, portal_address: EthAddress) {\n        // Create a commitment to the amount\n        let note = DummyNote::new(amount, secret_hash);\n\n        // Public oracle call to emit new commitment.\n        context.message_portal(portal_address, note.get_commitment());\n    }\n\n    #[aztec(public)]\n    fn create_l2_to_l1_message_arbitrary_recipient_public(content: Field, recipient: EthAddress) {\n        // Public oracle call to emit new commitment.\n        context.message_portal(recipient, content);\n    }\n\n    #[aztec(private)]\n    fn create_l2_to_l1_message_arbitrary_recipient_private(content: Field, recipient: EthAddress) {\n        // Public oracle call to emit new commitment.\n        context.message_portal(recipient, content);\n    }\n\n    // Purely exists for testing\n    #[aztec(public)]\n    fn emit_nullifier_public(nullifier: Field) {\n        context.push_nullifier(nullifier, 0);\n    }\n\n    // Forcefully emits a nullifier (for testing purposes)\n    #[aztec(private)]\n    fn emit_nullifier(nullifier: Field) {\n        context.push_nullifier(nullifier, 0);\n    }\n\n    // For testing non-note encrypted logs\n    #[aztec(private)]\n    fn emit_array_as_encrypted_log(\n        fields: [Field; 5],\n        owner: AztecAddress,\n        outgoing_viewer: AztecAddress,\n        nest: bool\n    ) {\n        let header = context.get_header();\n        let outgoing_viewer_ovpk_m = header.get_ovpk_m(&mut context, outgoing_viewer);\n        let owner_ivpk_m = header.get_ivpk_m(&mut context, owner);\n\n        let event = ExampleEvent { value0: fields[0], value1: fields[1], value2: fields[2], value3: fields[3], value4: fields[4] };\n\n        event.emit(\n            encode_and_encrypt_event_with_keys_with_randomness(\n                &mut context,\n                // testing only - a secret random value is passed in here to salt / mask the address\n                5,\n                outgoing_viewer_ovpk_m,\n                owner_ivpk_m\n            )\n        );\n\n        // this contract has reached max number of functions, so using this one fn\n        // to test nested and non nested encrypted logs\n        if nest {\n            Test::at(context.this_address()).emit_array_as_encrypted_log([0, 0, 0, 0, 0], owner, outgoing_viewer, false).call(&mut context);\n\n            let otherEvent = ExampleEvent { value0: 1, value1: 2, value2: 3, value3: 4, value4: 5 };\n\n            otherEvent.emit(\n                encode_and_encrypt_event_with_keys_with_randomness(\n                    &mut context,\n                    // testing only - a randomness of 0 signals the kerels to not mask the address\n                    0,\n                    outgoing_viewer_ovpk_m,\n                    owner_ivpk_m\n                )\n            );\n        }\n    }\n\n    #[aztec(private)]\n    fn emit_encrypted_logs_nested(value: Field, owner: AztecAddress, outgoing_viewer: AztecAddress) {\n        let mut storage_slot = storage.example_constant.get_storage_slot() + 1;\n        Test::at(context.this_address()).call_create_note(value, owner, outgoing_viewer, storage_slot).call(&mut context);\n        storage_slot += 1;\n\n        let header = context.get_header();\n        let owner_npk_m_hash = header.get_npk_m_hash(&mut context, owner);\n\n        let mut note = ValueNote::new(value + 1, owner_npk_m_hash);\n        create_note(&mut context, storage_slot, &mut note).emit(encode_and_encrypt_note(&mut context, context.msg_sender(), owner));\n        storage_slot += 1;\n        Test::at(context.this_address()).call_create_note(value + 2, owner, outgoing_viewer, storage_slot).call(&mut context);\n    }\n\n    // docs:start:is-time-equal\n    #[aztec(public)]\n    fn is_time_equal(time: u64) -> u64 {\n        assert(context.timestamp() == time);\n        time\n    }\n    // docs:end:is-time-equal\n\n    #[aztec(public)]\n    fn emit_unencrypted(value: Field) {\n        // docs:start:emit_unencrypted\n        context.emit_unencrypted_log(/*message=*/ value);\n        context.emit_unencrypted_log(/*message=*/ [10, 20, 30]);\n        context.emit_unencrypted_log(/*message=*/ \"Hello, world!\");\n        // docs:end:emit_unencrypted\n    }\n\n    #[aztec(public)]\n    fn consume_mint_public_message(\n        to: AztecAddress,\n        amount: Field,\n        secret: Field,\n        message_leaf_index: Field,\n        portal_address: EthAddress\n    ) {\n        let content_hash = get_mint_public_content_hash(to, amount);\n        // Consume message and emit nullifier\n        context.consume_l1_to_l2_message(content_hash, secret, portal_address, message_leaf_index);\n    }\n\n    #[aztec(private)]\n    fn consume_mint_private_message(\n        secret_hash_for_redeeming_minted_notes: Field,\n        amount: Field,\n        secret_for_L1_to_L2_message_consumption: Field,\n        portal_address: EthAddress\n    ) {\n        // Consume L1 to L2 message and emit nullifier\n        let content_hash = get_mint_private_content_hash(secret_hash_for_redeeming_minted_notes, amount);\n        context.consume_l1_to_l2_message(\n            content_hash,\n            secret_for_L1_to_L2_message_consumption,\n            portal_address\n        );\n    }\n\n    #[aztec(public)]\n    fn consume_message_from_arbitrary_sender_public(\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        message_leaf_index: Field\n    ) {\n        // Consume message and emit nullifier\n        context.consume_l1_to_l2_message(content, secret, sender, message_leaf_index);\n    }\n\n    #[aztec(private)]\n    fn consume_message_from_arbitrary_sender_private(\n        content: Field,\n        secret: Field,\n        sender: EthAddress\n    ) {\n        // Consume message and emit nullifier\n        context.consume_l1_to_l2_message(content, secret, sender);\n    }\n\n    #[aztec(private)]\n    fn set_constant(value: Field) {\n        let mut note = TestNote::new(value);\n        storage.example_constant.initialize(&mut note).discard();\n    }\n\n    #[aztec(private)]\n    fn assert_private_global_vars(chain_id: Field, version: Field) {\n        assert(context.chain_id() == chain_id, \"Invalid chain id\");\n        assert(context.version() == version, \"Invalid version\");\n    }\n\n    #[aztec(private)]\n    fn encrypt(input: [u8; 64], iv: [u8; 16], key: [u8; 16]) -> [u8; 80] {\n        aes128_encrypt(input, iv, key)\n    }\n\n    #[aztec(private)]\n    fn encrypt_with_padding(input: [u8; 65], iv: [u8; 16], key: [u8; 16]) -> [u8; 80] {\n        aes128_encrypt(input, iv, key)\n    }\n\n    #[aztec(private)]\n    fn compute_note_header_ciphertext(secret: Scalar, point: Point) -> [u8; 48] {\n        EncryptedLogHeader::new(context.this_address()).compute_ciphertext(secret, point)\n    }\n\n    // 64 bytes + 32 * #fields + 16 = 112 bytes\n    #[aztec(private)]\n    fn compute_incoming_log_body_ciphertext(\n        secret: Scalar,\n        point: Point,\n        storage_slot: Field,\n        value: Field\n    ) -> [u8; 112] {\n        let note = TestNote::new(value);\n        EncryptedLogIncomingBody::from_note(note, storage_slot).compute_ciphertext(secret, point).as_array()\n    }\n\n    #[aztec(private)]\n    fn compute_outgoing_log_body_ciphertext(\n        eph_sk: Scalar,\n        recipient: AztecAddress,\n        recipient_ivpk_app: Point,\n        ovsk_app: Scalar\n    ) -> [u8; 176] {\n        let eph_pk = eph_sk.derive_public_key();\n        EncryptedLogOutgoingBody::new(eph_sk, recipient, recipient_ivpk_app).compute_ciphertext(ovsk_app, eph_pk)\n    }\n\n    #[aztec(public)]\n    fn assert_public_global_vars(\n        chain_id: Field,\n        version: Field,\n        block_number: Field,\n        timestamp: u64,\n        fee_per_da_gas: Field,\n        fee_per_l2_gas: Field\n    ) {\n        assert(context.chain_id() == chain_id, \"Invalid chain id\");\n        assert(context.version() == version, \"Invalid version\");\n        assert(context.block_number() == block_number, \"Invalid block number\");\n        assert(context.timestamp() == timestamp, \"Invalid timestamp\");\n        assert(context.fee_per_da_gas() == fee_per_da_gas, \"Invalid fee per da gas\");\n        assert(context.fee_per_l2_gas() == fee_per_l2_gas, \"Invalid fee per l2 gas\");\n    }\n\n    #[aztec(private)]\n    fn assert_header_private(header_hash: Field) {\n        assert(context.historical_header.hash() == header_hash, \"Invalid header hash\");\n    }\n\n    // TODO(4840): add AVM opcodes for getting header (members)\n    //#[aztec(public)]\n    //fn assert_header_public(header_hash: Field) {\n    //    assert(context.historical_header.hash() == header_hash, \"Invalid header hash\");\n    //}\n\n    #[aztec(private)]\n    fn deploy_contract(target: AztecAddress) {\n        aztec_deploy_contract(&mut context, target);\n    }\n\n    #[aztec(private)]\n    // Adapted from TokenContract#redeem_shield but without an initcheck so it can be run in simulator/src/client/private_execution.test.ts\n    fn consume_note_from_secret(secret: Field) {\n        let notes_set = storage.example_set;\n        let secret_hash = compute_secret_hash(secret);\n        let mut options = NoteGetterOptions::new();\n        options = options.select(TestNote::properties().value, secret_hash, Option::none()).set_limit(1);\n        let notes = notes_set.get_notes(options);\n        let note = notes.get_unchecked(0);\n        notes_set.remove(note);\n    }\n\n    unconstrained fn get_constant() -> pub Field {\n        let constant = storage.example_constant.view_note();\n        constant.value\n    }\n\n    // This function is used in the e2e_state_vars to test the SharedMutablePrivateGetter in isolation\n    #[aztec(private)]\n    fn test_shared_mutable_private_getter(\n        contract_address_to_read: AztecAddress,\n        storage_slot_of_shared_mutable: Field\n    ) -> Field {\n        // It's a bit wonky because we need to know the delay for get_current_value_in_private to work correctly\n        let test: SharedMutablePrivateGetter<AztecAddress, 5> = SharedMutablePrivateGetter::new(\n            &mut context,\n            contract_address_to_read,\n            storage_slot_of_shared_mutable\n        );\n\n        let ret = test.get_value_in_private(context.get_header());\n\n        ret.to_field()\n    }\n\n    // This function is used for testing the registry contract and fresh public key getters. If nothing exists in the registry, but we have added public\n    // keys to the pxe, this function will return nothing, but the public key getters will return the correct value\n    #[aztec(private)]\n    fn test_shared_mutable_private_getter_for_registry_contract(\n        storage_slot_of_shared_mutable: Field,\n        address_to_get_in_registry: AztecAddress\n    ) -> Field {\n        // We have to derive this slot to get the location of the shared mutable inside the Map\n        let derived_slot = derive_storage_slot_in_map(storage_slot_of_shared_mutable, address_to_get_in_registry);\n\n        // It's a bit wonky because we need to know the delay for get_current_value_in_private to work correctly\n        let registry_private_getter: SharedMutablePrivateGetter<Field, 5> = SharedMutablePrivateGetter::new(\n            &mut context,\n            AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n            derived_slot\n        );\n        registry_private_getter.get_value_in_private(context.get_header())\n    }\n\n    #[aztec(private)]\n    fn test_nullifier_key_freshness(address: AztecAddress, public_nullifying_key: Point) {\n        assert_eq(context.get_header().get_npk_m(&mut context, address), public_nullifying_key);\n    }\n\n    // Purely exists for testing\n    unconstrained fn get_random(kinda_seed: Field) -> pub Field {\n        kinda_seed * unsafe_rand()\n    }\n\n    struct DummyNote {\n        amount: Field,\n        secret_hash: Field\n    }\n\n    impl DummyNote {\n        fn new(amount: Field, secret_hash: Field) -> Self {\n            Self { amount, secret_hash }\n        }\n\n        fn get_commitment(self) -> Field {\n            pedersen_hash([self.amount, self.secret_hash], 0)\n        }\n    }\n\n    impl Serialize<2> for DummyNote {\n        fn serialize(self) -> [Field; 2] {\n            [self.amount, self.secret_hash]\n        }\n    }\n\n    struct DeepStruct {\n        a_field: Field,\n        a_bool: bool,\n        a_note: DummyNote,\n        many_notes: [DummyNote; 3],\n    }\n\n    // Serializing using \"canonical\" form. \n    // 1. Everything that fits in a field, *becomes* a Field\n    // 2. Strings become arrays of bytes (no strings here)\n    // 4. Arrays become arrays of Fields following rules 2 and 3 (no arrays here)\n    // 5. Structs become arrays of Fields, with every item defined in the same order as they are in Noir code, following rules 2, 3, 4 and 5 (recursive)\n    impl Serialize<10> for DeepStruct {\n        fn serialize(self) -> [Field; 10] {\n            let mut result = [0; 10];\n            result[0] = self.a_field;\n            result[1] = self.a_bool as Field;\n            result[2] = self.a_note.amount;\n            result[3] = self.a_note.secret_hash;\n            for i in 0..3 {\n                result[4 + i * 2] = self.many_notes[i].amount;\n                result[5 + i * 2] = self.many_notes[i].secret_hash;\n            }\n            result\n        }\n    }\n}\n"},"359":{"path":"/usr/src/noir-projects/noir-contracts/contracts/test_contract/src/test_note.nr","source":"use dep::aztec::{\n    note::{note_header::NoteHeader, note_interface::NoteInterface}, hash::pedersen_hash,\n    context::PrivateContext\n};\n\nglobal TEST_NOTE_LEN: Field = 1;\n// TEST_NOTE_LENGTH * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal TEST_NOTE_BYTES_LENGTH: Field = 1 * 32 + 64;\n\n// A note which stores a field and is expected to be passed around using the `addNote` function.\n// WARNING: This Note is not private as it does not contain randomness and hence it can be easy to perform \n// serialized_note attack on it. This note has been developed purely for testing purposes so that it can easily be\n// manually added to PXE. Do not use for real applications.\n#[aztec(note)]\nstruct TestNote {\n    value: Field,\n}\n\nimpl NoteInterface<TEST_NOTE_LEN, TEST_NOTE_BYTES_LENGTH> for TestNote {\n\n    fn compute_note_hash_and_nullifier(self, _context: &mut PrivateContext) -> (Field, Field) {\n        // This note is expected to be shared between users and for this reason can't be nullified using a secret.\n        (0, 0)\n    }\n\n    fn compute_note_hash_and_nullifier_without_context(self) -> (Field, Field) {\n        // This note is expected to be shared between users and for this reason can't be nullified using a secret.\n        (0, 0)\n    }\n}\n\nimpl TestNote {\n    pub fn new(value: Field) -> Self {\n        TestNote { value, header: NoteHeader::empty() }\n    }\n}\n"},"360":{"path":"/usr/src/noir-projects/noir-contracts/contracts/token_portal_content_hash_lib/src/lib.nr","source":"// docs:start:mint_public_content_hash_nr\nuse dep::aztec::prelude::{AztecAddress, EthAddress};\nuse dep::aztec::protocol_types::hash::sha256_to_field;\n\n// Computes a content hash of a deposit/mint_public message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_public_content_hash(owner: AztecAddress, amount: Field) -> Field {\n    let mut hash_bytes = [0; 68];\n    let recipient_bytes = owner.to_field().to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n    }\n\n    // Function selector: 0x3e87b9be keccak256('mint_public(bytes32,uint256)')\n    hash_bytes[0] = 0x3e;\n    hash_bytes[1] = 0x87;\n    hash_bytes[2] = 0xb9;\n    hash_bytes[3] = 0xbe;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:mint_public_content_hash_nr\n\n// docs:start:get_mint_private_content_hash\n// Computes a content hash of a deposit/mint_private message.\n// Refer TokenPortal.sol for reference on L1.\npub fn get_mint_private_content_hash(\n    secret_hash_for_redeeming_minted_notes: Field,\n    amount: Field\n) -> Field {\n    let mut hash_bytes = [0; 68];\n    let secret_hash_bytes = secret_hash_for_redeeming_minted_notes.to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = secret_hash_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n    }\n\n    // Function selector: 0xefa012c1 keccak256('mint_private(bytes32,uint256)')\n    hash_bytes[0] = 0xef;\n    hash_bytes[1] = 0xa0;\n    hash_bytes[2] = 0x12;\n    hash_bytes[3] = 0xc1;\n\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_mint_private_content_hash\n\n// docs:start:get_withdraw_content_hash\n// Computes a content hash of a withdraw message.\npub fn get_withdraw_content_hash(recipient: EthAddress, amount: Field, caller_on_l1: EthAddress) -> Field {\n    // Compute the content hash\n    // Compute sha256(selector || amount || recipient)\n    // then convert to a single field element\n    // add that to the l2 to l1 messages\n    let mut hash_bytes: [u8; 100] = [0; 100];\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let amount_bytes = amount.to_be_bytes(32);\n    let caller_on_l1_bytes = caller_on_l1.to_field().to_be_bytes(32);\n\n    //  0x69328dec, selector for \"withdraw(address,uint256,address)\"\n    hash_bytes[0] = 0x69;\n    hash_bytes[1] = 0x32;\n    hash_bytes[2] = 0x8d;\n    hash_bytes[3] = 0xec;\n\n    for i in 0..32 {\n        hash_bytes[i + 4] = recipient_bytes[i];\n        hash_bytes[i + 36] = amount_bytes[i];\n        hash_bytes[i + 68] = caller_on_l1_bytes[i];\n    }\n    let content_hash = sha256_to_field(hash_bytes);\n    content_hash\n}\n// docs:end:get_withdraw_content_hash\n"},"38":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n"},"4":{"path":"std/cmp.nr","source":"// docs:start:eq-trait\ntrait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\nimpl Eq for Field { fn eq(self, other: Field) -> bool { self == other } }\n\nimpl Eq for u64 { fn eq(self, other: u64) -> bool { self == other } }\nimpl Eq for u32 { fn eq(self, other: u32) -> bool { self == other } }\nimpl Eq for u8 { fn eq(self, other: u8) -> bool { self == other } }\nimpl Eq for u1 { fn eq(self, other: u1) -> bool { self == other } }\n\nimpl Eq for i8 { fn eq(self, other: i8) -> bool { self == other } }\nimpl Eq for i32 { fn eq(self, other: i32) -> bool { self == other } }\nimpl Eq for i64 { fn eq(self, other: i64) -> bool { self == other } }\n\nimpl Eq for () { fn eq(_self: Self, _other: ()) -> bool { true } }\nimpl Eq for bool { fn eq(self, other: bool) -> bool { self == other } }\n\nimpl<T, let N: u32> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T] where T: Eq {\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3) & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\nstruct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n// docs:start:ord-trait\ntrait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v1 } else { v2 }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v2 } else { v1 }\n}\n\nmod cmp_tests {\n    use crate::cmp::{min, max};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"},"44":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    // Append each element of the `other` slice to the end of `self`.\n    // This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::unsafe::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T where T: Append {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"47":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\nuse crate::println;\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\nstruct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_be_bytes(8);\n        let hi = self.hi.to_be_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_le_bytes(8);\n        let hi = self.hi.to_le_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    fn decode_ascii(ascii: u8) -> Field {\n        if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (U128::uconstrained_check_is_upper_ascii(ascii) as u8);\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        } as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;  \n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi*b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo*b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo+self.hi)*(b.lo+b.hi) - low + carry\n        } else {\n            self.lo*b.hi + self.hi*b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        q\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        r\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n        \n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 { \n    fn not(self) -> U128 {\n        U128 {\n            lo: (!(self.lo as u64)) as Field,\n            hi: (!(self.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitOr for U128 { \n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 { \n    fn shl(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    } \n}\n\nimpl Shr for U128 { \n    fn shr(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    } \n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c= b.to_le_bytes(17);\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        let (q,r) = a.unconstrained_div(b);\n        assert_eq(q, c);\n        assert_eq(r, d);\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        let (c,d ) = a.unconstrained_div(b);\n        assert_eq((c, d), (a, U128::zero()));\n\n        // Check where b is a multiple of a\n        let (c,d) = b.unconstrained_div(a);\n        assert_eq((c, d), (U128::zero(), b));\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        let (c,d)= a.unconstrained_div(b);\n        assert_eq((c, d), (U128::zero(), U128::zero()));\n\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        let (c,d )= a.unconstrained_div(b);\n        assert_eq((c, d), (U128::one(), U128::zero()));\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"5":{"path":"std/collections/bounded_vec.nr","source":"use crate::{cmp::Eq, convert::From};\n\nstruct BoundedVec<T, let MaxLen: u32> {\n    storage: [T; MaxLen],\n    len: u32,\n}\n\nimpl<T, let MaxLen: u32> BoundedVec<T, MaxLen> {\n    pub fn new() -> Self {\n        let zeroed = crate::unsafe::zeroed();\n        BoundedVec { storage: [zeroed; MaxLen], len: 0 }\n    }\n\n    /// Get an element from the vector at the given index.\n    /// Panics if the given index points beyond the end of the vector (`self.len()`).\n    pub fn get(self, index: u32) -> T {\n        assert(index < self.len);\n        self.get_unchecked(index)\n    }\n\n    /// Get an element from the vector at the given index.\n    /// Responds with undefined data for `index` where `self.len < index < self.max_len()`.\n    pub fn get_unchecked(self, index: u32) -> T {\n        self.storage[index]\n    }\n\n    /// Write an element to the vector at the given index.\n    /// Panics if the given index points beyond the end of the vector (`self.len()`).\n    pub fn set(&mut self, index: u32, value: T) {\n        assert(index < self.len, \"Attempted to write past end of BoundedVec\");\n        self.set_unchecked(index, value)\n    }\n\n    /// Write an element to the vector at the given index.\n    /// Does not check whether the passed `index` is a valid index within the vector.\n    ///\n    /// Silently writes past the end of the vector for `index` where `self.len < index < self.max_len()`\n    /// Panics if the given index points beyond the maximum length of the vector (`self.max_len()`).\n    pub fn set_unchecked(&mut self, index: u32, value: T) {\n        self.storage[index] = value;\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len < MaxLen, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> u32 {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> u32 {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<let Len: u32>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len <= MaxLen, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_slice(&mut self, slice: [T]) {\n        let new_len = self.len + slice.len();\n        assert(new_len <= MaxLen, \"extend_from_slice out of bounds\");\n        for i in 0..slice.len() {\n            self.storage[self.len + i] = slice[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<let Len: u32>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len <= MaxLen, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + i] = vec.get_unchecked(i);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn from_array<let Len: u32>(array: [T; Len]) -> Self {\n        assert(Len <= MaxLen, \"from array out of bounds\");\n        let mut vec: BoundedVec<T, MaxLen> = BoundedVec::new();\n        vec.extend_from_array(array);\n        vec\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = crate::unsafe::zeroed();\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if !exceeded_len {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> BoundedVec<U, MaxLen> {\n        let mut ret = BoundedVec::new();\n        ret.len = self.len();\n        for i in 0..MaxLen {\n            if i < self.len() {\n                ret.storage[i] = f(self.get_unchecked(i));\n            }\n        }\n        ret\n    }\n}\n\nimpl<T, let MaxLen: u32> Eq for BoundedVec<T, MaxLen> where T: Eq {\n    fn eq(self, other: BoundedVec<T, MaxLen>) -> bool {\n        // TODO: https://github.com/noir-lang/noir/issues/4837\n        //\n        // We make the assumption that the user has used the proper interface for working with `BoundedVec`s\n        // rather than directly manipulating the internal fields as this can result in an inconsistent internal state.\n        \n        (self.len == other.len) & (self.storage == other.storage)\n    }\n}\n\nimpl<T, let MaxLen: u32, let Len: u32> From<[T; Len]> for BoundedVec<T, MaxLen> {\n    fn from(array: [T; Len]) -> BoundedVec<T, MaxLen>  {\n        BoundedVec::from_array(array)\n    }\n}\n\nmod bounded_vec_tests {\n    // TODO: Allow imports from \"super\"\n    use crate::collections::bounded_vec::BoundedVec;\n\n    #[test]\n    fn empty_equality() {\n        let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n        let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n\n        assert_eq(bounded_vec1, bounded_vec2);\n    }\n\n    #[test]\n    fn inequality() {\n        let mut bounded_vec1: BoundedVec<Field, 3> = BoundedVec::new();\n        let mut bounded_vec2: BoundedVec<Field, 3> = BoundedVec::new();\n        bounded_vec1.push(1);\n        bounded_vec2.push(2);\n\n        assert(bounded_vec1 != bounded_vec2);\n    }\n\n    mod set {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn set_updates_values_properly() {\n            let mut vec = BoundedVec::from_array([0, 0, 0, 0, 0]);\n\n            vec.set(0, 42);\n            assert_eq(vec.storage, [42, 0, 0, 0, 0]);\n\n            vec.set(1, 43);\n            assert_eq(vec.storage, [42, 43, 0, 0, 0]);\n\n            vec.set(2, 44);\n            assert_eq(vec.storage, [42, 43, 44, 0, 0]);\n\n            vec.set(1, 10);\n            assert_eq(vec.storage, [42, 10, 44, 0, 0]);\n\n            vec.set(0, 0);\n            assert_eq(vec.storage, [0, 10, 44, 0, 0]);\n        }\n\n        #[test(should_fail_with = \"Attempted to write past end of BoundedVec\")]\n        fn panics_when_writing_elements_past_end_of_vec() {\n            let mut vec: BoundedVec<Field, 5> = BoundedVec::new();\n            vec.set(0, 42);\n\n            // Need to use println to avoid DIE removing the write operation.\n            crate::println(vec.get(0));\n        }\n    }\n\n    mod map {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn applies_function_correctly() {\n            // docs:start:bounded-vec-map-example\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| value * 2);\n            // docs:end:bounded-vec-map-example\n            let expected = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn applies_function_that_changes_return_type() {\n            let vec: BoundedVec<u32, 4> = BoundedVec::from_array([1, 2, 3, 4]);\n            let result = vec.map(|value| (value * 2)  as Field);\n            let expected: BoundedVec<Field, 4> = BoundedVec::from_array([2, 4, 6, 8]);\n\n            assert_eq(result, expected);\n        }\n\n        #[test]\n        fn does_not_apply_function_past_len() {\n            let vec: BoundedVec<u32, 3> = BoundedVec::from_array([0, 1]);\n            let result = vec.map(|value| if value == 0 { 5 } else { value });\n            let expected = BoundedVec::from_array([5, 1]);\n\n            assert_eq(result, expected);\n            assert_eq(result.storage()[2], 0);\n        }\n    }\n\n    mod from_array {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn empty() {\n            let empty_array: [Field; 0] = [];\n            let bounded_vec = BoundedVec::from_array([]);\n\n            assert_eq(bounded_vec.max_len(), 0);\n            assert_eq(bounded_vec.len(), 0);\n            assert_eq(bounded_vec.storage(), empty_array);\n        }\n\n        #[test]\n        fn equal_len() {\n            let array = [1, 2, 3];\n            let bounded_vec = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 3);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage(), array);\n        }\n\n        #[test]\n        fn max_len_greater_then_array_len() {\n            let array = [1, 2, 3];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from_array(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 3);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n            assert_eq(bounded_vec.storage()[2], 3);\n        }\n\n        #[test(should_fail_with=\"from array out of bounds\")]\n        fn max_len_lower_then_array_len() {\n            let _: BoundedVec<Field, 2> = BoundedVec::from_array([0; 3]);\n        }\n    }\n\n    mod trait_from {\n        use crate::collections::bounded_vec::BoundedVec;\n\n        #[test]\n        fn simple() {\n            let array = [1, 2];\n            let bounded_vec: BoundedVec<Field, 10> = BoundedVec::from(array);\n\n            assert_eq(bounded_vec.max_len(), 10);\n            assert_eq(bounded_vec.len(), 2);\n            assert_eq(bounded_vec.storage()[0], 1);\n            assert_eq(bounded_vec.storage()[1], 2);\n        }\n    }\n}\n"},"62":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/deploy.nr","source":"use crate::{context::PrivateContext, oracle::get_contract_instance::get_contract_instance};\n\nuse dep::protocol_types::{address::AztecAddress, abis::function_selector::FunctionSelector, constants::DEPLOYER_CONTRACT_ADDRESS};\n\n// Calls `deploy` on the deployer contract to deploy a new instance.\npub fn deploy_contract(context: &mut PrivateContext, target: AztecAddress) {\n    let instance = get_contract_instance(target);\n\n    let universal_deploy = instance.deployer.is_zero();\n    if !universal_deploy {\n        assert(\n            instance.deployer == context.this_address(), \"Deployer address does not match current address\"\n        );\n    }\n\n    // Adapted from noir-contracts/contracts/contract_instance_deployer_contract/src/interface/ContractInstanceDeployer.nr\n    // That file was autogenerated running the following command from noir-projects/noir-contracts:\n    // ../../yarn-project/node_modules/.bin/aztec-cli codegen target/contract_instance_deployer_contract-ContractInstanceDeployer.json --nr -o ./contracts/contract_instance_deployer_contract/src/interface\n    let mut serialized_args = [0; 5];\n    serialized_args[0] = instance.salt;\n    serialized_args[1] = instance.contract_class_id.to_field();\n    serialized_args[2] = instance.initialization_hash;\n    serialized_args[3] = instance.public_keys_hash.to_field();\n    serialized_args[4] = universal_deploy as Field;\n\n    let _call_result = context.call_private_function(\n        AztecAddress::from_field(DEPLOYER_CONTRACT_ADDRESS),\n        FunctionSelector::from_field(0x7ebd3690),\n        serialized_args\n    );\n}\n"},"64":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/point_to_symmetric_key.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__SYMMETRIC_KEY, scalar::Scalar, point::{Point, pub_key_to_bytes},\n    utils::arr_copy_slice\n};\nuse std::{hash::sha256, embedded_curve_ops::multi_scalar_mul};\n\n// TODO(#5726): This function is called deriveAESSecret in TS. I don't like point_to_symmetric_key name much since\n// point is not the only input of the function. Unify naming with TS once we have a better name.\npub fn point_to_symmetric_key(secret: Scalar, point: Point) -> [u8; 32] {\n    let shared_secret_fields = multi_scalar_mul([point], [secret]);\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/6061): make the func return Point struct directly\n    let shared_secret = pub_key_to_bytes(Point::new(shared_secret_fields[0], shared_secret_fields[1], false));\n    let mut shared_secret_bytes_with_separator = [0 as u8; 65];\n    shared_secret_bytes_with_separator = arr_copy_slice(shared_secret, shared_secret_bytes_with_separator, 0);\n    shared_secret_bytes_with_separator[64] = GENERATOR_INDEX__SYMMETRIC_KEY;\n    sha256(shared_secret_bytes_with_separator)\n}\n\n#[test]\nfn check_point_to_symmetric_key() {\n    // Value taken from \"derive shared secret\" test in encrypt_buffer.test.ts\n    let secret = Scalar::new(\n        0x00000000000000000000000000000000649e7ca01d9de27b21624098b897babd,\n        0x0000000000000000000000000000000023b3127c127b1f29a7adff5cccf8fb06\n    );\n    let point = Point::new(\n        0x2688431c705a5ff3e6c6f2573c9e3ba1c1026d2251d0dbbf2d810aa53fd1d186,\n        0x1e96887b117afca01c00468264f4f80b5bb16d94c1808a448595f115556e5c8e,\n        false\n    );\n\n    let key = point_to_symmetric_key(secret, point);\n    // The following value gets updated when running encrypt_buffer.test.ts with AZTEC_GENERATE_TEST_DATA=1\n    let expected_key = [\n        49, 167, 146, 222, 151, 129, 138, 184, 87, 210, 245, 249, 99, 100, 1, 59, 223, 180, 5, 99, 14, 7, 177, 236, 159, 203, 231, 72, 220, 180, 241, 23\n    ];\n    assert_eq(key, expected_key);\n}\n"},"65":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/getters.nr","source":"use dep::protocol_types::{\n    header::Header, abis::validation_requests::KeyValidationRequest, address::AztecAddress,\n    constants::CANONICAL_KEY_REGISTRY_ADDRESS, point::Point, storage::map::derive_storage_slot_in_map,\n    traits::is_empty\n};\nuse crate::{\n    context::PrivateContext,\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX, TAGGING_INDEX}},\n    state_vars::{shared_mutable::shared_mutable_private_getter::SharedMutablePrivateGetter}\n};\n\nglobal DELAY = 5;\n\n// docs:start:key-getters\ntrait KeyGetters {\n  fn get_npk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_ivpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_ovpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_tpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_npk_m_hash(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Field;\n}\n\nimpl KeyGetters for Header {\n    fn get_npk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, NULLIFIER_INDEX, self)\n    }\n\n    fn get_ivpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, INCOMING_INDEX, self)\n    }\n\n    fn get_ovpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, OUTGOING_INDEX, self)\n    }\n\n    fn get_tpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, TAGGING_INDEX, self)\n    }\n\n    fn get_npk_m_hash(self, context: &mut PrivateContext, address: AztecAddress) -> Field {\n        get_master_key(context, address, NULLIFIER_INDEX, self).hash()\n    }\n}\n// docs:end:key-getters\n\nfn get_master_key(\n    context: &mut PrivateContext,\n    address: AztecAddress,\n    key_index: Field,\n    header: Header\n) -> Point {\n    let key = fetch_key_from_registry(context, key_index, address, header);\n    if is_empty(key) {\n        // Keys were not registered in registry yet --> fetch key from PXE\n        let keys = fetch_and_constrain_keys(address);\n        // Return the corresponding to index\n        keys.get_key_by_index(key_index)\n    } else {\n        // Keys were registered --> return the key\n        key\n    }\n}\n\nfn fetch_key_from_registry(\n    context: &mut PrivateContext,\n    key_index: Field,\n    address: AztecAddress,\n    header: Header\n) -> Point {\n    let x_coordinate_map_slot = key_index * 2 + 1;\n    let y_coordinate_map_slot = x_coordinate_map_slot + 1;\n    let x_coordinate_derived_slot = derive_storage_slot_in_map(x_coordinate_map_slot, address);\n    let y_coordinate_derived_slot = derive_storage_slot_in_map(y_coordinate_map_slot, address);\n\n    let x_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        x_coordinate_derived_slot\n    );\n    let y_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        y_coordinate_derived_slot\n    );\n    let x_coordinate = x_coordinate_registry.get_value_in_private(header);\n    let y_coordinate = y_coordinate_registry.get_value_in_private(header);\n\n    Point::new(x_coordinate, y_coordinate, false)\n}\n\n// Passes only when keys were not rotated - is expected to be called only when keys were not registered yet\nfn fetch_and_constrain_keys(address: AztecAddress) -> PublicKeys {\n    let (public_keys, partial_address) = get_public_keys_and_partial_address(address);\n\n    let computed_address = AztecAddress::compute(public_keys.hash(), partial_address);\n\n    assert(computed_address.eq(address));\n\n    public_keys\n}\n\n// A helper function since requesting nsk_app is very common\n// TODO(#6543)\npub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n"},"66":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/public_keys.nr","source":"use dep::protocol_types::{\n    address::PublicKeysHash, constants::GENERATOR_INDEX__PUBLIC_KEYS_HASH, hash::poseidon2_hash,\n    point::Point, traits::{Deserialize, Serialize, Empty, is_empty}\n};\nuse crate::keys::constants::{NUM_KEY_TYPES, NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX};\n\nglobal PUBLIC_KEYS_LENGTH = 12;\n\nstruct PublicKeys {\n    npk_m: Point,\n    ivpk_m: Point,\n    ovpk_m: Point,\n    tpk_m: Point,\n}\n\nimpl Empty for PublicKeys {\n    fn empty() -> Self {\n        PublicKeys {\n            npk_m : Point::empty(),\n            ivpk_m : Point::empty(),\n            ovpk_m : Point::empty(),\n            tpk_m : Point::empty()\n        }\n    }\n}\n\nimpl Eq for PublicKeys {\n    fn eq(self, other: PublicKeys) -> bool {\n        ( self.npk_m == other.npk_m ) &\n        ( self.ivpk_m == other.ivpk_m ) &\n        ( self.ovpk_m == other.ovpk_m ) &\n        ( self.tpk_m == other.tpk_m )\n    }\n}\n\nimpl PublicKeys {\n    pub fn hash(self) -> PublicKeysHash {\n        PublicKeysHash::from_field(\n            if is_empty(self) {\n            0\n        } else {\n            poseidon2_hash(\n                [\n                self.npk_m.x,\n                self.npk_m.y,\n                self.npk_m.is_infinite as Field,\n                self.ivpk_m.x,\n                self.ivpk_m.y,\n                self.ivpk_m.is_infinite as Field,\n                self.ovpk_m.x,\n                self.ovpk_m.y,\n                self.ovpk_m.is_infinite as Field,\n                self.tpk_m.x,\n                self.tpk_m.y,\n                self.tpk_m.is_infinite as Field,\n                GENERATOR_INDEX__PUBLIC_KEYS_HASH\n            ]\n            )\n        }\n        )\n    }\n\n    pub fn get_key_by_index(self, index: Field) -> Point {\n        assert(index as u8 < NUM_KEY_TYPES, \"Invalid key index\");\n        if index == NULLIFIER_INDEX {\n            self.npk_m\n        } else if index == INCOMING_INDEX {\n            self.ivpk_m\n        } else if index == OUTGOING_INDEX {\n            self.ovpk_m\n        } else {\n            self.tpk_m\n        }\n    }\n}\n\nimpl Serialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn serialize(self) -> [Field; PUBLIC_KEYS_LENGTH] {\n        [\n            self.npk_m.x,\n            self.npk_m.y,\n            self.npk_m.is_infinite as Field,\n            self.ivpk_m.x,\n            self.ivpk_m.y,\n            self.ivpk_m.is_infinite as Field,\n            self.ovpk_m.x,\n            self.ovpk_m.y,\n            self.ovpk_m.is_infinite as Field,\n            self.tpk_m.x,\n            self.tpk_m.y,\n            self.tpk_m.is_infinite as Field\n        ]\n    }\n}\n\nimpl Deserialize<PUBLIC_KEYS_LENGTH> for PublicKeys {\n    fn deserialize(serialized: [Field; PUBLIC_KEYS_LENGTH]) -> PublicKeys {\n        PublicKeys {\n            npk_m: Point::new(serialized[0], serialized[1], serialized[2] as bool),\n            ivpk_m: Point::new(serialized[3], serialized[4], serialized[5] as bool),\n            ovpk_m: Point::new(serialized[6], serialized[7], serialized[8] as bool),\n            tpk_m: Point::new(serialized[9], serialized[10], serialized[11] as bool)\n        }\n    }\n}\n\n#[test]\nfn compute_public_keys_hash() {\n    let keys = PublicKeys {\n        npk_m: Point { x: 1, y: 2, is_infinite: false },\n        ivpk_m: Point { x: 3, y: 4, is_infinite: false },\n        ovpk_m: Point { x: 5, y: 6, is_infinite: false },\n        tpk_m: Point { x: 7, y: 8, is_infinite: false }\n    };\n\n    let actual = keys.hash();\n    let expected_public_keys_hash = 0x146f68c0e0ba4067d61a3304bbfdec0797d5df1357db6c01247c48bfb345c7d7;\n\n    assert(actual.to_field() == expected_public_keys_hash);\n}\n\n#[test]\nfn compute_empty_hash() {\n    let keys = PublicKeys::empty();\n\n    let actual = keys.hash();\n    let test_data_empty_hash = 0x0000000000000000000000000000000000000000000000000000000000000000;\n\n    assert(actual.to_field() == test_data_empty_hash);\n}\n\n#[test]\nfn test_public_keys_serialization() {\n    let keys = PublicKeys {\n        npk_m: Point { x: 1, y: 2, is_infinite: false },\n        ivpk_m: Point { x: 3, y: 4, is_infinite: false },\n        ovpk_m: Point { x: 5, y: 6, is_infinite: false },\n        tpk_m: Point { x: 7, y: 8, is_infinite: false }\n    };\n\n    let serialized = keys.serialize();\n    let deserialized = PublicKeys::deserialize(serialized);\n\n    assert_eq(keys.npk_m.x, deserialized.npk_m.x);\n    assert_eq(keys.npk_m.y, deserialized.npk_m.y);\n    assert_eq(keys.ivpk_m.x, deserialized.ivpk_m.x);\n    assert_eq(keys.ivpk_m.y, deserialized.ivpk_m.y);\n    assert_eq(keys.ovpk_m.x, deserialized.ovpk_m.x);\n    assert_eq(keys.ovpk_m.y, deserialized.ovpk_m.y);\n    assert_eq(keys.tpk_m.x, deserialized.tpk_m.x);\n    assert_eq(keys.tpk_m.y, deserialized.tpk_m.y);\n}\n"},"80":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::pedersen_hash, address::AztecAddress,\n    header::Header, utils::field::full_field_less_than\n};\nuse std::merkle::compute_merkle_root;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header { \n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf slot by siloing the storage slot with the contract address\n        let public_value_leaf_slot = pedersen_hash(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness of the slot\n        let witness = get_public_data_witness(\n            self.global_variables.block_number as u32,\n            public_value_leaf_slot\n        );\n\n        // 3) Extract the value from the witness leaf and check that the storage slot is correct\n        let preimage = witness.leaf_preimage;\n\n        // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n        // 1. The value is the same as the one in the witness\n        // 2. The value was never initialized and is zero\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_value_leaf_slot);\n        let is_next_greater_than = full_field_less_than(public_value_leaf_slot, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_value_leaf_slot, \"Public data slot doesn't match witness\");\n            preimage.value\n        };\n\n        // 4) Prove that the leaf exists in the public data tree. Note that `hash` returns not just the hash of the value\n        // but also the metadata (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == compute_merkle_root(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        value\n    }\n}\n"},"86":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/messaging.nr","source":"use crate::{\n    hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier},\n    oracle::get_l1_to_l2_membership_witness::get_l1_to_l2_membership_witness\n};\n\nuse std::merkle::compute_merkle_root;\nuse dep::protocol_types::{constants::L1_TO_L2_MSG_TREE_HEIGHT, address::{AztecAddress, EthAddress}, utils::arr_copy_slice};\n\npub fn process_l1_to_l2_message(\n    l1_to_l2_root: Field,\n    storage_contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    chain_id: Field,\n    version: Field,\n    content: Field,\n    secret: Field\n) -> Field {\n    let secret_hash = compute_secret_hash(secret);\n    let message_hash = compute_message_hash(\n        portal_contract_address,\n        chain_id,\n        storage_contract_address,\n        version,\n        content,\n        secret_hash\n    );\n\n    let returned_message = get_l1_to_l2_membership_witness(storage_contract_address, message_hash, secret);\n    let leaf_index = returned_message[0];\n    let sibling_path = arr_copy_slice(returned_message, [0; L1_TO_L2_MSG_TREE_HEIGHT], 1);\n\n    // Check that the message is in the tree\n    // This is implicitly checking that the values of the message are correct\n    let root = compute_merkle_root(message_hash, leaf_index, sibling_path);\n    assert(root == l1_to_l2_root, \"Message not in state\");\n\n    compute_message_nullifier(message_hash, secret, leaf_index)\n}\n"},"88":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/unconstrained_context.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\nuse crate::oracle::storage::{raw_storage_read, storage_read};\n\nstruct UnconstrainedContext {\n    block_number: u32,\n    contract_address: AztecAddress,\n    version: Field,\n    chain_id: Field,\n}\n\nimpl UnconstrainedContext {\n    unconstrained fn new() -> Self {\n        // We could call these oracles on the getters instead of at creation, which makes sense given that they might\n        // not even be accessed. However any performance gains are minimal, and we'd rather fail early if a user\n        // incorrectly attempts to create an UnconstrainedContext in an environment in which these oracles are not\n        // available.\n        let block_number = block_number_oracle();\n        let contract_address = contract_address_oracle();\n        let chain_id = chain_id_oracle();\n        let version = version_oracle();\n        Self { block_number, contract_address, version, chain_id }\n    }\n\n    fn block_number(self) -> u32 {\n        self.block_number\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.contract_address\n    }\n\n    fn version(self) -> Field {\n        self.version\n    }\n\n    fn chain_id(self) -> Field {\n        self.chain_id\n    }\n\n    unconstrained fn raw_storage_read<N>(self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(self.this_address(), storage_slot, self.block_number())\n    }\n\n    unconstrained fn storage_read<T, N>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n}\n\n#[oracle(getContractAddress)]\nunconstrained fn contract_address_oracle() -> AztecAddress {}\n\n#[oracle(getBlockNumber)]\nunconstrained fn block_number_oracle() -> u32 {}\n\n#[oracle(getChainId)]\nunconstrained fn chain_id_oracle() -> Field {}\n\n#[oracle(getVersion)]\nunconstrained fn version_oracle() -> Field {}\n"},"89":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\nstruct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<N>(self) -> [Field; N] {\n        let unpacked: [Field; N] = unpack_returns(self.packed_returns);\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, N>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"93":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    public_context::FunctionReturns, inputs::{PrivateContextInputs, PublicContextInputs}\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\ntrait CallInterface<N, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateStaticCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateStaticVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> T {\n        self.original\n    }\n}\n\nstruct PublicCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](PublicContextInputs) -> T,\n    is_static: bool\n}\n\nimpl<N, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> () {\n        self.original\n    }\n}\n\nstruct PublicVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<N, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> T {\n        self.original\n    }\n}\n\nstruct PublicStaticCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<N, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> () {\n        self.original\n    }\n}\n\nstruct PublicStaticVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<N, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"94":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, set_public_teardown_function_call_internal,\n    parse_public_call_stack_item_from_oracle\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    caller_context::CallerContext, function_selector::FunctionSelector,\n    max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_function_hash: Field,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    // TODO(#7112): This function is called with non-zero note hash only in 1 of 25 cases in aztec-packages repo\n    // - consider creating a separate function with 1 arg for the zero note hash case.\n    fn push_nullifier(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            public_teardown_function_hash: self.public_teardown_function_hash,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one \n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<M>(&mut self, randomness: Field, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<M>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.start_side_effect_counter, start_side_effect_counter);\n        let end_side_effect_counter = item.public_inputs.end_side_effect_counter;\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        let mut caller_context = CallerContext::empty();\n        caller_context.is_static_call = self.inputs.call_context.is_static_call;\n        if is_delegate_call {\n            caller_context.msg_sender = self.inputs.call_context.msg_sender;\n            caller_context.storage_contract_address = self.inputs.call_context.storage_contract_address;\n        }\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            target: item.contract_address,\n            call_context: item.public_inputs.call_context,\n            function_data: item.function_data,\n            args_hash: item.public_inputs.args_hash,\n            returns_hash: item.public_inputs.returns_hash,\n            caller_context,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(item.public_inputs.returns_hash)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_call_stack_hashes.push(item.get_compressed().hash());\n    }\n\n    pub fn set_public_teardown_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_teardown_function_hash = item.get_compressed().hash();\n    }\n\n    fn validate_call_stack_item_from_oracle(\n        self,\n        item: PublicCallStackItem,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"95":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::inputs::public_context_inputs::PublicContextInputs;\nuse crate::context::gas::GasOpts;\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs) -> Self {\n        PublicContext { inputs }\n    }\n\n    pub fn emit_unencrypted_log<T, N>(&mut self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0);\n    }\n\n    fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        assert(false, \"'delegate_call_public_function' not implemented!\");\n        FunctionReturns::new([0; RETURNS_COUNT])\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        // Cannot nullify pending commitments in AVM, so `nullified_commitment` is not used\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(self) -> AztecAddress {\n        sender()\n    }\n    fn selector(self) -> FunctionSelector {\n        FunctionSelector::from_u32(function_selector())\n    }\n    fn get_args_hash(self) -> Field {\n        self.inputs.args_hash\n    }\n    fn transaction_fee(self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(self) -> Field {\n        chain_id()\n    }\n    fn version(self) -> Field {\n        version()\n    }\n    fn block_number(self) -> Field {\n        block_number()\n    }\n    fn timestamp(self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(self) -> Field {\n        da_gas_left()\n    }\n\n    fn raw_storage_read<N>(_self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(storage_slot)\n    }\n\n    fn storage_read<T, N>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<N>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        storage_write(storage_slot, values);\n    }\n\n    fn storage_write<T, N>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    let MAX_POSSIBLE_FIELD: Field = 0 - 1;\n    [\n        user_gas.l2_gas.unwrap_or(MAX_POSSIBLE_FIELD),\n        user_gas.da_gas.unwrap_or(MAX_POSSIBLE_FIELD)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/6420): reconsider.\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\nunconstrained fn function_selector() -> u32 {\n    function_selector_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<RET_SIZE>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<RET_SIZE>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_opcode(storage_slot, N)\n}\n\nunconstrained fn storage_write<N>(storage_slot: Field, values: [Field; N]) {\n    storage_write_opcode(storage_slot, values);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(PublicContextInputs::empty())\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n#[oracle(avmOpcodeFunctionSelector)]\nunconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<RET_SIZE>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<RET_SIZE>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode<N>(storage_slot: Field, length: Field) -> [Field; N] {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode<N>(storage_slot: Field, values: [Field; N]) {}\n\nstruct FunctionReturns<N> {\n    values: [Field; N]\n}\n\nimpl<N> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn assert_empty(returns: FunctionReturns<0>) {\n        assert(returns.values.len() == 0);\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n"}}}