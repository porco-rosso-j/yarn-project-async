{"transpiled":true,"noir_version":"0.31.0+6237d96a0bc23a5ed656e7ba172fb57facd9c807","name":"Auth","functions":[{"name":"do_private_authorized_thing","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":""},{"name":"get_authorized_delay","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(view)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"public"}},"bytecode":"H4sIAAAAAAAC/72Yy44bRRSGy22PPTjj9m3sGd+vPbbHnkmygE2iLFnyCoibAAkRicsiiC1rJF6FJW/AW7BhgdiwQEJIUVLnnDr1d7snlioa2VK7q0/937lUVZdVXpqiMaf2MmZk3CeyFhObsr0V6HpmtCWdphCbgpoS6mQqcTJTnNuvaqKuonepg7klRSPWVBKNZsMUXbNCX0nkopShju5SR15NlnLd+O9o66SsqSxNgZyUTySydon7us/VSCXqvkpfSOGdJXqsww/s/YGIT534jHN5QC1gZ6KpSpPR5zArWmOUBDWgNaA1h34Hs6IxoySIgcZAY4dOYVa0zigJ6kDrQOsO/RJmRRuMkqABtAG04dCvYVa0ySgJmkCbQJtyzyP1cKR271FsTR/BrGiLURK0gLaAthz6FcyKthklQRtoG2g7n2jbJ3oAsdF+gFnRc0ZJcA70HOi5Qz+DWdEOoyToAO0A7Tj0U5gV7TJKgi7QLtAu3Wf0av2IF7PBoMHbqK9fl997fUWtx5LB54JDXWRDXQrclab20ABeQtTHCz4oc3Pg9EO3gYwKLKR9ckgXZ/xCnrRcYkaJynoILB2RGKlTI/TpTm/n81Raewm/V9D3yqUSyV5WxBZHzSeZvezijXtZN7uXvY+IF07c40wpdg9YDzPWc+j3MCva90X2U4MLtI/ZzCKNw4iN9gnMig4Y5TEEOgA6yEcb+K0hEKmHI2fhSCMciQ8jduQ+h1nRIaMDWd+KDoEO89GGfgsIRGqHEZvghzArKm8LCUZAR0BH+Wgjvw8HIr1wpHYYsTV9AbOiY0ZJMAY6BjrORxv7hXQAsdG+gVnRCaMkmACdAJ3ko038Sg9E2uHIeTjSCUeGR4nyFrW0wpHmYcSughcwKzpllARToFOg03y0qd9WApF+ONIMRxpHqeXsKIm1wpH7n0q7cD6GWdEZoySYAZ0BneWjzfzLEIjE4Ug/HGmGI62jIG8xYp17H2S7Cr6FWdE5oySYA50Dneejzf0PZCDSPEqUejjSP0otraMgk8MIzXThFxwqnjJ4xzlsnjmHzbPnsAWHWmRDLQWeS1N76NSyhOgKh5OVnMNWTr92h5+NnMM2ZKKLM/5ZnrRcYjaJyhIElo7Ipb4xPsIV3afW00+ptPYS9uewp3wILcbcTdeC/y/jgitipf+Zikt/RMMQVvaGEKUvULodmxOT/ZCXqoSpYiYqmh/XVM2OZX7A952ySpwuAajThJ1SRwKnqcFMMIsGTWKunpRSmgrmlTxs/VisMBbb7FisVzpH9LRKwWUfnpAdz/6v1OLZcR+dVZLteB3syJ1UmshiOnm19yFGFISuKtxcu0cJ9Fs2UMyLnv3FUIuVoHXBB2QfmIBUrum0En6JdsrA01Y0XLJYdzIuJTfiPIZF6EVYdsJb+hPX3LoLf+KKSRxS80aQG8KeaSq7LLKTSkqpKm4l8Bpeis7LQ6S05/8x+3/srpR/NklK1HwkyCPCGLlxVwq5QdB1ji46eh37ZXG3YMVT/CeVN7WNP5ZS3y7RgShhrcsaplE+Ie1fbm+6TXScS9x66AXs+x/Kkx7/dr6vWXUtI6q+N2ykjWtL2n+d75SWW2svKPt9iLc3ChXx3ke9/3Hkl1rV/xKH1uHau2HhK19S6pGyuLaPEf8wRDQTJXosvslNdMqPJ9lHuPFFoMpoQc3L3+l6DeB1EXWRGAAA","debug_symbols":"7Z3dThxHEIXfhWsrmj6nf/0qURThvwjJAsvgSJHld88S7w5YDN58MmXwDFdooau3q47ObM1H9+znkzdvX33668+z83cXlycvf/988v7i9enV2cX57tXnk+m3NP3328sPp+fXv7i8Ov14dfJyenHy9vzN7ueXFyfvzt6/PXlppS9/vLgOSDRANMA0INOAQgMqDWg0oP//gBd3xo1S9iNHa/PYJC2MzakdBufU8zx6lIXBVW77wVXFtwd/Xfb4kWWnydoPTVPJP3Phmn6o3iPdrLscWXdKKR9GpzZ9f90tz0m2kvrddaegdX+dXaGzO3T2HDp7CZ29hs7eQmfvobOPyNk9hc4e6lWHetWhXnWoVx3qVYd61aFedahXHerVHOrVHOrVHOrVHOrVHOrVHOrVHOrVHOrVHOrVHOrVEurVEurVEurVEurVEurVEurVEurVEurVEurVEurVGurVGurVGurVGurVGurVGurVGurVGurVGurVGurVFurVFurVFurVFurVFurVFurVFurVFurVFurVFurVHurVHurVHurVHurVHurVHurVHurVHurVHurVHurVEerVEerVEerVEerVEerVEerVEerVEerVEerVEerVNE2x06fY6RU7vWOnz7HTl9jpa+z0LXb6Hjt9rGtTrGtTrGtTrGtTrGtTrGtTrGtTrGtTrGtTrGtTrGsV69rY3UwpdjtTit3PlMiGpn0E3tcovLFReGcj2SC0jxg0wngbq/E+VvONrHgnq7Hmxpoba26subHmxppnrHnGmmeseea7l7HmGWueseYZa56x5hlrXrDmBWtesOYFa16w5gVrXrDmBWtesOYFa16x5hVrXrHmFWteseaVn1PAmlesecWaV6x5w5o3rHnDmjesecOaN6x544dTsOYNa96w5h1r3rHmHWveseYda96x5h1r3vmJJKx5x5oPrPnAmg+s+cCaD6z5wJoPrPnAmg+s+aCaa5pwRMIRwhHGERlHFBxRcUTDER1HYM3xMVPhc6bCB02FT5oKHzUVPmsqfNhU+LSpEtY8Yc2FNRfWXFhzYc0xhxPmcMIcTpjDCXM4YQ4nzOGEOZwwhxPmcMIcTpjDCXM4YQ4nzOGEOZwwhxPmcMIcTpjDCXM4YQ4nzOGEOZwwhxPmcMIcTpjDCXM4YQ4nzOGEOZwwhxPmcMIcTpjDCXM4YQ4nzOGEOZwwhxPmcMIcTpjDCXM4YQ4nzOGEOZwwhxPmcMIcTpjDCXM4YQ4nzOGEOZwwhxPmcMIcTpjDCXM4YQ4nzOGEOZwwhxPmcMIcTpjDCXM4YQ4nzOGEOZwwhxPmcMIcTpjDGXM4Yw5nzOGMOZwxhzPmcMYczpjDGXM4Yw5nzOGMOZwxhzPmcMYczpjDGXM4Yw5nzOGMOZwxhzPmcMYczpjDGXM4Yw5nzOGMOZwxhzPmcMYczpjDGXM4Yw5nzOGMOZwxhzPmcMYczpjDGXM4Yw5nzOGMOZwxhzPmcMYczpjDGXM4Yw5nzOGMOZwxhzPmcMYczpjDGXM4Yw5nzOGMOZwxhzPmcMYczpjDGXM4Yw5nzOGMOZwxhzPmcMYczpjDGXM4Yw5nzOGMOZwxhzPmcMYczpjDGXM4Yw5nzOGMOZwxhzPmcMYczpjDGXM4Yw5nzOGMOZwxhzPmcMYczpjDGXM4Yw5nzOGMOVzGHC5jDpeXOZzSNPZBSqV9E7fwaPLWD88xbz2leXSq09LT2ls5nG/Lrd6cb1t+Wnsb89Pa+8JTz/MyFfyR9fdv1r9/l/xT3qX8lHepD/AuXX1+l6Ijivdd77Qf3XeCHRm9uzge5t5dX/qR0SOPQ76j3Hqcv/Kcb9tYvn1j+Y5t5btM6lecb9pYvt5Yvnlj+ZaN5buxfiNtrN9IG/v81cY+f7Wxz19pY/lurN/QxvoNbazf0CP0Gznd5JuPjC72IYOy+4fP9/lXScOHwUpHBvcyzXUv+e5XG2a159LcV5r+XJr7SjOeS3NPaTw9l+a+0qSnXpo05tIc+/LVIR8GD+VbX6Rb5nS1rXS9rXTzttIt20r3yXeMD5vuk+8CUbqabtLt36R7d/Sulzl8r/juA+pm9HWd7uZY5hTHzZrlQxmffMf4S5QxP/kW6tco47rarUcr47rauEcr47raQ1RGu81lzOV2Gfe1yc+1ubc262o8H7Y26+pSWW1anmvTp4XabLildfNNbcZCbZ48vnu82pRVNZ+et36OPE0Ld35lVU3i8XRX1cwdT3dVTZe753STl9LN20p3Va2Ru+Z0paV0V0VXjqe7qg/po+nWVV2Zdy3WnG4bS+mu6sp8PN1VXZlz7nO6fYmn11Vdmcs8eJS8qO6q7kNLmtUtNS2lu6or89F026ruiEpqc7ptqWduq7oyl3kn3ajqS+mu6sp8PN11XZnno7Cjui6lu6orc20z6WmL97ttVdDveLqruiOqddyku+DdMj00q2rHthZL6XDbIt3+4tXrNe1e/X368ez01fu3l7uY6z9+On99dXZxvn959c+Hr3/Zjf0X"},{"name":"set_authorized_delay","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"new_delay","type":{"kind":"integer","sign":"unsigned","width":32},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":""},{"name":"get_authorized_in_private","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(view)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"constructor","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(initializer)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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"},{"name":"get_scheduled_authorized","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(view)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAC/+WYy27TQBSGJ5emDXFs59rcYyd2WrXdwgYJumLJKyBuKkgIBJQFvANrJB6FR+CpmHNmjn+7BktToQgJS7Yn//zfnDPjmZEmiWoodaRvpZbKXnWtKF+19KtG9wMlJVOpar6qiZRSJVOptanGRj/upNJU/S5VMBeQ1uTnwTmXqaTvVqJqhB4cUMsUmuVmQukpAtqppHeoWKSrTQ/jIewoQY1u8DGlYcyH1txJ60ZUHWAd42mbIqPvIAvqMUoGD6gH1LPoNWRBu4ySoQu0C7Rr0QiyoD6jZPCB+kB9i76GLGjAKBkCoAHQwKJvIQsaMkqGEGgINDTvMuK7I95fj6L79BSyoD1GydAD2gPas+gbyIL2GSVDH2gfaL+caD9LtALR0b5AFnTAKBkGQAdABxZ9CVnQIaNkGAIdAh1a9AVkQUeMkmEEdAR0RO+YltY1FmbIoMJqlOVHbpXKEtUtNhWuMYcaF0MdG3hkilJDU/AYpikW+KzFxZn1z+0GsqixcUES3Zzxe/NLukvMIhXbBIFNRd2IVCkRpvSm1XmVS+tGwvdqMgdtKk2zlzXsNtcy6MPCXjb+4142Ku5ljxBxbM0TzpRiT4BN8MUmFv0EWdBp1slpbnCBTvE1i0hQjehozyELOmOUxxDoDOisHG2WbQ2OiO+OdNyRwB3pViN65K4gCzpndGbmt6BzoPNytHm2BTgiXjWiE3wCWVCzWsiwALoAurDoR8iCLhklwxLoEuiynOgym0gViI72CrKgK0bJsAK6AroqR1tlI+mIDN2RiTvS+1f7MndHwr2MmOeO3GLCdKoRPT0/QBZ0zSgZ1kDXQNflaOtsv3NE+u7IwB0ZuiNdd2TqjoTuSLCXvnT2klivGtHT8zNkQSNGyRABjYBG5WhRNgwViI72DLKgMaNkiIHGQONytDibpo5I1x2ZuiOhO9LbC3KLERvuZZAX7oi3l+9yiyj+/z3H1tUIPWrfcUC6ZFAOSLkzZVw4U8bFM+WGQ22KobYGjk1RaugEtoUpxUFrZ86UO+s/sQe5U3OmPCWJbs74m/kl3SXmNBVbgsCmom5EqpQI1JNdpFv6mkvrRsLZmfLSeLiP2dg0MDab4uGxhT5tEv4nLX9RKzH/v8eR7Adp2GbanGxstmdpsJ2r/32j/F1Mo20AAm250XZx5Le5etNoLmnpbnK/mfOQmpSDk5ya4Ck+Kd1n2WjtMFpnxdE6Oannmt+h4gztnJupQST9cXnBc+AHlfgb5fLYWdsFz4YL7rySGcUlmkR1Fic/6f4FMz4HQoQVAAA=","debug_symbols":"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"},{"name":"get_authorized","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(view)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"public"}},"bytecode":"H4sIAAAAAAAC/72YyY4jRRCG03a7Zjxtl/ce72tV21Iv05fpCxJHjrwCYhMgASOxCA3iVbhx44gQ78BTkX9kRv4uV2MpRyOXVOWsyP+LyIxcVOnM1Ix5bm9j5sZfVWsxqUnsTwX3h0ZLrtJUUlNRU45KoXIvM7WNfbzI1VX1NSqEyxANrElyjVY3YsSV4JFXfZQ61dWn1NWghqXeNuFZvfFS0SSZqcBJve4ia5VzD6AR3D+j+wYebMLzjDXW4cfoohM/8+JLacsLlIhdOk3DFQV9Q7OiTUEhaBJtEm169CeaFW0JCkGLaItoy6MrmhVNBYUgJZoSTT36Dc2KtgWFoE20TbTt0e9pVrQjKAQdoh2iHfdbRtJ4pPneo9g+fUqzol1BIegS7RLtevRbmhXtCQpBj2iPaK/c0F5o6AnERvuVZkX7gkLQJ9on2vfolzQrOhAUggHRAdGBR7+gWdGhoBAMiQ6JDvG7xtL6jQuzI6DhatTlN5R1r0vUerwwvK4k1FUx1EsHD11RazAFX1I05gKfJFKceP3UbyCzighnMOGWFr91b9pdMLNcZSMGdhVVZ0SlRhjjF6vzzUGzjhr8WNE56JtSdXtZjVsciq8Le9nV/+5lw+Je9hEjXnnxSFqK2CNiI47YyKM/06zoOHRyfJBcomOOZhFpn0ZstM9pVnQiqOSQ6ITopBxtEraGSCSNRy7jkXY80jqN2Mx9RbOiU0Enbn4rOiU6LUebhi0gEmmeRmwDP6FZUbdaIJgRnRGdlaPNwj4ciYzikeZpxPbpa5oVnQsKwZzonOi8HG0eJtIJxEb7gWZFF4JCsCC6ILooR1uEmR6J9OKRfjwyiEda8cg4HunEI+2z9OXyLA3rnkbs9HxLs6JLQSFYEl0SXZajLUMaTiA22mc0K7oSFIIV0RXRVTnaKkzTSKQVj4zjkU480j0L8g4ZG7z3JNtZ8CPNiq4FhWBNdE10XY62Dtt9JNI5S5Q0HhmfpS/dsyCL0wgechDyn8iPAj5xqlgXThXr4qliI6E2xVBbB69dUWvwDb6lKOen9rU7VVx7/c5/yu/dqWIPE25p8S/uTbsLZp+rLGNgV1F1RlRqBPTk2k7zyncHzTpqcDhVPCKGqaVSjXsj//5IhxNnxWstCwcOpjA5SiG7vmHXbW7qpnjBS8OFaXAkEm2f9KlRzGU54cdOcW2d0y0BdZqJU1RkdHqQzIyjaFgEk39wcaBJ3LgeB5fUu+AYgesspPMmZGvHbN0Us7Xf6SjW3OQIcBIaCORW5sfvKMn4HQTfedmtzJTbYj9v6PHOeYS3O3vfi8c/UHrKI2T34vEeXpmUO3p85TzC2yt7P4jHP1F6yiNkD+LxAV7dBIPzncseNHtnxXS/T0IciPbi/G+UML//ktyisxd4/Sc3Po0Hrxi8Wq5NqG5RHP2L+z+08H3z/xQAAA==","debug_symbols":"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"},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":0,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"H4sIAAAAAAAA/+2b3U7bQBCF18GhBoOb2HGckEAIBaTehRSScMfLtM/d60p9haqss6Mclmm0UcdLVool5LG9O+ebsz+EyERqfSSvP5GJ2+Z8rN4f1ObFnGf/dzwI5po1yRkFwtkKhPMoEM5YkDNiOPU5NrFed3rNfVLr9fjuIXbWA30Ez9W2RLZqYgJ8eC1V6Wr2fAzJEVwZ8Ng8o7PGSc0zBEtNkXUbuEeFtuAe6RzBPdrBSCcxpgjX+5RskOXyvs4+XcOJyUXcKcT4bAzWxQ3V2Jav8bGRMXn1rqExqVcx+d42uRO4pjE4NbHgb44H1I7Mz6k1F2KIR9CW2pEfLWDVx7narJfTLf1iq18GbY6hn7230DWNtfaqa2J9btOeAPkb8HCm86byed+MTWx5l0JNGXgioz1f6fxn6u0RWdfXEGfAcy7Os1578nWux+4zsMvkfXrUXnUsr84srzJogwydBvyLQJdy03WH0ZbzYrHS2l0HL7oMT9ezF11GW9CLZ62dO3iRMzy5Zy9yRlvOi+U3rV04eFEwPIVnLwpGW86Lef0ZoOfgRY/h6Xn2osdoC66Rel6UDl6UDE/p2YuS0Rb04ofW7jt40Wd4+p696DPagl5819qVgxcVw1N59qJitAX3zvrzxcDBiwHDM/DsxYDRFvRirrWHDl4MGZ6hZy+GjLbgGqm1Lxy8uGB4Ljx7QXq7MvcCZK4CZC72gDmxYhntRb1/jhy8GDE8I89e4HcuuzCXe8CcWLGM9uJJa48dvBgzPGPPXpDersx5gMxFgMz9AJnLAJmrAJn3YT4nViyjvaz30EsHLy4ZnkvPXpDersx5gMyjAJmLPWBOrFhGe1l/N3fl4MUVw3Pl2QvS25V5ECBzdw+YEyuW0V4utPbEwYsJwzPx7AXp7co8DJC5CpB5FCBzESBzP0DmMkDmwxr0w5zvATO+e/S7UZ75c2rxkGfKYlQWYwpxBozU9kXJva+SWbWT1lTcj/X42POFrqeNas9XOu+XBmrSeW/l89Z/I9yZXPQO3y3j1b2JI+FxuoO8EejQ/RjiX9CW2pEftB8Qu36X68bE91v6Tax+GbS5gX63Vj+6prHW3v00cVNzy2Ved9RmLX8Fngb2wUd8J1eBV8pipGMCPNfyPA8N1TnDd/j+KNm1N7W8OrG8yqAN7tEftW8emA/M/2LGzxMncA956F7LqgX/v2EKOf4CARQXTpY1AAA=","debug_symbols":"ndpBattQGIXRvWgciu9v6T0pWymlOIlTDMYOsVMoJnuv3NIF9Mz0JN3ZNzq82/Cyf/r48f1wej1fhsevt+F4ft5dD+fTeroNmy81/3l7edud7i8u1937dXjctv4w7E8v61Ovz4fh9XDcr8+Vz28P99ECo+1GRpFRyWgro1FGk4yajLqMpIitFDFKEaMUMUoRoxQxShGjFDFKEaMUMUoRoxQxSRGTFDFJEZMUMUkRkxQxSRGTFDFJEZMU0aSIJkU0KaJJEU2KaFJEkyKaFNGkiCZFdCmiSxFdiuhSRJciuhTRpYguRXQpoksRsxQxSxGzFDFLEbMUMUsRsxQxSxGzFDFLEYsUsUgRixSxSBGLFLFIEYsUsUgRixSxSBHZbGgVWhWttrQaaTXRqtGq02qmFbURaiPURqiNUBuhNkJthNoItRFqI9RGURtFbRS1UdRGURtFbRS1UdQGgWZINEOkGTLNEGqGVDPEmiHXDMFmSDZDtBmyzRBuhnQzxJsh3wwBZ0g4Q8QZMs4QcoaUM8ScIecMQWdIOkPUGbLOEHaGtDPEnSHvDIFnSDxD5BkyzxB6htQzxJ4h9wzBZ0g+Q/QZss8Qfob0M8SfIf8MAWhIQEMEGjLQEIKGFDTEoCEHDUFoSEJDFBqy0BCGhjQ0xKEhDw2BaEhEQyQaMtEQioZUNMSiIRctctEiFy1y0SIXLXLRIhctctEiFy1y0SIXLXLRIhctctEiFy1y0SIXLXLRIhctctEiFy1y0SIXLXLRIhctctEiFy1y0SIXLbvoSS5a5KJFLlrkokUuWuSiRS5a/+2i6+nn7v2wezru73d77x8/Ts//rvqux+uvt79f1n9/Aw=="},{"name":"set_authorized","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"authorized","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":""}],"outputs":{"globals":{"storage":[{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"authorized","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"return_type","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Auth::get_authorized_in_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"new_delay","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"Auth::set_authorized_delay_parameters"}}],"kind":"struct","path":"Auth::set_authorized_delay_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"authorized","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Auth::set_authorized_parameters"}}],"kind":"struct","path":"Auth::set_authorized_abi"},{"fields":[{"name":"return_type","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Auth::get_authorized_abi"},{"fields":[{"name":"return_type","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"Auth::get_authorized_delay_abi"},{"fields":[],"kind":"struct","path":"Auth::do_private_authorized_thing_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"admin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Auth::constructor_parameters"}}],"kind":"struct","path":"Auth::constructor_abi"},{"fields":[{"name":"return_type","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Auth::get_scheduled_authorized_abi"}]}},"file_map":{"121":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH, MAX_ARGS_LENGTH\n},\n    traits::Hash, hash::{pedersen_hash, compute_siloed_nullifier, sha256_to_field}\n};\nuse crate::oracle::logs_traits::{LensForEncryptedLog, ToBytesForUnencryptedLog};\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    pedersen_hash([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, N, M>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes = (n as Field).to_be_bytes(4);\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    pedersen_hash(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<N>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() <= MAX_ARGS_LENGTH, \"Args length exceeds maximum\");\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..MAX_ARGS_LENGTH {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x11e40f2a780822f7971803048c9a2100579de352e7dadd99981760964da65b57);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"122":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::{compute_siloed_nullifier, pedersen_hash},\n    constants::GENERATOR_INDEX__CONSTRUCTOR, abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier, 0);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier, 0);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_contract_initialization_nullifier(context.this_address());\n    let header = context.get_header();\n    header.prove_nullifier_inclusion(init_nullifier);\n}\n\nfn compute_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    compute_siloed_nullifier(\n        address,\n        compute_unsiloed_contract_initialization_nullifier(address)\n    )\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    pedersen_hash(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"123":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr","source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, hash::pedersen_hash, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: Field = 24;\n\nstruct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nunconstrained fn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nunconstrained fn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n"},"127":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/returns.nr","source":"#[oracle(packReturns)]\nunconstrained fn pack_returns_oracle<N>(_returns: [Field]) -> Field {}\n\nunconstrained pub fn pack_returns(returns: [Field]) {\n    let _unused = pack_returns_oracle(returns);\n}\n\n#[oracle(unpackReturns)]\nunconstrained fn unpack_returns_oracle<N>(_return_hash: Field) -> [Field; N] {}\n\nunconstrained pub fn unpack_returns<N>(return_hash: Field) -> [Field; N] {\n    unpack_returns_oracle(return_hash)\n}\n"},"128":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, hash::pedersen_hash,\n    public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage, traits::{Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _leaf_slot: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, leaf_slot: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, leaf_slot);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"132":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/storage.nr","source":"use dep::protocol_types::{address::AztecAddress, traits::Deserialize};\n\n#[oracle(storageRead)]\nunconstrained fn storage_read_oracle<N>(\n    address: Field,\n    storage_slot: Field,\n    block_number: Field,\n    length: Field\n) -> [Field; N] {}\n\nunconstrained pub fn raw_storage_read<N>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> [Field; N] {\n    storage_read_oracle(address.to_field(), storage_slot, block_number as Field, N)\n}\n\nunconstrained pub fn storage_read<T, N>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> T where T: Deserialize<N> {\n    T::deserialize(raw_storage_read(address, storage_slot, block_number))\n}\n\nmod tests {\n    use crate::oracle::storage::{raw_storage_read, storage_read};\n    use dep::protocol_types::address::AztecAddress;\n\n    use std::test::OracleMock;\n    use crate::test::mocks::mock_struct::MockStruct;\n\n    global address = AztecAddress::from_field(29);\n    global slot = 7;\n    global block_number = 17;\n\n    #[test]\n    fn test_raw_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: [Field; 2] = raw_storage_read(address, slot, block_number);\n        assert_eq(read[0], 13);\n        assert_eq(read[1], 42);\n    }\n\n    #[test]\n    fn test_storage_read() {\n        let written = MockStruct { a: 13, b: 42 };\n\n        let _ = OracleMock::mock(\"storageRead\").returns(written.serialize());\n\n        let read: MockStruct = storage_read(address, slot, block_number);\n        assert_eq(read.a, 13);\n        assert_eq(read.b, 42);\n    }\n}\n"},"139":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, utils::arr_copy_slice,\n    constants::CONTRACT_INSTANCE_LENGTH, utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"148":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/public_immutable.nr","source":"use crate::{\n    context::{PublicContext, UnconstrainedContext}, oracle::storage::storage_read,\n    state_vars::storage::Storage\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like SharedImmutable but without the ability to read from private functions.\n// docs:start:public_immutable_struct\nstruct PublicImmutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_immutable_struct\n\nimpl<T, Context> Storage<T> for PublicImmutable<T, Context> {}\n\nimpl<T, Context> PublicImmutable<T, Context> {\n    // docs:start:public_immutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicImmutable { context, storage_slot }\n    }\n    // docs:end:public_immutable_struct_new\n}\n\nimpl <T> PublicImmutable<T, &mut PublicContext> {\n    // docs:start:public_immutable_struct_write\n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"PublicImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_immutable_struct_write\n\n    // Note that we don't access the context, but we do call oracles that are only available in public\n    // docs:start:public_immutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_immutable_struct_read\n}\n\nimpl<T> PublicImmutable<T, UnconstrainedContext> {\n    unconstrained pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"155":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_delay_change.nr","source":"use dep::protocol_types::traits::{Serialize, Deserialize, FromField, ToField};\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to store the minimum delay with which a ScheduledValueChange object can\n// schedule a change.\n// This delay is initally equal to INITIAL_DELAY, and can be safely mutated to any other value over time. This mutation \n// is performed via `schedule_change` in order to satisfy ScheduleValueChange constraints: if e.g. we allowed for the \n// delay to be decreased immediately then it'd be possible for the state variable to schedule a value change with a \n// reduced delay, invalidating prior private reads.\nstruct ScheduledDelayChange<INITIAL_DELAY> {\n    // Both pre and post are stored in public storage, so by default they are zeroed. By wrapping them in an Option, \n    // they default to Option::none(), which we detect and replace with INITIAL_DELAY. The end result is that a\n    // ScheduledDelayChange that has not been initialized has a delay equal to INITIAL_DELAY, which is the desired\n    // effect. Once initialized, the Option will never be none again.\n    pre: Option<u32>,\n    post: Option<u32>,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n    // The _dummy variable forces INITIAL_DELAY to be interpreted as a numeric value. This is a workaround to\n    // https://github.com/noir-lang/noir/issues/4633. Remove once resolved.\n    _dummy: [Field; INITIAL_DELAY],\n}\n\nimpl<INITIAL_DELAY> ScheduledDelayChange<INITIAL_DELAY> {\n    pub fn new(pre: Option<u32>, post: Option<u32>, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change, _dummy: [0; INITIAL_DELAY] }\n    }\n\n    /// Returns the current value of the delay stored in the data structure.\n    /// This function only returns a meaningful value when called in public with the current block number - for\n    /// historical private reads use `get_effective_minimum_delay_at` instead.\n    pub fn get_current(self, current_block_number: u32) -> u32 {\n        // The post value becomes the current one at the block of change, so any transaction that is included in the\n        // block of change will use the post value.\n\n        if current_block_number < self.block_of_change {\n            self.pre.unwrap_or(INITIAL_DELAY)\n        } else {\n            self.post.unwrap_or(INITIAL_DELAY)\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change delay and the block at which it will become the current\n    /// delay. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (u32, u32) {\n        (self.post.unwrap_or(INITIAL_DELAY), self.block_of_change)\n    }\n\n    /// Mutates the delay change by scheduling a change at the current block number. This function is only meaningful\n    /// when called in public with the current block number.\n    /// The block at which the new delay will become effective is determined automatically:\n    ///  - when increasing the delay, the change is effective immediately\n    ///  - when reducing the delay, the change will take effect after a delay equal to the difference between old and\n    ///    new delay. For example, if reducing from 3 days to 1 day, the reduction will be scheduled to happen after 2\n    ///    days.\n    pub fn schedule_change(&mut self, new: u32, current_block_number: u32) {\n        let current = self.get_current(current_block_number);\n\n        // When changing the delay value we must ensure that it is not possible to produce a value change with a delay\n        // shorter than the current one.\n        let blocks_until_change = if new > current {\n            // Increasing the delay value can therefore be done immediately: this does not invalidate prior contraints\n            // about how quickly a value might be changed (indeed it strengthens them).\n            0\n        } else {\n            // Decreasing the delay requires waiting for the difference between current and new delay in order to ensure\n            // that overall the current delay is respected.\n            //\n            //      current                    delay              earliest value block of change\n            //       block                 block of change         if delay remained unchanged\n            //  =======N=========================|================================X=================>\n            //         ^                         ^                                ^\n            //         |-------------------------|--------------------------------|\n            //         |   blocks until change               new delay            |\n            //         ------------------------------------------------------------\n            //                            current delay\n            current - new\n        };\n\n        self.pre = Option::some(current);\n        self.post = Option::some(new);\n        self.block_of_change = current_block_number + blocks_until_change;\n    }\n\n    /// Returns the minimum delay before a value might mutate due to a scheduled change, from the perspective of some\n    /// historical block number. It only returns a meaningful value when called in private with historical blocks. This \n    /// function can be used alongside `ScheduledValueChange.get_block_horizon` to properly constrain the\n    /// `max_block_number` transaction property when reading mutable shared state.\n    /// This value typically equals the current delay at the block following the historical one (the earliest one in\n    /// which a value change could be scheduled), but it also considers scenarios in which a delay reduction is \n    /// scheduled to happen in the near future, resulting in a way to schedule a change with an overall delay lower than\n    /// the current one.\n    pub fn get_effective_minimum_delay_at(self, historical_block_number: u32) -> u32 {\n        if self.block_of_change <= historical_block_number {\n            // If no delay changes were scheduled, then the delay value at the historical block (post) is guaranteed to\n            // hold due to how further delay changes would be scheduled by `schedule_change`.\n            self.post.unwrap_or(INITIAL_DELAY)\n        } else {\n            // If a change is scheduled, then the effective delay might be lower than the current one (pre). At the\n            // block of change the current delay will be the scheduled one, with an overall delay from the historical\n            // block number equal to the number of blocks until the change plus the new delay. If this value is lower\n            // than the current delay, then that is the effective minimum delay.\n            //\n            //       historical\n            //         block                  delay                  actual earliest value\n            //           v                block of change              block of change\n            //  =========NS=====================|=============================X===========Y=====>\n            //            ^                     ^                             ^           ^\n            //     earliest block in            |                             |           |\n            //   which to schedule change       |                             |           |\n            //           |                      |                             |           |\n            //           |----------------------|------------------------------           |\n            //           |         blocks                  new delay                      |\n            //           |      until change                                              |\n            //           |                                                                |\n            //           |----------------------------------------------------------------|\n            //                        current delay at the earliest block in \n            //                             which to scheduled value change\n\n            let blocks_until_change = self.block_of_change - (historical_block_number + 1);\n\n            min(\n                self.pre.unwrap_or(INITIAL_DELAY),\n                blocks_until_change + self.post.unwrap_or(INITIAL_DELAY)\n            )\n        }\n    }\n}\n\nimpl<INITIAL_DELAY> Serialize<1> for ScheduledDelayChange<INITIAL_DELAY> {\n    fn serialize(self) -> [Field; 1] {\n        // We pack all three u32 values into a single U128, which is made up of two u64 limbs.\n        // Low limb: [ pre_inner: u32 | post_inner: u32 ]\n        // High limb: [ empty | pre_is_some: u8 |  post_is_some: u8 | block_of_change: u32 ]\n\n        let lo = ((self.pre.unwrap_unchecked() as u64) * (1 << 32))\n            + (self.post.unwrap_unchecked() as u64);\n\n        let hi = (self.pre.is_some() as u64) * (1 << 33) \n            + (self.post.is_some() as u64 * (1 << 32)) \n            + self.block_of_change as u64;\n\n        let packed = U128::from_u64s_le(lo, hi);\n\n        [packed.to_integer()]\n    }\n}\n\nimpl<INITIAL_DELAY> Deserialize<1> for ScheduledDelayChange<INITIAL_DELAY> {\n    fn deserialize(input: [Field; 1]) -> Self {\n        let packed = U128::from_integer(input[0]);\n\n        // We use division and modulo to clear the bits that correspond to other values when unpacking.\n\n        let pre_is_some = ((packed.hi as u64) / (1 << 33)) as bool;\n        let pre_inner = ((packed.lo as u64) / (1 << 32)) as u32;\n\n        let post_is_some = (((packed.hi as u64) / (1 << 32)) % (1 << 1)) as bool;\n        let post_inner = ((packed.lo as u64) % (1 << 32)) as u32;\n\n        let block_of_change = ((packed.hi as u64) % (1 << 32)) as u32;\n\n        Self {\n            pre: if pre_is_some { Option::some(pre_inner) } else { Option::none() },\n            post: if post_is_some { Option::some(post_inner) } else { Option::none() },\n            block_of_change,\n            _dummy: [0; INITIAL_DELAY],\n        }\n    }\n}\n\nimpl<INITIAL_DELAY> Eq for ScheduledDelayChange<INITIAL_DELAY> {\n    fn eq(self, other: Self) -> bool {\n        (self.pre == other.pre) & (self.post == other.post) & (self.block_of_change == other.block_of_change)\n    }\n}\n"},"159":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/scheduled_value_change.nr","source":"use dep::protocol_types::traits::{Serialize, Deserialize, FromField, ToField};\nuse std::cmp::min;\n\nmod test;\n\n// This data structure is used by SharedMutable to represent a value that changes from `pre` to `post` at some block\n// called the `block_of_change`. The value can only be made to change by scheduling a change event at some future block\n// of change after some minimum delay measured in blocks has elapsed. This means that at any given block number we know\n// both the current value and the smallest block number at which the value might change - this is called the\n// 'block horizon'.\nstruct ScheduledValueChange<T> {\n    pre: T,\n    post: T,\n    // Block at which `post` value is used instead of `pre`\n    block_of_change: u32,\n}\n\nimpl<T> ScheduledValueChange<T> {\n    pub fn new(pre: T, post: T, block_of_change: u32) -> Self {\n        Self { pre, post, block_of_change }\n    }\n\n    /// Returns the value stored in the data structure at a given block. This function can be called both in public\n    /// (where `block_number` is simply the current block number, i.e. the number of the block in which the current\n    /// transaction will be included) and in private (where `block_number` is the historical block number that is used\n    /// to construct the proof).\n    /// Reading in private is only safe if the transaction's `max_block_number` property is set to a value lower or\n    /// equal to the block horizon (see `get_block_horizon()`).\n    pub fn get_current_at(self, block_number: u32) -> T {\n        // The post value becomes the current one at the block of change. This means different things in each realm:\n        // - in public, any transaction that is included in the block of change will use the post value\n        // - in private, any transaction that includes the block of change as part of the historical state will use the\n        //   post value (barring any follow-up changes)\n\n        if block_number < self.block_of_change {\n            self.pre\n        } else {\n            self.post\n        }\n    }\n\n    /// Returns the scheduled change, i.e. the post-change value and the block at which it will become the current\n    /// value. Note that this block may be in the past if the change has already taken place.\n    /// Additionally, further changes might be later scheduled, potentially canceling the one returned by this function.\n    pub fn get_scheduled(self) -> (T, u32) {\n        (self.post, self.block_of_change)\n    }\n\n    /// Returns the largest block number at which the value returned by `get_current_at` is known to remain the current\n    /// value. This value is only meaningful in private when constructing a proof at some `historical_block_number`,\n    /// since due to its asynchronous nature private execution cannot know about any later scheduled changes.\n    /// The caller of this function must know how quickly the value can change due to a scheduled change in the form of\n    /// `minimum_delay`. If the delay itself is immutable, then this is just its duration. If the delay is mutable\n    /// however, then this value is the 'effective minimum delay' (obtained by calling\n    /// `ScheduledDelayChange.get_effective_minimum_delay_at`), which equals the minimum number of blocks that need to\n    /// elapse from the next block until the value changes, regardless of further delay changes.\n    /// The value returned by `get_current_at` in private when called with a historical block number is only safe to use\n    /// if the transaction's `max_block_number` property is set to a value lower or equal to the block horizon computed\n    /// using the same historical block number.\n    pub fn get_block_horizon(self, historical_block_number: u32, minimum_delay: u32) -> u32 {\n        // The block horizon is the very last block in which the current value is known. Any block past the horizon\n        // (i.e. with a block number larger than the block horizon) may have a different current value. Reading the\n        // current value in private typically requires constraining the maximum valid block number to be equal to the\n        // block horizon.\n\n        if historical_block_number >= self.block_of_change {\n            // Once the block of change has been mined, the current value (post) will not change unless a new value\n            // change is scheduled. This did not happen at the historical block number (or else it would not be\n            // greater or equal to the block of change), and therefore could only happen after the historical block\n            // number. The earliest would be the immediate next block, and so the smallest possible next block of change\n            // equals `historical_block_number + 1 + minimum_delay`. Our block horizon is simply the previous block to\n            // that one.\n            //\n            //      block of      historical\n            //       change         block            block horizon\n            //   =======|=============N===================H===========>\n            //                         ^                   ^\n            //                         ---------------------\n            //                             minimum delay\n\n            historical_block_number + minimum_delay\n        } else {\n            // If the block of change has not yet been mined however, then there are two possible scenarios.\n            //   a) It could be so far into the future that the block horizon is actually determined by the minimum\n            //      delay, because a new change could be scheduled and take place _before_ the currently scheduled one.\n            //      This is similar to the scenario where the block of change is in the past: the time horizon is the\n            //      block prior to the earliest one in which a new block of change might land.\n            //\n            //         historical\n            //           block                        block horizon      block of change\n            //        =====N=================================H=================|=========>\n            //              ^                                 ^\n            //              |                                 |\n            //              -----------------------------------\n            //                        minimum delay\n            //\n            //   b) It could be fewer than `minimum_delay` blocks away from the historical block number, in which case\n            //      the block of change would become the limiting factor for the time horizon, which would equal the\n            //      block right before the block of change (since by definition the value changes at the block of\n            //      change).\n            //\n            //           historical                         block horizon\n            //             block     block of change       if not scheduled\n            //        =======N=============|===================H=================>\n            //                ^           ^                     ^\n            //                |     actual horizon              |\n            //                -----------------------------------\n            //                          minimum delay\n            //\n            // Note that the current implementation does not allow the caller to set the block of change to an arbitrary\n            // value, and therefore scenario a) is not currently possible. However implementing #5501 would allow for\n            // this to happen.\n\n            // Because historical_block_number < self.block_of_change, then block_of_change > 0 and we can safely\n            // subtract 1.\n            min(\n                self.block_of_change - 1,\n                historical_block_number + minimum_delay\n            )\n        }\n    }\n\n    /// Mutates the value by scheduling a change at the current block number. This function is only meaningful when\n    /// called in public with the current block number.\n    pub fn schedule_change(\n        &mut self,\n        new_value: T,\n        current_block_number: u32,\n        minimum_delay: u32,\n        block_of_change: u32\n    ) {\n        assert(block_of_change >= current_block_number + minimum_delay);\n\n        self.pre = self.get_current_at(current_block_number);\n        self.post = new_value;\n        self.block_of_change = block_of_change;\n    }\n}\n\nimpl<T> Serialize<3> for ScheduledValueChange<T> {\n    fn serialize(self) -> [Field; 3] where T: ToField {\n        [self.pre.to_field(), self.post.to_field(), self.block_of_change.to_field()]\n    }\n}\n\nimpl<T> Deserialize<3> for ScheduledValueChange<T> {\n  fn deserialize(input: [Field; 3]) -> Self  where T: FromField {\n    Self {\n        pre: FromField::from_field(input[0]),\n        post: FromField::from_field(input[1]),\n        block_of_change: FromField::from_field(input[2]),\n    }\n  }\n}\n\nimpl<T> Eq for ScheduledValueChange<T>  {\n    fn eq(self, other: Self) -> bool where T: Eq {\n        (self.pre == other.pre) & (self.post == other.post) & (self.block_of_change == other.block_of_change)\n    }\n}\n"},"160":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_mutable/shared_mutable.nr","source":"use dep::protocol_types::{\n    hash::{pedersen_hash, poseidon2_hash}, header::Header, address::AztecAddress,\n    traits::{FromField, ToField}\n};\n\nuse crate::context::{PrivateContext, PublicContext};\nuse crate::state_vars::{\n    storage::Storage,\n    shared_mutable::{scheduled_value_change::ScheduledValueChange, scheduled_delay_change::ScheduledDelayChange}\n};\nuse crate::oracle::storage::storage_read;\nuse dep::std::unsafe::zeroed;\n\nmod test;\n\nstruct SharedMutable<T, INITIAL_DELAY, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n\n// This will make the Aztec macros require that T implements the Serialize<N> trait, and allocate N storage slots to\n// this state variable. This is incorrect, since what we actually store is:\n//  - a ScheduledValueChange<T>, which requires 1 + 2 * M storage slots, where M is the serialization length of T\n//  - a ScheduledDelayChange, which requires another storage slot\n//\n// TODO https://github.com/AztecProtocol/aztec-packages/issues/5736: change the storage allocation scheme so that we\n// can actually use it here\nimpl<T, INITIAL_DELAY, Context> Storage<T> for SharedMutable<T, INITIAL_DELAY, Context> {}\n\n// TODO: extract into a utils module once  we can do arithmetic on generics, i.e. https://github.com/noir-lang/noir/issues/4784\nfn concat_arrays<N, M, O>(arr_n: [Field; N], arr_m: [Field; M]) -> [Field; O] {\n    assert_eq(N + M, O);\n    let mut out: [Field; O] = [0; O];\n    for i in 0..N {\n        out[i] = arr_n[i];\n    }\n    for i in 0..M {\n        out[N+i] = arr_m[i];\n    }\n    out\n}\n\n// SharedMutable<T> stores a value of type T that is:\n//  - publicly known (i.e. unencrypted)\n//  - mutable in public\n//  - readable in private with no contention (i.e. multiple parties can all read the same value without blocking one\n//    another nor needing to coordinate)\n// This is famously a hard problem to solve. SharedMutable makes it work by introducing a delay to public mutation:\n// the value is not changed immediately but rather a value change is scheduled to happen in the future after some delay\n// measured in blocks. Reads in private are only valid as long as they are included in a block not too far into the\n// future, so that they can guarantee the value will not have possibly changed by then (because of the delay).\n// The delay for changing a value is initially equal to INITIAL_DELAY, but can be changed by calling\n// `schedule_delay_change`.\nimpl<T, INITIAL_DELAY, Context> SharedMutable<T, INITIAL_DELAY, Context> {\n    pub fn new(context: Context, storage_slot: Field) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n\n    fn hash_scheduled_data(\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>\n    ) -> Field where T: ToField {\n        // TODO(#5491 and https://github.com/noir-lang/noir/issues/4784): update this so that we don't need to rely on\n        // ScheduledValueChange serializing to 3 and ScheduledDelayChange serializing to 1\n        let concatenated: [Field; 4] = concat_arrays(value_change.serialize(), delay_change.serialize());\n        poseidon2_hash(concatenated)\n    }\n\n    // Since we can't rely on the native storage allocation scheme, we hash the storage slot to get a unique location in\n    // which we can safely store as much data as we need.\n    // See https://github.com/AztecProtocol/aztec-packages/issues/5492 and\n    // https://github.com/AztecProtocol/aztec-packages/issues/5736\n    // We store three things in public storage:\n    //  - a ScheduledValueChange\n    //  - a ScheduledDelaChange\n    //  - the hash of both of these (via `hash_scheduled_data`)\n    fn get_value_change_storage_slot(self) -> Field {\n        pedersen_hash([self.storage_slot, 0], 0)\n    }\n\n    fn get_delay_change_storage_slot(self) -> Field {\n        pedersen_hash([self.storage_slot, 1], 0)\n    }\n\n    fn get_hash_storage_slot(self) -> Field {\n        pedersen_hash([self.storage_slot, 2], 0)\n    }\n\n    // It may seem odd that we take a header and address instead of reading from e.g. a PrivateContext, but this lets us\n    // reuse this function in SharedMutablePrivateGetter.\n    fn historical_read_from_public_storage(\n        self,\n        header: Header,\n        address: AztecAddress\n    ) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>, u32) where T: FromField + ToField + Eq {\n        let historical_block_number = header.global_variables.block_number as u32;\n\n        // We could simply produce historical inclusion proofs for both the ScheduledValueChange and\n        // ScheduledDelayChange, but that'd require one full sibling path per storage slot (since due to kernel siloing\n        // the storage is not contiguous), and in the best case in which T is a single field that'd be 4 slots.\n        // Instead, we get an oracle to provide us the correct values for both the value and delay changes, and instead\n        // prove inclusion of their hash, which is both a much smaller proof (a single slot), and also independent of\n        // the size of T.\n        let (value_change_hint, delay_change_hint) = get_public_storage_hints(address, self.storage_slot, historical_block_number);\n\n        // Ideally the following would be simply public_storage::read_historical, but we can't implement that yet.\n        let hash = header.public_storage_historical_read(self.get_hash_storage_slot(), address);\n\n        // @todo This is written strangely to bypass a formatting issue with the if that is breaking ci.\n        let (a, b, c) = if hash != 0 {\n            let a = SharedMutable::hash_scheduled_data(value_change_hint, delay_change_hint);\n            (a, value_change_hint, delay_change_hint)\n        } else {\n            // The hash slot can only hold a zero if it is uninitialized, meaning no value or delay change was ever\n            // scheduled. Therefore, the hints must then correspond to uninitialized scheduled changes.\n            let b = ScheduledValueChange::deserialize(zeroed());\n            let c = ScheduledDelayChange::deserialize(zeroed());\n            (hash, b, c)\n        };\n\n        assert_eq(hash, a, \"Hint values do not match hash\");\n        assert_eq(value_change_hint, b, \"Non-zero value change for zero hash\");\n        assert_eq(delay_change_hint, c, \"Non-zero delay change for zero hash\");\n\n        (value_change_hint, delay_change_hint, historical_block_number)\n    }\n}\n\nimpl<T, INITIAL_DELAY> SharedMutable<T, INITIAL_DELAY, &mut PublicContext> {\n    pub fn schedule_value_change(self, new_value: T) where T: ToField {\n        let mut value_change = self.read_value_change();\n        let delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n        let current_delay = delay_change.get_current(block_number);\n\n        // TODO: make this configurable\n        // https://github.com/AztecProtocol/aztec-packages/issues/5501\n        let block_of_change = block_number + current_delay;\n        value_change.schedule_change(new_value, block_number, current_delay, block_of_change);\n\n        self.write(value_change, delay_change);\n    }\n\n    pub fn schedule_delay_change(self, new_delay: u32) where T: ToField {\n        let mut delay_change = self.read_delay_change();\n\n        let block_number = self.context.block_number() as u32;\n\n        delay_change.schedule_change(new_delay, block_number);\n\n        self.write(self.read_value_change(), delay_change);\n    }\n\n    pub fn get_current_value_in_public(self) -> T {\n        let block_number = self.context.block_number() as u32;\n        self.read_value_change().get_current_at(block_number)\n    }\n\n    pub fn get_current_delay_in_public(self) -> u32 {\n        let block_number = self.context.block_number() as u32;\n        self.read_delay_change().get_current(block_number)\n    }\n\n    pub fn get_scheduled_value_in_public(self) -> (T, u32) {\n        self.read_value_change().get_scheduled()\n    }\n\n    pub fn get_scheduled_delay_in_public(self) -> (u32, u32) {\n        self.read_delay_change().get_scheduled()\n    }\n\n    fn read_value_change(self) -> ScheduledValueChange<T> {\n        self.context.storage_read(self.get_value_change_storage_slot())\n    }\n\n    fn read_delay_change(self) -> ScheduledDelayChange<INITIAL_DELAY> {\n        self.context.storage_read(self.get_delay_change_storage_slot())\n    }\n\n    fn write(\n        self,\n        value_change: ScheduledValueChange<T>,\n        delay_change: ScheduledDelayChange<INITIAL_DELAY>\n    ) where T: ToField {\n        // Whenever we write to public storage, we write both the value change and delay change as well as the hash of\n        // them both. This guarantees that the hash is always kept up to date.\n        // While this makes for more costly writes, it also makes private proofs much simpler because they only need to\n        // produce a historical proof for the hash, which results in a single inclusion proof (as opposed to 4 in the\n        // best case scenario in which T is a single field). Private shared mutable reads are assumed to be much more\n        // frequent than public writes, so this tradeoff makes sense.\n        self.context.storage_write(self.get_value_change_storage_slot(), value_change);\n        self.context.storage_write(self.get_delay_change_storage_slot(), delay_change);\n        self.context.storage_write(\n            self.get_hash_storage_slot(),\n            SharedMutable::hash_scheduled_data(value_change, delay_change)\n        );\n    }\n}\n\nimpl<T, INITIAL_DELAY> SharedMutable<T, INITIAL_DELAY, &mut PrivateContext> {\n    pub fn get_current_value_in_private(self) -> T where T: FromField + ToField + Eq {\n        // When reading the current value in private we construct a historical state proof for the public value.\n        // However, since this value might change, we must constrain the maximum transaction block number as this proof\n        // will only be valid for however many blocks we can ensure the value will not change, which will depend on the\n        // current delay and any scheduled delay changes.\n\n        let (value_change, delay_change, historical_block_number) = self.historical_read_from_public_storage(self.context.get_header(), self.context.this_address());\n\n        // We use the effective minimum delay as opposed to the current delay at the historical block as this one also\n        // takes into consideration any scheduled delay changes.\n        // For example, consider a scenario in which at block 200 the current delay was 50. We may naively think that\n        // the earliest we could change the value would be at block 251 by scheduling immediately after the historical\n        // block, i.e. at block 201. But if there was a delay change scheduled for block 210 to reduce the delay to 20\n        // blocks, then if a value change was scheduled at block 210 it would go into effect at block 230, which is\n        // earlier than what we'd expect if we only considered the current delay.\n        let effective_minimum_delay = delay_change.get_effective_minimum_delay_at(historical_block_number);\n        let block_horizon = value_change.get_block_horizon(historical_block_number, effective_minimum_delay);\n\n        // We prevent this transaction from being included in any block after the block horizon, ensuring that the\n        // historical public value matches the current one, since it can only change after the horizon.\n        self.context.set_tx_max_block_number(block_horizon);\n        value_change.get_current_at(historical_block_number)\n    }\n}\n\nunconstrained fn get_public_storage_hints<T, INITIAL_DELAY>(\n    address: AztecAddress,\n    storage_slot: Field,\n    block_number: u32\n) -> (ScheduledValueChange<T>, ScheduledDelayChange<INITIAL_DELAY>) {\n    // This function cannot be part of the &mut PrivateContext impl because that'd mean that by passing `self` we'd also\n    // be passing a mutable reference to an unconstrained function, which is not allowed. We therefore create a dummy\n    // state variable here so that we can access the methods to compute storage slots. This will all be removed in the\n    // future once we do proper storage slot allocation (#5492).\n    let dummy = SharedMutable::new((), storage_slot);\n\n    (\n        storage_read(address, dummy.get_value_change_storage_slot(), block_number), storage_read(address, dummy.get_delay_change_storage_slot(), block_number)\n    )\n}\n"},"192":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr","source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u32 = 3;\n\nuse crate::{\n    abis::{read_request::ScopedReadRequest, side_effect::Readable}, hash::compute_siloed_nullifier,\n    merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}\n};\n\nstruct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u32,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            nullifier : 0,\n            next_nullifier : 0,\n            next_index : 0,\n        }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            std::hash::pedersen_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl Readable for NullifierLeafPreimage {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        let siloed_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.nullifier, siloed_value, \"Value of the nullifier leaf does not match read request\");\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u32 }\n    }\n}\n\nimpl Eq for NullifierLeafPreimage {\n  fn eq(self, other: Self) -> bool {\n    (self.nullifier == other.nullifier) &\n    (self.next_nullifier == other.next_nullifier) &\n    (self.next_index == other.next_index)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NullifierLeafPreimage::empty();\n    let serialized = item.serialize();\n    let deserialized = NullifierLeafPreimage::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"193":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"},"22":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.to_le_radix(256, num_bytes);\n    let y_bytes = y.to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    let borrow = lte_16_hint(alo, blo);\n\n    let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n    let rhi = ahi - bhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Take hints of the decomposition\n        let (xlo, xhi) = decompose_hint(x);\n\n        // Range check the limbs\n        xlo.assert_max_bit_size(128);\n        xhi.assert_max_bit_size(128);\n\n        // Check that the decomposition is correct\n        assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n        // Assert that the decomposition of P is greater than the decomposition of x\n        assert_gt_limbs((PLO, PHI), (xlo, xhi));\n        (xlo, xhi)\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else  {\n        // Take a hint of the comparison and verify it\n        if lt_32_hint(a, b) {\n            assert_gt(b, a);\n            false\n        } else {\n            assert_gt(a, b);\n            true\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose_hint, decompose, compute_lt, assert_gt, gt, lt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"23":{"path":"std/field/mod.nr","source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n"},"234":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U64_SERIALIZED_LEN: Field = 1;\nglobal U128_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n"},"235":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<N> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<N> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\nimpl<N> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let mut result = [0; N];\n        let bytes: [u8; N] = self.as_bytes();\n        for i in 0..N {\n            result[i] = field_from_bytes([bytes[i];1], true);\n        }\n        result\n    }\n}\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<N> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n"},"238":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            std::hash::pedersen_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"240":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path, messaging::l2_to_l1_message::ScopedL2ToL1Message,\n    recursion::verification_key::VerificationKey, traits::is_empty,\n    utils::field::field_from_bytes_32_trunc\n};\nuse std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    pedersen_hash(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, inner_note_hash: Field) -> Field {\n    let inputs = [nonce, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_encrypted_log_hash(address: AztecAddress, randomness: Field, log_hash: Field) -> Field {\n    // TODO: Using 0 GENERATOR_INDEX here as interim before we move to posiedon\n    // NB: A unique separator will be needed for masked_contract_address\n    let mut masked_contract_address = pedersen_hash([address.to_field(), randomness], 0);\n    if randomness == 0 {\n        // In some cases, we actually want to reveal the contract address we are siloing with:\n        // e.g. 'handshaking' contract w/ known address\n        // An app providing randomness = 0 signals to not mask the address.\n        masked_contract_address = address.to_field();\n    }\n    accumulate_sha256([masked_contract_address, log_hash])\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedEncryptedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_encrypted_log_hash(\n            log_hash.contract_address,\n            log_hash.log_hash.randomness,\n            log_hash.log_hash.value\n        )\n    }\n}\n\npub fn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly. \npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<N>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n"},"247":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"25":{"path":"std/hash/mod.nr","source":"mod poseidon;\nmod mimc;\nmod poseidon2;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::sha256::{digest, sha256_var};\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul};\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n#[no_predicates]\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    let value = pedersen_commitment_with_separator(input, 0);\n    if (value.x == 0) & (value.y == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value.x, y: value.y, is_infinite: false }\n    }\n}\n\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        points[i] = EmbeddedCurveScalar::from_field(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let values = multi_scalar_mul(generators, points);\n    EmbeddedCurvePoint { x: values[0], y: values[1], is_infinite: values[2] as bool }\n}\n\n#[no_predicates]\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    EmbeddedCurvePoint { x: values[0], y: values[1], is_infinite: false }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    crate::assert_constant(starting_index);\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let v1 = pedersen_commitment_with_separator(input, separator);\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    multi_scalar_mul(\n        [length_generator[0], v1],\n        [EmbeddedCurveScalar { lo: N as Field, hi: 0 }, EmbeddedCurveScalar { lo: 1, hi: 0 }]\n    )[0]\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes(32).as_array();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n#[test]\nfn assert_pedersen_noir() {\n    // TODO: make this a fuzzer test once fuzzer supports curve-specific blackbox functions.\n    let input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    assert_eq(pedersen_hash_with_separator(input, 4), pedersen_hash_with_separator_noir(input, 4));\n    assert_eq(pedersen_commitment_with_separator(input, 4), pedersen_commitment_with_separator_noir(input, 4));\n}\n"},"263":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"struct Reader<N> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"273":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes = field.to_be_bytes(31);\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2 = field.to_be_bytes(31);\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n"},"275":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"290":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId, hash::poseidon2_hash,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash([pub_keys_hash.to_field(), partial_address.to_field(), GENERATOR_INDEX__CONTRACT_ADDRESS_V1])\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x1b6ead051e7b42665064ca6cf1ec77da0a36d86e00d1ff6e44077966c0c3a9fa;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"30":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\nglobal RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) -> [Field; RATE] {\n        // zero-pad the cache\n        for i in 0..RATE {\n            if i >= self.cache_size {\n                self.cache[i] = 0;\n            }\n        }\n        // add the cache into sponge state\n        for i in 0..RATE {\n            self.state[i] += self.cache[i];\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n        // return `RATE` number of field elements from the sponge state.\n        let mut result = [0; RATE];\n        for i in 0..RATE {\n            result[i] = self.state[i];\n        }\n        result\n    }\n\n    fn absorb(&mut self, input: Field) {\n        if (!self.squeeze_mode) & (self.cache_size == RATE) {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            let _ = self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else if (!self.squeeze_mode) & (self.cache_size != RATE) {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        } else if self.squeeze_mode {\n            // If we're in squeeze mode, switch to absorb mode and add the input into the cache.\n            // N.B. I don't think this code path can be reached?!\n            self.cache[0] = input;\n            self.cache_size = 1;\n            self.squeeze_mode = false;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        if self.squeeze_mode & (self.cache_size == 0) {\n            // If we're in squeze mode and the cache is empty, there is nothing left to squeeze out of the sponge!\n            // Switch to absorb mode.\n            self.squeeze_mode = false;\n            self.cache_size = 0;\n        }\n        if !self.squeeze_mode {\n            // If we're in absorb mode, apply sponge permutation to compress the cache, populate cache with compressed\n            // state and switch to squeeze mode. Note: this code block will execute if the previous `if` condition was\n            // matched\n            let new_output_elements = self.perform_duplex();\n            self.squeeze_mode = true;\n            for i in 0..RATE {\n                self.cache[i] = new_output_elements[i];\n            }\n            self.cache_size = RATE;\n        }\n        // By this point, we should have a non-empty cache. Pop one item off the top of the cache and return it.\n        let result = self.cache[0];\n        for i in 1..RATE {\n            if i < self.cache_size {\n                self.cache[i - 1] = self.cache[i];\n            }\n        }\n        self.cache_size -= 1;\n        self.cache[self.cache_size] = 0;\n        result\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n"},"32":{"path":"std/merkle.nr","source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<let N: u32>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n"},"321":{"path":"/usr/src/noir-projects/noir-contracts/contracts/auth_contract/src/main.nr","source":"// Test contract showing basic public access control that can be used in private. It uses a SharedMutable state variable to\n// publicly store the address of an authorized account that can call private functions.\ncontract Auth {\n    use dep::aztec::protocol_types::address::AztecAddress;\n    use dep::aztec::state_vars::{PublicImmutable, SharedMutable};\n\n    // Authorizing a new address has a certain block delay before it goes into effect.\n    global CHANGE_AUTHORIZED_DELAY_BLOCKS = 5;\n\n    #[aztec(storage)]\n    struct Storage {\n        // Admin can change the value of the authorized address via set_authorized()\n        admin: PublicImmutable<AztecAddress>,\n        // docs:start:shared_mutable_storage\n        authorized: SharedMutable<AztecAddress, CHANGE_AUTHORIZED_DELAY_BLOCKS>, \n        // docs:end:shared_mutable_storage\n    }\n\n    #[aztec(public)]\n    #[aztec(initializer)]\n    fn constructor(admin: AztecAddress) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.initialize(admin);\n    }\n\n    // docs:start:shared_mutable_schedule\n    #[aztec(public)]\n    fn set_authorized(authorized: AztecAddress) {\n        assert_eq(storage.admin.read(), context.msg_sender(), \"caller is not admin\");\n        storage.authorized.schedule_value_change(authorized);\n        // docs:end:shared_mutable_schedule\n    }\n\n    // docs:start:public_getter\n    #[aztec(public)]\n    #[aztec(view)]\n    fn get_authorized() -> AztecAddress {\n        // docs:start:shared_mutable_get_current_public\n        storage.authorized.get_current_value_in_public()\n        // docs:end:shared_mutable_get_current_public\n    }\n    // docs:end:public_getter\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn get_scheduled_authorized() -> AztecAddress {\n        // docs:start:shared_mutable_get_scheduled_public\n        let (scheduled_value, _block_of_change): (AztecAddress, u32) = storage.authorized.get_scheduled_value_in_public();\n        // docs:end:shared_mutable_get_scheduled_public\n        scheduled_value\n    }\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn get_authorized_delay() -> pub u32 {\n        storage.authorized.get_current_delay_in_public()\n    }\n\n    #[aztec(public)]\n    fn set_authorized_delay(new_delay: u32) {\n        storage.authorized.schedule_delay_change(new_delay);\n    }\n\n    #[aztec(private)]\n    fn do_private_authorized_thing() {\n        // Reading a value from authorized in private automatically adds an extra validity condition: the base rollup\n        // circuit will reject this tx if included in a block past the block horizon, which is as far as the circuit can\n        // guarantee the value will not change from some historical value (due to CHANGE_AUTHORIZED_DELAY_BLOCKS).\n        // docs:start:shared_mutable_get_current_private\n        let authorized = storage.authorized.get_current_value_in_private();\n        // docs:end:shared_mutable_get_current_private\n        assert_eq(authorized, context.msg_sender(), \"caller is not authorized\");\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn get_authorized_in_private() -> AztecAddress {\n        storage.authorized.get_current_value_in_private()\n    }\n}\n"},"38":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n"},"4":{"path":"std/cmp.nr","source":"// docs:start:eq-trait\ntrait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\nimpl Eq for Field { fn eq(self, other: Field) -> bool { self == other } }\n\nimpl Eq for u64 { fn eq(self, other: u64) -> bool { self == other } }\nimpl Eq for u32 { fn eq(self, other: u32) -> bool { self == other } }\nimpl Eq for u8 { fn eq(self, other: u8) -> bool { self == other } }\nimpl Eq for u1 { fn eq(self, other: u1) -> bool { self == other } }\n\nimpl Eq for i8 { fn eq(self, other: i8) -> bool { self == other } }\nimpl Eq for i32 { fn eq(self, other: i32) -> bool { self == other } }\nimpl Eq for i64 { fn eq(self, other: i64) -> bool { self == other } }\n\nimpl Eq for () { fn eq(_self: Self, _other: ()) -> bool { true } }\nimpl Eq for bool { fn eq(self, other: bool) -> bool { self == other } }\n\nimpl<T, let N: u32> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T] where T: Eq {\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3) & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\nstruct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n// docs:start:ord-trait\ntrait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v1 } else { v2 }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v2 } else { v1 }\n}\n\nmod cmp_tests {\n    use crate::cmp::{min, max};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"},"47":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\nuse crate::println;\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\nstruct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_be_bytes(8);\n        let hi = self.hi.to_be_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_le_bytes(8);\n        let hi = self.hi.to_le_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    fn decode_ascii(ascii: u8) -> Field {\n        if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (U128::uconstrained_check_is_upper_ascii(ascii) as u8);\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        } as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;  \n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi*b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo*b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo+self.hi)*(b.lo+b.hi) - low + carry\n        } else {\n            self.lo*b.hi + self.hi*b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        q\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        r\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n        \n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 { \n    fn not(self) -> U128 {\n        U128 {\n            lo: (!(self.lo as u64)) as Field,\n            hi: (!(self.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitOr for U128 { \n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 { \n    fn shl(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    } \n}\n\nimpl Shr for U128 { \n    fn shr(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    } \n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c= b.to_le_bytes(17);\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        let (q,r) = a.unconstrained_div(b);\n        assert_eq(q, c);\n        assert_eq(r, d);\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        let (c,d ) = a.unconstrained_div(b);\n        assert_eq((c, d), (a, U128::zero()));\n\n        // Check where b is a multiple of a\n        let (c,d) = b.unconstrained_div(a);\n        assert_eq((c, d), (U128::zero(), b));\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        let (c,d)= a.unconstrained_div(b);\n        assert_eq((c, d), (U128::zero(), U128::zero()));\n\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        let (c,d )= a.unconstrained_div(b);\n        assert_eq((c, d), (U128::one(), U128::zero()));\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"80":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::pedersen_hash, address::AztecAddress,\n    header::Header, utils::field::full_field_less_than\n};\nuse std::merkle::compute_merkle_root;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header { \n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf slot by siloing the storage slot with the contract address\n        let public_value_leaf_slot = pedersen_hash(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness of the slot\n        let witness = get_public_data_witness(\n            self.global_variables.block_number as u32,\n            public_value_leaf_slot\n        );\n\n        // 3) Extract the value from the witness leaf and check that the storage slot is correct\n        let preimage = witness.leaf_preimage;\n\n        // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n        // 1. The value is the same as the one in the witness\n        // 2. The value was never initialized and is zero\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_value_leaf_slot);\n        let is_next_greater_than = full_field_less_than(public_value_leaf_slot, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_value_leaf_slot, \"Public data slot doesn't match witness\");\n            preimage.value\n        };\n\n        // 4) Prove that the leaf exists in the public data tree. Note that `hash` returns not just the hash of the value\n        // but also the metadata (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == compute_merkle_root(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        value\n    }\n}\n"},"81":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr","source":"use std::merkle::compute_merkle_root;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::NoteInterface}\n};\n\ntrait ProveNullifierInclusion {\n    fn prove_nullifier_inclusion(header: Header, nullifier: Field);\n}\n\nimpl ProveNullifierInclusion for Header {\n    fn prove_nullifier_inclusion(self, nullifier: Field) {\n        // 1) Get the membership witness of the nullifier\n        let witness = get_nullifier_membership_witness(self.global_variables.block_number as u32, nullifier);\n\n        // 2) Check that the witness we obtained matches the nullifier\n        assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n\n        // 3) Compute the nullifier tree leaf\n        let nullifier_leaf = witness.leaf_preimage.hash();\n\n        // 4) Prove that the nullifier is in the nullifier tree\n        assert(\n            self.state.partial.nullifier_tree.root\n            == compute_merkle_root(nullifier_leaf, witness.index, witness.path), \"Proving nullifier inclusion failed\"\n        );\n        // --> Now we have traversed the trees all the way up to archive root and verified that the nullifier\n        //     was included in the nullifier tree.\n    }\n}\n\ntrait ProveNoteIsNullified {\n    fn prove_note_is_nullified<Note, N, M>(header: Header, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N, M>;\n}\n\nimpl ProveNoteIsNullified for Header {\n    // docs:start:prove_note_is_nullified\n    fn prove_note_is_nullified<Note, N, M>(self, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N, M> {\n        let nullifier = compute_siloed_nullifier(note, context);\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n    // docs:end:prove_note_is_nullified\n}\n"},"94":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, set_public_teardown_function_call_internal,\n    parse_public_call_stack_item_from_oracle\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    caller_context::CallerContext, function_selector::FunctionSelector,\n    max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_function_hash: Field,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    // TODO(#7112): This function is called with non-zero note hash only in 1 of 25 cases in aztec-packages repo\n    // - consider creating a separate function with 1 arg for the zero note hash case.\n    fn push_nullifier(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            public_teardown_function_hash: self.public_teardown_function_hash,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one \n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<M>(&mut self, randomness: Field, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<M>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.start_side_effect_counter, start_side_effect_counter);\n        let end_side_effect_counter = item.public_inputs.end_side_effect_counter;\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        let mut caller_context = CallerContext::empty();\n        caller_context.is_static_call = self.inputs.call_context.is_static_call;\n        if is_delegate_call {\n            caller_context.msg_sender = self.inputs.call_context.msg_sender;\n            caller_context.storage_contract_address = self.inputs.call_context.storage_contract_address;\n        }\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            target: item.contract_address,\n            call_context: item.public_inputs.call_context,\n            function_data: item.function_data,\n            args_hash: item.public_inputs.args_hash,\n            returns_hash: item.public_inputs.returns_hash,\n            caller_context,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(item.public_inputs.returns_hash)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_call_stack_hashes.push(item.get_compressed().hash());\n    }\n\n    pub fn set_public_teardown_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_teardown_function_hash = item.get_compressed().hash();\n    }\n\n    fn validate_call_stack_item_from_oracle(\n        self,\n        item: PublicCallStackItem,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"95":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::inputs::public_context_inputs::PublicContextInputs;\nuse crate::context::gas::GasOpts;\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs) -> Self {\n        PublicContext { inputs }\n    }\n\n    pub fn emit_unencrypted_log<T, N>(&mut self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0);\n    }\n\n    fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        assert(false, \"'delegate_call_public_function' not implemented!\");\n        FunctionReturns::new([0; RETURNS_COUNT])\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        // Cannot nullify pending commitments in AVM, so `nullified_commitment` is not used\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(self) -> AztecAddress {\n        sender()\n    }\n    fn selector(self) -> FunctionSelector {\n        FunctionSelector::from_u32(function_selector())\n    }\n    fn get_args_hash(self) -> Field {\n        self.inputs.args_hash\n    }\n    fn transaction_fee(self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(self) -> Field {\n        chain_id()\n    }\n    fn version(self) -> Field {\n        version()\n    }\n    fn block_number(self) -> Field {\n        block_number()\n    }\n    fn timestamp(self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(self) -> Field {\n        da_gas_left()\n    }\n\n    fn raw_storage_read<N>(_self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(storage_slot)\n    }\n\n    fn storage_read<T, N>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<N>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        storage_write(storage_slot, values);\n    }\n\n    fn storage_write<T, N>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    let MAX_POSSIBLE_FIELD: Field = 0 - 1;\n    [\n        user_gas.l2_gas.unwrap_or(MAX_POSSIBLE_FIELD),\n        user_gas.da_gas.unwrap_or(MAX_POSSIBLE_FIELD)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/6420): reconsider.\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\nunconstrained fn function_selector() -> u32 {\n    function_selector_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<RET_SIZE>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<RET_SIZE>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_opcode(storage_slot, N)\n}\n\nunconstrained fn storage_write<N>(storage_slot: Field, values: [Field; N]) {\n    storage_write_opcode(storage_slot, values);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(PublicContextInputs::empty())\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n#[oracle(avmOpcodeFunctionSelector)]\nunconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<RET_SIZE>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<RET_SIZE>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode<N>(storage_slot: Field, length: Field) -> [Field; N] {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode<N>(storage_slot: Field, values: [Field; N]) {}\n\nstruct FunctionReturns<N> {\n    values: [Field; N]\n}\n\nimpl<N> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn assert_empty(returns: FunctionReturns<0>) {\n        assert(returns.values.len() == 0);\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n"}}}