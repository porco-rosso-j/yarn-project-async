{"transpiled":true,"noir_version":"0.31.0+6237d96a0bc23a5ed656e7ba172fb57facd9c807","name":"FPC","functions":[{"name":"constructor","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(initializer)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"other_asset","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"gas_token_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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"},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"fee_entrypoint_private","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"asset","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"secret_hash","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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yTwt6fpSVZam0LSk60tVWZq40pKuL1VlabpIS7q+VJWlSRot6fpSVZamRrSk60tVWZqQ0JKuL1VlaRpAS7q+VJWlrvot6fpSVZY637ek60tVWepO35KuL1VlqYN8S7q+VJWlLu8t6fpSVZY6sbek60tV+eqtvvvqrb776q2+++qtvvvqrb776q2+++qtvvvqrb776q2+++qtvvvqrb776q2+++qtvvvqrb776q2+++qtvvvqrb776q2effVWz756q2dfvdWzr97qeRFf6bpSVdlXb/Xsq7d69tVbPfvqrZ599VbPvnqrZ1+91bOv3urZV2/17Ku3evbVWz376q2effVWz756q2dfvdWzr97q2Vdv9eyrt3r21Vs9++qtnn31Vs++eqtnX73Vs6/e6tlXb/Xsq7d69tVbPfvqrZ599VbPvnqrZ1+91bOv3urZV2/17Ku3evbVWz376q2effVWz756q2dfvdWzr97q2Vdv9eyrt3r21Vs9++qtnn31Vs++eqtnX73Vs6/e6tlXb/Xsq7d69tVbPfvqrZ599VbPvnqrZ1+91bOv3urZV2/17Ku3evbVWz376q2effVWz756q2dfvdWzr97q2Vdv9eyrt3r21Vs9++qtnn31Vs++eqtnX73Vs6/e6tlXb/Xsq7d69tVbPfvqrZ599VbPvnqrZ1+91bOv3urZV2/17Ku3evbVWz376q2effVWz756q2dfvdWzr97q2Vdv9eyrt3r21Vs9++qtnn31Vs++eqsXX73Vi6/e6sVXb/Xiq7d6WcRXuq5UVfHVW7346q1efPVWL756qxdfvdWLr97qxVdv9eKrt3rx1Vu9+OqtXnz1Vi++eqsXX73Vi6/e6sVXb/Xiq7d68dVbvfjqrV589VYvvnqrF1+91Yuv3urFV2/14qu3evHVW7346q1efPVWL756qxdfvdWLr97qxVdv9eKrt3rx1Vu9+OqtXnz1Vi++eqsXX73Vi6/e6sVXb/Xiq7d68dVbvfjqrV589VYvvnqrF1+91Yuv3urFV2/14qu3evHVW7346q1efPVWL756qxdfvdWLr97qxVdv9eKrt3rx1Vu9+OqtXnz1Vi++eqsXX73Vi6/e6sVXb/Xiq7d68dVbvfjqrV589VYvvnqrF1+91Yuv3urFV2/14qu3evHVW7346q1efPVWL756qxdfvdWLr97qxVdv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"},{"name":"pay_refund","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"refund_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"asset","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":""},{"name":"fee_entrypoint_public","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"asset","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"authwit::aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"authwit::aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"authwit::aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"authwit::aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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"},{"name":"pay_refund_with_shielded_rebate","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"asset","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"secret_hash","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":""},{"name":"prepare_fee","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"asset","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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"}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003e93e0ef"},{"kind":"string","value":"TransparentNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000edf2744b"},{"kind":"string","value":"TokenNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003e93e0ef"},{"kind":"string","value":"TransparentNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000edf2744b"},{"kind":"string","value":"TokenNote"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"portal_address","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"other_asset","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"gas_token_address","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"amount","type":{"kind":"field"}},{"name":"asset","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"FPC::fee_entrypoint_public_parameters"}}],"kind":"struct","path":"FPC::fee_entrypoint_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"amount","type":{"kind":"field"}},{"name":"asset","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"secret_hash","type":{"kind":"field"}}],"kind":"struct","path":"FPC::pay_refund_with_shielded_rebate_parameters"}}],"kind":"struct","path":"FPC::pay_refund_with_shielded_rebate_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"other_asset","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_token_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"FPC::constructor_parameters"}}],"kind":"struct","path":"FPC::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"refund_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"field"}},{"name":"asset","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"FPC::pay_refund_parameters"}}],"kind":"struct","path":"FPC::pay_refund_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"amount","type":{"kind":"field"}},{"name":"asset","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"secret_hash","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"FPC::fee_entrypoint_private_parameters"}}],"kind":"struct","path":"FPC::fee_entrypoint_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"field"}},{"name":"asset","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"authwit::aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"nonce","type":{"kind":"field"}}],"kind":"struct","path":"FPC::prepare_fee_parameters"}}],"kind":"struct","path":"FPC::prepare_fee_abi"}]}},"file_map":{"112":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    constants::GENERATOR_INDEX__INNER_NOTE_HASH,\n    hash::{\n    pedersen_hash, compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_inner_note_hash_from_preimage(storage_slot: Field, note_content_hash: Field) -> Field {\n    pedersen_hash(\n        [storage_slot, note_content_hash],\n        GENERATOR_INDEX__INNER_NOTE_HASH\n    )\n}\n\nfn compute_inner_note_hash<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    compute_inner_note_hash_from_preimage(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N, M>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note_with_header.get_header();\n    let (_, inner_nullifier) = note_with_header.compute_note_hash_and_nullifier(context);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\nfn compute_note_hash_for_read_request_from_innter_and_nonce(\n    inner_note_hash: Field,\n    nonce: Field\n) -> Field {\n    // TODO(#1386): This if-else can be nuked once we have nonces injected from public\n    if (nonce == 0) {\n        // If nonce is zero, that means we are reading a public note.\n        inner_note_hash\n    } else {\n        compute_unique_note_hash(nonce, inner_note_hash)\n    }\n}\n\npub fn compute_note_hash_for_read_request<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let inner_note_hash = compute_inner_note_hash(note);\n    let nonce = note.get_header().nonce;\n\n    compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, nonce)\n}\n\npub fn compute_note_hash_for_consumption<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    if (header.note_hash_counter != 0) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        inner_note_hash\n    } else {\n        // If a note is not transient, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the siloed_note_hash which has already been hashed with\n        // nonce and then contract address. This hash will match the existing leaf in the note hash\n        // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        let unique_note_hash = compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, header.nonce);\n        compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n        // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n        // nullification, it is not strictly necessary to silo the note hash before computing\n        // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n        // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n        // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n        // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n        // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n    }\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, N, M, S>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N, M> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n    let unique_note_hash = compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, note_header.nonce);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        let (_, nullifier) = note.compute_note_hash_and_nullifier_without_context();\n        nullifier\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [inner_note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"121":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH, MAX_ARGS_LENGTH\n},\n    traits::Hash, hash::{pedersen_hash, compute_siloed_nullifier, sha256_to_field}\n};\nuse crate::oracle::logs_traits::{LensForEncryptedLog, ToBytesForUnencryptedLog};\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    pedersen_hash([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, N, M>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes = (n as Field).to_be_bytes(4);\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    pedersen_hash(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<N>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() <= MAX_ARGS_LENGTH, \"Args length exceeds maximum\");\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..MAX_ARGS_LENGTH {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x11e40f2a780822f7971803048c9a2100579de352e7dadd99981760964da65b57);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"122":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::{compute_siloed_nullifier, pedersen_hash},\n    constants::GENERATOR_INDEX__CONSTRUCTOR, abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier, 0);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier, 0);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_contract_initialization_nullifier(context.this_address());\n    let header = context.get_header();\n    header.prove_nullifier_inclusion(init_nullifier);\n}\n\nfn compute_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    compute_siloed_nullifier(\n        address,\n        compute_unsiloed_contract_initialization_nullifier(address)\n    )\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    pedersen_hash(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"123":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr","source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, hash::pedersen_hash, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: Field = 24;\n\nstruct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nunconstrained fn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nunconstrained fn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n"},"125":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<N>(_args: [Field; N]) -> Field {}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n/// - Pack arguments (array version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments_array<N>(args: [Field; N]) -> Field {\n    pack_arguments_array_oracle(args)\n}\n\n/// - Pack arguments (slice version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments(args: [Field]) -> Field {\n    pack_arguments_oracle(args)\n}\n\n"},"128":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_public_data_witness.nr","source":"use dep::protocol_types::{\n    constants::PUBLIC_DATA_TREE_HEIGHT, hash::pedersen_hash,\n    public_data_tree_leaf_preimage::PublicDataTreeLeafPreimage, traits::{Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nglobal LEAF_PREIMAGE_LENGTH: u32 = 4;\nglobal PUBLIC_DATA_WITNESS: Field = 45;\n\nstruct PublicDataWitness {\n    index: Field,\n    leaf_preimage: PublicDataTreeLeafPreimage,\n    path: [Field; PUBLIC_DATA_TREE_HEIGHT],\n}\n\n#[oracle(getPublicDataTreeWitness)]\nunconstrained fn get_public_data_witness_oracle(\n    _block_number: u32,\n    _leaf_slot: Field\n) -> [Field; PUBLIC_DATA_WITNESS] {}\n\nunconstrained pub fn get_public_data_witness(block_number: u32, leaf_slot: Field) -> PublicDataWitness {\n    let fields = get_public_data_witness_oracle(block_number, leaf_slot);\n    PublicDataWitness {\n        index: fields[0],\n        leaf_preimage: PublicDataTreeLeafPreimage { slot: fields[1], value: fields[2], next_index: fields[3] as u32, next_slot: fields[4] },\n        path: arr_copy_slice(fields, [0; PUBLIC_DATA_TREE_HEIGHT], 1 + LEAF_PREIMAGE_LENGTH)\n    }\n}\n"},"129":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub fn get_key_validation_request(pk_m_hash: Field, key_index: Field) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n\n"},"135":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n"},"139":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, utils::arr_copy_slice,\n    constants::CONTRACT_INSTANCE_LENGTH, utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"140":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{\n    abis::{\n    function_selector::FunctionSelector, public_call_stack_item::PublicCallStackItem,\n    function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs,\n    call_context::CallContext, read_request::ReadRequest, note_hash::NoteHash, nullifier::Nullifier,\n    log_hash::LogHash, global_variables::GlobalVariables, gas::Gas\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    messaging::l2_to_l1_message::L2ToL1Message, header::Header, address::AztecAddress,\n    utils::reader::Reader,\n    constants::{\n    MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n}\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn parse_public_call_stack_item_from_oracle(fields: [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH]) -> PublicCallStackItem {\n    let mut reader = Reader::new(fields);\n\n    // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n    // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n    // WARNING: if updating, see comment in public_call_stack_item.ts's PublicCallStackItem.hash()\n    let item = PublicCallStackItem {\n        contract_address: AztecAddress::from_field(reader.read()),\n        function_data: FunctionData { selector: FunctionSelector::from_field(reader.read()), is_private: false },\n        public_inputs: PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            start_side_effect_counter: reader.read_u32(),\n            args_hash: reader.read(),\n            returns_hash: 0,\n            note_hash_read_requests: [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n            l1_to_l2_msg_read_requests: [ReadRequest::empty(); MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL],\n            contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n            contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            note_hashes: [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL],\n            nullifiers: [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL],\n            l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL],\n            end_side_effect_counter: 0,\n            unencrypted_logs_hashes: [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL],\n            historical_header: Header::empty(),\n            global_variables: GlobalVariables::empty(),\n            prover_address: AztecAddress::zero(),\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty(),\n            transaction_fee: 0\n        },\n        is_execution_request: true\n    };\n    reader.finish();\n\n    item\n}\n"},"149":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/shared_immutable.nr","source":"use crate::{\n    context::{PrivateContext, PublicContext, UnconstrainedContext}, oracle::storage::storage_read,\n    state_vars::storage::Storage\n};\nuse dep::protocol_types::{constants::INITIALIZATION_SLOT_SEPARATOR, traits::{Deserialize, Serialize}};\n\n// Just like PublicImmutable but with the ability to read from private functions.\nstruct SharedImmutable<T, Context>{\n    context: Context,\n    storage_slot: Field,\n}\n\nimpl<T, Context> Storage<T> for SharedImmutable<T, Context> {}\n\nimpl<T, Context> SharedImmutable<T, Context> {\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Self { context, storage_slot }\n    }\n}\n\nimpl<T> SharedImmutable<T, &mut PublicContext> {\n    // Intended to be only called once. \n    pub fn initialize<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        // We check that the struct is not yet initialized by checking if the initialization slot is 0\n        let initialization_slot = INITIALIZATION_SLOT_SEPARATOR + self.storage_slot;\n        let init_field: Field = self.context.storage_read(initialization_slot);\n        assert(init_field == 0, \"SharedImmutable already initialized\");\n\n        // We populate the initialization slot with a non-zero value to indicate that the struct is initialized\n        self.context.storage_write(initialization_slot, 0xdead);\n        self.context.storage_write(self.storage_slot, value);\n    }\n\n    pub fn read_public<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T> SharedImmutable<T, UnconstrainedContext> {\n    unconstrained pub fn read_public<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n\nimpl<T> SharedImmutable<T, &mut PrivateContext> {\n    pub fn read_private<T_SERIALIZED_LEN>(self) -> T  where T: Deserialize<T_SERIALIZED_LEN> {\n        let header = self.context.get_header();\n        let mut fields = [0; T_SERIALIZED_LEN];\n\n        for i in 0..fields.len() {\n            fields[i] =\n                header.public_storage_historical_read(\n                    self.storage_slot + i as Field,\n                    (*self.context).this_address()\n                );\n        }\n        T::deserialize(fields)\n    }\n}\n"},"167":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{GAS_LENGTH, FIXED_DA_GAS, FIXED_L2_GAS}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered, utils::reader::Reader,\n    abis::gas_fees::GasFees\n};\nuse std::ops::{Add, Sub};\n\nstruct Gas {\n    da_gas: u32,\n    l2_gas: u32,\n}\n\nimpl Gas {\n    pub fn new(da_gas: u32, l2_gas: u32) -> Self {\n        Self { da_gas, l2_gas }\n    }\n\n    pub fn tx_overhead() -> Self {\n        Self { da_gas: FIXED_DA_GAS, l2_gas: FIXED_L2_GAS }\n    }\n\n    pub fn compute_fee(self, fees: GasFees) -> Field {\n        (self.da_gas as Field) * fees.fee_per_da_gas + (self.l2_gas as Field) * fees.fee_per_l2_gas\n    }\n\n    pub fn is_empty(self) -> bool {\n        (self.da_gas == 0) & (self.l2_gas == 0)\n    }\n\n    pub fn within(self, limits: Gas) -> bool {\n        (self.da_gas <= limits.da_gas) & (self.l2_gas <= limits.l2_gas)\n    }\n}\n\nimpl Add for Gas {\n    fn add(self, other: Gas) -> Self {\n        Gas::new(self.da_gas + other.da_gas, self.l2_gas + other.l2_gas)\n    }\n}\n\nimpl Sub for Gas {\n    fn sub(self, other: Gas) -> Self {\n        Gas::new(self.da_gas - other.da_gas, self.l2_gas - other.l2_gas)\n    }\n}\n\nimpl Serialize<GAS_LENGTH> for Gas {\n    fn serialize(self) -> [Field; GAS_LENGTH] {\n        [self.da_gas as Field, self.l2_gas as Field]\n    }\n}\n\nimpl Deserialize<GAS_LENGTH> for Gas {\n    fn deserialize(serialized: [Field; GAS_LENGTH]) -> Gas {\n        Gas::new(serialized[0] as u32, serialized[1] as u32)\n    }\n}\n\nimpl Eq for Gas {\n    fn eq(self, other : Gas) -> bool {\n        (self.da_gas == other.da_gas) & (self.l2_gas == other.l2_gas)\n    }\n}\n\nimpl Empty for Gas {\n    fn empty() -> Self {\n        Gas::new(0, 0)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = Gas::empty();\n    let serialized = item.serialize();\n    let deserialized = Gas::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n"},"169":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/note_hash.nr","source":"use crate::{\n    abis::read_request::ScopedReadRequest, address::AztecAddress,\n    abis::side_effect::{Ordered, OrderedValue, Readable, Scoped},\n    constants::{NOTE_HASH_LENGTH, SCOPED_NOTE_HASH_LENGTH}, traits::{Empty, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct NoteHash {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for NoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for NoteHash {\n    fn eq(self, other: NoteHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter) \n    }\n}\n\nimpl Empty for NoteHash {\n    fn empty() -> Self {\n        NoteHash {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<NOTE_HASH_LENGTH> for NoteHash {\n    fn serialize(self) -> [Field; NOTE_HASH_LENGTH] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<NOTE_HASH_LENGTH> for NoteHash {\n    fn deserialize(values: [Field; NOTE_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl NoteHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedNoteHash {\n        ScopedNoteHash { note_hash: self, contract_address }\n    }\n}\n\nstruct ScopedNoteHash {\n    note_hash: NoteHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<NoteHash> for ScopedNoteHash {\n    fn inner(self) -> NoteHash {\n        self.note_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedNoteHash {\n    fn counter(self) -> u32 {\n        self.note_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedNoteHash {\n    fn value(self) -> Field {\n        self.note_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.note_hash.counter\n    }\n}\n\nimpl Eq for ScopedNoteHash {\n    fn eq(self, other: ScopedNoteHash) -> bool {\n        (self.note_hash == other.note_hash)\n            & (self.contract_address == other.contract_address)\n    }\n}\n\nimpl Empty for ScopedNoteHash {\n    fn empty() -> Self {\n        ScopedNoteHash {\n            note_hash: NoteHash::empty(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_NOTE_HASH_LENGTH> for ScopedNoteHash {\n    fn serialize(self) -> [Field; SCOPED_NOTE_HASH_LENGTH] {\n        array_concat(self.note_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_NOTE_HASH_LENGTH> for ScopedNoteHash {\n    fn deserialize(values: [Field; SCOPED_NOTE_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            note_hash: reader.read_struct(NoteHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl Readable for ScopedNoteHash {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        assert_eq(self.note_hash.value, read_request.value(), \"Value of the note hash does not match read request\");\n        assert_eq(self.contract_address, read_request.contract_address, \"Contract address of the note hash does not match read request\");\n        assert(\n            read_request.counter() > self.note_hash.counter, \"Read request counter must be greater than the counter of the note hash\"\n        );\n    }\n}\n\nimpl ScopedNoteHash {\n    pub fn expose_to_public(self) -> NoteHash {\n        // Hide the actual counter when exposing it to the public kernel.\n        NoteHash { value: self.note_hash.value, counter: 0 }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NoteHash::empty();\n    let serialized = item.serialize();\n    let deserialized = NoteHash::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedNoteHash::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedNoteHash::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"170":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_fees.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::GAS_FEES_LENGTH, hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty},\n    abis::side_effect::Ordered, utils::reader::Reader\n};\n\nstruct GasFees {\n    fee_per_da_gas: Field,\n    fee_per_l2_gas: Field,\n}\n\nimpl GasFees {\n    pub fn new(fee_per_da_gas: Field, fee_per_l2_gas: Field) -> Self {\n        Self { fee_per_da_gas, fee_per_l2_gas }\n    }\n\n    pub fn default() -> Self {\n        GasFees::new(1, 1)\n    }\n\n    pub fn is_empty(self) -> bool {\n        (self.fee_per_da_gas == 0) & (self.fee_per_l2_gas == 0)\n    }\n}\n\nimpl Serialize<GAS_FEES_LENGTH> for GasFees {\n    fn serialize(self) -> [Field; GAS_FEES_LENGTH] {\n        [self.fee_per_da_gas, self.fee_per_l2_gas]\n    }\n}\n\nimpl Deserialize<GAS_FEES_LENGTH> for GasFees {\n    fn deserialize(serialized: [Field; GAS_FEES_LENGTH]) -> GasFees {\n        GasFees::new(serialized[0], serialized[1])\n    }\n}\n\nimpl Eq for GasFees {\n    fn eq(self, other : GasFees) -> bool {\n        (self.fee_per_da_gas == other.fee_per_da_gas) & (self.fee_per_l2_gas == other.fee_per_l2_gas)\n    }\n}\n\nimpl Empty for GasFees {\n    fn empty() -> Self {\n        GasFees::new(0, 0)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = GasFees::empty();\n    let serialized = item.serialize();\n    let deserialized = GasFees::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"172":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_circuit_public_inputs.nr","source":"use crate::{\n    abis::{\n    call_context::CallContext, max_block_number::MaxBlockNumber, gas_settings::GasSettings,\n    validation_requests::KeyValidationRequestAndGenerator, note_hash::NoteHash, nullifier::Nullifier,\n    private_call_request::PrivateCallRequest, read_request::ReadRequest,\n    log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_L2_TO_L1_MSGS_PER_CALL, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS, MAX_ENCRYPTED_LOGS_PER_CALL,\n    MAX_UNENCRYPTED_LOGS_PER_CALL, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, hash::pedersen_hash, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader,\n    transaction::tx_context::TxContext, utils::arrays::validate_array\n};\n\nstruct PrivateCircuitPublicInputsArrayLengths {\n    note_hash_read_requests: u32,\n    nullifier_read_requests: u32,\n    key_validation_requests_and_generators: u32,\n    note_hashes: u32,\n    nullifiers: u32,\n    l2_to_l1_msgs: u32,\n    private_call_requests: u32,\n    public_call_stack_hashes: u32,\n    note_encrypted_logs_hashes: u32,\n    encrypted_logs_hashes: u32,\n    unencrypted_logs_hashes: u32,\n}\n\nimpl PrivateCircuitPublicInputsArrayLengths {\n    pub fn new(public_inputs: PrivateCircuitPublicInputs) -> Self {\n        PrivateCircuitPublicInputsArrayLengths {\n            note_hash_read_requests: validate_array(public_inputs.note_hash_read_requests),\n            nullifier_read_requests: validate_array(public_inputs.nullifier_read_requests),\n            key_validation_requests_and_generators: validate_array(public_inputs.key_validation_requests_and_generators),\n            note_hashes: validate_array(public_inputs.note_hashes),\n            nullifiers: validate_array(public_inputs.nullifiers),\n            l2_to_l1_msgs: validate_array(public_inputs.l2_to_l1_msgs),\n            private_call_requests: validate_array(public_inputs.private_call_requests),\n            public_call_stack_hashes: validate_array(public_inputs.public_call_stack_hashes),\n            note_encrypted_logs_hashes: validate_array(public_inputs.note_encrypted_logs_hashes),\n            encrypted_logs_hashes: validate_array(public_inputs.encrypted_logs_hashes),\n            unencrypted_logs_hashes: validate_array(public_inputs.unencrypted_logs_hashes)\n        }\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    returns_hash: Field,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: [ReadRequest; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    key_validation_requests_and_generators: [KeyValidationRequestAndGenerator; MAX_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    note_hashes: [NoteHash; MAX_NOTE_HASHES_PER_CALL],\n    nullifiers: [Nullifier; MAX_NULLIFIERS_PER_CALL],\n    private_call_requests: [PrivateCallRequest; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    public_teardown_function_hash: Field,\n    l2_to_l1_msgs: [L2ToL1Message; MAX_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter : u32,\n    end_side_effect_counter : u32,\n    note_encrypted_logs_hashes: [NoteLogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_CALL],\n    encrypted_logs_hashes: [EncryptedLogHash; MAX_ENCRYPTED_LOGS_PER_CALL],\n    unencrypted_logs_hashes: [LogHash; MAX_UNENCRYPTED_LOGS_PER_CALL],\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // Note: The chain_id and version here are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    tx_context: TxContext,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.returns_hash == other.returns_hash) &\n        (self.min_revertible_side_effect_counter == other.min_revertible_side_effect_counter) &\n        (self.is_fee_payer == other.is_fee_payer) &\n        (self.max_block_number == other.max_block_number) &\n        (self.note_hash_read_requests == other.note_hash_read_requests) &\n        (self.nullifier_read_requests == other.nullifier_read_requests) &\n        (self.key_validation_requests_and_generators == other.key_validation_requests_and_generators) &\n        (self.note_hashes == other.note_hashes) &\n        (self.nullifiers == other.nullifiers) &\n        (self.private_call_requests == other.private_call_requests) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.l2_to_l1_msgs == other.l2_to_l1_msgs) &\n        (self.start_side_effect_counter == other.start_side_effect_counter) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.note_encrypted_logs_hashes == other.note_encrypted_logs_hashes) &\n        (self.encrypted_logs_hashes == other.encrypted_logs_hashes) &\n        (self.unencrypted_logs_hashes == other.unencrypted_logs_hashes) &\n        self.historical_header.eq(other.historical_header) &\n        self.tx_context.eq(other.tx_context)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n\n        fields.push(self.min_revertible_side_effect_counter as Field);\n        fields.push(if self.is_fee_payer { 1 } else { 0 } as Field);\n\n        fields.extend_from_array(self.max_block_number.serialize());\n\n        for i in 0..self.note_hash_read_requests.len() {\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..self.nullifier_read_requests.len() {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..self.key_validation_requests_and_generators.len() {\n            fields.extend_from_array(self.key_validation_requests_and_generators[i].serialize());\n        }\n        for i in 0..self.note_hashes.len() {\n            fields.extend_from_array(self.note_hashes[i].serialize());\n        }\n        for i in 0..self.nullifiers.len() {\n            fields.extend_from_array(self.nullifiers[i].serialize());\n        }\n        for i in 0..self.private_call_requests.len() {\n            fields.extend_from_array(self.private_call_requests[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n        fields.push(self.public_teardown_function_hash);\n        for i in 0..self.l2_to_l1_msgs.len() {\n            fields.extend_from_array(self.l2_to_l1_msgs[i].serialize());\n        }\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n        for i in 0..self.note_encrypted_logs_hashes.len() {\n            fields.extend_from_array(self.note_encrypted_logs_hashes[i].serialize());\n        }\n        for i in 0..self.encrypted_logs_hashes.len() {\n            fields.extend_from_array(self.encrypted_logs_hashes[i].serialize());\n        }\n        for i in 0..self.unencrypted_logs_hashes.len() {\n            fields.extend_from_array(self.unencrypted_logs_hashes[i].serialize());\n        }\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.extend_from_array(self.tx_context.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            min_revertible_side_effect_counter: reader.read() as u32,\n            is_fee_payer: reader.read() == 1,\n            max_block_number: reader.read_struct(MaxBlockNumber::deserialize),\n            note_hash_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            key_validation_requests_and_generators: reader.read_struct_array(KeyValidationRequestAndGenerator::deserialize, [KeyValidationRequestAndGenerator::empty(); MAX_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            note_hashes: reader.read_struct_array(NoteHash::deserialize, [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL]),\n            nullifiers: reader.read_struct_array(Nullifier::deserialize, [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL]),\n            private_call_requests: reader.read_struct_array(PrivateCallRequest::deserialize, [PrivateCallRequest::empty(); MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            public_teardown_function_hash: reader.read(),\n            l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            note_encrypted_logs_hashes: reader.read_struct_array(NoteLogHash::deserialize, [NoteLogHash::empty(); MAX_NOTE_ENCRYPTED_LOGS_PER_CALL]),\n            encrypted_logs_hashes: reader.read_struct_array(EncryptedLogHash::deserialize, [EncryptedLogHash::empty(); MAX_ENCRYPTED_LOGS_PER_CALL]),\n            unencrypted_logs_hashes: reader.read_struct_array(LogHash::deserialize, [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL]),\n            historical_header: reader.read_struct(Header::deserialize),\n            tx_context: reader.read_struct(TxContext::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\nimpl Empty for PrivateCircuitPublicInputs {\n    fn empty() -> Self {\n        PrivateCircuitPublicInputs {\n            call_context: CallContext::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            key_validation_requests_and_generators: [KeyValidationRequestAndGenerator::empty(); MAX_KEY_VALIDATION_REQUESTS_PER_CALL],\n            note_hashes: [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL],\n            nullifiers: [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL],\n            private_call_requests: [PrivateCallRequest::empty(); MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL],\n            start_side_effect_counter : 0 as u32,\n            end_side_effect_counter : 0 as u32,\n            note_encrypted_logs_hashes: [NoteLogHash::empty(); MAX_NOTE_ENCRYPTED_LOGS_PER_CALL],\n            encrypted_logs_hashes: [EncryptedLogHash::empty(); MAX_ENCRYPTED_LOGS_PER_CALL],\n            unencrypted_logs_hashes: [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL],\n            historical_header: Header::empty(),\n            tx_context: TxContext::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi = PrivateCircuitPublicInputs::empty();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs = PrivateCircuitPublicInputs::empty();\n    let hash = inputs.hash();\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x15c9b0a92b9b541598e24c9f0b0b4b04b7f2408599751c45aa12de671fd9b363;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"173":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item_compressed.nr","source":"use crate::abis::{call_context::CallContext, function_data::FunctionData, gas::Gas};\nuse crate::address::AztecAddress;\nuse crate::constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH};\nuse crate::traits::{Hash, Empty, Serialize, Deserialize};\nuse crate::utils::reader::Reader;\n\n/**\n * A compressed version of the PublicCallStackItem struct used to compute the \"hash\"\n * of a PublicCallStackItem.\n * \n * Historically, we have been zeroing most values in the PublicCallStackItem struct\n * to compute the hash involved when adding a PublicCallStackItem to the PublicCallStack.\n * \n * This struct is used to store the values that we did not zero out, and allow us to hash\n * only these, thereby skipping a lot of computation and saving us a lot of constraints\n * \n * Essentially this struct exists such that we don't have a `hash` function in the \n * PublicCallStackItem struct that practically throws away some values of the struct\n * without clearly indicating that it does so.\n */\nstruct PublicCallStackItemCompressed {\n    contract_address: AztecAddress,\n    call_context: CallContext,\n    function_data: FunctionData,\n    args_hash: Field,\n    returns_hash: Field,\n    revert_code: u8,\n    start_gas_left: Gas,\n    end_gas_left: Gas,\n}\n\nimpl Eq for PublicCallStackItemCompressed {\n    fn eq(self, other: PublicCallStackItemCompressed) -> bool {\n        (self.contract_address == other.contract_address)\n            & (self.call_context == other.call_context)\n            & (self.function_data == other.function_data)\n            & (self.args_hash == other.args_hash)\n            & (self.returns_hash == other.returns_hash)\n            & (self.revert_code == other.revert_code)\n            & (self.start_gas_left == other.start_gas_left)\n            & (self.end_gas_left == other.end_gas_left)\n    }\n}\n\nimpl Hash for PublicCallStackItemCompressed {\n    fn hash(self) -> Field {\n        std::hash::pedersen_hash_with_separator(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl Empty for PublicCallStackItemCompressed {\n    fn empty() -> Self {\n        PublicCallStackItemCompressed {\n            contract_address: AztecAddress::empty(),\n            call_context: CallContext::empty(),\n            function_data: FunctionData::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty(),\n        }\n    }\n}\n\nimpl Serialize<PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> for PublicCallStackItemCompressed {\n    fn serialize(self) -> [Field; PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.call_context.serialize());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n        fields.push(self.revert_code as Field);\n        fields.extend_from_array(self.start_gas_left.serialize());\n        fields.extend_from_array(self.end_gas_left.serialize());\n\n        assert_eq(fields.len(), PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> for PublicCallStackItemCompressed {\n  fn deserialize(fields: [Field; PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH]) -> PublicCallStackItemCompressed {\n    let mut reader = Reader::new(fields);\n\n    let item = PublicCallStackItemCompressed {\n      contract_address: reader.read_struct(AztecAddress::deserialize),\n      call_context: reader.read_struct(CallContext::deserialize),\n      function_data: reader.read_struct(FunctionData::deserialize),\n      args_hash: reader.read(),\n      returns_hash: reader.read(),\n      revert_code: reader.read() as u8,\n      start_gas_left: reader.read_struct(Gas::deserialize),\n      end_gas_left: reader.read_struct(Gas::deserialize),\n    };\n    reader.finish();\n    item\n  }\n}\n"},"175":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/global_variables.nr","source":"use crate::{\n    address::{AztecAddress, EthAddress}, abis::gas_fees::GasFees,\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}, utils::reader::Reader\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : u64,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n    gas_fees : GasFees\n}\n// docs:end:global-variables\n\nimpl GlobalVariables {\n    fn is_empty(self) -> bool {\n        (self.chain_id == 0)\n            & (self.version == 0)\n            & (self.block_number == 0)\n            & (self.timestamp == 0)\n            & (self.coinbase.is_zero())\n            & (self.fee_recipient.is_zero())\n            & (self.gas_fees.is_empty())\n    }\n}\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        let mut serialized: BoundedVec<Field, GLOBAL_VARIABLES_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.chain_id);\n        serialized.push(self.version);\n        serialized.push(self.block_number);\n        serialized.push(self.timestamp as Field);\n        serialized.push(self.coinbase.to_field());\n        serialized.push(self.fee_recipient.to_field());\n        serialized.extend_from_array(self.gas_fees.serialize());\n\n        serialized.storage\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        let mut reader = Reader::new(serialized);\n        GlobalVariables {\n            chain_id: reader.read(),\n            version: reader.read(),\n            block_number: reader.read(),\n            timestamp: reader.read() as u64,\n            coinbase: EthAddress::from_field(reader.read()),\n            fee_recipient: AztecAddress::from_field(reader.read()),\n            gas_fees: reader.read_struct(GasFees::deserialize)\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient) &\n        (self.gas_fees == other.gas_fees) \n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n            gas_fees: GasFees::empty()\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars = GlobalVariables::empty();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n"},"176":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/read_request.nr","source":"use crate::{\n    abis::side_effect::{Ordered, Scoped}, traits::{Empty, Serialize, Deserialize},\n    address::AztecAddress, constants::{READ_REQUEST_LENGTH, SCOPED_READ_REQUEST_LEN},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct ReadRequest {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for ReadRequest {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for ReadRequest {\n    fn eq(self, read_request: ReadRequest) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n    }\n}\n\nimpl Empty for ReadRequest {\n    fn empty() -> Self {\n        ReadRequest {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_LENGTH> for ReadRequest {\n    fn serialize(self) -> [Field; READ_REQUEST_LENGTH] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_LENGTH> for ReadRequest {\n    fn deserialize(values: [Field; READ_REQUEST_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl ReadRequest {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedReadRequest {\n        ScopedReadRequest { read_request: self, contract_address }\n    }\n}\n\nstruct ScopedReadRequest {\n    read_request: ReadRequest,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<ReadRequest> for ScopedReadRequest {\n    fn inner(self) -> ReadRequest {\n        self.read_request\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Eq for ScopedReadRequest {\n    fn eq(self, other: ScopedReadRequest) -> bool {\n        (self.read_request == other.read_request)\n        & (self.contract_address.eq(other.contract_address))\n    }\n}\n\nimpl Empty for ScopedReadRequest {\n    fn empty() -> Self {\n        ScopedReadRequest {\n            read_request: ReadRequest::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_READ_REQUEST_LEN> for ScopedReadRequest {\n    fn serialize(self) -> [Field; SCOPED_READ_REQUEST_LEN] {\n        array_concat(self.read_request.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_READ_REQUEST_LEN> for ScopedReadRequest {\n    fn deserialize(values: [Field; SCOPED_READ_REQUEST_LEN]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            read_request: reader.read_struct(ReadRequest::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl ScopedReadRequest {\n    pub fn value(self) -> Field {\n        self.read_request.value\n    }\n    pub fn counter(self) -> u32 {\n        self.read_request.counter\n    }\n}\n\n#[test]\nfn serialization_of_empty_read() {\n    let item = ReadRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ReadRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedReadRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedReadRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"179":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request_and_generator.nr","source":"use crate::{\n    address::AztecAddress,\n    abis::validation_requests::{\n    key_validation_request::KeyValidationRequest,\n    scoped_key_validation_request_and_generator::ScopedKeyValidationRequestAndGenerator\n},\n    constants::KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH, traits::{Empty, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct KeyValidationRequestAndGenerator {\n    request: KeyValidationRequest,\n    sk_app_generator: Field,\n}\n\nimpl Eq for KeyValidationRequestAndGenerator {\n    fn eq(self, other: KeyValidationRequestAndGenerator) -> bool {\n        (self.request == other.request) & (self.sk_app_generator == other.sk_app_generator)\n    }\n}\n\nimpl Empty for KeyValidationRequestAndGenerator {\n    fn empty() -> Self {\n        KeyValidationRequestAndGenerator {\n            request: KeyValidationRequest::empty(),\n            sk_app_generator: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH> for KeyValidationRequestAndGenerator {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH] {\n        array_concat(self.request.serialize(), [self.sk_app_generator])\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH> for KeyValidationRequestAndGenerator {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH]) -> Self {\n        let mut reader = Reader::new(fields);\n        let res = Self {\n            request: reader.read_struct(KeyValidationRequest::deserialize),\n            sk_app_generator: reader.read(),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl KeyValidationRequestAndGenerator {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedKeyValidationRequestAndGenerator {\n        ScopedKeyValidationRequestAndGenerator { request: self, contract_address }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = KeyValidationRequestAndGenerator::empty();\n    let serialized = item.serialize();\n    let deserialized = KeyValidationRequestAndGenerator::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"180":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{constants::KEY_VALIDATION_REQUEST_LENGTH, traits::{Empty, Serialize, Deserialize}, point::Point};\n\nstruct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m))\n            & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest {\n            pk_m: Point::empty(),\n            sk_app: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app,\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point::new(fields[0], fields[1], fields[2] as bool),\n            sk_app: fields[3],\n        }\n    }\n}\n\n"},"184":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier.nr","source":"use crate::{\n    abis::{side_effect::{Ordered, OrderedValue, Readable, Scoped}, read_request::ScopedReadRequest},\n    address::AztecAddress, constants::{NULLIFIER_LENGTH, SCOPED_NULLIFIER_LENGTH},\n    hash::compute_siloed_nullifier, traits::{Empty, Hash, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct Nullifier {\n    value: Field,\n    counter: u32,\n    note_hash: Field,\n}\n\nimpl Ordered for Nullifier {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for Nullifier {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for Nullifier {\n    fn eq(self, other: Nullifier) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.note_hash == other.note_hash) \n    }\n}\n\nimpl Empty for Nullifier {\n    fn empty() -> Self {\n        Nullifier {\n            value: 0,\n            counter: 0,\n            note_hash: 0,\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_LENGTH> for Nullifier {\n    fn serialize(self) -> [Field; NULLIFIER_LENGTH] {\n        [self.value, self.counter as Field, self.note_hash]\n    }\n}\n\nimpl Deserialize<NULLIFIER_LENGTH> for Nullifier {\n    fn deserialize(values: [Field; NULLIFIER_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            note_hash: values[2],\n        }\n    }\n}\n\nimpl Readable for Nullifier {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        // Public kernels output Nullifier instead of ScopedNullifier.\n        // The nullifier value has been siloed.\n        let siloed_request_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.value, siloed_request_value, \"Value of the nullifier does not match read request\");\n        assert(\n            read_request.counter() > self.counter, \"Read request counter must be greater than the counter of the nullifier\"\n        );\n    }\n}\n\nimpl Nullifier {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedNullifier {\n        ScopedNullifier { nullifier: self, contract_address }\n    }\n}\n\nstruct ScopedNullifier {\n    nullifier: Nullifier,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<Nullifier> for ScopedNullifier {\n    fn inner(self) -> Nullifier {\n        self.nullifier\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedNullifier {\n    fn counter(self) -> u32 {\n        self.nullifier.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedNullifier {\n    fn value(self) -> Field {\n        self.nullifier.value\n    }\n    fn counter(self) -> u32 {\n        self.nullifier.counter\n    }\n}\n\nimpl Eq for ScopedNullifier {\n    fn eq(self, other: ScopedNullifier) -> bool {\n        (self.nullifier == other.nullifier)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedNullifier {\n    fn empty() -> Self {\n        ScopedNullifier {\n            nullifier: Nullifier::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_NULLIFIER_LENGTH> for ScopedNullifier {\n    fn serialize(self) -> [Field; SCOPED_NULLIFIER_LENGTH] {\n        array_concat(self.nullifier.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_NULLIFIER_LENGTH> for ScopedNullifier {\n    fn deserialize(values: [Field; SCOPED_NULLIFIER_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            nullifier: reader.read_struct(Nullifier::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl Readable for ScopedNullifier {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        assert_eq(self.nullifier.value, read_request.value(), \"Value of the nullifier does not match read request\");\n        assert_eq(self.contract_address, read_request.contract_address, \"Contract address of the nullifier does not match read request\");\n        assert(\n            read_request.counter() > self.nullifier.counter, \"Read request counter must be greater than the counter of the nullifier\"\n        );\n    }\n}\n\nimpl ScopedNullifier {\n    pub fn nullified_note_hash(self) -> Field {\n        self.nullifier.note_hash\n    }\n\n    pub fn expose_to_public(self) -> Nullifier {\n        // Hide the actual counter and note hash when exposing it to the public kernel.\n        Nullifier { value: self.nullifier.value, counter: 0, note_hash: 0 }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = Nullifier::empty();\n    let serialized = item.serialize();\n    let deserialized = Nullifier::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedNullifier::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedNullifier::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"192":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr","source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u32 = 3;\n\nuse crate::{\n    abis::{read_request::ScopedReadRequest, side_effect::Readable}, hash::compute_siloed_nullifier,\n    merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}\n};\n\nstruct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u32,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            nullifier : 0,\n            next_nullifier : 0,\n            next_index : 0,\n        }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            std::hash::pedersen_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl Readable for NullifierLeafPreimage {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        let siloed_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.nullifier, siloed_value, \"Value of the nullifier leaf does not match read request\");\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u32 }\n    }\n}\n\nimpl Eq for NullifierLeafPreimage {\n  fn eq(self, other: Self) -> bool {\n    (self.nullifier == other.nullifier) &\n    (self.next_nullifier == other.next_nullifier) &\n    (self.next_index == other.next_index)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NullifierLeafPreimage::empty();\n    let serialized = item.serialize();\n    let deserialized = NullifierLeafPreimage::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"193":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"},"194":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_request.nr","source":"use crate::{\n    abis::{\n    private_call_stack_item::PrivateCallStackItem, call_context::CallContext,\n    function_data::FunctionData, caller_context::CallerContext,\n    side_effect::{Ordered, RangeOrdered, Scoped}\n},\n    address::AztecAddress, constants::{PRIVATE_CALL_REQUEST_LENGTH, SCOPED_PRIVATE_CALL_REQUEST_LENGTH},\n    traits::{Empty, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PrivateCallRequest {\n    target: AztecAddress,\n    call_context: CallContext,\n    function_data: FunctionData,\n    args_hash: Field,\n    returns_hash: Field,\n    caller_context: CallerContext,\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n}\n\nimpl Ordered for PrivateCallRequest {\n    fn counter(self) -> u32 {\n        self.start_side_effect_counter\n    }\n}\n\nimpl RangeOrdered for PrivateCallRequest {\n    fn counter_start(self) -> u32 {\n        self.start_side_effect_counter\n    }\n    fn counter_end(self) -> u32 {\n        self.end_side_effect_counter\n    }\n}\n\nimpl Eq for PrivateCallRequest {\n    fn eq(self, other: PrivateCallRequest) -> bool {\n        (self.target == other.target) \n            & (self.call_context == other.call_context) \n            & (self.function_data == other.function_data) \n            & (self.args_hash == other.args_hash) \n            & (self.returns_hash == other.returns_hash)\n            & (self.caller_context == other.caller_context)\n            & (self.start_side_effect_counter == other.start_side_effect_counter)\n            & (self.end_side_effect_counter == other.end_side_effect_counter)\n    }\n}\n\nimpl Empty for PrivateCallRequest {\n    fn empty() -> Self {\n        PrivateCallRequest {\n            target: AztecAddress::empty(),\n            call_context: CallContext::empty(),\n            function_data: FunctionData::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            caller_context: CallerContext::empty(),\n            start_side_effect_counter: 0,\n            end_side_effect_counter: 0,\n        }\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_REQUEST_LENGTH> for PrivateCallRequest {\n    fn serialize(self) -> [Field; PRIVATE_CALL_REQUEST_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_REQUEST_LENGTH> = BoundedVec::new();\n\n        fields.push(self.target.to_field());\n        fields.extend_from_array(self.call_context.serialize());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n        fields.extend_from_array(self.caller_context.serialize());\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        assert_eq(fields.len(), PRIVATE_CALL_REQUEST_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_REQUEST_LENGTH> for PrivateCallRequest {\n    fn deserialize(fields: [Field; PRIVATE_CALL_REQUEST_LENGTH]) -> PrivateCallRequest {\n        let mut reader = Reader::new(fields);\n        let item = PrivateCallRequest {\n            target: reader.read_struct(AztecAddress::deserialize),\n            call_context: reader.read_struct(CallContext::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            caller_context: reader.read_struct(CallerContext::deserialize),\n            start_side_effect_counter: reader.read_u32(),\n            end_side_effect_counter: reader.read_u32(),\n        };\n        reader.finish();\n        item\n    }\n}\n\nimpl PrivateCallRequest {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedPrivateCallRequest {\n        ScopedPrivateCallRequest { call_request: self, contract_address }\n    }\n\n    pub fn matches_stack_item(self, stack_item: PrivateCallStackItem) -> bool {\n        (self.target == stack_item.contract_address)\n            & (self.call_context == stack_item.public_inputs.call_context)\n            & (self.function_data == stack_item.function_data)\n            & (self.args_hash == stack_item.public_inputs.args_hash)\n            & (self.returns_hash == stack_item.public_inputs.returns_hash)\n            & (self.start_side_effect_counter\n                                == stack_item.public_inputs.start_side_effect_counter)\n            & (self.end_side_effect_counter\n                                    == stack_item.public_inputs.end_side_effect_counter)\n    }\n}\n\nstruct ScopedPrivateCallRequest {\n    call_request: PrivateCallRequest,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<PrivateCallRequest> for ScopedPrivateCallRequest {\n    fn inner(self) -> PrivateCallRequest {\n        self.call_request\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedPrivateCallRequest {\n    fn counter(self) -> u32 {\n        self.call_request.counter_start()\n    }\n}\n\nimpl RangeOrdered for ScopedPrivateCallRequest {\n    fn counter_start(self) -> u32 {\n        self.call_request.counter_start()\n    }\n    fn counter_end(self) -> u32 {\n        self.call_request.counter_end()\n    }\n}\n\nimpl Eq for ScopedPrivateCallRequest {\n    fn eq(self, other: ScopedPrivateCallRequest) -> bool {\n        (self.call_request == other.call_request)\n            & (self.contract_address == other.contract_address)\n    }\n}\n\nimpl Empty for ScopedPrivateCallRequest {\n    fn empty() -> Self {\n        ScopedPrivateCallRequest {\n            call_request: PrivateCallRequest::empty(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_PRIVATE_CALL_REQUEST_LENGTH> for ScopedPrivateCallRequest {\n    fn serialize(self) -> [Field; SCOPED_PRIVATE_CALL_REQUEST_LENGTH] {\n        let mut fields: BoundedVec<Field, SCOPED_PRIVATE_CALL_REQUEST_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.call_request.serialize());\n        fields.extend_from_array(self.contract_address.serialize());\n\n        assert_eq(fields.len(), SCOPED_PRIVATE_CALL_REQUEST_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<SCOPED_PRIVATE_CALL_REQUEST_LENGTH> for ScopedPrivateCallRequest {\n    fn deserialize(fields: [Field; SCOPED_PRIVATE_CALL_REQUEST_LENGTH]) -> ScopedPrivateCallRequest {\n        let mut reader = Reader::new(fields);\n        let item = ScopedPrivateCallRequest {\n            call_request: reader.read_struct(PrivateCallRequest::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        item\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = ScopedPrivateCallRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedPrivateCallRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"199":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_settings.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress}, abis::gas::Gas,\n    abis::gas_fees::GasFees,\n    constants::{\n    GAS_SETTINGS_LENGTH, DEFAULT_GAS_LIMIT, DEFAULT_TEARDOWN_GAS_LIMIT, DEFAULT_MAX_FEE_PER_GAS,\n    DEFAULT_INCLUSION_FEE\n},\n    hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered,\n    utils::reader::Reader\n};\n\nstruct GasSettings {\n    gas_limits: Gas,\n    teardown_gas_limits: Gas,\n    max_fees_per_gas: GasFees,\n    inclusion_fee: Field,\n}\n\nimpl GasSettings {\n    pub fn new(\n        gas_limits: Gas,\n        teardown_gas_limits: Gas,\n        max_fees_per_gas: GasFees,\n        inclusion_fee: Field\n    ) -> Self {\n        Self { gas_limits, teardown_gas_limits, max_fees_per_gas, inclusion_fee }\n    }\n\n    pub fn default() -> Self {\n        GasSettings::new(\n            Gas::new(DEFAULT_GAS_LIMIT, DEFAULT_GAS_LIMIT),\n            Gas::new(DEFAULT_TEARDOWN_GAS_LIMIT, DEFAULT_TEARDOWN_GAS_LIMIT),\n            GasFees::new(DEFAULT_MAX_FEE_PER_GAS, DEFAULT_MAX_FEE_PER_GAS),\n            DEFAULT_INCLUSION_FEE\n        )\n    }\n}\n\nimpl Eq for GasSettings {\n    fn eq(self, other: Self) -> bool {\n        (self.gas_limits == other.gas_limits) & (self.teardown_gas_limits == other.teardown_gas_limits) & (self.max_fees_per_gas == other.max_fees_per_gas) & (self.inclusion_fee == other.inclusion_fee)\n    }\n}\n\nimpl Empty for GasSettings {\n    fn empty() -> Self {\n        GasSettings::new(\n            Gas::empty(), Gas::empty(), GasFees::empty(), 0\n        )\n    }\n}\n\nimpl Serialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn serialize(self) -> [Field; GAS_SETTINGS_LENGTH] {\n        let mut serialized: BoundedVec<Field, GAS_SETTINGS_LENGTH> = BoundedVec::new();\n\n        serialized.extend_from_array(self.gas_limits.serialize());\n        serialized.extend_from_array(self.teardown_gas_limits.serialize());\n        serialized.extend_from_array(self.max_fees_per_gas.serialize());\n        serialized.push(self.inclusion_fee);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn deserialize(serialized: [Field; GAS_SETTINGS_LENGTH]) -> GasSettings {\n        let mut reader = Reader::new(serialized);\n        GasSettings::new(reader.read_struct(Gas::deserialize), reader.read_struct(Gas::deserialize), reader.read_struct(GasFees::deserialize), reader.read())\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = GasSettings::empty();\n    let serialized = item.serialize();\n    let deserialized = GasSettings::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"208":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_stack_item.nr","source":"use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl Empty for PrivateCallStackItem {\n    fn empty() -> Self {\n        PrivateCallStackItem {\n            contract_address: AztecAddress::empty(),\n            function_data: FunctionData::empty(),\n            public_inputs: PrivateCircuitPublicInputs::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = PrivateCallStackItem::empty();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item = PrivateCallStackItem::empty();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x065f2831db9ac0db5e710bd3a865b5facd8cf83f1585e1af8fd1d6ce9c47f685;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"209":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/caller_context.nr","source":"use crate::address::AztecAddress;\nuse crate::traits::{Empty, Serialize, Deserialize};\nuse crate::constants::CALLER_CONTEXT_LENGTH;\nuse crate::utils::reader::Reader;\n\nstruct CallerContext {\n    msg_sender: AztecAddress,\n    storage_contract_address: AztecAddress,\n    is_static_call: bool,\n}\n\nimpl Eq for CallerContext {\n    fn eq(self, other: CallerContext) -> bool {\n        other.msg_sender.eq(self.msg_sender)\n            & other.storage_contract_address.eq(self.storage_contract_address)\n            & other.is_static_call == self.is_static_call\n    }\n}\n\nimpl Empty for CallerContext {\n    fn empty() -> Self {\n        CallerContext {\n            msg_sender: AztecAddress::zero(),\n            storage_contract_address: AztecAddress::zero(),\n            is_static_call: false,\n        }\n    }\n}\n\nimpl CallerContext {\n    pub fn is_empty(self) -> bool {\n        self.msg_sender.is_zero() & self.storage_contract_address.is_zero() & !self.is_static_call\n    }\n\n    // Different to an empty context, a hidden context won't reveal the caller's msg_sender and storage_contract_address,\n    // but will still propagate the is_static_call flag.\n    pub fn is_hidden(self) -> bool {\n        self.msg_sender.is_zero() & self.storage_contract_address.is_zero()\n    }\n}\n\nimpl Serialize<CALLER_CONTEXT_LENGTH> for CallerContext {\n  fn serialize(self) -> [Field; CALLER_CONTEXT_LENGTH] {\n    let mut fields: BoundedVec<Field, CALLER_CONTEXT_LENGTH> = BoundedVec::new();\n\n    fields.extend_from_array(self.msg_sender.serialize());\n    fields.extend_from_array(self.storage_contract_address.serialize());\n    fields.push(self.is_static_call as Field);\n\n    assert_eq(fields.len(), CALLER_CONTEXT_LENGTH);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CALLER_CONTEXT_LENGTH> for CallerContext {\n  fn deserialize(fields: [Field; CALLER_CONTEXT_LENGTH]) -> CallerContext {\n    let mut reader = Reader::new(fields);\n\n    let item = CallerContext {\n      msg_sender: reader.read_struct(AztecAddress::deserialize),\n      storage_contract_address: reader.read_struct(AztecAddress::deserialize),\n      is_static_call: reader.read_bool(),\n    };\n    reader.finish();\n    item\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = CallerContext::empty();\n    let serialized = item.serialize();\n    let deserialized = CallerContext::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"211":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/log_hash.nr","source":"use crate::{\n    abis::side_effect::{Ordered, OrderedValue, Scoped}, address::AztecAddress,\n    constants::{\n    LOG_HASH_LENGTH, NOTE_LOG_HASH_LENGTH, ENCRYPTED_LOG_HASH_LENGTH, SCOPED_LOG_HASH_LENGTH,\n    SCOPED_ENCRYPTED_LOG_HASH_LENGTH\n},\n    traits::{Empty, Serialize, Deserialize}, utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct LogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n}\n\nimpl Ordered for LogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for LogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for LogHash {\n    fn eq(self, other: LogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n    }\n}\n\nimpl Empty for LogHash {\n    fn empty() -> Self {\n        LogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n        }\n    }\n}\n\nimpl Serialize<LOG_HASH_LENGTH> for LogHash {\n    fn serialize(self) -> [Field; LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length]\n    }\n}\n\nimpl Deserialize<LOG_HASH_LENGTH> for LogHash {\n    fn deserialize(values: [Field; LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n        }\n    }\n}\n\nimpl LogHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedLogHash {\n        ScopedLogHash { log_hash: self, contract_address }\n    }\n}\n\nstruct ScopedLogHash {\n    log_hash: LogHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<LogHash> for ScopedLogHash {\n    fn inner(self) -> LogHash {\n        self.log_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedLogHash {\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedLogHash {\n    fn value(self) -> Field {\n        self.log_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl Eq for ScopedLogHash {\n    fn eq(self, other: ScopedLogHash) -> bool {\n        (self.log_hash == other.log_hash)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedLogHash {\n    fn empty() -> Self {\n        ScopedLogHash {\n            log_hash: LogHash::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_LOG_HASH_LENGTH> for ScopedLogHash {\n    fn serialize(self) -> [Field; SCOPED_LOG_HASH_LENGTH] {\n       array_concat(self.log_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_LOG_HASH_LENGTH> for ScopedLogHash {\n    fn deserialize(values: [Field; SCOPED_LOG_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            log_hash: reader.read_struct(LogHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl ScopedLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the counter when exposing to public.\n        // The log hash must already be siloed when we call this.\n        LogHash { value: self.log_hash.value, counter: 0, length: self.log_hash.length }\n    }\n}\n\nstruct EncryptedLogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n    randomness: Field,\n}\n\nimpl Ordered for EncryptedLogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for EncryptedLogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for EncryptedLogHash {\n    fn eq(self, other: EncryptedLogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n            & (self.randomness == other.randomness) \n    }\n}\n\nimpl Empty for EncryptedLogHash {\n    fn empty() -> Self {\n        EncryptedLogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n            randomness: 0,\n        }\n    }\n}\n\nimpl Serialize<ENCRYPTED_LOG_HASH_LENGTH> for EncryptedLogHash {\n    fn serialize(self) -> [Field; ENCRYPTED_LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length, self.randomness]\n    }\n}\n\nimpl Deserialize<ENCRYPTED_LOG_HASH_LENGTH> for EncryptedLogHash {\n    fn deserialize(values: [Field; ENCRYPTED_LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n            randomness: values[3],\n        }\n    }\n}\n\nimpl EncryptedLogHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedEncryptedLogHash {\n        ScopedEncryptedLogHash { log_hash: self, contract_address }\n    }\n}\n\nstruct ScopedEncryptedLogHash {\n    log_hash: EncryptedLogHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<EncryptedLogHash> for ScopedEncryptedLogHash {\n    fn inner(self) -> EncryptedLogHash {\n        self.log_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl ScopedEncryptedLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the secret randomness and counter when exposing to public\n        // Expose as a LogHash rather than EncryptedLogHash to avoid bringing an unnec. 0 value around\n        // The log hash will already be silo'd when we call this\n        LogHash { value: self.log_hash.value, counter: 0, length: self.log_hash.length }\n    }\n}\n\nimpl Ordered for ScopedEncryptedLogHash {\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedEncryptedLogHash {\n    fn value(self) -> Field {\n        self.log_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl Eq for ScopedEncryptedLogHash {\n    fn eq(self, other: ScopedEncryptedLogHash) -> bool {\n        (self.log_hash == other.log_hash)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedEncryptedLogHash {\n    fn empty() -> Self {\n        ScopedEncryptedLogHash {\n            log_hash: EncryptedLogHash::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_ENCRYPTED_LOG_HASH_LENGTH> for ScopedEncryptedLogHash {\n    fn serialize(self) -> [Field; SCOPED_ENCRYPTED_LOG_HASH_LENGTH] {\n       array_concat(self.log_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_ENCRYPTED_LOG_HASH_LENGTH> for ScopedEncryptedLogHash {\n    fn deserialize(values: [Field; SCOPED_ENCRYPTED_LOG_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            log_hash: reader.read_struct(EncryptedLogHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nstruct NoteLogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n    note_hash_counter: u32,\n}\n\nimpl NoteLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the actual counter and note hash counter when exposing it to the public kernel.\n        // The counter is usually note_hash.counter + 1, so it can be revealing.\n        // Expose as a LogHash rather than NoteLogHash to avoid bringing an unnec. 0 value around\n        LogHash { value: self.value, counter: 0, length: self.length }\n    }\n}\n\nimpl Ordered for NoteLogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for NoteLogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for NoteLogHash {\n    fn eq(self, other: NoteLogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n            & (self.note_hash_counter == other.note_hash_counter) \n    }\n}\n\nimpl Empty for NoteLogHash {\n    fn empty() -> Self {\n        NoteLogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n            note_hash_counter: 0,\n        }\n    }\n}\n\nimpl Serialize<NOTE_LOG_HASH_LENGTH> for NoteLogHash {\n    fn serialize(self) -> [Field; NOTE_LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length, self.note_hash_counter as Field]\n    }\n}\n\nimpl Deserialize<NOTE_LOG_HASH_LENGTH> for NoteLogHash {\n    fn deserialize(values: [Field; NOTE_LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n            note_hash_counter: values[3] as u32,\n        }\n    }\n}\n"},"215":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/append_only_tree_snapshot.nr","source":"struct AppendOnlyTreeSnapshot {\n    root : Field,\n    // TODO(Alvaro) change this to a u64\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: u32 = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n"},"216":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n}\n// docs:end:call-context\n\nimpl Eq for CallContext {\n    fn eq(self, other: CallContext) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        let mut serialized: BoundedVec<Field, CALL_CONTEXT_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.msg_sender.to_field());\n        serialized.push(self.storage_contract_address.to_field());\n        serialized.push(self.function_selector.to_field());\n        serialized.push(self.is_delegate_call as Field);\n        serialized.push(self.is_static_call as Field);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        let mut reader = Reader::new(serialized);\n        CallContext {\n            msg_sender: AztecAddress::from_field(reader.read()),\n            storage_contract_address: AztecAddress::from_field(reader.read()),\n            function_selector: FunctionSelector::from_field(reader.read()),\n            is_delegate_call: reader.read() as bool,\n            is_static_call: reader.read() as bool,\n        }\n    }\n}\n\nimpl Empty for CallContext {\n    fn empty() -> Self {\n        CallContext {\n            msg_sender: AztecAddress::empty(),\n            storage_contract_address: AztecAddress::empty(),\n            function_selector: FunctionSelector::empty(),\n            is_delegate_call: false,\n            is_static_call: false,\n        }\n    }\n}\n\n#[test]\nfn serialize_deserialize_of_empty() {\n    let context = CallContext::empty();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = true;\n\n    let address: AztecAddress = AztecAddress::from_field(69420);\n    context1.msg_sender = address;\n    context2.msg_sender = address;\n\n    assert(context1.eq(context2));\n}\n\n#[test(should_fail)]\nfn not_eq_test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = false;\n\n    let address1: AztecAddress = AztecAddress::from_field(69420);\n    let address2: AztecAddress = AztecAddress::from_field(42069);\n\n    context1.msg_sender = address1;\n    context2.msg_sender = address2;\n\n    assert(context1.eq(context2));\n}\n\n#[test]\nfn hash_smoke() {\n    let context = CallContext::empty();\n    let _hashed = context.hash();\n}\n"},"217":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/max_block_number.nr","source":"use crate::{constants::MAX_BLOCK_NUMBER_LENGTH, traits::{Deserialize, Serialize, Empty}};\n\nstruct MaxBlockNumber {\n    _opt: Option<u32>\n}\n\nimpl Empty for MaxBlockNumber {\n    fn empty() -> Self {\n        Self { _opt: Option::none() }\n    }\n}\n\nimpl Eq for MaxBlockNumber {\n    fn eq(self, other: Self) -> bool {\n        self._opt == other._opt\n    }\n}\n\nimpl Serialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn serialize(self) -> [Field; MAX_BLOCK_NUMBER_LENGTH] {\n        [self._opt._is_some as Field, self._opt._value as Field]\n    }\n}\n\nimpl Deserialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn deserialize(serialized: [Field; MAX_BLOCK_NUMBER_LENGTH]) -> MaxBlockNumber {\n        MaxBlockNumber {\n            _opt: Option {\n                _is_some: serialized[0] as bool,\n                _value: serialized[1] as u32,\n            }\n        }\n    }\n}\n\nimpl MaxBlockNumber {\n    pub fn new(max_block_number: u32) -> Self {\n        Self { _opt: Option::some(max_block_number) }\n    }\n\n    pub fn is_none(self) -> bool {\n        self._opt.is_none()\n    }\n\n    pub fn is_some(self) -> bool {\n        self._opt.is_some()\n    }\n\n    pub fn unwrap(self) -> u32 {\n        self._opt.unwrap()\n    }\n\n    pub fn unwrap_unchecked(self) -> u32 {\n        self._opt.unwrap_unchecked()\n    }\n\n    pub fn min(lhs: MaxBlockNumber, rhs: MaxBlockNumber) -> MaxBlockNumber {\n        if rhs.is_none() {\n            lhs // lhs might also be none, but in that case both would be\n        } else {\n            MaxBlockNumber::min_with_u32(lhs, rhs.unwrap_unchecked())\n        }\n    }\n\n    pub fn min_with_u32(lhs: MaxBlockNumber, rhs: u32) -> MaxBlockNumber {\n        if lhs._opt.is_none() {\n            MaxBlockNumber::new(rhs)\n        } else {\n            let lhs_value = lhs._opt.unwrap_unchecked();\n\n            MaxBlockNumber::new(if lhs_value < rhs { lhs_value } else { rhs })\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = MaxBlockNumber::empty();\n    let serialized = item.serialize();\n    let deserialized = MaxBlockNumber::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn zeroed_is_none() {\n    // Large parts of the kernel rely on zeroed to initialize structs. This conveniently matches what `default` does,\n    // and though we should eventually move everything to use `default`, it's good to check for now that both are\n    // equivalent.\n    let a = MaxBlockNumber::empty();\n    assert(a.is_none());\n}\n\n#[test]\nfn serde_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert(b.is_none());\n}\n\n#[test]\nfn serde_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert_eq(b.unwrap(), 13);\n}\n\n#[test(should_fail)]\nfn default_unwrap_panics() {\n    let a = MaxBlockNumber::empty();\n    let _ = a.unwrap();\n}\n\n#[test]\nfn min_default_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::empty();\n\n    assert(MaxBlockNumber::min(a, b).is_none());\n}\n\n#[test]\nfn min_default_some() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::new(13);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_some_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::new(42);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_with_u32_default() {\n    let a = MaxBlockNumber::empty();\n    let b = 42;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 42);\n}\n\n#[test]\nfn min_with_u32_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = 42;\n    let c = 8;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min_with_u32(a, c).unwrap(), 8);\n}\n"},"22":{"path":"std/field/bn254.nr","source":"use crate::runtime::is_unconstrained;\n\n// The low and high decomposition of the field modulus\nglobal PLO: Field = 53438638232309528389504892708671455233;\nglobal PHI: Field = 64323764613183177041862057485226039389;\n\nglobal TWO_POW_128: Field = 0x100000000000000000000000000000000;\n\n// Decomposes a single field into two 16 byte fields.\nfn compute_decomposition(x: Field) -> (Field, Field) {\n    let x_bytes = x.to_le_bytes(32);\n\n    let mut low: Field = 0;\n    let mut high: Field = 0;\n\n    let mut offset = 1;\n    for i in 0..16 {\n        low += (x_bytes[i] as Field) * offset;\n        high += (x_bytes[i + 16] as Field) * offset;\n        offset *= 256;\n    }\n\n    (low, high)\n}\n\nunconstrained fn decompose_hint(x: Field) -> (Field, Field) {\n    compute_decomposition(x)\n}\n\nfn compute_lt(x: Field, y: Field, num_bytes: u32) -> bool {\n    let x_bytes = x.to_le_radix(256, num_bytes);\n    let y_bytes = y.to_le_radix(256, num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i];\n            let y_byte = y_bytes[num_bytes - 1 - i];\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\nfn compute_lte(x: Field, y: Field, num_bytes: u32) -> bool {\n    if x == y {\n        true\n    } else {\n        compute_lt(x, y, num_bytes)\n    }\n}\n\nunconstrained fn lt_32_hint(x: Field, y: Field) -> bool {\n    compute_lt(x, y, 32)\n}\n\nunconstrained fn lte_16_hint(x: Field, y: Field) -> bool {\n    compute_lte(x, y, 16)\n}\n\n// Assert that (alo > blo && ahi >= bhi) || (alo <= blo && ahi > bhi)\nfn assert_gt_limbs(a: (Field, Field), b: (Field, Field)) {\n    let (alo, ahi) = a;\n    let (blo, bhi) = b;\n    let borrow = lte_16_hint(alo, blo);\n\n    let rlo = alo - blo - 1 + (borrow as Field) * TWO_POW_128;\n    let rhi = ahi - bhi - (borrow as Field);\n\n    rlo.assert_max_bit_size(128);\n    rhi.assert_max_bit_size(128);\n}\n\n/// Decompose a single field into two 16 byte fields.\npub fn decompose(x: Field) -> (Field, Field) {\n    if is_unconstrained() {\n        compute_decomposition(x)\n    } else {\n        // Take hints of the decomposition\n        let (xlo, xhi) = decompose_hint(x);\n\n        // Range check the limbs\n        xlo.assert_max_bit_size(128);\n        xhi.assert_max_bit_size(128);\n\n        // Check that the decomposition is correct\n        assert_eq(x, xlo + TWO_POW_128 * xhi);\n\n        // Assert that the decomposition of P is greater than the decomposition of x\n        assert_gt_limbs((PLO, PHI), (xlo, xhi));\n        (xlo, xhi)\n    }\n}\n\npub fn assert_gt(a: Field, b: Field) {\n    if is_unconstrained() {\n        assert(compute_lt(b, a, 32));\n    } else {\n        // Decompose a and b\n        let a_limbs = decompose(a);\n        let b_limbs = decompose(b);\n\n        // Assert that a_limbs is greater than b_limbs\n        assert_gt_limbs(a_limbs, b_limbs)\n    }\n}\n\npub fn assert_lt(a: Field, b: Field) {\n    assert_gt(b, a);\n}\n\npub fn gt(a: Field, b: Field) -> bool {\n    if is_unconstrained() {\n        compute_lt(b, a, 32)\n    } else if a == b {\n        false\n    } else  {\n        // Take a hint of the comparison and verify it\n        if lt_32_hint(a, b) {\n            assert_gt(b, a);\n            false\n        } else {\n            assert_gt(a, b);\n            true\n        }\n    }\n}\n\npub fn lt(a: Field, b: Field) -> bool {\n    gt(b, a)\n}\n\nmod tests {\n    // TODO: Allow imports from \"super\"\n    use crate::field::bn254::{decompose_hint, decompose, compute_lt, assert_gt, gt, lt, TWO_POW_128, compute_lte, PLO, PHI};\n\n    #[test]\n    fn check_decompose() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    unconstrained fn check_decompose_unconstrained() {\n        assert_eq(decompose(TWO_POW_128), (0, 1));\n        assert_eq(decompose(TWO_POW_128 + 0x1234567890), (0x1234567890, 1));\n        assert_eq(decompose(0x1234567890), (0x1234567890, 0));\n    }\n\n    #[test]\n    fn check_compute_lt() {\n        assert(compute_lt(0, 1, 16));\n        assert(compute_lt(0, 0x100, 16));\n        assert(compute_lt(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lt(0, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_compute_lte() {\n        assert(compute_lte(0, 1, 16));\n        assert(compute_lte(0, 0x100, 16));\n        assert(compute_lte(0x100, TWO_POW_128 - 1, 16));\n        assert(!compute_lte(0, TWO_POW_128, 16));\n\n        assert(compute_lte(0, 0, 16));\n        assert(compute_lte(0x100, 0x100, 16));\n        assert(compute_lte(TWO_POW_128 - 1, TWO_POW_128 - 1, 16));\n        assert(compute_lte(TWO_POW_128, TWO_POW_128, 16));\n    }\n\n    #[test]\n    fn check_assert_gt() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    unconstrained fn check_assert_gt_unconstrained() {\n        assert_gt(1, 0);\n        assert_gt(0x100, 0);\n        assert_gt((0 - 1), (0 - 2));\n        assert_gt(TWO_POW_128, 0);\n        assert_gt(0 - 1, 0);\n    }\n\n    #[test]\n    fn check_gt() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    unconstrained fn check_gt_unconstrained() {\n        assert(gt(1, 0));\n        assert(gt(0x100, 0));\n        assert(gt((0 - 1), (0 - 2)));\n        assert(gt(TWO_POW_128, 0));\n        assert(!gt(0, 0));\n        assert(!gt(0, 0x100));\n        assert(gt(0 - 1, 0 - 2));\n        assert(!gt(0 - 2, 0 - 1));\n    }\n\n    #[test]\n    fn check_plo_phi() {\n        assert_eq(PLO + PHI * TWO_POW_128, 0);\n        let p_bytes = crate::field::modulus_le_bytes();\n        let mut p_low: Field = 0;\n        let mut p_high: Field = 0;\n\n        let mut offset = 1;\n        for i in 0..16 {\n            p_low += (p_bytes[i] as Field) * offset;\n            p_high += (p_bytes[i + 16] as Field) * offset;\n            offset *= 256;\n        }\n        assert_eq(p_low, PLO);\n        assert_eq(p_high, PHI);\n    }\n}\n"},"220":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize, Empty}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        (self.is_private == other.is_private)\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nimpl Empty for FunctionData {\n    fn empty() -> Self {\n        FunctionData {\n            selector: FunctionSelector::empty(),\n            is_private: false\n        }\n    }\n\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data = FunctionData::empty();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data = FunctionData::empty();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty function data hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"227":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/messaging/l2_to_l1_message.nr","source":"use crate::{\n    address::{AztecAddress, EthAddress},\n    constants::{L2_TO_L1_MESSAGE_LENGTH, SCOPED_L2_TO_L1_MESSAGE_LENGTH},\n    abis::side_effect::{Ordered, Scoped}, traits::{Deserialize, Empty, Serialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\n// Note: Not to be confused with L2ToL1Msg in Solidity\nstruct L2ToL1Message {\n    recipient: EthAddress,\n    content: Field,\n    counter: u32,\n}\n\nimpl Ordered for L2ToL1Message {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Empty for L2ToL1Message {\n    fn empty() -> Self {\n        Self {\n            recipient: EthAddress::empty(),\n            content: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Eq for L2ToL1Message {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient) & (self.content == other.content) & (self.counter == other.counter)\n    }\n}\n\nimpl Serialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn serialize(self) -> [Field; L2_TO_L1_MESSAGE_LENGTH] {\n        [self.recipient.to_field(), self.content, self.counter as Field]\n    }\n}\n\nimpl Deserialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn deserialize(values: [Field; L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        Self {\n            recipient: EthAddress::from_field(values[0]),\n            content: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n\nimpl L2ToL1Message {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedL2ToL1Message {\n        ScopedL2ToL1Message { message: self, contract_address }\n    }\n}\n\nstruct ScopedL2ToL1Message {\n    message: L2ToL1Message,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<L2ToL1Message> for ScopedL2ToL1Message {\n    fn inner(self) -> L2ToL1Message {\n        self.message\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedL2ToL1Message {\n    fn counter(self) -> u32 {\n        self.message.counter\n    }\n}\n\nimpl Eq for ScopedL2ToL1Message {\n    fn eq(self, other: ScopedL2ToL1Message) -> bool {\n        (self.message == other.message)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedL2ToL1Message {\n    fn empty() -> Self {\n        ScopedL2ToL1Message {\n            message: L2ToL1Message::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_L2_TO_L1_MESSAGE_LENGTH> for ScopedL2ToL1Message {\n    fn serialize(self) -> [Field; SCOPED_L2_TO_L1_MESSAGE_LENGTH] {\n        array_concat(self.message.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_L2_TO_L1_MESSAGE_LENGTH> for ScopedL2ToL1Message {\n    fn deserialize(values: [Field; SCOPED_L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            message: reader.read_struct(L2ToL1Message::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\n#[test]\nfn serialization_of_empty_l2() {\n    let item = L2ToL1Message::empty();\n    let serialized = item.serialize();\n    let deserialized = L2ToL1Message::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped_l2() {\n    let item = ScopedL2ToL1Message::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedL2ToL1Message::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"23":{"path":"std/field/mod.nr","source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n"},"234":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U64_SERIALIZED_LEN: Field = 1;\nglobal U128_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n"},"235":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<N> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<N> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\nimpl<N> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let mut result = [0; N];\n        let bytes: [u8; N] = self.as_bytes();\n        for i in 0..N {\n            result[i] = field_from_bytes([bytes[i];1], true);\n        }\n        result\n    }\n}\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<N> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n"},"236":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/debug_log.nr","source":"// Utility function to console.log data in the acir simulator\n// WARNING: sometimes when using debug logs the ACVM errors with: `thrown: \"solver opcode resolution error: cannot solve opcode: expression has too many unknowns x155\"`\n\n#[oracle(debugLog)]\nunconstrained fn debug_log_oracle<M, N>(_msg: str<M>, args: [Field]) {}\n\n/// NOTE: call this with a str<N> msg of form\n/// \"some string with {0} and {1} ... {N}\"\n/// and an array of N field which will be formatted\n/// into the string in the simulator.\n/// Example:\n/// debug_log_format(\"get_2(slot:{0}) =>\\n\\t0:{1}\\n\\t1:{2}\", [storage_slot, note0_hash, note1_hash]);\n/// debug_log_format(\"whole array: {}\", [e1, e2, e3, e4]);\nunconstrained pub fn debug_log_format<M, N>(msg: str<M>, args: [Field; N]) {\n    debug_log_oracle(msg, args.as_slice());\n}\n\n/// NOTE: call this with a str<N> msg of length > 1\n/// Example:\n/// `debug_log(\"blah blah this is a debug string\");`\nunconstrained pub fn debug_log<N>(msg: str<N>) {\n    debug_log_format(msg, []);\n}\n"},"237":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/content_commitment.nr","source":"use crate::{\n    constants::CONTENT_COMMITMENT_LENGTH, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct ContentCommitment {\n  num_txs: Field,\n  txs_effects_hash: Field,\n  in_hash: Field,\n  out_hash: Field,\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new();\n\n    fields.push(self.num_txs);\n    fields.push(self.txs_effects_hash);\n    fields.push(self.in_hash);\n    fields.push(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let num_txs = serialized[0];\n\n    let txs_effects_hash = serialized[1];\n\n    let in_hash = serialized[2];\n\n    let out_hash = serialized[3];\n\n    Self {\n      num_txs,\n      txs_effects_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      num_txs: 0,\n      txs_effects_hash: 0,\n      in_hash: 0,\n      out_hash: 0,\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.num_txs == other.num_txs)\n      & (self.txs_effects_hash == other.txs_effects_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n"},"238":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/public_data_tree_leaf_preimage.nr","source":"use crate::{merkle_tree::leaf_preimage::IndexedTreeLeafPreimage, traits::{Empty, Hash}};\n\nstruct PublicDataTreeLeafPreimage {\n    slot : Field,\n    value: Field,\n    next_slot :Field,\n    next_index : u32,\n}\n\nimpl Empty for PublicDataTreeLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            slot: 0,\n            value: 0,\n            next_slot: 0,\n            next_index: 0,\n        }\n    }\n}\n\nimpl Hash for PublicDataTreeLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            std::hash::pedersen_hash([self.slot, self.value, (self.next_index as Field), self.next_slot])\n        }\n    }\n}\n\nimpl IndexedTreeLeafPreimage for PublicDataTreeLeafPreimage {\n    fn get_key(self) -> Field {\n        self.slot\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_slot\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl PublicDataTreeLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.slot == 0) & (self.value == 0) & (self.next_slot == 0) & (self.next_index == 0)\n    }\n}\n"},"239":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/header.nr","source":"use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, STATE_REFERENCE_LENGTH, CONTENT_COMMITMENT_LENGTH},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n    total_fees: Field\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables) &\n        self.total_fees.eq(other.total_fees)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n        fields.push(self.total_fees);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n        offset = offset + GLOBAL_VARIABLES_LENGTH;\n\n        let total_fees = serialized[offset];\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n            total_fees\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n            total_fees: 0\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header = Header::empty();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header = Header::empty();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header = Header::empty();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x124e8c40a6eca2e3ad10c04050b01a3fad00df3cea47b13592c7571b6914c7a7;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"240":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path, messaging::l2_to_l1_message::ScopedL2ToL1Message,\n    recursion::verification_key::VerificationKey, traits::is_empty,\n    utils::field::field_from_bytes_32_trunc\n};\nuse std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    pedersen_hash(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, inner_note_hash: Field) -> Field {\n    let inputs = [nonce, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_encrypted_log_hash(address: AztecAddress, randomness: Field, log_hash: Field) -> Field {\n    // TODO: Using 0 GENERATOR_INDEX here as interim before we move to posiedon\n    // NB: A unique separator will be needed for masked_contract_address\n    let mut masked_contract_address = pedersen_hash([address.to_field(), randomness], 0);\n    if randomness == 0 {\n        // In some cases, we actually want to reveal the contract address we are siloing with:\n        // e.g. 'handshaking' contract w/ known address\n        // An app providing randomness = 0 signals to not mask the address.\n        masked_contract_address = address.to_field();\n    }\n    accumulate_sha256([masked_contract_address, log_hash])\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedEncryptedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_encrypted_log_hash(\n            log_hash.contract_address,\n            log_hash.log_hash.randomness,\n            log_hash.log_hash.value\n        )\n    }\n}\n\npub fn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly. \npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<N>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n"},"241":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/partial_state_reference.nr","source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0], \n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial = PartialStateReference::empty();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n"},"243":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/transaction/tx_context.nr","source":"use crate::{\n    constants::{GENERATOR_INDEX__TX_CONTEXT, TX_CONTEXT_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader,\n    abis::gas_settings::GasSettings\n};\n\n// docs:start:tx-context\nstruct TxContext {\n    chain_id : Field,\n    version : Field,\n    gas_settings: GasSettings,\n}\n// docs:end:tx-context\n\nimpl TxContext {\n    pub fn new(chain_id: Field, version: Field, gas_settings: GasSettings) -> Self {\n        TxContext { chain_id, version, gas_settings }\n    }\n}\n\nimpl Eq for TxContext {\n    fn eq(self, other: Self) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.gas_settings.eq(other.gas_settings))\n    }\n}\n\nimpl Empty for TxContext {\n    fn empty() -> Self {\n        TxContext {\n            chain_id: 0,\n            version: 0,\n            gas_settings: GasSettings::empty(),\n        }\n    }\n}\n\nimpl Serialize<TX_CONTEXT_LENGTH> for TxContext {\n    fn serialize(self) -> [Field; TX_CONTEXT_LENGTH] {\n        let mut fields: BoundedVec<Field, TX_CONTEXT_LENGTH> = BoundedVec::new();\n\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.extend_from_array(self.gas_settings.serialize());\n\n        assert_eq(fields.len(), TX_CONTEXT_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<TX_CONTEXT_LENGTH> for TxContext {\n    fn deserialize(serialized: [Field; TX_CONTEXT_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let context = Self {\n            chain_id: reader.read(),\n            version: reader.read(),\n            gas_settings: reader.read_struct(GasSettings::deserialize),\n        };\n\n        reader.finish();\n        context\n    }\n}\n\nimpl Hash for TxContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__TX_CONTEXT)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context = TxContext::empty();\n    let serialized = context.serialize();\n    let deserialized = TxContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let context = TxContext::empty();\n    let hash = context.hash();\n\n    // Value from tx_context.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x17e4357684c5a4349b4587c95b0b6161dcb4a3c5b02d4eb2ecc3b02c80193261;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"247":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"249":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/state_reference.nr","source":"use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state = StateReference::empty();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n"},"25":{"path":"std/hash/mod.nr","source":"mod poseidon;\nmod mimc;\nmod poseidon2;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::sha256::{digest, sha256_var};\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul};\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n#[no_predicates]\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    let value = pedersen_commitment_with_separator(input, 0);\n    if (value.x == 0) & (value.y == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value.x, y: value.y, is_infinite: false }\n    }\n}\n\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        points[i] = EmbeddedCurveScalar::from_field(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let values = multi_scalar_mul(generators, points);\n    EmbeddedCurvePoint { x: values[0], y: values[1], is_infinite: values[2] as bool }\n}\n\n#[no_predicates]\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    EmbeddedCurvePoint { x: values[0], y: values[1], is_infinite: false }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    crate::assert_constant(starting_index);\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let v1 = pedersen_commitment_with_separator(input, separator);\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    multi_scalar_mul(\n        [length_generator[0], v1],\n        [EmbeddedCurveScalar { lo: N as Field, hi: 0 }, EmbeddedCurveScalar { lo: 1, hi: 0 }]\n    )[0]\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes(32).as_array();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n#[test]\nfn assert_pedersen_noir() {\n    // TODO: make this a fuzzer test once fuzzer supports curve-specific blackbox functions.\n    let input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    assert_eq(pedersen_hash_with_separator(input, 4), pedersen_hash_with_separator_noir(input, 4));\n    assert_eq(pedersen_commitment_with_separator(input, 4), pedersen_commitment_with_separator_noir(input, 4));\n}\n"},"263":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"struct Reader<N> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"273":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes = field.to_be_bytes(31);\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2 = field.to_be_bytes(31);\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n"},"275":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"289":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr","source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n"},"290":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId, hash::poseidon2_hash,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash([pub_keys_hash.to_field(), partial_address.to_field(), GENERATOR_INDEX__CONTRACT_ADDRESS_V1])\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x1b6ead051e7b42665064ca6cf1ec77da0a36d86e00d1ff6e44077966c0c3a9fa;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"30":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\nglobal RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) -> [Field; RATE] {\n        // zero-pad the cache\n        for i in 0..RATE {\n            if i >= self.cache_size {\n                self.cache[i] = 0;\n            }\n        }\n        // add the cache into sponge state\n        for i in 0..RATE {\n            self.state[i] += self.cache[i];\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n        // return `RATE` number of field elements from the sponge state.\n        let mut result = [0; RATE];\n        for i in 0..RATE {\n            result[i] = self.state[i];\n        }\n        result\n    }\n\n    fn absorb(&mut self, input: Field) {\n        if (!self.squeeze_mode) & (self.cache_size == RATE) {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            let _ = self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else if (!self.squeeze_mode) & (self.cache_size != RATE) {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        } else if self.squeeze_mode {\n            // If we're in squeeze mode, switch to absorb mode and add the input into the cache.\n            // N.B. I don't think this code path can be reached?!\n            self.cache[0] = input;\n            self.cache_size = 1;\n            self.squeeze_mode = false;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        if self.squeeze_mode & (self.cache_size == 0) {\n            // If we're in squeze mode and the cache is empty, there is nothing left to squeeze out of the sponge!\n            // Switch to absorb mode.\n            self.squeeze_mode = false;\n            self.cache_size = 0;\n        }\n        if !self.squeeze_mode {\n            // If we're in absorb mode, apply sponge permutation to compress the cache, populate cache with compressed\n            // state and switch to squeeze mode. Note: this code block will execute if the previous `if` condition was\n            // matched\n            let new_output_elements = self.perform_duplex();\n            self.squeeze_mode = true;\n            for i in 0..RATE {\n                self.cache[i] = new_output_elements[i];\n            }\n            self.cache_size = RATE;\n        }\n        // By this point, we should have a non-empty cache. Pop one item off the top of the cache and return it.\n        let result = self.cache[0];\n        for i in 1..RATE {\n            if i < self.cache_size {\n                self.cache[i - 1] = self.cache[i];\n            }\n        }\n        self.cache_size -= 1;\n        self.cache[self.cache_size] = 0;\n        result\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n"},"303":{"path":"/usr/src/noir-projects/noir-contracts/contracts/token_contract/src/main.nr","source":"// docs:start:token_all\n// docs:start:imports\nmod types;\nmod test;\n\n// Minimal token implementation that supports `AuthWit` accounts.\n// The auth message follows a similar pattern to the cross-chain message and includes a designated caller.\n// The designated caller is ALWAYS used here, and not based on a flag as cross-chain.\n// message hash = H([caller, contract, selector, ...args])\n// To be read as `caller` calls function at `contract` defined by `selector` with `args`\n// Including a nonce in the message hash ensures that the message can only be used once.\n\ncontract Token {\n    // Libs\n\n    use dep::compressed_string::FieldCompressedString;\n\n    use dep::aztec::{\n        hash::compute_secret_hash,\n        prelude::{NoteGetterOptions, Map, PublicMutable, SharedImmutable, PrivateSet, AztecAddress},\n        encrypted_logs::{\n        encrypted_note_emission::{\n        encode_and_encrypt_note, encode_and_encrypt_note_with_keys,\n        encode_and_encrypt_note_with_keys_unconstrained\n    },\n        encrypted_event_emission::{encode_and_encrypt_event, encode_and_encrypt_event_with_keys_unconstrained}\n    }\n    };\n\n    // docs:start:import_authwit\n    use dep::authwit::auth::{assert_current_call_valid_authwit, assert_current_call_valid_authwit_public, compute_authwit_nullifier};\n    // docs:end:import_authwit\n\n    use crate::types::{transparent_note::TransparentNote, token_note::{TokenNote, TOKEN_NOTE_LEN}, balances_map::BalancesMap};\n    // docs:end::imports\n\n    #[aztec(event)]\n    struct Transfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n    }\n\n    // docs:start:storage_struct\n    #[aztec(storage)]\n    struct Storage {\n        // docs:start:storage_admin\n        admin: PublicMutable<AztecAddress>,\n        // docs:end:storage_admin\n        // docs:start:storage_minters\n        minters: Map<AztecAddress, PublicMutable<bool>>,\n        // docs:end:storage_minters\n        // docs:start:storage_balances\n        balances: BalancesMap<TokenNote>,\n        // docs:end:storage_balances\n        total_supply: PublicMutable<U128>,\n        // docs:start:storage_pending_shields\n        pending_shields: PrivateSet<TransparentNote>,\n        // docs:end:storage_pending_shields\n        public_balances: Map<AztecAddress, PublicMutable<U128>>,\n        symbol: SharedImmutable<FieldCompressedString>,\n        name: SharedImmutable<FieldCompressedString>,\n        // docs:start:storage_decimals\n        decimals: SharedImmutable<u8>,\n        // docs:end:storage_decimals\n    }\n    // docs:end:storage_struct\n\n    // docs:start:constructor\n    #[aztec(public)]\n    #[aztec(initializer)]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>, decimals: u8) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.minters.at(admin).write(true);\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n        // docs:start:initialize_decimals\n        storage.decimals.initialize(decimals);\n        // docs:end:initialize_decimals\n    }\n    // docs:end:constructor\n\n    // docs:start:set_admin\n    #[aztec(public)]\n    fn set_admin(new_admin: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:start:write_admin\n        storage.admin.write(new_admin);\n        // docs:end:write_admin\n    }\n    // docs:end:set_admin\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn public_get_name() -> pub FieldCompressedString {\n        storage.name.read_public()\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn private_get_name() -> pub FieldCompressedString {\n        storage.name.read_private()\n    }\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_public()\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_private()\n    }\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn public_get_decimals() -> pub u8 {\n        // docs:start:read_decimals_public\n        storage.decimals.read_public()\n        // docs:end:read_decimals_public\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn private_get_decimals() -> pub u8 {\n        // docs:start:read_decimals_private\n        storage.decimals.read_private()\n        // docs:end:read_decimals_private\n    }\n\n    // docs:start:admin\n    #[aztec(public)]\n    #[aztec(view)]\n    fn admin() -> Field {\n        storage.admin.read().to_field()\n    }\n    // docs:end:admin\n\n    // docs:start:is_minter\n    #[aztec(public)]\n    #[aztec(view)]\n    fn is_minter(minter: AztecAddress) -> bool {\n        storage.minters.at(minter).read()\n    }\n    // docs:end:is_minter\n\n    // docs:start:total_supply\n    #[aztec(public)]\n    #[aztec(view)]\n    fn total_supply() -> Field {\n        storage.total_supply.read().to_integer()\n    }\n    // docs:end:total_supply\n\n    // docs:start:balance_of_public\n    #[aztec(public)]\n    #[aztec(view)]\n    fn balance_of_public(owner: AztecAddress) -> Field {\n        storage.public_balances.at(owner).read().to_integer()\n    }\n    // docs:end:balance_of_public\n\n    // docs:start:set_minter\n    #[aztec(public)]\n    fn set_minter(minter: AztecAddress, approve: bool) {\n        // docs:start:read_admin\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:end:read_admin\n        // docs:start:write_minter\n        storage.minters.at(minter).write(approve);\n        // docs:end:write_minter\n    }\n    // docs:end:set_minter\n\n    // docs:start:mint_public\n    #[aztec(public)]\n    fn mint_public(to: AztecAddress, amount: Field) {\n        // docs:start:read_minter\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n        // docs:end:read_minter\n        let amount = U128::from_integer(amount);\n        let new_balance = storage.public_balances.at(to).read().add(amount);\n        let supply = storage.total_supply.read().add(amount);\n\n        storage.public_balances.at(to).write(new_balance);\n        storage.total_supply.write(supply);\n    }\n    // docs:end:mint_public\n\n    // docs:start:mint_private\n    #[aztec(public)]\n    fn mint_private(amount: Field, secret_hash: Field) {\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n        let pending_shields = storage.pending_shields;\n        let mut note = TransparentNote::new(amount, secret_hash);\n        let supply = storage.total_supply.read().add(U128::from_integer(amount));\n\n        storage.total_supply.write(supply);\n        // docs:start:insert_from_public\n        pending_shields.insert_from_public(&mut note);\n        // docs:end:insert_from_public\n    }\n    // docs:end:mint_private\n\n    // TODO: Nuke this - test functions do not belong to token contract!\n    #[aztec(private)]\n    fn privately_mint_private_note(amount: Field) {\n        let caller = context.msg_sender();\n        storage.balances.add(caller, U128::from_integer(amount)).emit(encode_and_encrypt_note(&mut context, caller, caller));\n\n        Token::at(context.this_address()).assert_minter_and_mint(context.msg_sender(), amount).enqueue(&mut context);\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn assert_minter_and_mint(minter: AztecAddress, amount: Field) {\n        assert(storage.minters.at(minter).read(), \"caller is not minter\");\n        let supply = storage.total_supply.read() + U128::from_integer(amount);\n        storage.total_supply.write(supply);\n    }\n\n    // docs:start:shield\n    #[aztec(public)]\n    fn shield(from: AztecAddress, amount: Field, secret_hash: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            // The redeem is only spendable once, so we need to ensure that you cannot insert multiple shields from the same message.\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n\n        let pending_shields = storage.pending_shields;\n        let mut note = TransparentNote::new(amount.to_field(), secret_hash);\n\n        storage.public_balances.at(from).write(from_balance);\n        pending_shields.insert_from_public(&mut note);\n    }\n    // docs:end:shield\n\n    // docs:start:transfer_public\n    #[aztec(public)]\n    fn transfer_public(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n\n        let to_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(to_balance);\n    }\n    // docs:end:transfer_public\n\n    // docs:start:burn_public\n    #[aztec(public)]\n    fn burn_public(from: AztecAddress, amount: Field, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit_public\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit_public\n\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n\n        let new_supply = storage.total_supply.read().sub(amount);\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:burn_public\n\n    // docs:start:redeem_shield\n    #[aztec(private)]\n    fn redeem_shield(to: AztecAddress, amount: Field, secret: Field) {\n        let pending_shields = storage.pending_shields;\n        let secret_hash = compute_secret_hash(secret);\n        // Get 1 note (set_limit(1)) which has amount stored in field with index 0 (select(0, amount)) and secret_hash\n        // stored in field with index 1 (select(1, secret_hash)).\n        let mut options = NoteGetterOptions::new();\n        options = options.select(TransparentNote::properties().amount, amount, Option::none()).select(\n            TransparentNote::properties().secret_hash,\n            secret_hash,\n            Option::none()\n        ).set_limit(1);\n        let notes = pending_shields.get_notes(options);\n        let note = notes.get_unchecked(0);\n        // Remove the note from the pending shields set\n        pending_shields.remove(note);\n\n        // Add the token note to user's balances set\n        // Note: Using context.msg_sender() as a sender below makes this incompatible with escrows because we send\n        // outgoing logs to that address and to send outgoing logs you need to get a hold of ovsk_m.\n        let from = context.msg_sender();\n        storage.balances.add(to, U128::from_integer(amount)).emit(encode_and_encrypt_note(&mut context, from, to));\n    }\n    // docs:end:redeem_shield\n\n    // docs:start:unshield\n    #[aztec(private)]\n    fn unshield(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        storage.balances.sub(from, U128::from_integer(amount)).emit(encode_and_encrypt_note(&mut context, from, from));\n\n        Token::at(context.this_address())._increase_public_balance(to, amount).enqueue(&mut context);\n    }\n    // docs:end:unshield\n\n    // docs:start:transfer\n    #[aztec(private)]\n    fn transfer(to: AztecAddress, amount: Field) {\n        let from = context.msg_sender();\n\n        // By fetching the keys here, we can avoid doing an extra read from the storage, since from_ovpk would\n        // be needed twice.\n        let header = context.get_header();\n        let from_ovpk = header.get_ovpk_m(&mut context, from);\n        let from_ivpk = header.get_ivpk_m(&mut context, from);\n        let to_ivpk = header.get_ivpk_m(&mut context, to);\n\n        let amount = U128::from_integer(amount);\n        storage.balances.sub(from, amount).emit(encode_and_encrypt_note_with_keys_unconstrained(&mut context, from_ovpk, from_ivpk));\n        storage.balances.add(to, amount).emit(encode_and_encrypt_note_with_keys_unconstrained(&mut context, from_ovpk, to_ivpk));\n\n        Transfer { from, to, amount: amount.to_field() }.emit(encode_and_encrypt_event_with_keys_unconstrained(&mut context, from_ovpk, to_ivpk));\n    }\n    // docs:end:transfer\n\n    /**\n     * Cancel a private authentication witness.\n     * @param inner_hash The inner hash of the authwit to cancel.\n     */\n    // docs:start:cancel_authwit\n    #[aztec(private)]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier, 0);\n    }\n    // docs:end:cancel_authwit\n\n    // docs:start:transfer_from\n    #[aztec(private)]\n    fn transfer_from(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit\n\n        // By fetching the keys here, we can avoid doing an extra read from the storage, since from_ovpk would\n        // be needed twice.\n        let header = context.get_header();\n        let from_ovpk = header.get_ovpk_m(&mut context, from);\n        let from_ivpk = header.get_ivpk_m(&mut context, from);\n        let to_ivpk = header.get_ivpk_m(&mut context, to);\n\n        let amount = U128::from_integer(amount);\n        // docs:start:increase_private_balance\n        // docs:start:encrypted\n        storage.balances.sub(from, amount).emit(encode_and_encrypt_note_with_keys(&mut context, from_ovpk, from_ivpk));\n        // docs:end:encrypted\n        // docs:end:increase_private_balance\n        storage.balances.add(to, amount).emit(encode_and_encrypt_note_with_keys(&mut context, from_ovpk, to_ivpk));\n    }\n    // docs:end:transfer_from\n\n    // docs:start:burn\n    #[aztec(private)]\n    fn burn(from: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        storage.balances.sub(from, U128::from_integer(amount)).emit(encode_and_encrypt_note(&mut context, from, from));\n\n        Token::at(context.this_address())._reduce_total_supply(amount).enqueue(&mut context);\n    }\n    // docs:end:burn\n\n    /// Internal ///\n\n    // docs:start:increase_public_balance\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _increase_public_balance(to: AztecAddress, amount: Field) {\n        let new_balance = storage.public_balances.at(to).read().add(U128::from_integer(amount));\n        storage.public_balances.at(to).write(new_balance);\n    }\n    // docs:end:increase_public_balance\n\n    // docs:start:reduce_total_supply\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _reduce_total_supply(amount: Field) {\n        // Only to be called from burn.\n        let new_supply = storage.total_supply.read().sub(U128::from_integer(amount));\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:reduce_total_supply\n\n    /// Unconstrained ///\n\n    // docs:start:balance_of_private\n    unconstrained fn balance_of_private(owner: AztecAddress) -> pub Field {\n        storage.balances.balance_of(owner).to_field()\n    }\n    // docs:end:balance_of_private\n}\n// docs:end:token_all"},"315":{"path":"/usr/src/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    prelude::{AztecAddress, NoteHeader, NoteInterface, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash},\n    note::utils::compute_note_hash_for_consumption, oracle::unsafe_rand::unsafe_rand,\n    keys::getters::get_nsk_app\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\nglobal TOKEN_NOTE_LEN: Field = 3; // 3 plus a header.\n// TOKEN_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal TOKEN_NOTE_BYTES_LEN: Field = 3 * 32 + 64;\n\n#[aztec(note)]\nstruct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n\nimpl NoteInterface<TOKEN_NOTE_LEN, TOKEN_NOTE_BYTES_LEN> for TokenNote {\n    // docs:start:nullifier\n    fn compute_note_hash_and_nullifier(self, context: &mut PrivateContext) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n    // docs:end:nullifier\n\n    fn compute_note_hash_and_nullifier_without_context(self) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        Self {\n            amount,\n            npk_m_hash: owner_npk_m_hash,\n            randomness: unsafe_rand(),\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n"},"317":{"path":"/usr/src/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::{note_getter_options::PropertySelector, utils::compute_note_hash_for_consumption},\n    prelude::{NoteHeader, NoteInterface, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash}\n};\n\nglobal TRANSPARENT_NOTE_LEN: Field = 2;\n// TRANSPARENT_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal TRANSPARENT_NOTE_BYTES_LEN: Field = 2 * 32 + 64;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[aztec(note)]\nstruct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nstruct TransparentNoteProperties {\n    amount: PropertySelector,\n    secret_hash: PropertySelector,\n}\n\nimpl NoteInterface<TRANSPARENT_NOTE_LEN, TRANSPARENT_NOTE_BYTES_LEN> for TransparentNote {\n\n    // Custom serialization to avoid disclosing the secret field\n    fn serialize_content(self) -> [Field; TRANSPARENT_NOTE_LEN] {\n        [self.amount, self.secret_hash]\n    }\n\n    // Custom deserialization since we don't have access to the secret plaintext\n    fn deserialize_content(serialized_note: [Field; TRANSPARENT_NOTE_LEN]) -> Self {\n        TransparentNote {\n            amount: serialized_note[0],\n            secret_hash: serialized_note[1],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386): Ensure nullifier collisions are prevented\n    fn compute_note_hash_and_nullifier(self, _context: &mut PrivateContext) -> (Field, Field) {\n        self.compute_note_hash_and_nullifier_without_context()\n    }\n\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit. \n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_note_hash_and_nullifier_without_context(self) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n\n    // CUSTOM FUNCTIONS FOR THIS NOTE TYPE\n    // Custom serialization forces us to manually create the metadata struct and its getter\n    pub fn properties() -> TransparentNoteProperties {\n        TransparentNoteProperties {\n            amount: PropertySelector { index: 0, offset: 0, length: 32 },\n            secret_hash: PropertySelector { index: 1, offset: 0, length: 32 }\n        }\n    }\n}\n// docs:end:token_types_all\n"},"32":{"path":"std/merkle.nr","source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<let N: u32>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n"},"326":{"path":"/usr/src/noir-projects/noir-contracts/contracts/fpc_contract/src/main.nr","source":"mod lib;\n\ncontract FPC {\n    use dep::aztec::{\n        protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress, traits::is_empty},\n        state_vars::SharedImmutable, context::gas::GasOpts\n    };\n    use dep::token::Token;\n    use dep::gas_token::GasToken;\n    use crate::lib::compute_rebate;\n\n    #[aztec(storage)]\n    struct Storage {\n        other_asset: SharedImmutable<AztecAddress>,\n        gas_token_address: SharedImmutable<AztecAddress>,\n    }\n\n    #[aztec(public)]\n    #[aztec(initializer)]\n    fn constructor(other_asset: AztecAddress, gas_token_address: AztecAddress) {\n        storage.other_asset.initialize(other_asset);\n        storage.gas_token_address.initialize(gas_token_address);\n    }\n\n    #[aztec(private)]\n    fn fee_entrypoint_private(amount: Field, asset: AztecAddress, secret_hash: Field, nonce: Field) {\n        assert(asset == storage.other_asset.read_private());\n        Token::at(asset).unshield(context.msg_sender(), context.this_address(), amount, nonce).call(&mut context);\n        context.set_as_fee_payer();\n        // Would like to get back to\n        // FPC::at(context.this_address()).pay_refund_with_shielded_rebate(amount, asset, secret_hash).set_public_teardown_function(&mut context);\n        context.set_public_teardown_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"pay_refund_with_shielded_rebate(Field,(Field),Field)\"),\n            [amount, asset.to_field(), secret_hash]\n        );\n    }\n\n    #[aztec(private)]\n    fn fee_entrypoint_public(amount: Field, asset: AztecAddress, nonce: Field) {\n        FPC::at(context.this_address()).prepare_fee(context.msg_sender(), amount, asset, nonce).enqueue(&mut context);\n        context.set_as_fee_payer();\n        // TODO(#6277) for improving interface:\n        // FPC::at(context.this_address()).pay_refund(context.msg_sender(), amount, asset).set_public_teardown_function(&mut context);\n        context.set_public_teardown_function(\n            context.this_address(),\n            FunctionSelector::from_signature(\"pay_refund((Field),Field,(Field))\"),\n            [context.msg_sender().to_field(), amount, asset.to_field()]\n        );\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn prepare_fee(from: AztecAddress, amount: Field, asset: AztecAddress, nonce: Field) {\n        // docs:start:public_call\n        Token::at(asset).transfer_public(from, context.this_address(), amount, nonce).call(&mut context);\n        // docs:end:public_call\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn pay_refund(refund_address: AztecAddress, amount: Field, asset: AztecAddress) {\n        // Just do public refunds for the present\n        let refund = compute_rebate(context, amount);\n        Token::at(asset).transfer_public(context.this_address(), refund_address, refund, 0).call(&mut context);\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn pay_refund_with_shielded_rebate(amount: Field, asset: AztecAddress, secret_hash: Field) {\n        let refund = compute_rebate(context, amount);\n        Token::at(asset).shield(context.this_address(), refund, secret_hash, 0).call(&mut context);\n    }\n}\n"},"327":{"path":"/usr/src/noir-projects/noir-contracts/contracts/fpc_contract/src/lib.nr","source":"use dep::aztec::context::PublicContext;\n\npub fn compute_rebate(context: PublicContext, initial_amount: Field) -> Field {\n    let actual_fee = context.transaction_fee();\n    assert(!initial_amount.lt(actual_fee), \"Initial amount paid to the paymaster does not cover actual fee\");\n    initial_amount - actual_fee\n}\n"},"38":{"path":"std/option.nr","source":"use crate::hash::{Hash, Hasher};\nuse crate::cmp::{Ordering, Ord, Eq};\nuse crate::default::Default;\n\nstruct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some { self._value } else { default }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<let N: u32, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some { self } else { other }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some { self } else { default() }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some { Option::none() } else { self }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n\nimpl<T> Default for Option<T> {\n    fn default() -> Self {\n        Option::none()\n    }\n}\n\nimpl<T> Eq for Option<T> where T: Eq {\n    fn eq(self, other: Self) -> bool {\n        if self._is_some == other._is_some {\n            if self._is_some {\n                self._value == other._value\n            } else {\n                true\n            }\n        } else {\n            false\n        }\n    }\n}\n\nimpl<T> Hash for Option<T> where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher {\n        self._is_some.hash(state);\n        if self._is_some {\n            self._value.hash(state);\n        }\n    }\n}\n\n// For this impl we're declaring Option::none < Option::some\nimpl<T> Ord for Option<T> where T: Ord {\n    fn cmp(self, other: Self) -> Ordering {\n        if self._is_some {\n            if other._is_some {\n                self._value.cmp(other._value)\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other._is_some {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n"},"4":{"path":"std/cmp.nr","source":"// docs:start:eq-trait\ntrait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\nimpl Eq for Field { fn eq(self, other: Field) -> bool { self == other } }\n\nimpl Eq for u64 { fn eq(self, other: u64) -> bool { self == other } }\nimpl Eq for u32 { fn eq(self, other: u32) -> bool { self == other } }\nimpl Eq for u8 { fn eq(self, other: u8) -> bool { self == other } }\nimpl Eq for u1 { fn eq(self, other: u1) -> bool { self == other } }\n\nimpl Eq for i8 { fn eq(self, other: i8) -> bool { self == other } }\nimpl Eq for i32 { fn eq(self, other: i32) -> bool { self == other } }\nimpl Eq for i64 { fn eq(self, other: i64) -> bool { self == other } }\n\nimpl Eq for () { fn eq(_self: Self, _other: ()) -> bool { true } }\nimpl Eq for bool { fn eq(self, other: bool) -> bool { self == other } }\n\nimpl<T, let N: u32> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T] where T: Eq {\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3) & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\nstruct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n// docs:start:ord-trait\ntrait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v1 } else { v2 }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v2 } else { v1 }\n}\n\nmod cmp_tests {\n    use crate::cmp::{min, max};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"},"44":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    // Append each element of the `other` slice to the end of `self`.\n    // This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::unsafe::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T where T: Append {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"47":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\nuse crate::println;\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\nstruct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_be_bytes(8);\n        let hi = self.hi.to_be_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_le_bytes(8);\n        let hi = self.hi.to_le_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    fn decode_ascii(ascii: u8) -> Field {\n        if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (U128::uconstrained_check_is_upper_ascii(ascii) as u8);\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        } as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;  \n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi*b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo*b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo+self.hi)*(b.lo+b.hi) - low + carry\n        } else {\n            self.lo*b.hi + self.hi*b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        q\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        r\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n        \n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 { \n    fn not(self) -> U128 {\n        U128 {\n            lo: (!(self.lo as u64)) as Field,\n            hi: (!(self.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitOr for U128 { \n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 { \n    fn shl(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    } \n}\n\nimpl Shr for U128 { \n    fn shr(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    } \n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c= b.to_le_bytes(17);\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        let (q,r) = a.unconstrained_div(b);\n        assert_eq(q, c);\n        assert_eq(r, d);\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        let (c,d ) = a.unconstrained_div(b);\n        assert_eq((c, d), (a, U128::zero()));\n\n        // Check where b is a multiple of a\n        let (c,d) = b.unconstrained_div(a);\n        assert_eq((c, d), (U128::zero(), b));\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        let (c,d)= a.unconstrained_div(b);\n        assert_eq((c, d), (U128::zero(), U128::zero()));\n\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        let (c,d )= a.unconstrained_div(b);\n        assert_eq((c, d), (U128::one(), U128::zero()));\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"65":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/getters.nr","source":"use dep::protocol_types::{\n    header::Header, abis::validation_requests::KeyValidationRequest, address::AztecAddress,\n    constants::CANONICAL_KEY_REGISTRY_ADDRESS, point::Point, storage::map::derive_storage_slot_in_map,\n    traits::is_empty\n};\nuse crate::{\n    context::PrivateContext,\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX, TAGGING_INDEX}},\n    state_vars::{shared_mutable::shared_mutable_private_getter::SharedMutablePrivateGetter}\n};\n\nglobal DELAY = 5;\n\n// docs:start:key-getters\ntrait KeyGetters {\n  fn get_npk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_ivpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_ovpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_tpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_npk_m_hash(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Field;\n}\n\nimpl KeyGetters for Header {\n    fn get_npk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, NULLIFIER_INDEX, self)\n    }\n\n    fn get_ivpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, INCOMING_INDEX, self)\n    }\n\n    fn get_ovpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, OUTGOING_INDEX, self)\n    }\n\n    fn get_tpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, TAGGING_INDEX, self)\n    }\n\n    fn get_npk_m_hash(self, context: &mut PrivateContext, address: AztecAddress) -> Field {\n        get_master_key(context, address, NULLIFIER_INDEX, self).hash()\n    }\n}\n// docs:end:key-getters\n\nfn get_master_key(\n    context: &mut PrivateContext,\n    address: AztecAddress,\n    key_index: Field,\n    header: Header\n) -> Point {\n    let key = fetch_key_from_registry(context, key_index, address, header);\n    if is_empty(key) {\n        // Keys were not registered in registry yet --> fetch key from PXE\n        let keys = fetch_and_constrain_keys(address);\n        // Return the corresponding to index\n        keys.get_key_by_index(key_index)\n    } else {\n        // Keys were registered --> return the key\n        key\n    }\n}\n\nfn fetch_key_from_registry(\n    context: &mut PrivateContext,\n    key_index: Field,\n    address: AztecAddress,\n    header: Header\n) -> Point {\n    let x_coordinate_map_slot = key_index * 2 + 1;\n    let y_coordinate_map_slot = x_coordinate_map_slot + 1;\n    let x_coordinate_derived_slot = derive_storage_slot_in_map(x_coordinate_map_slot, address);\n    let y_coordinate_derived_slot = derive_storage_slot_in_map(y_coordinate_map_slot, address);\n\n    let x_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        x_coordinate_derived_slot\n    );\n    let y_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        y_coordinate_derived_slot\n    );\n    let x_coordinate = x_coordinate_registry.get_value_in_private(header);\n    let y_coordinate = y_coordinate_registry.get_value_in_private(header);\n\n    Point::new(x_coordinate, y_coordinate, false)\n}\n\n// Passes only when keys were not rotated - is expected to be called only when keys were not registered yet\nfn fetch_and_constrain_keys(address: AztecAddress) -> PublicKeys {\n    let (public_keys, partial_address) = get_public_keys_and_partial_address(address);\n\n    let computed_address = AztecAddress::compute(public_keys.hash(), partial_address);\n\n    assert(computed_address.eq(address));\n\n    public_keys\n}\n\n// A helper function since requesting nsk_app is very common\n// TODO(#6543)\npub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n"},"80":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/history/public_storage.nr","source":"use dep::protocol_types::{\n    constants::GENERATOR_INDEX__PUBLIC_LEAF_INDEX, hash::pedersen_hash, address::AztecAddress,\n    header::Header, utils::field::full_field_less_than\n};\nuse std::merkle::compute_merkle_root;\n\nuse crate::{context::PrivateContext, oracle::get_public_data_witness::get_public_data_witness};\n\ntrait PublicStorageHistoricalRead {\n    fn public_storage_historical_read(header: Header, storage_slot: Field, contract_address: AztecAddress) -> Field;\n}\n\nimpl PublicStorageHistoricalRead for Header { \n    fn public_storage_historical_read(self, storage_slot: Field, contract_address: AztecAddress) -> Field {\n        // 1) Compute the leaf slot by siloing the storage slot with the contract address\n        let public_value_leaf_slot = pedersen_hash(\n            [contract_address.to_field(), storage_slot],\n            GENERATOR_INDEX__PUBLIC_LEAF_INDEX\n        );\n\n        // 2) Get the membership witness of the slot\n        let witness = get_public_data_witness(\n            self.global_variables.block_number as u32,\n            public_value_leaf_slot\n        );\n\n        // 3) Extract the value from the witness leaf and check that the storage slot is correct\n        let preimage = witness.leaf_preimage;\n\n        // Here we have two cases. Code based on same checks in `validate_public_data_reads` in `base_rollup_inputs`\n        // 1. The value is the same as the one in the witness\n        // 2. The value was never initialized and is zero\n        let is_less_than_slot = full_field_less_than(preimage.slot, public_value_leaf_slot);\n        let is_next_greater_than = full_field_less_than(public_value_leaf_slot, preimage.next_slot);\n        let is_max = ((preimage.next_index == 0) & (preimage.next_slot == 0));\n        let is_in_range = is_less_than_slot & (is_next_greater_than | is_max);\n\n        let value = if is_in_range {\n            0\n        } else {\n            assert_eq(preimage.slot, public_value_leaf_slot, \"Public data slot doesn't match witness\");\n            preimage.value\n        };\n\n        // 4) Prove that the leaf exists in the public data tree. Note that `hash` returns not just the hash of the value\n        // but also the metadata (slot, next index and next slot).\n        assert(\n            self.state.partial.public_data_tree.root\n            == compute_merkle_root(preimage.hash(), witness.index, witness.path), \"Proving public value inclusion failed\"\n        );\n\n        value\n    }\n}\n"},"81":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr","source":"use std::merkle::compute_merkle_root;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::NoteInterface}\n};\n\ntrait ProveNullifierInclusion {\n    fn prove_nullifier_inclusion(header: Header, nullifier: Field);\n}\n\nimpl ProveNullifierInclusion for Header {\n    fn prove_nullifier_inclusion(self, nullifier: Field) {\n        // 1) Get the membership witness of the nullifier\n        let witness = get_nullifier_membership_witness(self.global_variables.block_number as u32, nullifier);\n\n        // 2) Check that the witness we obtained matches the nullifier\n        assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n\n        // 3) Compute the nullifier tree leaf\n        let nullifier_leaf = witness.leaf_preimage.hash();\n\n        // 4) Prove that the nullifier is in the nullifier tree\n        assert(\n            self.state.partial.nullifier_tree.root\n            == compute_merkle_root(nullifier_leaf, witness.index, witness.path), \"Proving nullifier inclusion failed\"\n        );\n        // --> Now we have traversed the trees all the way up to archive root and verified that the nullifier\n        //     was included in the nullifier tree.\n    }\n}\n\ntrait ProveNoteIsNullified {\n    fn prove_note_is_nullified<Note, N, M>(header: Header, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N, M>;\n}\n\nimpl ProveNoteIsNullified for Header {\n    // docs:start:prove_note_is_nullified\n    fn prove_note_is_nullified<Note, N, M>(self, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N, M> {\n        let nullifier = compute_siloed_nullifier(note, context);\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n    // docs:end:prove_note_is_nullified\n}\n"},"89":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\nstruct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<N>(self) -> [Field; N] {\n        let unpacked: [Field; N] = unpack_returns(self.packed_returns);\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, N>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"9":{"path":"std/compat.nr","source":"global BN254_MODULUS_BE_BYTES: [u8] = &[\n    48, 100, 78, 114, 225, 49, 160, 41, 184, 80, 69, 182, 129, 129, 88, 93, 40, 51, 232, 72, 121, 185, 112, 145, 67, 225, 245, 147, 240, 0, 0, 1\n];\n\npub fn is_bn254() -> bool {\n    crate::field::modulus_be_bytes() == BN254_MODULUS_BE_BYTES\n}\n"},"93":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    public_context::FunctionReturns, inputs::{PrivateContextInputs, PublicContextInputs}\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\ntrait CallInterface<N, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateStaticCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateStaticVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> T {\n        self.original\n    }\n}\n\nstruct PublicCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](PublicContextInputs) -> T,\n    is_static: bool\n}\n\nimpl<N, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> () {\n        self.original\n    }\n}\n\nstruct PublicVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<N, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> T {\n        self.original\n    }\n}\n\nstruct PublicStaticCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<N, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> () {\n        self.original\n    }\n}\n\nstruct PublicStaticVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<N, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"94":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, set_public_teardown_function_call_internal,\n    parse_public_call_stack_item_from_oracle\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    caller_context::CallerContext, function_selector::FunctionSelector,\n    max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_function_hash: Field,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    // TODO(#7112): This function is called with non-zero note hash only in 1 of 25 cases in aztec-packages repo\n    // - consider creating a separate function with 1 arg for the zero note hash case.\n    fn push_nullifier(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            public_teardown_function_hash: self.public_teardown_function_hash,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one \n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<M>(&mut self, randomness: Field, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<M>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.start_side_effect_counter, start_side_effect_counter);\n        let end_side_effect_counter = item.public_inputs.end_side_effect_counter;\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        let mut caller_context = CallerContext::empty();\n        caller_context.is_static_call = self.inputs.call_context.is_static_call;\n        if is_delegate_call {\n            caller_context.msg_sender = self.inputs.call_context.msg_sender;\n            caller_context.storage_contract_address = self.inputs.call_context.storage_contract_address;\n        }\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            target: item.contract_address,\n            call_context: item.public_inputs.call_context,\n            function_data: item.function_data,\n            args_hash: item.public_inputs.args_hash,\n            returns_hash: item.public_inputs.returns_hash,\n            caller_context,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(item.public_inputs.returns_hash)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_call_stack_hashes.push(item.get_compressed().hash());\n    }\n\n    pub fn set_public_teardown_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_teardown_function_hash = item.get_compressed().hash();\n    }\n\n    fn validate_call_stack_item_from_oracle(\n        self,\n        item: PublicCallStackItem,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"95":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::inputs::public_context_inputs::PublicContextInputs;\nuse crate::context::gas::GasOpts;\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs) -> Self {\n        PublicContext { inputs }\n    }\n\n    pub fn emit_unencrypted_log<T, N>(&mut self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0);\n    }\n\n    fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        assert(false, \"'delegate_call_public_function' not implemented!\");\n        FunctionReturns::new([0; RETURNS_COUNT])\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        // Cannot nullify pending commitments in AVM, so `nullified_commitment` is not used\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(self) -> AztecAddress {\n        sender()\n    }\n    fn selector(self) -> FunctionSelector {\n        FunctionSelector::from_u32(function_selector())\n    }\n    fn get_args_hash(self) -> Field {\n        self.inputs.args_hash\n    }\n    fn transaction_fee(self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(self) -> Field {\n        chain_id()\n    }\n    fn version(self) -> Field {\n        version()\n    }\n    fn block_number(self) -> Field {\n        block_number()\n    }\n    fn timestamp(self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(self) -> Field {\n        da_gas_left()\n    }\n\n    fn raw_storage_read<N>(_self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(storage_slot)\n    }\n\n    fn storage_read<T, N>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<N>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        storage_write(storage_slot, values);\n    }\n\n    fn storage_write<T, N>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    let MAX_POSSIBLE_FIELD: Field = 0 - 1;\n    [\n        user_gas.l2_gas.unwrap_or(MAX_POSSIBLE_FIELD),\n        user_gas.da_gas.unwrap_or(MAX_POSSIBLE_FIELD)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/6420): reconsider.\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\nunconstrained fn function_selector() -> u32 {\n    function_selector_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<RET_SIZE>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<RET_SIZE>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_opcode(storage_slot, N)\n}\n\nunconstrained fn storage_write<N>(storage_slot: Field, values: [Field; N]) {\n    storage_write_opcode(storage_slot, values);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(PublicContextInputs::empty())\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n#[oracle(avmOpcodeFunctionSelector)]\nunconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<RET_SIZE>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<RET_SIZE>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode<N>(storage_slot: Field, length: Field) -> [Field; N] {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode<N>(storage_slot: Field, values: [Field; N]) {}\n\nstruct FunctionReturns<N> {\n    values: [Field; N]\n}\n\nimpl<N> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn assert_empty(returns: FunctionReturns<0>) {\n        assert(returns.values.len() == 0);\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n"}}}