{"transpiled":true,"noir_version":"0.31.0+6237d96a0bc23a5ed656e7ba172fb57facd9c807","name":"Lending","functions":[{"name":"update_accumulator","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"interest_accumulator","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"loan_to_value","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"}},{"name":"oracle","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"asset::Asset"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"borrow_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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"},{"name":"deposit_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"on_behalf_of","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":""},{"name":"withdraw_private","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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"},{"name":"constructor","is_unconstrained":false,"custom_attributes":["aztec(private)","aztec(initializer)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"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","debug_symbols":"7Zhha+MwDIb/iz+XYUmWbPWvHMeRbd1RKOlYu4Oj9L/P6Won7czMFrZlZZ+Ck9fi8StFsbMzt4vrx79/lu3demPmv3Zmtb5ptst1G0c7A+5wb3PftN1ws20etmZuZ2bR3sbrfmbulquFmZPwfvZCRwGTlAJLVqvb/54Z4A+MLWNiI3GSIoVeDYgFNVjQoxosh15NekDxn4niMaMonaAU1CFQim2lj43Ol9RILsUm63q1lkjE81EcZKilgladpsjKTAMOezAwXIiBMDAQagYCuxQbvIOKumahTtdC6C30VQsdpLICxsEy1ZZMEfDJFOlWNjCl0FC8HMUOfO9ISeowB3ZI9LoYQ/YDg1bEYCXXSKyXoTimEe1PGi8hjfCTxktII35NGuMm43yPgTQKxdlkdkx0qKBgcJDUyjXwyocJ3XcF53HgmlGY5ASlCz5u98oaUnBBrlUWh1zjrHryEncofjooYToo4/ZTQvnVFw8VFJc7IQOcg5CdCghMBQSnAkIjy9X3IHjeIWhU3/SSuIP1lTWy2tSqWNEOz9klarK+b2x0fiwn/pbYIFflE5TkLuERXhz85aq8Ya/OgnfNwnfNojfOiqN/zcOyuV4tuj9E3cPH9ib9MIrD7f/75ydR+wQ="},{"name":"get_assets","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(view)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":2,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},"visibility":"public"}},"bytecode":"H4sIAAAAAAAC/+WYyY7TQBCG29lmiWNnnyxOnGTsJBInRoIjR468ArsQiOXAcIADEhcejqeiq6rLvz2ZseQRygVLjjvV/+f6u9rutJKYujGnDWOPhXFHzUZMYFr24tH5xGhLOo0XGE9DKXUylTqZqW/sx0XCdyZ5g5tMNqVJqhNp0nHa4ibdpmnPs8R4pDj3WHhOITrXpB3LN70hMeepylrS0cg6ahKkTs1wQteV/fAfGWewFtKdG/zZfGDcHchKy1lpNNlKS7vEOwFnqZbtxGQDIrsGQz3FUGlsz2DoxInb7JSG0AbWFs2ZNBn9grCiPqMk8IH6QH2HXiOsaIdREnSAdoB2HLpCWNGAURIEQAOggUPfI6xoyCgJQqAh0NChnxFWtMsoCbpAu0C7eDiKSFAd8f95Fjumlwgr2mOUBD2gPaA9h35EWNE+oyToA+0D7R8a7WdGSxCb7QfCig4YJcEA6ADowKFvEVZ0yCgJhkCHQIcOfYOwoiNGSTACOgI6ylaGX3gxuwwavI36+pHapPqK2js2DI4xpxoXU10IPJKm9oTZCseiKV7wmaxlM6efuwUkkrUsohCd7PinfNPhEhOlKpsgsXTUJEidmmFKV3o7r3O2bhh+7Okz6Kw0ZS2rY4mj5sPCWja+cy0bFdeyp8joVmYzYaeUewJsghmbOPQbwopOs0FOc8UFOsVsFpGwHLHZXiOs6IxRriHQGdDZYbZZtjRURILqSLs6ElZHOuWIrdw7hBWdMzqT51vROdD5YbZ5tgRURPxyxBp8jrCi8raQIAIaAY0Os0XZOlyC2GxfEVZ0wSgJFkAXQBeH2e6NDKoj/lGMdaoj0+pItzoSHmUs7aMY65Uj9vH8jrCiS0ZJsAS6BLo8zLbMylCC2GyvEFY0ZpQEMdAYaHyYLc6e7IpIpzoyrY50qyO9oyD3qNjwKEWOqiP+UeblHlmC//sZW5QjtI/1PmEbecXgLTvvuLDzjos77xWnWhVTrQWOpak9tE9dQ3SJ7WgiO+/E6VO33d3Kznvr0qfs+IN80+ESs01VtkFi6ahJkDo1wyVdrWHvRc7WDcPZzvsq4Z12/uAdOP/Hwkw9N+ysei1Ub13chK92NQd6KD0dm1xlpBwbNcvjpl+HhH25oy55WJZwBRIp8E3DPEFimOZphUTb2wxvi4aTnU5wzjA1d3C5s+eeXf6m1l0u9+xyTznwv9I+85DAw77oIVemPSaSRDueYUq9yzkTzV6d3YZsy5HUKJG68lhOnfH/ZayrX1Jz8ofOv9nSjH6QEwAA","debug_symbols":"5Z3dShxZFEbfpa9lqP3t8+urDMNgEjMIoiGagUHy7tPG7jZgT8Ii8yWUfSWt5xxqu1i0LIvqh827yzef/vrz6ub97d3m/PeHzfXt24v7q9ub7auHzfKb8st37z5c3Dx+4+7+4uP95nw521zevNt+/Xy2eX91fbk5z1Y/n71YN2vdrZy9H9aGdGRtib5fXGKUw+p57OCm7LvFTTW/XvzH2eNllx+57FhSu6Wx1PJTL7z+0O97xvN11+9cd0SU/eroy7evu5fDkL3GeHndzXTdT6d36+nDevp0np6L9fSwni7r6Wk9vVhPr9bTra6m1dW0uppWV4vV1WJ1tVhdLVZXi9XVYnW1WF0tVleL1dVidbVaXa1WV6vV1Wp1tVpdrVZXq9XVanW1Wl2tVleb1dVmdbVZXW1WV5vV1WZ1tVldbVZXm9XVZnW1W13tVle71dVudbVbXe1WV7vV1W51tVtd7VZXh9XVYXV1WF0dVleH1dVhdXVYXR1WV4fV1WF1dVpdnVZXp9XVaXV1Wl2dVlen1dVpdXVaXZ1WV2NZvMeH93h5j0/v8cV7fPUe37zHd+/xw3u819rwWhtea8NrbXitDa+14bU2vNaG19rwWhtea+W1Vl5r5bVWXmvltVZea723NIX3nqbw3tQU5K6mpx3kTqXdjsA7hHck3lHwjop3NLyj4x0D78DMC2ZeMPOCmRfMvGDmBTMvmHnBzAtmXjDziplXzLxi5hUzr5h5xcwrZl4x84qZV8y8YeYNM2+YecPMG2beMPOGmTfMvGHmDTPvmHnHzDtm3jHzjpl3zLxj5h0z75h5x8wHZj4w84GZD8x8YOYDMx+Y+cDMB2Y+MPOJmU/MfGLmEzOfmPnEzCdmPjHziZlPylzLgncE3iG8I/GOgndUvKPhHR3vGHgHZh6YeWDmgZkHZh6YeWDmgZkHZh6YeWDmwsyFmQszF2YuzFyYuTBzYebCzHGHE+5wwh1OuMMJdzjhDifc4YQ7nHCHE+5wwh1OuMMJdzjhDifc4YQ7nHCHE+5wwh1OuMMJdzjhDifc4YQ7nHCHE+5wwh1OuMMJdzjhDifc4YQ7nHCHE+5wwh1OuMMJdzjhDifc4YQ7nHCHE+5wwh1OuMMJdzjhDifc4YQ7nHCHE+5wwh1OuMMJdzjhDifc4YQ7nHCHE+5wwh1OuMMJdzjhDifc4YQ7nHCHE+5wwh1OuMMJdzjhDifc4RJ3uMQdLnGHS9zhEne4xB0ucYdL3OESd7jEHS5xh0vc4RJ3uMQdLnGHS9zhEne4xB0ucYdL3OESd7jEHS5xh0vc4RJ3uMQdLnGHS9zhEne4xB0ucYdL3OESd7jEHS5xh0vc4RJ3uMQdLnGHS9zhEne4xB0ucYdL3OESd7jEHS5xh0vc4RJ3uMQdLnGHS9zhEne4xB0ucYdL3OESd7jEHS5xh0vc4RJ3uMQdLnGHS9zhEne4PN7hIpbnG8rjy+NIv9p57AGsvR+WKw6ro7Qjq+v2PWi3umabh9VHH2RaY+Z+8fY/pt9ePOqyv45Ry8untebxJPh6xx2nNe48qXGPl+TXO26c1rj6FePGPIz7vUdMR7Tno3s7LN6Wz/0Iuf4RyvpHqOsfoa1/hL7+Ecb6R/iPvxBCz4/Wj7q8lveQEac1rk5r3DytcctpjVtPa9z2K8b9X99cRl//CGP9I8zVjzCX9Y8Qax5h++rvi49XF2+uLx8/V+vxh59u3u4/Zmv78v6fD08/2a79Fw=="},{"name":"get_position","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(view)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"collateral","type":{"kind":"field"}},{"name":"static_debt","type":{"kind":"field"}},{"name":"debt","type":{"kind":"field"}}],"kind":"struct","path":"position::Position"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"get_asset","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(view)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"asset_id","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"interest_accumulator","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"loan_to_value","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"}},{"name":"oracle","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"asset::Asset"},"visibility":"public"}},"bytecode":"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","debug_symbols":"5Zzdjl3FFYTfZa6taPf6625eJYoiB0xkCdkIm0gR4t0zkDljIx+xKcEK+4uvYOzuZq0plcrUHH8/PHz16h/f//Pvr998/fbdwxd//eHhm7dfvnz/+u2bx69+eDj+MurnX3337cs3P/3Cu/cvv3v/8MXx4uHVm68e//nji4evX3/z6uELr/zxxSfndubTyT3n89lhdudsjHk7HGPF8+l97+Eyn0+Hy9I/Pvy3Fz+NPX/P2ONwezo6joz/6eDrd32/9/gwd57MPcaI2+kxj1+fe8bzkjPH+nTu3TT3z6/b0fr6aH3dWl/31tej9fVsfb1aX5+tr6/W11u96q1e9VaveqtXvdWr3upVb/Wqt3rVW73qrV71Vq9Gq1ej1avR6tVo9Wq0ejVavRqtXo1Wr0arV6PVq9nq1Wz1arZ6NVu9mq1ezVavZqtXs9Wr2erVbPVqtXq1Wr1arV6tVq9Wq1er1avV6tVq9Wq1erVavTpbvTpbvTpbvTpbvTpbvTpbvTpbvTpbvTpbvTpbvbpavbpavbpavbpavbpavbpavbpavbpavbpavbpavbpbvbpbvbpbvbpbvbpbvbpbvbpbvbpbvbpbvbpbvTqOo/f50fu89T7vvc9H7/PZ+3z1Pj97n1+9z/e6dvS6dvS6dvS6dvS6dvS6dvS6dvS6dvS6dvS6tvezTKP3w0yj99NMQ/k409MNl2+EfCPlGyXfmPKNJd/Y6g3l4zZPN4Z8Q9bcZc1d1txlzV3W3GXNXdbcZc1D1jxkzUPWPGTNQ9Y8ZM1D1jxkzUPWPGTNU9Y8Zc1T1jxlzVPWPGXNU9Y8Zc1T1jxlzUvWvGTNS9a8ZM1L1rxkzUvWvGTNS9a8ZM2nrPmUNZ+y5lPWfMqaT1nzKWs+Zc2nrPmUNV+y5kvWfMmaL1nzJWu+ZM2XrPmSNV+y5kvWfMuab1nzLWu+Zc23rPmWNd+y5lvWfMuab1VzOw75xpBvmHzD5Rsh30j5Rsk3pnxjyTdkzYes+ZA1H7LmQ9Z8yJoPWfMhaz5kzYes+ZA1N1lzkzWXeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziTeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXeziXezi/38ONI57RqY//vuwXN+98bNvX0+m9PsA5R8Q97mfe5nn8offz2ccfedx7N/aNEbrzI1zpY/V9mz/h8xd8/gmff8Hn3+z57zfVoPkNPr/D54fnV8Hzq+D5VfD8Knh+FTy/7v+cDjQ/PH/nH5K/4yi/HR92nGxw//+nPj03j9t3ZdpHf5c16jZ7gGdP8OwFnn2CZ1/g2Td39nWAZx/g2cHZtBw8OzhXFzhXFzhXFzhXFzhXFzhXNzhXNzhXNzhXNzhXNzhXNzhXNzhXNzhXNzhXNzdX4+DmahzcXI2Dm6txcHM1Dm6uxsHN1Ti4uRoHN1fj4OZqHOBcHeBcHeBcHeBcHeBcHeBcHeBcHeBcHeBcHeBcHeBcNXCuGjhXDZyrBs5VA+eqgXPVwLlq4Fw1cK4aOFcdnKsOzlUH56qDc9XBuergXHVwrjo4Vx2cqw7O1QDnaoBzNcC5GuBcDXCuBjhXA5yrAc7VAOdqgHM1wbma4FxNcK4mOFf/GHbQnzQ7OFcTnKsJztUE52qCc7XAuVrgXC1wrhY4V/8YptGfNDs4VwucqwXO1QLnaoFzdYJzdYJzFcwsignOVTBvKcC8pQDzlgLMWwowbynAvKUA85YCzFsKMG8pwLylAPOWAsxbCjBvKcC8pQDzlgLMWwowbynAvKUA85YCzFsKMG8pwLylAPOWAsxbCjBvKcC8pQTzlhLMW0owbynBvKU8uLmaYN5SgnlLCeYtJZi3lGDeUoJ5SwnmLSWYt5Rg3lKCeUsJ5i0lmLeUYN5SgnlLCeYtJZi3lGDeUoJ5SwnmLSWYt5Rg3lKCeUsJ5i0lmLeUYN5SgnlLCeYtJZi3lGDeUoJ5SwnmLSWYt5Rg3lKCeUsJ5i0lmLeUYN5SgnlLCeYtJZi3lGDeUoJ5SwnmLSWYt5Rg3lKCeUsJ5i0lmLeUYN5SgnlLCeYtJZi3lGDeUoJ5SwnmLSWYt5Rg3lKCeUsJ5i0lmLeUYN5SgnlLCeYtJZi3lGDeUoJ5SwnmLSWYt5Rg3lKCeUsJ5i0lmLeUYN5SgnlLCeYtJZi3lGDeUoJ5SwnmLSWYt5Rg3lKCeUsJ5i0lmLeUYN5SgnlLCeYtJZi3lGDeUoJ5SwnmLSWYt5Rg3lKCeUsJ5i0VmLdUYN5SgXlLBeYt1cHN1QLzlgrMWyowb6nAvKUC85YKzFsqMG+pwLylAvOWCsxbKjBvqcC8pQLzlgrMWyowb6nAvKUC85YKzFsqMG+pwLylAvOWCsxbKjBvqcC8pQLzlgrMWyowb6nAvKUC85YKzFsqMG+pwLylAvOWCsxbKjBvqcC8pQLzlgrMWyowb6nAvKUC85YKzFsqMG+pwLylAvOWCsxbKjBvqcC8pQLzlgrMW6rfxlvap7PP+WH28Yv/zqen0z2eTqfXh7f3vadz7Nu3JW2cHF553OZYGf7x4ad15+e17vq81t2f1bq/jb/0/7Pu+LzWtT9j3bGf153Hr28w/LgdHj7WR4PM2wrOXyH4KyR/heKvMPkrrMuvYPG8gvu9FTZ+hXnwVxj8Fa6fzqcrXD+dT1e4fjqfrnD9dK7np33WvRWun86nK1w/nU9XuH46n65w/XQ+W2FdP51PV7h+Op+ucP10/miFdS8X1vXT+XSF66fz6QqXT+f48AeMuPsHjHX5dD5f4fLpfL7C5dP5fIXLp/PpCvvy6Xy+wuXT+XyFy6dz+HMVFnGvCtuXT+fzFS6fzucrXD+dT1e4fjqfrnD9dD5d4frpfLrC9dN53z6KMh5/9vnpCvO4fjqfrnD9dD5d4frpfLrC9dP5dIXrp/PpCtdP519Z4fGrf7387vXLf3zz6t3jnZ9+8/s3X75//fbN05fv//3tf3/n8ex/AA=="},{"name":"_deposit","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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"},{"name":"deposit_private","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"on_behalf_of","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"repay_private","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"on_behalf_of","type":{"kind":"field"},"visibility":"private"},{"name":"stable_coin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":""},{"name":"_borrow","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":""},{"name":"init","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"oracle","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"loan_to_value","type":{"kind":"field"},"visibility":"private"},{"name":"collateral_asset","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"stable_coin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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"},{"name":"withdraw_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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"},{"name":"_withdraw","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":"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2rE1tGNraMfW0I6tv2hLkpH/gdQ96Vb2mLrSU1Z6FF3pVVe66UpvutJdV3rXlT50peumaeimaeim6dRN06mbplM3Tadumk7dNJ26aTp103TqpunUTdOpm6apm6apm6apm6apm6apm6apm6apm6apm6apm6Ypm6ZeZNPUi2yaepFNUy+yaepFNk29yKapF9k09SKbpl5k09SLbppW3TStumladdO06qZp1U3TqpumVTdNq26aVt00rbpparpparpparpparpparpparpparpparpparpparpp2nTTtOmmadNN06abpk03TZtumjbdNG26adp007TppqnrpqnrpqnrpqnrpqnrpqnrpqnrpqnrpqnrpqnrpmnXTdOum6ZdN027bpp+ooDoLOm6adp107TrpmnXTdOum6ZDN02HbpoO3TQdumn6iV6ks6TrpunQTVPdLiTX7UJy3S4k1+1Cct0uJNftQnLdLiTX7UJy3S4k1+1Cct0uJNftQnLdLiTX7UJy3S4k1+1Cct0uJNftQnLdLiTX7UJy3S4k1+1Cct0uJNftQnLdLiTX7UJy3S4k1+1Cct0uJNftQnLdLiTX7UJy3S6krtuF1HW7kLpuF1LX7ULqRTZNu24XUtftQuq6XUhdtwup63Yhdd0upK7bhdR1u5C6bhdS1+1C6rpdSF23C6nrdiF13S6krtuF1HW7kLpuF1LX7ULqul1IXbcLqet2IXXdLqSu24XUdbuQum4XUtftQuq6XUhdtwup63Yhdd0upK7bhdR1u5C6bhdS1+1C6rpdSF23C6nrdiF13S6krtuF1HW7kLpuF1LX7ULqul1IXbcLqet2IXXdLqSu24XUdbuQum4XUtftQuq6XUhdtwup63Yhdd0upK7bhdR1u5C6bhdS1+1C6rpdSF23C6nrdiF13S6krtuF1HW7kLpuF1LX7ULqul1IXbcLqet2IXXdLqSu24XUdbuQum4XUtftQuq6XUhdtwup63Yhdd0upK7bhdR1u5C6bhdS1+1C6rpdSF23C6nrdiF13S6krtuF1HW7kLpuF1LX7ULqul1IXbcLqet2IXXdLqSu24U0dLuQhm4X0tDtQhq6XUijyKbp0O1CGrpdSEO3C2nodiEN3S6koduFNHS7kIZuF9LQ7UIaul1IQ7cLaeh2IQ3dLqSh24U0dLuQhm4X0tDtQhq6XUhDtwtp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sHutq6ofVTb+gN1rXVX9qLLxB+xe66rqR5WNP2D3WldVP6ps/AG717qq+lFl4w/YvdZV1Y8qG3/A7rWuqn5U2fgDdq91VfWjysYfsHutq6ofVTb+gN1rXVX9qLLxB+xe66rqR5WNP2D3WldVP6ps/AG717qqGte6qvpR3eoP2PVr2b3WVdWP6lZ/wO61rqp+VLf6A3avdVX1w7rVD+1e66rqWt3q7Vrd6u1a3ertWt3q7Vrd6u1a3ertWt3q7Vrd6u1a3ertWt3q7Vrd6u1a3ertWt3q7Vrd6u1a3ertWt3q7Vrd6u1a3ertWt3q7Vrd6u1a3ertWt3q7Vrd6u1a3ertWt3q7Vrd6u1a3ertWt3qfq1udb9Wt7pfq1vdr9Wt7sWvZfdSV1V+rW51v1a3ul+rW92v1a3u1+pW92t1q/u1utX9Wt3qfq1udb9Wt7pfq1vdr9Wt7tfqVvdrdav7tbrV/Vrd6n6tbnW/Vre6X6tb3a/Vre7X6lb3a3Wr+7W61f1a3ep+rW51v1a3ul+rW92v1a3uWt3q+fd2fWb/9WLPfbtSV1VHdtPmZrfNPbtSV1Xv25W6qjq0G2WzG7t2pa6qDu2O3OzO2LMrdVV1YLeXen9xL+Y7drW61Z+x22zPrtRV1aHdXje7Y9eu1FXV+3alrqoO7c652c09Mmt1q79v9yddVT1g9yddVT1g9yddVT1g9yddVT1g92ddVR3Z1epWf9/uz7qqOrT7s66qDu1e66pKq1v9fbvXuqrS6lZ/3+61rqq0utXft3utqyqtbvX37V7rqkqrW/19u9e6qtLqVn/f7rWuqrS61d+3e62rKq1u9fftXuuqSqtb/X2717qq0upWf9/uta6qtLrV37d7rasqrW719+1e66pKq1v9fbvXuqrS6lZ/3+61rqq0utXft3utqyqtbvX37V7rqkqrW/19u9e6qtLqVn/f7rWuqrS61d+3e62rKq1u9fftXuuqSqtb/X2717qq0upWf9/uta6qtLrV37d7qauqrtWt/r7dS11Vda1u9fftXuqqqhe/lt1LXVV1rW719+1e6qqqa3Wrv2/3WldVWt3q79u91lWVVrf6+3avdVWl1a3+vt1rXVVpdau/b/daV1Va3erv273WVZVWt/r7dq91VaXVrf6+3WtdVWl1q79v91pXVVrd6u/bvdZVlVa3+vt2r3VVpdWt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ionPFROfKyY+V0x8rpj4XDHxuWDiRykrDqkrDrEVh7QVh/iKQ/qKQ8aKQ2LFIXPFISsmvq6Y+Lpi4uuKia8rJr6umPi6YuLriomvKya+rpj4umLibcXE24qJtxUTbysm3lZMvK2YeFsx8bZi4m3FxNuKiW8rJr6tmPi2YuLbiolvKya+rZj4tmLi24qJbysmvq2YeF8x8b5i4n3FxPuKifcVE+8rJt5XTLyvmHhfMfG+YuL7ionvKya+r5j4vmLi+4qJ7ysmvq+Y+L5i4vuKie8rJn6smPixYuLHiolf8czdWPHM3VjxzN1Y8czdWPHM3VjxzN1Y8czdWPHM3VjxzN1Y8czdWPHM3VjxzN1Y8czdWPHM3VjxzN1Y8czdWPHM3VjxzN1Y8czdWPHM3VjxzN1Y8czdWPHM3VjxzN1Y8czdWPHM3VjxzN1Y8czdWPHM3VjxzN1Y8czdWPHM3VjxzN1Y8czdWPHM3VjxzN1Y8cxdrHjmLlY8cxcrnrmLFc/cRfEVh/QVh4wVh8SKQ+aKQ1ZM/Ipn7mLFM3ex4pm7WPHMXax45i5WPHMXK565ixXP3MWKZ+5ixTN3seKZu/iLZ+5q9a9DDuqzusV9079b+t4h9tFDWql7h7T3D2m21Qm0VvYO8RWH9A8cMtp2SNjeIeMTh9h2yNw9JN4/xMvmxGvsHTI/e4iNvUPyA4d43w7pe4f8xTN3Hz7kAxPvc3vjPffe+GYrDmkrDvEVh/QVh4wVh8SKQ+aKQ3LBIV5WHLJi4n3FxPuKifcVE+8rJt5XTLyvmHhfMfG+YuL7ionvKya+r5j4vmLi+4qJ7ysmvq+Y+L5i4vuKie8rJn6smPixYuLHiokfKyZ+rJj4sWLix4qJHysmfqyY+LFi4mPFxMeKiY8VEx8rJj5WTHysmPhYMfGxYuJjxcTHiomfKyZ+rpj4uWLi54qJnysmfq6Y+Lli4ueKiZ8rJn6umPhcMfG5YuJzxcTnionPFROfKyY+V0x8rpj4XDHxuWDiZykrDqkrDrEVh7QVh/iKQ/qKQ8aKQ2LFIXPFISsmvq6Y+Lpi4uuKia8rJr6umPi6YuLriomvKya+rpj4umLibcXE24qJtxUTbysm3lZMvK2YeFsx8bZi4m3FxNuKiW8rJn7FM3dzxTN3c8Uzd3PFM3dzxTN3c8Uzd3PFM3dzxTN3c8Uzd3PFM3dzxTN3c8Uzd3PFM3dzxTN3c8Uzd3PFM3dzxTN3c8Uzd3PFM3dzxTN3c8Uzd3PFM3dzxTN3c8Uzd3PFM3dzxTN3c8Uzd3PFM3dzxTN3c8Uzd3PFM3dzxTN3c8Uzd3PFM3dzxTN3c8Uzd3PFM3dzxTN3c8Uzd3PFM3dzxTN3c8Uzd3PFM3dzxTN3c8Uzd3PFM3dzxTN3c8Uzd3PFM3dzxTN3c8Uzd3PFM3dzxTN3c8Uzd3PFM3dzxTN3c8Uzd3PFM3dzxTN3c8Uzd3PFM3dzxTN3c8Uzd3PFM3dzxTN3c8Uzd3PFM3dzxTN3c8Uzd7nimbtc8cxdfvMzd7f/5f/65//jX/75f/rP/+m/3n7kH/+///Nf/+d/+5f/8q+//td/+7//9//+/7m99v8F"},{"name":"borrow_private","is_unconstrained":false,"custom_attributes":["aztec(private)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::context::inputs::private_context_inputs::PrivateContextInputs"},"visibility":"private"},{"name":"secret","type":{"kind":"field"},"visibility":"private"},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"}],"return_type":{"abi_type":{"fields":[{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"min_revertible_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"is_fee_payer","type":{"kind":"boolean"}},{"name":"max_block_number","type":{"fields":[{"name":"_opt","type":{"fields":[{"name":"_is_some","type":{"kind":"boolean"}},{"name":"_value","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"std::option::Option"}}],"kind":"struct","path":"aztec::protocol_types::abis::max_block_number::MaxBlockNumber"}},{"name":"note_hash_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"nullifier_read_requests","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::read_request::ReadRequest"}}},{"name":"key_validation_requests_and_generators","type":{"kind":"array","length":16,"type":{"fields":[{"name":"request","type":{"fields":[{"name":"pk_m","type":{"fields":[{"name":"x","type":{"kind":"field"}},{"name":"y","type":{"kind":"field"}},{"name":"is_infinite","type":{"kind":"boolean"}}],"kind":"struct","path":"std::embedded_curve_ops::EmbeddedCurvePoint"}},{"name":"sk_app","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request::KeyValidationRequest"}},{"name":"sk_app_generator","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::validation_requests::key_validation_request_and_generator::KeyValidationRequestAndGenerator"}}},{"name":"note_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::note_hash::NoteHash"}}},{"name":"nullifiers","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::nullifier::Nullifier"}}},{"name":"private_call_requests","type":{"kind":"array","length":4,"type":{"fields":[{"name":"target","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"call_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"function_selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_delegate_call","type":{"kind":"boolean"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::call_context::CallContext"}},{"name":"function_data","type":{"fields":[{"name":"selector","type":{"fields":[{"name":"inner","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::function_selector::FunctionSelector"}},{"name":"is_private","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::function_data::FunctionData"}},{"name":"args_hash","type":{"kind":"field"}},{"name":"returns_hash","type":{"kind":"field"}},{"name":"caller_context","type":{"fields":[{"name":"msg_sender","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"storage_contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::protocol_types::abis::caller_context::CallerContext"}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::private_call_request::PrivateCallRequest"}}},{"name":"public_call_stack_hashes","type":{"kind":"array","length":16,"type":{"kind":"field"}}},{"name":"public_teardown_function_hash","type":{"kind":"field"}},{"name":"l2_to_l1_msgs","type":{"kind":"array","length":2,"type":{"fields":[{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"content","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message"}}},{"name":"start_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"end_side_effect_counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"note_encrypted_logs_hashes","type":{"kind":"array","length":16,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"note_hash_counter","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::NoteLogHash"}}},{"name":"encrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}},{"name":"randomness","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::EncryptedLogHash"}}},{"name":"unencrypted_logs_hashes","type":{"kind":"array","length":4,"type":{"fields":[{"name":"value","type":{"kind":"field"}},{"name":"counter","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"length","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::log_hash::LogHash"}}},{"name":"historical_header","type":{"fields":[{"name":"last_archive","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"content_commitment","type":{"fields":[{"name":"num_txs","type":{"kind":"field"}},{"name":"txs_effects_hash","type":{"kind":"field"}},{"name":"in_hash","type":{"kind":"field"}},{"name":"out_hash","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::content_commitment::ContentCommitment"}},{"name":"state","type":{"fields":[{"name":"l1_to_l2_message_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"partial","type":{"fields":[{"name":"note_hash_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"nullifier_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}},{"name":"public_data_tree","type":{"fields":[{"name":"root","type":{"kind":"field"}},{"name":"next_available_leaf_index","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot"}}],"kind":"struct","path":"aztec::protocol_types::partial_state_reference::PartialStateReference"}}],"kind":"struct","path":"aztec::protocol_types::state_reference::StateReference"}},{"name":"global_variables","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"block_number","type":{"kind":"field"}},{"name":"timestamp","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"coinbase","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::eth_address::EthAddress"}},{"name":"fee_recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"gas_fees","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}}],"kind":"struct","path":"aztec::protocol_types::abis::global_variables::GlobalVariables"}},{"name":"total_fees","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::header::Header"}},{"name":"tx_context","type":{"fields":[{"name":"chain_id","type":{"kind":"field"}},{"name":"version","type":{"kind":"field"}},{"name":"gas_settings","type":{"fields":[{"name":"gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"teardown_gas_limits","type":{"fields":[{"name":"da_gas","type":{"kind":"integer","sign":"unsigned","width":32}},{"name":"l2_gas","type":{"kind":"integer","sign":"unsigned","width":32}}],"kind":"struct","path":"aztec::protocol_types::abis::gas::Gas"}},{"name":"max_fees_per_gas","type":{"fields":[{"name":"fee_per_da_gas","type":{"kind":"field"}},{"name":"fee_per_l2_gas","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_fees::GasFees"}},{"name":"inclusion_fee","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::abis::gas_settings::GasSettings"}}],"kind":"struct","path":"aztec::protocol_types::transaction::tx_context::TxContext"}}],"kind":"struct","path":"aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs"},"visibility":"public"}},"bytecode":"","debug_symbols":"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"},{"name":"repay_public","is_unconstrained":true,"custom_attributes":["aztec(public)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"stable_coin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"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","debug_symbols":"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"},{"name":"_repay","is_unconstrained":true,"custom_attributes":["aztec(public)","aztec(internal)"],"abi":{"error_types":{},"parameters":[{"name":"inputs","type":{"fields":[{"name":"args_hash","type":{"kind":"field"}},{"name":"is_static_call","type":{"kind":"boolean"}}],"kind":"struct","path":"aztec::context::inputs::public_context_inputs::PublicContextInputs"},"visibility":"private"},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"amount","type":{"kind":"field"},"visibility":"private"},{"name":"stable_coin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"}],"return_type":null},"bytecode":"","debug_symbols":""},{"name":"compute_note_hash_and_optionally_a_nullifier","is_unconstrained":true,"custom_attributes":[],"abi":{"error_types":{},"parameters":[{"name":"contract_address","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"},"visibility":"private"},{"name":"nonce","type":{"kind":"field"},"visibility":"private"},{"name":"storage_slot","type":{"kind":"field"},"visibility":"private"},{"name":"note_type_id","type":{"kind":"field"},"visibility":"private"},{"name":"compute_nullifier","type":{"kind":"boolean"},"visibility":"private"},{"name":"serialized_note","type":{"kind":"array","length":3,"type":{"kind":"field"}},"visibility":"private"}],"return_type":{"abi_type":{"kind":"array","length":4,"type":{"kind":"field"}},"visibility":"public"}},"bytecode":"","debug_symbols":""}],"outputs":{"globals":{"notes":[{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003e93e0ef"},{"kind":"string","value":"TransparentNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000edf2744b"},{"kind":"string","value":"TokenNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"000000000000000000000000000000000000000000000000000000003e93e0ef"},{"kind":"string","value":"TransparentNote"}],"kind":"tuple"},{"fields":[{"kind":"integer","sign":false,"value":"00000000000000000000000000000000000000000000000000000000edf2744b"},{"kind":"string","value":"TokenNote"}],"kind":"tuple"}],"storage":[{"fields":[{"name":"assets","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"admin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"minters","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"total_supply","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"pending_shields","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}},{"name":"public_balances","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000006"}}],"kind":"struct"}},{"name":"symbol","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000007"}}],"kind":"struct"}},{"name":"name","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000008"}}],"kind":"struct"}},{"name":"decimals","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000009"}}],"kind":"struct"}}],"kind":"struct"},{"fields":[{"name":"collateral_asset","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000001"}}],"kind":"struct"}},{"name":"stable_coin","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000002"}}],"kind":"struct"}},{"name":"assets","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000003"}}],"kind":"struct"}},{"name":"collateral","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000004"}}],"kind":"struct"}},{"name":"static_debt","value":{"fields":[{"name":"slot","value":{"kind":"integer","sign":false,"value":"0000000000000000000000000000000000000000000000000000000000000005"}}],"kind":"struct"}}],"kind":"struct"}]},"structs":{"functions":[{"fields":[{"name":"parameters","type":{"fields":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"field"}}],"kind":"struct","path":"Lending::withdraw_public_parameters"}}],"kind":"struct","path":"Lending::withdraw_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"field"}}],"kind":"struct","path":"Lending::_borrow_parameters"}}],"kind":"struct","path":"Lending::_borrow_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"amount","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}},{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"stable_coin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Lending::repay_public_parameters"}}],"kind":"struct","path":"Lending::repay_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"oracle","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"loan_to_value","type":{"kind":"field"}},{"name":"collateral_asset","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"stable_coin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Lending::init_parameters"}}],"kind":"struct","path":"Lending::init_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"on_behalf_of","type":{"kind":"field"}},{"name":"stable_coin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Lending::repay_private_parameters"}}],"kind":"struct","path":"Lending::repay_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"recipient","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"field"}}],"kind":"struct","path":"Lending::_withdraw_parameters"}}],"kind":"struct","path":"Lending::_withdraw_abi"},{"fields":[{"name":"return_type","type":{"fields":[{"name":"interest_accumulator","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"loan_to_value","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"}},{"name":"oracle","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"asset::Asset"}}],"kind":"struct","path":"Lending::update_accumulator_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"secret","type":{"kind":"field"}},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"field"}}],"kind":"struct","path":"Lending::borrow_private_parameters"}}],"kind":"struct","path":"Lending::borrow_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"field"}}],"kind":"struct","path":"Lending::borrow_public_parameters"}}],"kind":"struct","path":"Lending::borrow_public_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Lending::get_position_parameters"}},{"name":"return_type","type":{"fields":[{"name":"collateral","type":{"kind":"field"}},{"name":"static_debt","type":{"kind":"field"}},{"name":"debt","type":{"kind":"field"}}],"kind":"struct","path":"position::Position"}}],"kind":"struct","path":"Lending::get_position_abi"},{"fields":[{"name":"return_type","type":{"kind":"array","length":2,"type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}}],"kind":"struct","path":"Lending::get_assets_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"field"}},{"name":"collateral_asset","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Lending::_deposit_parameters"}}],"kind":"struct","path":"Lending::_deposit_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"from","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}},{"name":"secret","type":{"kind":"field"}},{"name":"on_behalf_of","type":{"kind":"field"}},{"name":"collateral_asset","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Lending::deposit_private_parameters"}}],"kind":"struct","path":"Lending::deposit_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"owner","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"field"}},{"name":"stable_coin","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Lending::_repay_parameters"}}],"kind":"struct","path":"Lending::_repay_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"secret","type":{"kind":"field"}},{"name":"to","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}},{"name":"amount","type":{"kind":"field"}}],"kind":"struct","path":"Lending::withdraw_private_parameters"}}],"kind":"struct","path":"Lending::withdraw_private_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"asset_id","type":{"kind":"field"}}],"kind":"struct","path":"Lending::get_asset_parameters"}},{"name":"return_type","type":{"fields":[{"name":"interest_accumulator","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"}},{"name":"last_updated_ts","type":{"kind":"integer","sign":"unsigned","width":64}},{"name":"loan_to_value","type":{"fields":[{"name":"lo","type":{"kind":"field"}},{"name":"hi","type":{"kind":"field"}}],"kind":"struct","path":"std::uint128::U128"}},{"name":"oracle","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"asset::Asset"}}],"kind":"struct","path":"Lending::get_asset_abi"},{"fields":[],"kind":"struct","path":"Lending::constructor_abi"},{"fields":[{"name":"parameters","type":{"fields":[{"name":"amount","type":{"kind":"field"}},{"name":"nonce","type":{"kind":"field"}},{"name":"on_behalf_of","type":{"kind":"field"}},{"name":"collateral_asset","type":{"fields":[{"name":"inner","type":{"kind":"field"}}],"kind":"struct","path":"aztec::protocol_types::address::aztec_address::AztecAddress"}}],"kind":"struct","path":"Lending::deposit_public_parameters"}}],"kind":"struct","path":"Lending::deposit_public_abi"}]}},"file_map":{"112":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/note/utils.nr","source":"use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    constants::GENERATOR_INDEX__INNER_NOTE_HASH,\n    hash::{\n    pedersen_hash, compute_unique_note_hash, compute_siloed_note_hash as compute_siloed_note_hash,\n    compute_siloed_nullifier as compute_siloed_nullifier_from_preimage\n},\n    utils::arr_copy_slice\n};\n\npub fn compute_inner_note_hash_from_preimage(storage_slot: Field, note_content_hash: Field) -> Field {\n    pedersen_hash(\n        [storage_slot, note_content_hash],\n        GENERATOR_INDEX__INNER_NOTE_HASH\n    )\n}\n\nfn compute_inner_note_hash<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    compute_inner_note_hash_from_preimage(header.storage_slot, note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N, M>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N, M> {\n    let header = note_with_header.get_header();\n    let (_, inner_nullifier) = note_with_header.compute_note_hash_and_nullifier(context);\n\n    compute_siloed_nullifier_from_preimage(header.contract_address, inner_nullifier)\n}\n\nfn compute_note_hash_for_read_request_from_innter_and_nonce(\n    inner_note_hash: Field,\n    nonce: Field\n) -> Field {\n    // TODO(#1386): This if-else can be nuked once we have nonces injected from public\n    if (nonce == 0) {\n        // If nonce is zero, that means we are reading a public note.\n        inner_note_hash\n    } else {\n        compute_unique_note_hash(nonce, inner_note_hash)\n    }\n}\n\npub fn compute_note_hash_for_read_request<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let inner_note_hash = compute_inner_note_hash(note);\n    let nonce = note.get_header().nonce;\n\n    compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, nonce)\n}\n\npub fn compute_note_hash_for_consumption<Note, N, M>(note: Note) -> Field where Note: NoteInterface<N, M> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    if (header.note_hash_counter != 0) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        inner_note_hash\n    } else {\n        // If a note is not transient, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the siloed_note_hash which has already been hashed with\n        // nonce and then contract address. This hash will match the existing leaf in the note hash\n        // tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        let unique_note_hash = compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, header.nonce);\n        compute_siloed_note_hash(header.contract_address, unique_note_hash)\n        // IMPORTANT NOTE ON REDUNDANT SILOING BY CONTRACT ADDRESS: The note hash computed above is\n        // \"siloed\" by contract address. When a note hash is computed solely for the purpose of\n        // nullification, it is not strictly necessary to silo the note hash before computing\n        // its nullifier. In other words, it is NOT NECESSARY for protocol security that a nullifier\n        // be computed from a siloed note hash. After all, persistable note hashes and nullifiers are\n        // siloed by the kernel circuit. That being said, the siloed note hash computed above CAN be\n        // used for nullifier computation, and this achieves the (arguably unnecessary) property that\n        // nullifiers are computed from a note hash's fully-computed note hash tree leaf.\n    }\n}\n\npub fn compute_note_hash_and_optionally_a_nullifier<T, N, M, S>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    compute_nullifier: bool,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N, M> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    note.set_header(note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n    let unique_note_hash = compute_note_hash_for_read_request_from_innter_and_nonce(inner_note_hash, note_header.nonce);\n    let siloed_note_hash = compute_siloed_note_hash(note_header.contract_address, unique_note_hash);\n\n    let inner_nullifier = if compute_nullifier {\n        let (_, nullifier) = note.compute_note_hash_and_nullifier_without_context();\n        nullifier\n    } else {\n        0\n    };\n    // docs:start:compute_note_hash_and_optionally_a_nullifier_returns\n    [inner_note_hash, unique_note_hash, siloed_note_hash, inner_nullifier]\n    // docs:end:compute_note_hash_and_optionally_a_nullifier_returns\n}\n"},"121":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/hash.nr","source":"use dep::protocol_types::{\n    address::{AztecAddress, EthAddress},\n    constants::{\n    GENERATOR_INDEX__SECRET_HASH, GENERATOR_INDEX__MESSAGE_NULLIFIER, ARGS_HASH_CHUNK_COUNT,\n    GENERATOR_INDEX__FUNCTION_ARGS, ARGS_HASH_CHUNK_LENGTH, MAX_ARGS_LENGTH\n},\n    traits::Hash, hash::{pedersen_hash, compute_siloed_nullifier, sha256_to_field}\n};\nuse crate::oracle::logs_traits::{LensForEncryptedLog, ToBytesForUnencryptedLog};\n\npub fn compute_secret_hash(secret: Field) -> Field {\n    pedersen_hash([secret], GENERATOR_INDEX__SECRET_HASH)\n}\n\npub fn compute_unencrypted_log_hash<T, N, M>(\n    contract_address: AztecAddress,\n    log: T\n) -> Field where T: ToBytesForUnencryptedLog<N, M> {\n    let message_bytes: [u8; N] = log.to_be_bytes_arr();\n    // can't use N - not in scope error\n    let n = message_bytes.len();\n    let mut hash_bytes = [0; M];\n    // Address is converted to 32 bytes in ts\n    let address_bytes = contract_address.to_be_bytes_arr();\n    for i in 0..32 {\n        hash_bytes[i] = address_bytes[i];\n    }\n    let len_bytes = (n as Field).to_be_bytes(4);\n    for i in 0..4 {\n        hash_bytes[32 + i] = len_bytes[i];\n    }\n    for i in 0..n {\n        hash_bytes[36 + i] = message_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\npub fn compute_message_hash(\n    sender: EthAddress,\n    chain_id: Field,\n    recipient: AztecAddress,\n    version: Field,\n    content: Field,\n    secret_hash: Field\n) -> Field {\n    let mut hash_bytes = [0 as u8; 192];\n    let sender_bytes = sender.to_field().to_be_bytes(32);\n    let chain_id_bytes = chain_id.to_be_bytes(32);\n    let recipient_bytes = recipient.to_field().to_be_bytes(32);\n    let version_bytes = version.to_be_bytes(32);\n    let content_bytes = content.to_be_bytes(32);\n    let secret_hash_bytes = secret_hash.to_be_bytes(32);\n\n    for i in 0..32 {\n        hash_bytes[i] = sender_bytes[i];\n        hash_bytes[i + 32] = chain_id_bytes[i];\n        hash_bytes[i + 64] = recipient_bytes[i];\n        hash_bytes[i + 96] = version_bytes[i];\n        hash_bytes[i + 128] = content_bytes[i];\n        hash_bytes[i + 160] = secret_hash_bytes[i];\n    }\n\n    sha256_to_field(hash_bytes)\n}\n\n// The nullifier of a l1 to l2 message is the hash of the message salted with the secret and index of the message hash\n// in the L1 to L2 message tree\npub fn compute_message_nullifier(message_hash: Field, secret: Field, leaf_index: Field) -> Field {\n    pedersen_hash(\n        [message_hash, secret, leaf_index],\n        GENERATOR_INDEX__MESSAGE_NULLIFIER\n    )\n}\n\nstruct ArgsHasher {\n    fields: [Field],\n}\n\nimpl Hash for ArgsHasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl ArgsHasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n\npub fn hash_args_array<N>(args: [Field; N]) -> Field {\n    hash_args(args.as_slice())\n}\n\npub fn hash_args(args: [Field]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        assert(args.len() <= MAX_ARGS_LENGTH, \"Args length exceeds maximum\");\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        let mut current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n\n        let mut current_chunk_index = 0;\n        let mut index_inside_current_chunk = 0;\n        for i in 0..args.len() {\n            current_chunk_values[index_inside_current_chunk] = args[i];\n            index_inside_current_chunk+=1;\n            if index_inside_current_chunk == ARGS_HASH_CHUNK_LENGTH {\n                chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n                current_chunk_values = [0; ARGS_HASH_CHUNK_LENGTH];\n                current_chunk_index+=1;\n                index_inside_current_chunk = 0;\n            }\n        }\n        if index_inside_current_chunk > 0 {\n            chunks_hashes[current_chunk_index] = pedersen_hash(current_chunk_values, GENERATOR_INDEX__FUNCTION_ARGS);\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = ArgsHasher::new();\n    for i in 0..MAX_ARGS_LENGTH {\n        input.add(i as Field);\n    }\n    let hash = input.hash();\n    assert(hash == 0x11e40f2a780822f7971803048c9a2100579de352e7dadd99981760964da65b57);\n}\n\n#[test]\nfn compute_unenc_log_hash_array() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = [\n        0x20660de09f35f876e3e69d227b2a35166ad05f09d82d06366ec9b6f65a51fec2,\n        0x1b52bfe3b8689761916f76dc3d38aa8810860db325cd39ca611eed980091f01c,\n        0x2e559c4045c378a56ad13b9edb1e8de4e7ad3b3aa35cc7ba9ec77f7a68fa43a4,\n        0x25d0f689c4a4178a29d59306f2675824d19be6d25e44fa03b03f49c263053dd2,\n        0x2d513a722d6f352dc0961f156afdc5e31495b9f0e35cb069261a8e55e2df67fd\n    ];\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0095b2d17ab72f4b27a341f7ac63e49ec73935ae8c9181a0ac02023eb12f3284);\n}\n\n#[test]\nfn compute_unenc_log_hash_addr() {\n    let contract_address = AztecAddress::from_field(0x233a3e0df23b2b15b324194cb4a151f26c0b7333250781d34cc269d85dc334c6);\n    let log = AztecAddress::from_field(0x26aa302d4715fd8a687453cb26d616b0768027bd54bcae56b09d908ecd9f8303);\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0083ab647dfb26e7ddee90a0f4209d049d4660cab42000c544b986aaa84c55a3);\n}\n\n#[test]\nfn compute_unenc_log_hash_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"dummy\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x00629e88ebd6374f44aa6cfe07e251ecf07213ebc7267e8f6b578ae57ffd6c20);\n}\n\n#[test]\nfn compute_unenc_log_hash_longer_str() {\n    let contract_address = AztecAddress::from_field(0x1b401e1146c5c507962287065c81f0ef7590adae3802c533d7549d6bf0a41bd8);\n    let log = \"Hello this is a string\";\n    let hash = compute_unencrypted_log_hash(contract_address, log);\n    assert(hash == 0x0098637962f7d34fa202b7ffad8a07a238c5d1fd897b82a108f7f467fa73b841);\n}\n"},"122":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/initializer.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, hash::{compute_siloed_nullifier, pedersen_hash},\n    constants::GENERATOR_INDEX__CONSTRUCTOR, abis::function_selector::FunctionSelector\n};\n\nuse crate::{\n    context::{PrivateContext, PublicContext}, oracle::get_contract_instance::get_contract_instance,\n    oracle::get_contract_instance::get_contract_instance_avm\n};\n\npub fn mark_as_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier, 0);\n}\n\npub fn mark_as_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier((*context).this_address());\n    context.push_nullifier(init_nullifier, 0);\n}\n\npub fn assert_is_initialized_public(context: &mut PublicContext) {\n    let init_nullifier = compute_unsiloed_contract_initialization_nullifier(context.this_address());\n    assert(context.nullifier_exists(init_nullifier, context.this_address()), \"Not initialized\");\n}\n\npub fn assert_is_initialized_private(context: &mut PrivateContext) {\n    let init_nullifier = compute_contract_initialization_nullifier(context.this_address());\n    let header = context.get_header();\n    header.prove_nullifier_inclusion(init_nullifier);\n}\n\nfn compute_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    compute_siloed_nullifier(\n        address,\n        compute_unsiloed_contract_initialization_nullifier(address)\n    )\n}\n\nfn compute_unsiloed_contract_initialization_nullifier(address: AztecAddress) -> Field {\n    address.to_field()\n}\n\npub fn assert_initialization_matches_address_preimage_public(context: PublicContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance_avm(address).unwrap();\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn assert_initialization_matches_address_preimage_private(context: PrivateContext) {\n    let address = context.this_address();\n    let instance = get_contract_instance(address);\n    let expected_init = compute_initialization_hash(context.selector(), context.get_args_hash());\n    assert(instance.initialization_hash == expected_init, \"Initialization hash does not match\");\n    assert(\n        (instance.deployer.is_zero()) | (instance.deployer == context.msg_sender()), \"Initializer address is not the contract deployer\"\n    );\n}\n\npub fn compute_initialization_hash(init_selector: FunctionSelector, init_args_hash: Field) -> Field {\n    pedersen_hash(\n        [init_selector.to_field(), init_args_hash],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n"},"123":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_nullifier_membership_witness.nr","source":"use dep::protocol_types::{\n    abis::nullifier_leaf_preimage::{NullifierLeafPreimage, NULLIFIER_LEAF_PREIMAGE_LENGTH},\n    constants::NULLIFIER_TREE_HEIGHT, hash::pedersen_hash, utils::arr_copy_slice\n};\n\n// INDEX_LENGTH + NULLIFIER_LEAF_PREIMAGE_LENGTH + NULLIFIER_TREE_HEIGHT\nglobal NULLIFIER_MEMBERSHIP_WITNESS: Field = 24;\n\nstruct NullifierMembershipWitness {\n    index: Field,\n    leaf_preimage: NullifierLeafPreimage,\n    path: [Field; NULLIFIER_TREE_HEIGHT],\n}\n\nimpl NullifierMembershipWitness {\n    pub fn deserialize(fields: [Field; NULLIFIER_MEMBERSHIP_WITNESS]) -> Self {\n        let leaf_preimage_fields = arr_copy_slice(fields, [0; NULLIFIER_LEAF_PREIMAGE_LENGTH], 1);\n        Self {\n            index: fields[0],\n            leaf_preimage: NullifierLeafPreimage::deserialize(leaf_preimage_fields),\n            path: arr_copy_slice(\n                fields,\n                [0; NULLIFIER_TREE_HEIGHT],\n                1 + NULLIFIER_LEAF_PREIMAGE_LENGTH\n            )\n        }\n    }\n}\n\n#[oracle(getLowNullifierMembershipWitness)]\nunconstrained fn get_low_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_low_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_low_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n\n#[oracle(getNullifierMembershipWitness)]\nunconstrained fn get_nullifier_membership_witness_oracle(\n    _block_number: u32,\n    _nullifier: Field\n) -> [Field; NULLIFIER_MEMBERSHIP_WITNESS] {}\n\n// Nullifier here refers to the nullifier we are looking to get non-inclusion proof for (by proving that a lower\n// nullifier's next_value is bigger than the nullifier)\nunconstrained pub fn get_nullifier_membership_witness(block_number: u32, nullifier: Field) -> NullifierMembershipWitness {\n    let fields = get_nullifier_membership_witness_oracle(block_number, nullifier);\n    NullifierMembershipWitness::deserialize(fields)\n}\n"},"125":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr","source":"#[oracle(packArgumentsArray)]\nunconstrained fn pack_arguments_array_oracle<N>(_args: [Field; N]) -> Field {}\n\n#[oracle(packArguments)]\nunconstrained fn pack_arguments_oracle(_args: [Field]) -> Field {}\n\n/// - Pack arguments (array version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments_array<N>(args: [Field; N]) -> Field {\n    pack_arguments_array_oracle(args)\n}\n\n/// - Pack arguments (slice version) will notify the simulator that these arguments will be used later at\n///   some point in the call. \n/// - When the external call is made later, the simulator will know what the values unpack to.\n/// - This oracle will not be required in public vm functions, as the vm will keep track of arguments \n///   itself.\nunconstrained pub fn pack_arguments(args: [Field]) -> Field {\n    pack_arguments_oracle(args)\n}\n\n"},"129":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/key_validation_request.nr","source":"use dep::protocol_types::abis::validation_requests::{KeyValidationRequest, key_validation_request::KEY_VALIDATION_REQUEST_LENGTH};\n\n#[oracle(getKeyValidationRequest)]\nunconstrained fn get_key_validation_request_oracle(\n    _pk_m_hash: Field,\n    _key_index: Field\n) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {}\n\nunconstrained fn get_key_validation_request_internal(\n    npk_m_hash: Field,\n    key_index: Field\n) -> KeyValidationRequest {\n    let result = get_key_validation_request_oracle(npk_m_hash, key_index);\n    KeyValidationRequest::deserialize(result)\n}\n\npub fn get_key_validation_request(pk_m_hash: Field, key_index: Field) -> KeyValidationRequest {\n    get_key_validation_request_internal(pk_m_hash, key_index)\n}\n\n"},"135":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/call_private_function.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_call_stack_item::PrivateCallStackItem},\n    address::AztecAddress, constants::PRIVATE_CALL_STACK_ITEM_LENGTH\n};\n\n#[oracle(callPrivateFunction)]\nunconstrained fn call_private_function_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _start_side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {}\n\nunconstrained pub fn call_private_function_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    start_side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> PrivateCallStackItem {\n    let fields = call_private_function_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        start_side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    );\n\n    PrivateCallStackItem::deserialize(fields)\n}\n"},"139":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/get_contract_instance.nr","source":"use dep::protocol_types::{\n    address::AztecAddress, contract_instance::ContractInstance, utils::arr_copy_slice,\n    constants::CONTRACT_INSTANCE_LENGTH, utils::reader::Reader\n};\n\n#[oracle(getContractInstance)]\nunconstrained fn get_contract_instance_oracle(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {}\n\n// Returns a ContractInstance plus a boolean indicating whether the instance was found.\n#[oracle(avmOpcodeGetContractInstance)]\nunconstrained fn get_contract_instance_oracle_avm(_address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {}\n\nunconstrained fn get_contract_instance_internal(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n    get_contract_instance_oracle(address)\n}\n\nunconstrained pub fn get_contract_instance_internal_avm(address: AztecAddress) -> [Field; CONTRACT_INSTANCE_LENGTH + 1] {\n    get_contract_instance_oracle_avm(address)\n}\n\npub fn get_contract_instance(address: AztecAddress) -> ContractInstance {\n    let instance = ContractInstance::deserialize(get_contract_instance_internal(address));\n    assert(instance.to_address().eq(address));\n    instance\n}\n\npub fn get_contract_instance_avm(address: AztecAddress) -> Option<ContractInstance> {\n    let mut reader = Reader::new(get_contract_instance_internal_avm(address));\n    let found = reader.read();\n    if found == 0 {\n        Option::none()\n    } else {\n        Option::some(reader.read_struct(ContractInstance::deserialize))\n    }\n}\n"},"140":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr","source":"use dep::protocol_types::{\n    abis::{\n    function_selector::FunctionSelector, public_call_stack_item::PublicCallStackItem,\n    function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs,\n    call_context::CallContext, read_request::ReadRequest, note_hash::NoteHash, nullifier::Nullifier,\n    log_hash::LogHash, global_variables::GlobalVariables, gas::Gas\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    messaging::l2_to_l1_message::L2ToL1Message, header::Header, address::AztecAddress,\n    utils::reader::Reader,\n    constants::{\n    MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL,\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH\n}\n};\n\n#[oracle(enqueuePublicFunctionCall)]\nunconstrained fn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\n#[oracle(setPublicTeardownFunctionCall)]\nunconstrained fn set_public_teardown_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {}\n\nunconstrained pub fn set_public_teardown_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH] {\n    set_public_teardown_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n\npub fn parse_public_call_stack_item_from_oracle(fields: [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_LENGTH]) -> PublicCallStackItem {\n    let mut reader = Reader::new(fields);\n\n    // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n    // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n    // WARNING: if updating, see comment in public_call_stack_item.ts's PublicCallStackItem.hash()\n    let item = PublicCallStackItem {\n        contract_address: AztecAddress::from_field(reader.read()),\n        function_data: FunctionData { selector: FunctionSelector::from_field(reader.read()), is_private: false },\n        public_inputs: PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            start_side_effect_counter: reader.read_u32(),\n            args_hash: reader.read(),\n            returns_hash: 0,\n            note_hash_read_requests: [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            nullifier_non_existent_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_NON_EXISTENT_READ_REQUESTS_PER_CALL],\n            l1_to_l2_msg_read_requests: [ReadRequest::empty(); MAX_L1_TO_L2_MSG_READ_REQUESTS_PER_CALL],\n            contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n            contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            note_hashes: [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL],\n            nullifiers: [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL],\n            l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL],\n            end_side_effect_counter: 0,\n            unencrypted_logs_hashes: [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL],\n            historical_header: Header::empty(),\n            global_variables: GlobalVariables::empty(),\n            prover_address: AztecAddress::zero(),\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty(),\n            transaction_fee: 0\n        },\n        is_execution_request: true\n    };\n    reader.finish();\n\n    item\n}\n"},"144":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/map.nr","source":"use dep::protocol_types::{hash::pedersen_hash, storage::map::derive_storage_slot_in_map, traits::ToField};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V, Context> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T, Context> Storage<T> for Map<K, T, Context> {}\n\nimpl<K, V, Context> Map<K, V, Context> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = derive_storage_slot_in_map(self.storage_slot, key);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n"},"146":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/state_vars/public_mutable.nr","source":"use crate::context::{PublicContext, UnconstrainedContext};\nuse crate::oracle::storage::storage_read;\nuse dep::protocol_types::traits::{Deserialize, Serialize};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:public_mutable_struct\nstruct PublicMutable<T, Context> {\n    context: Context,\n    storage_slot: Field,\n}\n// docs:end:public_mutable_struct\n\nimpl<T, Context> Storage<T> for PublicMutable<T, Context> {}\n\nimpl<T, Context> PublicMutable<T, Context> {\n    // docs:start:public_mutable_struct_new\n    pub fn new(\n        // Note: Passing the contexts to new(...) just to have an interface compatible with a Map.\n        context: Context,\n        storage_slot: Field\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        PublicMutable { context, storage_slot }\n    }\n    // docs:end:public_mutable_struct_new\n}\n\nimpl<T> PublicMutable<T, &mut PublicContext> {\n    // docs:start:public_mutable_struct_read\n    pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        self.context.storage_read(self.storage_slot)\n    }\n    // docs:end:public_mutable_struct_read\n\n    // docs:start:public_mutable_struct_write\n    pub fn write<T_SERIALIZED_LEN>(self, value: T) where T: Serialize<T_SERIALIZED_LEN> {\n        self.context.storage_write(self.storage_slot, value);\n    }\n    // docs:end:public_mutable_struct_write\n}\n\nimpl<T> PublicMutable<T, UnconstrainedContext> {\n    unconstrained pub fn read<T_SERIALIZED_LEN>(self) -> T where T: Deserialize<T_SERIALIZED_LEN> {\n        self.context.storage_read(self.storage_slot)\n    }\n}\n"},"167":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{GAS_LENGTH, FIXED_DA_GAS, FIXED_L2_GAS}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered, utils::reader::Reader,\n    abis::gas_fees::GasFees\n};\nuse std::ops::{Add, Sub};\n\nstruct Gas {\n    da_gas: u32,\n    l2_gas: u32,\n}\n\nimpl Gas {\n    pub fn new(da_gas: u32, l2_gas: u32) -> Self {\n        Self { da_gas, l2_gas }\n    }\n\n    pub fn tx_overhead() -> Self {\n        Self { da_gas: FIXED_DA_GAS, l2_gas: FIXED_L2_GAS }\n    }\n\n    pub fn compute_fee(self, fees: GasFees) -> Field {\n        (self.da_gas as Field) * fees.fee_per_da_gas + (self.l2_gas as Field) * fees.fee_per_l2_gas\n    }\n\n    pub fn is_empty(self) -> bool {\n        (self.da_gas == 0) & (self.l2_gas == 0)\n    }\n\n    pub fn within(self, limits: Gas) -> bool {\n        (self.da_gas <= limits.da_gas) & (self.l2_gas <= limits.l2_gas)\n    }\n}\n\nimpl Add for Gas {\n    fn add(self, other: Gas) -> Self {\n        Gas::new(self.da_gas + other.da_gas, self.l2_gas + other.l2_gas)\n    }\n}\n\nimpl Sub for Gas {\n    fn sub(self, other: Gas) -> Self {\n        Gas::new(self.da_gas - other.da_gas, self.l2_gas - other.l2_gas)\n    }\n}\n\nimpl Serialize<GAS_LENGTH> for Gas {\n    fn serialize(self) -> [Field; GAS_LENGTH] {\n        [self.da_gas as Field, self.l2_gas as Field]\n    }\n}\n\nimpl Deserialize<GAS_LENGTH> for Gas {\n    fn deserialize(serialized: [Field; GAS_LENGTH]) -> Gas {\n        Gas::new(serialized[0] as u32, serialized[1] as u32)\n    }\n}\n\nimpl Eq for Gas {\n    fn eq(self, other : Gas) -> bool {\n        (self.da_gas == other.da_gas) & (self.l2_gas == other.l2_gas)\n    }\n}\n\nimpl Empty for Gas {\n    fn empty() -> Self {\n        Gas::new(0, 0)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = Gas::empty();\n    let serialized = item.serialize();\n    let deserialized = Gas::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n"},"169":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/note_hash.nr","source":"use crate::{\n    abis::read_request::ScopedReadRequest, address::AztecAddress,\n    abis::side_effect::{Ordered, OrderedValue, Readable, Scoped},\n    constants::{NOTE_HASH_LENGTH, SCOPED_NOTE_HASH_LENGTH}, traits::{Empty, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct NoteHash {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for NoteHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for NoteHash {\n    fn eq(self, other: NoteHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter) \n    }\n}\n\nimpl Empty for NoteHash {\n    fn empty() -> Self {\n        NoteHash {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<NOTE_HASH_LENGTH> for NoteHash {\n    fn serialize(self) -> [Field; NOTE_HASH_LENGTH] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<NOTE_HASH_LENGTH> for NoteHash {\n    fn deserialize(values: [Field; NOTE_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl NoteHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedNoteHash {\n        ScopedNoteHash { note_hash: self, contract_address }\n    }\n}\n\nstruct ScopedNoteHash {\n    note_hash: NoteHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<NoteHash> for ScopedNoteHash {\n    fn inner(self) -> NoteHash {\n        self.note_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedNoteHash {\n    fn counter(self) -> u32 {\n        self.note_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedNoteHash {\n    fn value(self) -> Field {\n        self.note_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.note_hash.counter\n    }\n}\n\nimpl Eq for ScopedNoteHash {\n    fn eq(self, other: ScopedNoteHash) -> bool {\n        (self.note_hash == other.note_hash)\n            & (self.contract_address == other.contract_address)\n    }\n}\n\nimpl Empty for ScopedNoteHash {\n    fn empty() -> Self {\n        ScopedNoteHash {\n            note_hash: NoteHash::empty(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_NOTE_HASH_LENGTH> for ScopedNoteHash {\n    fn serialize(self) -> [Field; SCOPED_NOTE_HASH_LENGTH] {\n        array_concat(self.note_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_NOTE_HASH_LENGTH> for ScopedNoteHash {\n    fn deserialize(values: [Field; SCOPED_NOTE_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            note_hash: reader.read_struct(NoteHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl Readable for ScopedNoteHash {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        assert_eq(self.note_hash.value, read_request.value(), \"Value of the note hash does not match read request\");\n        assert_eq(self.contract_address, read_request.contract_address, \"Contract address of the note hash does not match read request\");\n        assert(\n            read_request.counter() > self.note_hash.counter, \"Read request counter must be greater than the counter of the note hash\"\n        );\n    }\n}\n\nimpl ScopedNoteHash {\n    pub fn expose_to_public(self) -> NoteHash {\n        // Hide the actual counter when exposing it to the public kernel.\n        NoteHash { value: self.note_hash.value, counter: 0 }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NoteHash::empty();\n    let serialized = item.serialize();\n    let deserialized = NoteHash::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedNoteHash::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedNoteHash::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"170":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_fees.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::GAS_FEES_LENGTH, hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty},\n    abis::side_effect::Ordered, utils::reader::Reader\n};\n\nstruct GasFees {\n    fee_per_da_gas: Field,\n    fee_per_l2_gas: Field,\n}\n\nimpl GasFees {\n    pub fn new(fee_per_da_gas: Field, fee_per_l2_gas: Field) -> Self {\n        Self { fee_per_da_gas, fee_per_l2_gas }\n    }\n\n    pub fn default() -> Self {\n        GasFees::new(1, 1)\n    }\n\n    pub fn is_empty(self) -> bool {\n        (self.fee_per_da_gas == 0) & (self.fee_per_l2_gas == 0)\n    }\n}\n\nimpl Serialize<GAS_FEES_LENGTH> for GasFees {\n    fn serialize(self) -> [Field; GAS_FEES_LENGTH] {\n        [self.fee_per_da_gas, self.fee_per_l2_gas]\n    }\n}\n\nimpl Deserialize<GAS_FEES_LENGTH> for GasFees {\n    fn deserialize(serialized: [Field; GAS_FEES_LENGTH]) -> GasFees {\n        GasFees::new(serialized[0], serialized[1])\n    }\n}\n\nimpl Eq for GasFees {\n    fn eq(self, other : GasFees) -> bool {\n        (self.fee_per_da_gas == other.fee_per_da_gas) & (self.fee_per_l2_gas == other.fee_per_l2_gas)\n    }\n}\n\nimpl Empty for GasFees {\n    fn empty() -> Self {\n        GasFees::new(0, 0)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = GasFees::empty();\n    let serialized = item.serialize();\n    let deserialized = GasFees::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"172":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_circuit_public_inputs.nr","source":"use crate::{\n    abis::{\n    call_context::CallContext, max_block_number::MaxBlockNumber, gas_settings::GasSettings,\n    validation_requests::KeyValidationRequestAndGenerator, note_hash::NoteHash, nullifier::Nullifier,\n    private_call_request::PrivateCallRequest, read_request::ReadRequest,\n    log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    constants::{\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_NOTE_HASHES_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_L2_TO_L1_MSGS_PER_CALL, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH,\n    GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS, MAX_ENCRYPTED_LOGS_PER_CALL,\n    MAX_UNENCRYPTED_LOGS_PER_CALL, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, hash::pedersen_hash, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader,\n    transaction::tx_context::TxContext, utils::arrays::validate_array\n};\n\nstruct PrivateCircuitPublicInputsArrayLengths {\n    note_hash_read_requests: u32,\n    nullifier_read_requests: u32,\n    key_validation_requests_and_generators: u32,\n    note_hashes: u32,\n    nullifiers: u32,\n    l2_to_l1_msgs: u32,\n    private_call_requests: u32,\n    public_call_stack_hashes: u32,\n    note_encrypted_logs_hashes: u32,\n    encrypted_logs_hashes: u32,\n    unencrypted_logs_hashes: u32,\n}\n\nimpl PrivateCircuitPublicInputsArrayLengths {\n    pub fn new(public_inputs: PrivateCircuitPublicInputs) -> Self {\n        PrivateCircuitPublicInputsArrayLengths {\n            note_hash_read_requests: validate_array(public_inputs.note_hash_read_requests),\n            nullifier_read_requests: validate_array(public_inputs.nullifier_read_requests),\n            key_validation_requests_and_generators: validate_array(public_inputs.key_validation_requests_and_generators),\n            note_hashes: validate_array(public_inputs.note_hashes),\n            nullifiers: validate_array(public_inputs.nullifiers),\n            l2_to_l1_msgs: validate_array(public_inputs.l2_to_l1_msgs),\n            private_call_requests: validate_array(public_inputs.private_call_requests),\n            public_call_stack_hashes: validate_array(public_inputs.public_call_stack_hashes),\n            note_encrypted_logs_hashes: validate_array(public_inputs.note_encrypted_logs_hashes),\n            encrypted_logs_hashes: validate_array(public_inputs.encrypted_logs_hashes),\n            unencrypted_logs_hashes: validate_array(public_inputs.unencrypted_logs_hashes)\n        }\n    }\n}\n\nstruct PrivateCircuitPublicInputs {\n    call_context: CallContext,\n\n    args_hash: Field,\n    returns_hash: Field,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: [ReadRequest; MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n    nullifier_read_requests: [ReadRequest; MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n    key_validation_requests_and_generators: [KeyValidationRequestAndGenerator; MAX_KEY_VALIDATION_REQUESTS_PER_CALL],\n\n    note_hashes: [NoteHash; MAX_NOTE_HASHES_PER_CALL],\n    nullifiers: [Nullifier; MAX_NULLIFIERS_PER_CALL],\n    private_call_requests: [PrivateCallRequest; MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    public_teardown_function_hash: Field,\n    l2_to_l1_msgs: [L2ToL1Message; MAX_L2_TO_L1_MSGS_PER_CALL],\n\n    start_side_effect_counter : u32,\n    end_side_effect_counter : u32,\n    note_encrypted_logs_hashes: [NoteLogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_CALL],\n    encrypted_logs_hashes: [EncryptedLogHash; MAX_ENCRYPTED_LOGS_PER_CALL],\n    unencrypted_logs_hashes: [LogHash; MAX_UNENCRYPTED_LOGS_PER_CALL],\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // Note: The chain_id and version here are not redundant to the values in self.historical_header.global_variables because\n    // they can be different in case of a protocol upgrade. In such a situation we could be using header from a block\n    // before the upgrade took place but be using the updated protocol to execute and prove the transaction.\n    tx_context: TxContext,\n}\n\nimpl Eq for PrivateCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.call_context.eq(other.call_context) &\n        self.args_hash.eq(other.args_hash) &\n        (self.returns_hash == other.returns_hash) &\n        (self.min_revertible_side_effect_counter == other.min_revertible_side_effect_counter) &\n        (self.is_fee_payer == other.is_fee_payer) &\n        (self.max_block_number == other.max_block_number) &\n        (self.note_hash_read_requests == other.note_hash_read_requests) &\n        (self.nullifier_read_requests == other.nullifier_read_requests) &\n        (self.key_validation_requests_and_generators == other.key_validation_requests_and_generators) &\n        (self.note_hashes == other.note_hashes) &\n        (self.nullifiers == other.nullifiers) &\n        (self.private_call_requests == other.private_call_requests) &\n        (self.public_call_stack_hashes == other.public_call_stack_hashes) &\n        (self.l2_to_l1_msgs == other.l2_to_l1_msgs) &\n        (self.start_side_effect_counter == other.start_side_effect_counter) &\n        (self.end_side_effect_counter == other.end_side_effect_counter) &\n        (self.note_encrypted_logs_hashes == other.note_encrypted_logs_hashes) &\n        (self.encrypted_logs_hashes == other.encrypted_logs_hashes) &\n        (self.unencrypted_logs_hashes == other.unencrypted_logs_hashes) &\n        self.historical_header.eq(other.historical_header) &\n        self.tx_context.eq(other.tx_context)\n    }\n}\n\nimpl Serialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn serialize(self) -> [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new();\n        fields.extend_from_array(self.call_context.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n\n        fields.push(self.min_revertible_side_effect_counter as Field);\n        fields.push(if self.is_fee_payer { 1 } else { 0 } as Field);\n\n        fields.extend_from_array(self.max_block_number.serialize());\n\n        for i in 0..self.note_hash_read_requests.len() {\n            fields.extend_from_array(self.note_hash_read_requests[i].serialize());\n        }\n        for i in 0..self.nullifier_read_requests.len() {\n            fields.extend_from_array(self.nullifier_read_requests[i].serialize());\n        }\n        for i in 0..self.key_validation_requests_and_generators.len() {\n            fields.extend_from_array(self.key_validation_requests_and_generators[i].serialize());\n        }\n        for i in 0..self.note_hashes.len() {\n            fields.extend_from_array(self.note_hashes[i].serialize());\n        }\n        for i in 0..self.nullifiers.len() {\n            fields.extend_from_array(self.nullifiers[i].serialize());\n        }\n        for i in 0..self.private_call_requests.len() {\n            fields.extend_from_array(self.private_call_requests[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n        fields.push(self.public_teardown_function_hash);\n        for i in 0..self.l2_to_l1_msgs.len() {\n            fields.extend_from_array(self.l2_to_l1_msgs[i].serialize());\n        }\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n        for i in 0..self.note_encrypted_logs_hashes.len() {\n            fields.extend_from_array(self.note_encrypted_logs_hashes[i].serialize());\n        }\n        for i in 0..self.encrypted_logs_hashes.len() {\n            fields.extend_from_array(self.encrypted_logs_hashes[i].serialize());\n        }\n        for i in 0..self.unencrypted_logs_hashes.len() {\n            fields.extend_from_array(self.unencrypted_logs_hashes[i].serialize());\n        }\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.extend_from_array(self.tx_context.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PrivateCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = Self {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            min_revertible_side_effect_counter: reader.read() as u32,\n            is_fee_payer: reader.read() == 1,\n            max_block_number: reader.read_struct(MaxBlockNumber::deserialize),\n            note_hash_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL]),\n            nullifier_read_requests: reader.read_struct_array(ReadRequest::deserialize, [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL]),\n            key_validation_requests_and_generators: reader.read_struct_array(KeyValidationRequestAndGenerator::deserialize, [KeyValidationRequestAndGenerator::empty(); MAX_KEY_VALIDATION_REQUESTS_PER_CALL]),\n            note_hashes: reader.read_struct_array(NoteHash::deserialize, [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL]),\n            nullifiers: reader.read_struct_array(Nullifier::deserialize, [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL]),\n            private_call_requests: reader.read_struct_array(PrivateCallRequest::deserialize, [PrivateCallRequest::empty(); MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            public_teardown_function_hash: reader.read(),\n            l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL]),\n            start_side_effect_counter: reader.read() as u32,\n            end_side_effect_counter: reader.read() as u32,\n            note_encrypted_logs_hashes: reader.read_struct_array(NoteLogHash::deserialize, [NoteLogHash::empty(); MAX_NOTE_ENCRYPTED_LOGS_PER_CALL]),\n            encrypted_logs_hashes: reader.read_struct_array(EncryptedLogHash::deserialize, [EncryptedLogHash::empty(); MAX_ENCRYPTED_LOGS_PER_CALL]),\n            unencrypted_logs_hashes: reader.read_struct_array(LogHash::deserialize, [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL]),\n            historical_header: reader.read_struct(Header::deserialize),\n            tx_context: reader.read_struct(TxContext::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PrivateCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\nimpl Empty for PrivateCircuitPublicInputs {\n    fn empty() -> Self {\n        PrivateCircuitPublicInputs {\n            call_context: CallContext::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: [ReadRequest::empty(); MAX_NOTE_HASH_READ_REQUESTS_PER_CALL],\n            nullifier_read_requests: [ReadRequest::empty(); MAX_NULLIFIER_READ_REQUESTS_PER_CALL],\n            key_validation_requests_and_generators: [KeyValidationRequestAndGenerator::empty(); MAX_KEY_VALIDATION_REQUESTS_PER_CALL],\n            note_hashes: [NoteHash::empty(); MAX_NOTE_HASHES_PER_CALL],\n            nullifiers: [Nullifier::empty(); MAX_NULLIFIERS_PER_CALL],\n            private_call_requests: [PrivateCallRequest::empty(); MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL],\n            public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_L2_TO_L1_MSGS_PER_CALL],\n            start_side_effect_counter : 0 as u32,\n            end_side_effect_counter : 0 as u32,\n            note_encrypted_logs_hashes: [NoteLogHash::empty(); MAX_NOTE_ENCRYPTED_LOGS_PER_CALL],\n            encrypted_logs_hashes: [EncryptedLogHash::empty(); MAX_ENCRYPTED_LOGS_PER_CALL],\n            unencrypted_logs_hashes: [LogHash::empty(); MAX_UNENCRYPTED_LOGS_PER_CALL],\n            historical_header: Header::empty(),\n            tx_context: TxContext::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi = PrivateCircuitPublicInputs::empty();\n    let serialized = pcpi.serialize();\n    let deserialized = PrivateCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs = PrivateCircuitPublicInputs::empty();\n    let hash = inputs.hash();\n    // Value from private_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x15c9b0a92b9b541598e24c9f0b0b4b04b7f2408599751c45aa12de671fd9b363;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"173":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/public_call_stack_item_compressed.nr","source":"use crate::abis::{call_context::CallContext, function_data::FunctionData, gas::Gas};\nuse crate::address::AztecAddress;\nuse crate::constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH};\nuse crate::traits::{Hash, Empty, Serialize, Deserialize};\nuse crate::utils::reader::Reader;\n\n/**\n * A compressed version of the PublicCallStackItem struct used to compute the \"hash\"\n * of a PublicCallStackItem.\n * \n * Historically, we have been zeroing most values in the PublicCallStackItem struct\n * to compute the hash involved when adding a PublicCallStackItem to the PublicCallStack.\n * \n * This struct is used to store the values that we did not zero out, and allow us to hash\n * only these, thereby skipping a lot of computation and saving us a lot of constraints\n * \n * Essentially this struct exists such that we don't have a `hash` function in the \n * PublicCallStackItem struct that practically throws away some values of the struct\n * without clearly indicating that it does so.\n */\nstruct PublicCallStackItemCompressed {\n    contract_address: AztecAddress,\n    call_context: CallContext,\n    function_data: FunctionData,\n    args_hash: Field,\n    returns_hash: Field,\n    revert_code: u8,\n    start_gas_left: Gas,\n    end_gas_left: Gas,\n}\n\nimpl Eq for PublicCallStackItemCompressed {\n    fn eq(self, other: PublicCallStackItemCompressed) -> bool {\n        (self.contract_address == other.contract_address)\n            & (self.call_context == other.call_context)\n            & (self.function_data == other.function_data)\n            & (self.args_hash == other.args_hash)\n            & (self.returns_hash == other.returns_hash)\n            & (self.revert_code == other.revert_code)\n            & (self.start_gas_left == other.start_gas_left)\n            & (self.end_gas_left == other.end_gas_left)\n    }\n}\n\nimpl Hash for PublicCallStackItemCompressed {\n    fn hash(self) -> Field {\n        std::hash::pedersen_hash_with_separator(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl Empty for PublicCallStackItemCompressed {\n    fn empty() -> Self {\n        PublicCallStackItemCompressed {\n            contract_address: AztecAddress::empty(),\n            call_context: CallContext::empty(),\n            function_data: FunctionData::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            revert_code: 0,\n            start_gas_left: Gas::empty(),\n            end_gas_left: Gas::empty(),\n        }\n    }\n}\n\nimpl Serialize<PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> for PublicCallStackItemCompressed {\n    fn serialize(self) -> [Field; PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.call_context.serialize());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n        fields.push(self.revert_code as Field);\n        fields.extend_from_array(self.start_gas_left.serialize());\n        fields.extend_from_array(self.end_gas_left.serialize());\n\n        assert_eq(fields.len(), PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH> for PublicCallStackItemCompressed {\n  fn deserialize(fields: [Field; PUBLIC_CALL_STACK_ITEM_COMPRESSED_LENGTH]) -> PublicCallStackItemCompressed {\n    let mut reader = Reader::new(fields);\n\n    let item = PublicCallStackItemCompressed {\n      contract_address: reader.read_struct(AztecAddress::deserialize),\n      call_context: reader.read_struct(CallContext::deserialize),\n      function_data: reader.read_struct(FunctionData::deserialize),\n      args_hash: reader.read(),\n      returns_hash: reader.read(),\n      revert_code: reader.read() as u8,\n      start_gas_left: reader.read_struct(Gas::deserialize),\n      end_gas_left: reader.read_struct(Gas::deserialize),\n    };\n    reader.finish();\n    item\n  }\n}\n"},"175":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/global_variables.nr","source":"use crate::{\n    address::{AztecAddress, EthAddress}, abis::gas_fees::GasFees,\n    constants::{GENERATOR_INDEX__GLOBAL_VARIABLES, GLOBAL_VARIABLES_LENGTH},\n    traits::{Deserialize, Empty, Hash, Serialize}, utils::reader::Reader\n};\n\n// docs:start:global-variables\nstruct GlobalVariables {\n    chain_id : Field,\n    version : Field,\n    block_number : Field,\n    timestamp : u64,\n    coinbase : EthAddress,\n    fee_recipient : AztecAddress,\n    gas_fees : GasFees\n}\n// docs:end:global-variables\n\nimpl GlobalVariables {\n    fn is_empty(self) -> bool {\n        (self.chain_id == 0)\n            & (self.version == 0)\n            & (self.block_number == 0)\n            & (self.timestamp == 0)\n            & (self.coinbase.is_zero())\n            & (self.fee_recipient.is_zero())\n            & (self.gas_fees.is_empty())\n    }\n}\n\nimpl Serialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn serialize(self) -> [Field; GLOBAL_VARIABLES_LENGTH] {\n        let mut serialized: BoundedVec<Field, GLOBAL_VARIABLES_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.chain_id);\n        serialized.push(self.version);\n        serialized.push(self.block_number);\n        serialized.push(self.timestamp as Field);\n        serialized.push(self.coinbase.to_field());\n        serialized.push(self.fee_recipient.to_field());\n        serialized.extend_from_array(self.gas_fees.serialize());\n\n        serialized.storage\n    }\n}\n\nimpl Deserialize<GLOBAL_VARIABLES_LENGTH> for GlobalVariables {\n    fn deserialize(serialized: [Field; GLOBAL_VARIABLES_LENGTH]) -> GlobalVariables {\n        let mut reader = Reader::new(serialized);\n        GlobalVariables {\n            chain_id: reader.read(),\n            version: reader.read(),\n            block_number: reader.read(),\n            timestamp: reader.read() as u64,\n            coinbase: EthAddress::from_field(reader.read()),\n            fee_recipient: AztecAddress::from_field(reader.read()),\n            gas_fees: reader.read_struct(GasFees::deserialize)\n        }\n    }\n}\n\nimpl Eq for GlobalVariables {\n    fn eq(self, other : GlobalVariables) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.block_number == other.block_number) &\n        (self.timestamp == other.timestamp) &\n        (self.coinbase == other.coinbase) &\n        (self.fee_recipient == other.fee_recipient) &\n        (self.gas_fees == other.gas_fees) \n    }\n}\n\nimpl Empty for GlobalVariables {\n    fn empty() -> Self {\n        Self {\n            chain_id: 0,\n            version: 0,\n            block_number: 0,\n            timestamp: 0,\n            coinbase: EthAddress::empty(),\n            fee_recipient: AztecAddress::empty(),\n            gas_fees: GasFees::empty()\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let vars = GlobalVariables::empty();\n    let _serialized = vars.serialize();\n    let _deserialized = GlobalVariables::deserialize(_serialized);\n}\n"},"176":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/read_request.nr","source":"use crate::{\n    abis::side_effect::{Ordered, Scoped}, traits::{Empty, Serialize, Deserialize},\n    address::AztecAddress, constants::{READ_REQUEST_LENGTH, SCOPED_READ_REQUEST_LEN},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct ReadRequest {\n    value: Field,\n    counter: u32,\n}\n\nimpl Ordered for ReadRequest {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for ReadRequest {\n    fn eq(self, read_request: ReadRequest) -> bool {\n        (self.value == read_request.value)\n        & (self.counter == read_request.counter)\n    }\n}\n\nimpl Empty for ReadRequest {\n    fn empty() -> Self {\n        ReadRequest {\n            value: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Serialize<READ_REQUEST_LENGTH> for ReadRequest {\n    fn serialize(self) -> [Field; READ_REQUEST_LENGTH] {\n        [self.value, self.counter as Field]\n    }\n}\n\nimpl Deserialize<READ_REQUEST_LENGTH> for ReadRequest {\n    fn deserialize(values: [Field; READ_REQUEST_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n        }\n    }\n}\n\nimpl ReadRequest {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedReadRequest {\n        ScopedReadRequest { read_request: self, contract_address }\n    }\n}\n\nstruct ScopedReadRequest {\n    read_request: ReadRequest,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<ReadRequest> for ScopedReadRequest {\n    fn inner(self) -> ReadRequest {\n        self.read_request\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Eq for ScopedReadRequest {\n    fn eq(self, other: ScopedReadRequest) -> bool {\n        (self.read_request == other.read_request)\n        & (self.contract_address.eq(other.contract_address))\n    }\n}\n\nimpl Empty for ScopedReadRequest {\n    fn empty() -> Self {\n        ScopedReadRequest {\n            read_request: ReadRequest::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_READ_REQUEST_LEN> for ScopedReadRequest {\n    fn serialize(self) -> [Field; SCOPED_READ_REQUEST_LEN] {\n        array_concat(self.read_request.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_READ_REQUEST_LEN> for ScopedReadRequest {\n    fn deserialize(values: [Field; SCOPED_READ_REQUEST_LEN]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            read_request: reader.read_struct(ReadRequest::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl ScopedReadRequest {\n    pub fn value(self) -> Field {\n        self.read_request.value\n    }\n    pub fn counter(self) -> u32 {\n        self.read_request.counter\n    }\n}\n\n#[test]\nfn serialization_of_empty_read() {\n    let item = ReadRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ReadRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedReadRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedReadRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"179":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request_and_generator.nr","source":"use crate::{\n    address::AztecAddress,\n    abis::validation_requests::{\n    key_validation_request::KeyValidationRequest,\n    scoped_key_validation_request_and_generator::ScopedKeyValidationRequestAndGenerator\n},\n    constants::KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH, traits::{Empty, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct KeyValidationRequestAndGenerator {\n    request: KeyValidationRequest,\n    sk_app_generator: Field,\n}\n\nimpl Eq for KeyValidationRequestAndGenerator {\n    fn eq(self, other: KeyValidationRequestAndGenerator) -> bool {\n        (self.request == other.request) & (self.sk_app_generator == other.sk_app_generator)\n    }\n}\n\nimpl Empty for KeyValidationRequestAndGenerator {\n    fn empty() -> Self {\n        KeyValidationRequestAndGenerator {\n            request: KeyValidationRequest::empty(),\n            sk_app_generator: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH> for KeyValidationRequestAndGenerator {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH] {\n        array_concat(self.request.serialize(), [self.sk_app_generator])\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH> for KeyValidationRequestAndGenerator {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_AND_GENERATOR_LENGTH]) -> Self {\n        let mut reader = Reader::new(fields);\n        let res = Self {\n            request: reader.read_struct(KeyValidationRequest::deserialize),\n            sk_app_generator: reader.read(),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl KeyValidationRequestAndGenerator {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedKeyValidationRequestAndGenerator {\n        ScopedKeyValidationRequestAndGenerator { request: self, contract_address }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = KeyValidationRequestAndGenerator::empty();\n    let serialized = item.serialize();\n    let deserialized = KeyValidationRequestAndGenerator::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"180":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/validation_requests/key_validation_request.nr","source":"use crate::{constants::KEY_VALIDATION_REQUEST_LENGTH, traits::{Empty, Serialize, Deserialize}, point::Point};\n\nstruct KeyValidationRequest {\n    pk_m: Point,\n    sk_app: Field, // not a grumpkin scalar because it's output of poseidon2\n}\n\nimpl Eq for KeyValidationRequest {\n    fn eq(self, request: KeyValidationRequest) -> bool {\n        (request.pk_m.eq(self.pk_m))\n            & (request.sk_app.eq(self.sk_app))\n    }\n}\n\nimpl Empty for KeyValidationRequest {\n    fn empty() -> Self {\n        KeyValidationRequest {\n            pk_m: Point::empty(),\n            sk_app: 0,\n        }\n    }\n}\n\nimpl Serialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn serialize(self) -> [Field; KEY_VALIDATION_REQUEST_LENGTH] {\n        [\n            self.pk_m.x,\n            self.pk_m.y,\n            self.pk_m.is_infinite as Field,\n            self.sk_app,\n        ]\n    }\n}\n\nimpl Deserialize<KEY_VALIDATION_REQUEST_LENGTH> for KeyValidationRequest {\n    fn deserialize(fields: [Field; KEY_VALIDATION_REQUEST_LENGTH]) -> Self {\n        Self {\n            pk_m: Point::new(fields[0], fields[1], fields[2] as bool),\n            sk_app: fields[3],\n        }\n    }\n}\n\n"},"184":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier.nr","source":"use crate::{\n    abis::{side_effect::{Ordered, OrderedValue, Readable, Scoped}, read_request::ScopedReadRequest},\n    address::AztecAddress, constants::{NULLIFIER_LENGTH, SCOPED_NULLIFIER_LENGTH},\n    hash::compute_siloed_nullifier, traits::{Empty, Hash, Serialize, Deserialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct Nullifier {\n    value: Field,\n    counter: u32,\n    note_hash: Field,\n}\n\nimpl Ordered for Nullifier {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for Nullifier {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for Nullifier {\n    fn eq(self, other: Nullifier) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.note_hash == other.note_hash) \n    }\n}\n\nimpl Empty for Nullifier {\n    fn empty() -> Self {\n        Nullifier {\n            value: 0,\n            counter: 0,\n            note_hash: 0,\n        }\n    }\n}\n\nimpl Serialize<NULLIFIER_LENGTH> for Nullifier {\n    fn serialize(self) -> [Field; NULLIFIER_LENGTH] {\n        [self.value, self.counter as Field, self.note_hash]\n    }\n}\n\nimpl Deserialize<NULLIFIER_LENGTH> for Nullifier {\n    fn deserialize(values: [Field; NULLIFIER_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            note_hash: values[2],\n        }\n    }\n}\n\nimpl Readable for Nullifier {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        // Public kernels output Nullifier instead of ScopedNullifier.\n        // The nullifier value has been siloed.\n        let siloed_request_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.value, siloed_request_value, \"Value of the nullifier does not match read request\");\n        assert(\n            read_request.counter() > self.counter, \"Read request counter must be greater than the counter of the nullifier\"\n        );\n    }\n}\n\nimpl Nullifier {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedNullifier {\n        ScopedNullifier { nullifier: self, contract_address }\n    }\n}\n\nstruct ScopedNullifier {\n    nullifier: Nullifier,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<Nullifier> for ScopedNullifier {\n    fn inner(self) -> Nullifier {\n        self.nullifier\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedNullifier {\n    fn counter(self) -> u32 {\n        self.nullifier.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedNullifier {\n    fn value(self) -> Field {\n        self.nullifier.value\n    }\n    fn counter(self) -> u32 {\n        self.nullifier.counter\n    }\n}\n\nimpl Eq for ScopedNullifier {\n    fn eq(self, other: ScopedNullifier) -> bool {\n        (self.nullifier == other.nullifier)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedNullifier {\n    fn empty() -> Self {\n        ScopedNullifier {\n            nullifier: Nullifier::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_NULLIFIER_LENGTH> for ScopedNullifier {\n    fn serialize(self) -> [Field; SCOPED_NULLIFIER_LENGTH] {\n        array_concat(self.nullifier.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_NULLIFIER_LENGTH> for ScopedNullifier {\n    fn deserialize(values: [Field; SCOPED_NULLIFIER_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            nullifier: reader.read_struct(Nullifier::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl Readable for ScopedNullifier {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        assert_eq(self.nullifier.value, read_request.value(), \"Value of the nullifier does not match read request\");\n        assert_eq(self.contract_address, read_request.contract_address, \"Contract address of the nullifier does not match read request\");\n        assert(\n            read_request.counter() > self.nullifier.counter, \"Read request counter must be greater than the counter of the nullifier\"\n        );\n    }\n}\n\nimpl ScopedNullifier {\n    pub fn nullified_note_hash(self) -> Field {\n        self.nullifier.note_hash\n    }\n\n    pub fn expose_to_public(self) -> Nullifier {\n        // Hide the actual counter and note hash when exposing it to the public kernel.\n        Nullifier { value: self.nullifier.value, counter: 0, note_hash: 0 }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = Nullifier::empty();\n    let serialized = item.serialize();\n    let deserialized = Nullifier::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped() {\n    let item = ScopedNullifier::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedNullifier::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"192":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/nullifier_leaf_preimage.nr","source":"global NULLIFIER_LEAF_PREIMAGE_LENGTH: u32 = 3;\n\nuse crate::{\n    abis::{read_request::ScopedReadRequest, side_effect::Readable}, hash::compute_siloed_nullifier,\n    merkle_tree::leaf_preimage::{LeafPreimage, IndexedTreeLeafPreimage}, traits::{Empty, Hash}\n};\n\nstruct NullifierLeafPreimage {\n    nullifier : Field,\n    next_nullifier :Field,\n    next_index : u32,\n}\n\nimpl Empty for NullifierLeafPreimage {\n    fn empty() -> Self {\n        Self {\n            nullifier : 0,\n            next_nullifier : 0,\n            next_index : 0,\n        }\n    }\n}\n\nimpl Hash for NullifierLeafPreimage {\n    fn hash(self) -> Field {\n        if self.is_empty() {\n            0\n        } else {\n            std::hash::pedersen_hash(self.serialize())\n        }\n    }\n}\n\nimpl LeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl IndexedTreeLeafPreimage for NullifierLeafPreimage {\n    fn get_key(self) -> Field {\n        self.nullifier\n    }\n\n    fn get_next_key(self) -> Field {\n        self.next_nullifier\n    }\n\n    fn as_leaf(self) -> Field {\n        self.hash()\n    }\n}\n\nimpl Readable for NullifierLeafPreimage {\n    fn assert_match_read_request(self, read_request: ScopedReadRequest) {\n        let siloed_value = compute_siloed_nullifier(read_request.contract_address, read_request.value());\n        assert_eq(self.nullifier, siloed_value, \"Value of the nullifier leaf does not match read request\");\n    }\n}\n\nimpl NullifierLeafPreimage {\n    pub fn is_empty(self) -> bool {\n        (self.nullifier == 0) & (self.next_nullifier == 0) & (self.next_index == 0)\n    }\n\n    pub fn serialize(self) -> [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH] {\n        [self.nullifier, self.next_nullifier, self.next_index as Field]\n    }\n\n    pub fn deserialize(fields: [Field; NULLIFIER_LEAF_PREIMAGE_LENGTH]) -> Self {\n        Self { nullifier: fields[0], next_nullifier: fields[1], next_index: fields[2] as u32 }\n    }\n}\n\nimpl Eq for NullifierLeafPreimage {\n  fn eq(self, other: Self) -> bool {\n    (self.nullifier == other.nullifier) &\n    (self.next_nullifier == other.next_nullifier) &\n    (self.next_index == other.next_index)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = NullifierLeafPreimage::empty();\n    let serialized = item.serialize();\n    let deserialized = NullifierLeafPreimage::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"193":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_selector.nr","source":"use crate::utils::field::field_from_bytes;\nuse crate::traits::{Serialize, Deserialize, FromField, ToField, Empty};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FromField for FunctionSelector {\n    fn from_field(field: Field) -> Self {\n        Self { inner: field as u32 }\n    }\n}\n\nimpl ToField for FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n}\n\nimpl Empty for FunctionSelector {\n    fn empty() -> Self {\n        Self { inner: 0 as u32 }\n    }\n}\n\nimpl FunctionSelector {\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n"},"194":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_request.nr","source":"use crate::{\n    abis::{\n    private_call_stack_item::PrivateCallStackItem, call_context::CallContext,\n    function_data::FunctionData, caller_context::CallerContext,\n    side_effect::{Ordered, RangeOrdered, Scoped}\n},\n    address::AztecAddress, constants::{PRIVATE_CALL_REQUEST_LENGTH, SCOPED_PRIVATE_CALL_REQUEST_LENGTH},\n    traits::{Empty, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PrivateCallRequest {\n    target: AztecAddress,\n    call_context: CallContext,\n    function_data: FunctionData,\n    args_hash: Field,\n    returns_hash: Field,\n    caller_context: CallerContext,\n    start_side_effect_counter: u32,\n    end_side_effect_counter: u32,\n}\n\nimpl Ordered for PrivateCallRequest {\n    fn counter(self) -> u32 {\n        self.start_side_effect_counter\n    }\n}\n\nimpl RangeOrdered for PrivateCallRequest {\n    fn counter_start(self) -> u32 {\n        self.start_side_effect_counter\n    }\n    fn counter_end(self) -> u32 {\n        self.end_side_effect_counter\n    }\n}\n\nimpl Eq for PrivateCallRequest {\n    fn eq(self, other: PrivateCallRequest) -> bool {\n        (self.target == other.target) \n            & (self.call_context == other.call_context) \n            & (self.function_data == other.function_data) \n            & (self.args_hash == other.args_hash) \n            & (self.returns_hash == other.returns_hash)\n            & (self.caller_context == other.caller_context)\n            & (self.start_side_effect_counter == other.start_side_effect_counter)\n            & (self.end_side_effect_counter == other.end_side_effect_counter)\n    }\n}\n\nimpl Empty for PrivateCallRequest {\n    fn empty() -> Self {\n        PrivateCallRequest {\n            target: AztecAddress::empty(),\n            call_context: CallContext::empty(),\n            function_data: FunctionData::empty(),\n            args_hash: 0,\n            returns_hash: 0,\n            caller_context: CallerContext::empty(),\n            start_side_effect_counter: 0,\n            end_side_effect_counter: 0,\n        }\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_REQUEST_LENGTH> for PrivateCallRequest {\n    fn serialize(self) -> [Field; PRIVATE_CALL_REQUEST_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_REQUEST_LENGTH> = BoundedVec::new();\n\n        fields.push(self.target.to_field());\n        fields.extend_from_array(self.call_context.serialize());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.push(self.args_hash);\n        fields.push(self.returns_hash);\n        fields.extend_from_array(self.caller_context.serialize());\n        fields.push(self.start_side_effect_counter as Field);\n        fields.push(self.end_side_effect_counter as Field);\n\n        assert_eq(fields.len(), PRIVATE_CALL_REQUEST_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_REQUEST_LENGTH> for PrivateCallRequest {\n    fn deserialize(fields: [Field; PRIVATE_CALL_REQUEST_LENGTH]) -> PrivateCallRequest {\n        let mut reader = Reader::new(fields);\n        let item = PrivateCallRequest {\n            target: reader.read_struct(AztecAddress::deserialize),\n            call_context: reader.read_struct(CallContext::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            args_hash: reader.read(),\n            returns_hash: reader.read(),\n            caller_context: reader.read_struct(CallerContext::deserialize),\n            start_side_effect_counter: reader.read_u32(),\n            end_side_effect_counter: reader.read_u32(),\n        };\n        reader.finish();\n        item\n    }\n}\n\nimpl PrivateCallRequest {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedPrivateCallRequest {\n        ScopedPrivateCallRequest { call_request: self, contract_address }\n    }\n\n    pub fn matches_stack_item(self, stack_item: PrivateCallStackItem) -> bool {\n        (self.target == stack_item.contract_address)\n            & (self.call_context == stack_item.public_inputs.call_context)\n            & (self.function_data == stack_item.function_data)\n            & (self.args_hash == stack_item.public_inputs.args_hash)\n            & (self.returns_hash == stack_item.public_inputs.returns_hash)\n            & (self.start_side_effect_counter\n                                == stack_item.public_inputs.start_side_effect_counter)\n            & (self.end_side_effect_counter\n                                    == stack_item.public_inputs.end_side_effect_counter)\n    }\n}\n\nstruct ScopedPrivateCallRequest {\n    call_request: PrivateCallRequest,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<PrivateCallRequest> for ScopedPrivateCallRequest {\n    fn inner(self) -> PrivateCallRequest {\n        self.call_request\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedPrivateCallRequest {\n    fn counter(self) -> u32 {\n        self.call_request.counter_start()\n    }\n}\n\nimpl RangeOrdered for ScopedPrivateCallRequest {\n    fn counter_start(self) -> u32 {\n        self.call_request.counter_start()\n    }\n    fn counter_end(self) -> u32 {\n        self.call_request.counter_end()\n    }\n}\n\nimpl Eq for ScopedPrivateCallRequest {\n    fn eq(self, other: ScopedPrivateCallRequest) -> bool {\n        (self.call_request == other.call_request)\n            & (self.contract_address == other.contract_address)\n    }\n}\n\nimpl Empty for ScopedPrivateCallRequest {\n    fn empty() -> Self {\n        ScopedPrivateCallRequest {\n            call_request: PrivateCallRequest::empty(),\n            contract_address: AztecAddress::zero(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_PRIVATE_CALL_REQUEST_LENGTH> for ScopedPrivateCallRequest {\n    fn serialize(self) -> [Field; SCOPED_PRIVATE_CALL_REQUEST_LENGTH] {\n        let mut fields: BoundedVec<Field, SCOPED_PRIVATE_CALL_REQUEST_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.call_request.serialize());\n        fields.extend_from_array(self.contract_address.serialize());\n\n        assert_eq(fields.len(), SCOPED_PRIVATE_CALL_REQUEST_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<SCOPED_PRIVATE_CALL_REQUEST_LENGTH> for ScopedPrivateCallRequest {\n    fn deserialize(fields: [Field; SCOPED_PRIVATE_CALL_REQUEST_LENGTH]) -> ScopedPrivateCallRequest {\n        let mut reader = Reader::new(fields);\n        let item = ScopedPrivateCallRequest {\n            call_request: reader.read_struct(PrivateCallRequest::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        item\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = ScopedPrivateCallRequest::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedPrivateCallRequest::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"199":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/gas_settings.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress}, abis::gas::Gas,\n    abis::gas_fees::GasFees,\n    constants::{\n    GAS_SETTINGS_LENGTH, DEFAULT_GAS_LIMIT, DEFAULT_TEARDOWN_GAS_LIMIT, DEFAULT_MAX_FEE_PER_GAS,\n    DEFAULT_INCLUSION_FEE\n},\n    hash::pedersen_hash, traits::{Deserialize, Hash, Serialize, Empty}, abis::side_effect::Ordered,\n    utils::reader::Reader\n};\n\nstruct GasSettings {\n    gas_limits: Gas,\n    teardown_gas_limits: Gas,\n    max_fees_per_gas: GasFees,\n    inclusion_fee: Field,\n}\n\nimpl GasSettings {\n    pub fn new(\n        gas_limits: Gas,\n        teardown_gas_limits: Gas,\n        max_fees_per_gas: GasFees,\n        inclusion_fee: Field\n    ) -> Self {\n        Self { gas_limits, teardown_gas_limits, max_fees_per_gas, inclusion_fee }\n    }\n\n    pub fn default() -> Self {\n        GasSettings::new(\n            Gas::new(DEFAULT_GAS_LIMIT, DEFAULT_GAS_LIMIT),\n            Gas::new(DEFAULT_TEARDOWN_GAS_LIMIT, DEFAULT_TEARDOWN_GAS_LIMIT),\n            GasFees::new(DEFAULT_MAX_FEE_PER_GAS, DEFAULT_MAX_FEE_PER_GAS),\n            DEFAULT_INCLUSION_FEE\n        )\n    }\n}\n\nimpl Eq for GasSettings {\n    fn eq(self, other: Self) -> bool {\n        (self.gas_limits == other.gas_limits) & (self.teardown_gas_limits == other.teardown_gas_limits) & (self.max_fees_per_gas == other.max_fees_per_gas) & (self.inclusion_fee == other.inclusion_fee)\n    }\n}\n\nimpl Empty for GasSettings {\n    fn empty() -> Self {\n        GasSettings::new(\n            Gas::empty(), Gas::empty(), GasFees::empty(), 0\n        )\n    }\n}\n\nimpl Serialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn serialize(self) -> [Field; GAS_SETTINGS_LENGTH] {\n        let mut serialized: BoundedVec<Field, GAS_SETTINGS_LENGTH> = BoundedVec::new();\n\n        serialized.extend_from_array(self.gas_limits.serialize());\n        serialized.extend_from_array(self.teardown_gas_limits.serialize());\n        serialized.extend_from_array(self.max_fees_per_gas.serialize());\n        serialized.push(self.inclusion_fee);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<GAS_SETTINGS_LENGTH> for GasSettings {\n    fn deserialize(serialized: [Field; GAS_SETTINGS_LENGTH]) -> GasSettings {\n        let mut reader = Reader::new(serialized);\n        GasSettings::new(reader.read_struct(Gas::deserialize), reader.read_struct(Gas::deserialize), reader.read_struct(GasFees::deserialize), reader.read())\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = GasSettings::empty();\n    let serialized = item.serialize();\n    let deserialized = GasSettings::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"208":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/private_call_stack_item.nr","source":"use crate::{\n    abis::{function_data::FunctionData, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__CALL_STACK_ITEM, PRIVATE_CALL_STACK_ITEM_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\nstruct PrivateCallStackItem {\n    // This is the _actual_ contract address relating to where this function's code resides in the\n    // contract tree. Regardless of whether this is a call or delegatecall, this\n    // `contract_address` _does not change_. Amongst other things, it's used as a lookup for\n    // getting the correct code from the tree. There is a separate `storage_contract_address`\n    // within a CallStackItem which varies depending on whether this is a call or delegatecall.\n    contract_address: AztecAddress,\n    function_data: FunctionData,\n    public_inputs: PrivateCircuitPublicInputs,\n}\n\nimpl Eq for PrivateCallStackItem {\n    fn eq(self, other: Self) -> bool {\n        self.contract_address.eq(other.contract_address) &\n        self.function_data.eq(other.function_data) &\n        self.public_inputs.eq(other.public_inputs)\n    }\n}\n\nimpl Serialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn serialize(self) -> [Field; PRIVATE_CALL_STACK_ITEM_LENGTH] {\n        let mut fields: BoundedVec<Field, PRIVATE_CALL_STACK_ITEM_LENGTH> = BoundedVec::new();\n\n        fields.push(self.contract_address.to_field());\n        fields.extend_from_array(self.function_data.serialize());\n        fields.extend_from_array(self.public_inputs.serialize());\n\n        assert_eq(fields.len(), PRIVATE_CALL_STACK_ITEM_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<PRIVATE_CALL_STACK_ITEM_LENGTH> for PrivateCallStackItem {\n    fn deserialize(serialized: [Field; PRIVATE_CALL_STACK_ITEM_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let item = Self {\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: reader.read_struct(PrivateCircuitPublicInputs::deserialize),\n        };\n\n        reader.finish();\n        item\n    }\n}\n\nimpl Hash for PrivateCallStackItem {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl Empty for PrivateCallStackItem {\n    fn empty() -> Self {\n        PrivateCallStackItem {\n            contract_address: AztecAddress::empty(),\n            function_data: FunctionData::empty(),\n            public_inputs: PrivateCircuitPublicInputs::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = PrivateCallStackItem::empty();\n    let serialized = item.serialize();\n    let deserialized = PrivateCallStackItem::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let mut item = PrivateCallStackItem::empty();\n    item.function_data.is_private = true;\n    let hash = item.hash();\n\n    // Value from private_call_stack_item.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x065f2831db9ac0db5e710bd3a865b5facd8cf83f1585e1af8fd1d6ce9c47f685;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"209":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/caller_context.nr","source":"use crate::address::AztecAddress;\nuse crate::traits::{Empty, Serialize, Deserialize};\nuse crate::constants::CALLER_CONTEXT_LENGTH;\nuse crate::utils::reader::Reader;\n\nstruct CallerContext {\n    msg_sender: AztecAddress,\n    storage_contract_address: AztecAddress,\n    is_static_call: bool,\n}\n\nimpl Eq for CallerContext {\n    fn eq(self, other: CallerContext) -> bool {\n        other.msg_sender.eq(self.msg_sender)\n            & other.storage_contract_address.eq(self.storage_contract_address)\n            & other.is_static_call == self.is_static_call\n    }\n}\n\nimpl Empty for CallerContext {\n    fn empty() -> Self {\n        CallerContext {\n            msg_sender: AztecAddress::zero(),\n            storage_contract_address: AztecAddress::zero(),\n            is_static_call: false,\n        }\n    }\n}\n\nimpl CallerContext {\n    pub fn is_empty(self) -> bool {\n        self.msg_sender.is_zero() & self.storage_contract_address.is_zero() & !self.is_static_call\n    }\n\n    // Different to an empty context, a hidden context won't reveal the caller's msg_sender and storage_contract_address,\n    // but will still propagate the is_static_call flag.\n    pub fn is_hidden(self) -> bool {\n        self.msg_sender.is_zero() & self.storage_contract_address.is_zero()\n    }\n}\n\nimpl Serialize<CALLER_CONTEXT_LENGTH> for CallerContext {\n  fn serialize(self) -> [Field; CALLER_CONTEXT_LENGTH] {\n    let mut fields: BoundedVec<Field, CALLER_CONTEXT_LENGTH> = BoundedVec::new();\n\n    fields.extend_from_array(self.msg_sender.serialize());\n    fields.extend_from_array(self.storage_contract_address.serialize());\n    fields.push(self.is_static_call as Field);\n\n    assert_eq(fields.len(), CALLER_CONTEXT_LENGTH);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CALLER_CONTEXT_LENGTH> for CallerContext {\n  fn deserialize(fields: [Field; CALLER_CONTEXT_LENGTH]) -> CallerContext {\n    let mut reader = Reader::new(fields);\n\n    let item = CallerContext {\n      msg_sender: reader.read_struct(AztecAddress::deserialize),\n      storage_contract_address: reader.read_struct(AztecAddress::deserialize),\n      is_static_call: reader.read_bool(),\n    };\n    reader.finish();\n    item\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = CallerContext::empty();\n    let serialized = item.serialize();\n    let deserialized = CallerContext::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"211":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/log_hash.nr","source":"use crate::{\n    abis::side_effect::{Ordered, OrderedValue, Scoped}, address::AztecAddress,\n    constants::{\n    LOG_HASH_LENGTH, NOTE_LOG_HASH_LENGTH, ENCRYPTED_LOG_HASH_LENGTH, SCOPED_LOG_HASH_LENGTH,\n    SCOPED_ENCRYPTED_LOG_HASH_LENGTH\n},\n    traits::{Empty, Serialize, Deserialize}, utils::{arrays::array_concat, reader::Reader}\n};\n\nstruct LogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n}\n\nimpl Ordered for LogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for LogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for LogHash {\n    fn eq(self, other: LogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n    }\n}\n\nimpl Empty for LogHash {\n    fn empty() -> Self {\n        LogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n        }\n    }\n}\n\nimpl Serialize<LOG_HASH_LENGTH> for LogHash {\n    fn serialize(self) -> [Field; LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length]\n    }\n}\n\nimpl Deserialize<LOG_HASH_LENGTH> for LogHash {\n    fn deserialize(values: [Field; LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n        }\n    }\n}\n\nimpl LogHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedLogHash {\n        ScopedLogHash { log_hash: self, contract_address }\n    }\n}\n\nstruct ScopedLogHash {\n    log_hash: LogHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<LogHash> for ScopedLogHash {\n    fn inner(self) -> LogHash {\n        self.log_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedLogHash {\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedLogHash {\n    fn value(self) -> Field {\n        self.log_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl Eq for ScopedLogHash {\n    fn eq(self, other: ScopedLogHash) -> bool {\n        (self.log_hash == other.log_hash)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedLogHash {\n    fn empty() -> Self {\n        ScopedLogHash {\n            log_hash: LogHash::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_LOG_HASH_LENGTH> for ScopedLogHash {\n    fn serialize(self) -> [Field; SCOPED_LOG_HASH_LENGTH] {\n       array_concat(self.log_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_LOG_HASH_LENGTH> for ScopedLogHash {\n    fn deserialize(values: [Field; SCOPED_LOG_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            log_hash: reader.read_struct(LogHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nimpl ScopedLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the counter when exposing to public.\n        // The log hash must already be siloed when we call this.\n        LogHash { value: self.log_hash.value, counter: 0, length: self.log_hash.length }\n    }\n}\n\nstruct EncryptedLogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n    randomness: Field,\n}\n\nimpl Ordered for EncryptedLogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for EncryptedLogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for EncryptedLogHash {\n    fn eq(self, other: EncryptedLogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n            & (self.randomness == other.randomness) \n    }\n}\n\nimpl Empty for EncryptedLogHash {\n    fn empty() -> Self {\n        EncryptedLogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n            randomness: 0,\n        }\n    }\n}\n\nimpl Serialize<ENCRYPTED_LOG_HASH_LENGTH> for EncryptedLogHash {\n    fn serialize(self) -> [Field; ENCRYPTED_LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length, self.randomness]\n    }\n}\n\nimpl Deserialize<ENCRYPTED_LOG_HASH_LENGTH> for EncryptedLogHash {\n    fn deserialize(values: [Field; ENCRYPTED_LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n            randomness: values[3],\n        }\n    }\n}\n\nimpl EncryptedLogHash {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedEncryptedLogHash {\n        ScopedEncryptedLogHash { log_hash: self, contract_address }\n    }\n}\n\nstruct ScopedEncryptedLogHash {\n    log_hash: EncryptedLogHash,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<EncryptedLogHash> for ScopedEncryptedLogHash {\n    fn inner(self) -> EncryptedLogHash {\n        self.log_hash\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl ScopedEncryptedLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the secret randomness and counter when exposing to public\n        // Expose as a LogHash rather than EncryptedLogHash to avoid bringing an unnec. 0 value around\n        // The log hash will already be silo'd when we call this\n        LogHash { value: self.log_hash.value, counter: 0, length: self.log_hash.length }\n    }\n}\n\nimpl Ordered for ScopedEncryptedLogHash {\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl OrderedValue<Field> for ScopedEncryptedLogHash {\n    fn value(self) -> Field {\n        self.log_hash.value\n    }\n    fn counter(self) -> u32 {\n        self.log_hash.counter\n    }\n}\n\nimpl Eq for ScopedEncryptedLogHash {\n    fn eq(self, other: ScopedEncryptedLogHash) -> bool {\n        (self.log_hash == other.log_hash)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedEncryptedLogHash {\n    fn empty() -> Self {\n        ScopedEncryptedLogHash {\n            log_hash: EncryptedLogHash::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_ENCRYPTED_LOG_HASH_LENGTH> for ScopedEncryptedLogHash {\n    fn serialize(self) -> [Field; SCOPED_ENCRYPTED_LOG_HASH_LENGTH] {\n       array_concat(self.log_hash.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_ENCRYPTED_LOG_HASH_LENGTH> for ScopedEncryptedLogHash {\n    fn deserialize(values: [Field; SCOPED_ENCRYPTED_LOG_HASH_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            log_hash: reader.read_struct(EncryptedLogHash::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\nstruct NoteLogHash {\n    value: Field,\n    counter: u32,\n    length: Field,\n    note_hash_counter: u32,\n}\n\nimpl NoteLogHash {\n    pub fn expose_to_public(self) -> LogHash {\n        // Hide the actual counter and note hash counter when exposing it to the public kernel.\n        // The counter is usually note_hash.counter + 1, so it can be revealing.\n        // Expose as a LogHash rather than NoteLogHash to avoid bringing an unnec. 0 value around\n        LogHash { value: self.value, counter: 0, length: self.length }\n    }\n}\n\nimpl Ordered for NoteLogHash {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl OrderedValue<Field> for NoteLogHash {\n    fn value(self) -> Field {\n        self.value\n    }\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Eq for NoteLogHash {\n    fn eq(self, other: NoteLogHash) -> bool {\n        (self.value == other.value)\n            & (self.counter == other.counter)\n            & (self.length == other.length) \n            & (self.note_hash_counter == other.note_hash_counter) \n    }\n}\n\nimpl Empty for NoteLogHash {\n    fn empty() -> Self {\n        NoteLogHash {\n            value: 0,\n            counter: 0,\n            length: 0,\n            note_hash_counter: 0,\n        }\n    }\n}\n\nimpl Serialize<NOTE_LOG_HASH_LENGTH> for NoteLogHash {\n    fn serialize(self) -> [Field; NOTE_LOG_HASH_LENGTH] {\n        [self.value, self.counter as Field, self.length, self.note_hash_counter as Field]\n    }\n}\n\nimpl Deserialize<NOTE_LOG_HASH_LENGTH> for NoteLogHash {\n    fn deserialize(values: [Field; NOTE_LOG_HASH_LENGTH]) -> Self {\n        Self {\n            value: values[0],\n            counter: values[1] as u32,\n            length: values[2],\n            note_hash_counter: values[3] as u32,\n        }\n    }\n}\n"},"215":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/append_only_tree_snapshot.nr","source":"struct AppendOnlyTreeSnapshot {\n    root : Field,\n    // TODO(Alvaro) change this to a u64\n    next_available_leaf_index : u32\n}\n\nglobal APPEND_ONLY_TREE_SNAPSHOT_LENGTH: u32 = 2;\n\nimpl AppendOnlyTreeSnapshot {\n    pub fn serialize(self) -> [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH] {\n        [self.root, self.next_available_leaf_index as Field]\n    }\n\n    pub fn deserialize(serialized: [Field; APPEND_ONLY_TREE_SNAPSHOT_LENGTH]) -> AppendOnlyTreeSnapshot {\n        AppendOnlyTreeSnapshot { root: serialized[0], next_available_leaf_index: serialized[1] as u32 }\n    }\n\n    pub fn zero() -> Self {\n        Self { root: 0, next_available_leaf_index: 0 }\n    }\n}\n\nimpl Eq for AppendOnlyTreeSnapshot {\n    fn eq(self, other : AppendOnlyTreeSnapshot) -> bool {\n        (self.root == other.root) & (self.next_available_leaf_index == other.next_available_leaf_index)\n    }\n}\n"},"216":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/call_context.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector, address::AztecAddress,\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n}\n// docs:end:call-context\n\nimpl Eq for CallContext {\n    fn eq(self, other: CallContext) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        let mut serialized: BoundedVec<Field, CALL_CONTEXT_LENGTH> = BoundedVec::new();\n\n        serialized.push(self.msg_sender.to_field());\n        serialized.push(self.storage_contract_address.to_field());\n        serialized.push(self.function_selector.to_field());\n        serialized.push(self.is_delegate_call as Field);\n        serialized.push(self.is_static_call as Field);\n    \n        serialized.storage\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        let mut reader = Reader::new(serialized);\n        CallContext {\n            msg_sender: AztecAddress::from_field(reader.read()),\n            storage_contract_address: AztecAddress::from_field(reader.read()),\n            function_selector: FunctionSelector::from_field(reader.read()),\n            is_delegate_call: reader.read() as bool,\n            is_static_call: reader.read() as bool,\n        }\n    }\n}\n\nimpl Empty for CallContext {\n    fn empty() -> Self {\n        CallContext {\n            msg_sender: AztecAddress::empty(),\n            storage_contract_address: AztecAddress::empty(),\n            function_selector: FunctionSelector::empty(),\n            is_delegate_call: false,\n            is_static_call: false,\n        }\n    }\n}\n\n#[test]\nfn serialize_deserialize_of_empty() {\n    let context = CallContext::empty();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = true;\n\n    let address: AztecAddress = AztecAddress::from_field(69420);\n    context1.msg_sender = address;\n    context2.msg_sender = address;\n\n    assert(context1.eq(context2));\n}\n\n#[test(should_fail)]\nfn not_eq_test_eq() {\n    let mut context1 = CallContext::empty();\n    let mut context2 = CallContext::empty();\n\n    context1.is_delegate_call = true;\n    context2.is_delegate_call = false;\n\n    let address1: AztecAddress = AztecAddress::from_field(69420);\n    let address2: AztecAddress = AztecAddress::from_field(42069);\n\n    context1.msg_sender = address1;\n    context2.msg_sender = address2;\n\n    assert(context1.eq(context2));\n}\n\n#[test]\nfn hash_smoke() {\n    let context = CallContext::empty();\n    let _hashed = context.hash();\n}\n"},"217":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/max_block_number.nr","source":"use crate::{constants::MAX_BLOCK_NUMBER_LENGTH, traits::{Deserialize, Serialize, Empty}};\n\nstruct MaxBlockNumber {\n    _opt: Option<u32>\n}\n\nimpl Empty for MaxBlockNumber {\n    fn empty() -> Self {\n        Self { _opt: Option::none() }\n    }\n}\n\nimpl Eq for MaxBlockNumber {\n    fn eq(self, other: Self) -> bool {\n        self._opt == other._opt\n    }\n}\n\nimpl Serialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn serialize(self) -> [Field; MAX_BLOCK_NUMBER_LENGTH] {\n        [self._opt._is_some as Field, self._opt._value as Field]\n    }\n}\n\nimpl Deserialize<MAX_BLOCK_NUMBER_LENGTH> for MaxBlockNumber {\n    fn deserialize(serialized: [Field; MAX_BLOCK_NUMBER_LENGTH]) -> MaxBlockNumber {\n        MaxBlockNumber {\n            _opt: Option {\n                _is_some: serialized[0] as bool,\n                _value: serialized[1] as u32,\n            }\n        }\n    }\n}\n\nimpl MaxBlockNumber {\n    pub fn new(max_block_number: u32) -> Self {\n        Self { _opt: Option::some(max_block_number) }\n    }\n\n    pub fn is_none(self) -> bool {\n        self._opt.is_none()\n    }\n\n    pub fn is_some(self) -> bool {\n        self._opt.is_some()\n    }\n\n    pub fn unwrap(self) -> u32 {\n        self._opt.unwrap()\n    }\n\n    pub fn unwrap_unchecked(self) -> u32 {\n        self._opt.unwrap_unchecked()\n    }\n\n    pub fn min(lhs: MaxBlockNumber, rhs: MaxBlockNumber) -> MaxBlockNumber {\n        if rhs.is_none() {\n            lhs // lhs might also be none, but in that case both would be\n        } else {\n            MaxBlockNumber::min_with_u32(lhs, rhs.unwrap_unchecked())\n        }\n    }\n\n    pub fn min_with_u32(lhs: MaxBlockNumber, rhs: u32) -> MaxBlockNumber {\n        if lhs._opt.is_none() {\n            MaxBlockNumber::new(rhs)\n        } else {\n            let lhs_value = lhs._opt.unwrap_unchecked();\n\n            MaxBlockNumber::new(if lhs_value < rhs { lhs_value } else { rhs })\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let item = MaxBlockNumber::empty();\n    let serialized = item.serialize();\n    let deserialized = MaxBlockNumber::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn zeroed_is_none() {\n    // Large parts of the kernel rely on zeroed to initialize structs. This conveniently matches what `default` does,\n    // and though we should eventually move everything to use `default`, it's good to check for now that both are\n    // equivalent.\n    let a = MaxBlockNumber::empty();\n    assert(a.is_none());\n}\n\n#[test]\nfn serde_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert(b.is_none());\n}\n\n#[test]\nfn serde_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::deserialize(a.serialize());\n    assert_eq(b.unwrap(), 13);\n}\n\n#[test(should_fail)]\nfn default_unwrap_panics() {\n    let a = MaxBlockNumber::empty();\n    let _ = a.unwrap();\n}\n\n#[test]\nfn min_default_default() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::empty();\n\n    assert(MaxBlockNumber::min(a, b).is_none());\n}\n\n#[test]\nfn min_default_some() {\n    let a = MaxBlockNumber::empty();\n    let b = MaxBlockNumber::new(13);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_some_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = MaxBlockNumber::new(42);\n\n    assert_eq(MaxBlockNumber::min(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min(b, a).unwrap(), 13);\n}\n\n#[test]\nfn min_with_u32_default() {\n    let a = MaxBlockNumber::empty();\n    let b = 42;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 42);\n}\n\n#[test]\nfn min_with_u32_some() {\n    let a = MaxBlockNumber::new(13);\n    let b = 42;\n    let c = 8;\n\n    assert_eq(MaxBlockNumber::min_with_u32(a, b).unwrap(), 13);\n    assert_eq(MaxBlockNumber::min_with_u32(a, c).unwrap(), 8);\n}\n"},"220":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/abis/function_data.nr","source":"use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize, Empty}\n};\n\nstruct FunctionData {\n    selector : FunctionSelector,\n    is_private : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        (self.is_private == other.is_private)\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_private as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_private: serialized[1] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\nimpl Empty for FunctionData {\n    fn empty() -> Self {\n        FunctionData {\n            selector: FunctionSelector::empty(),\n            is_private: false\n        }\n    }\n\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data = FunctionData::empty();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data = FunctionData::empty();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty function data hash\" test\n    let test_data_empty_hash = 0x27b1d0839a5b23baf12a8d195b18ac288fcf401afb2f70b8a4b529ede5fa9fed;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"227":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/messaging/l2_to_l1_message.nr","source":"use crate::{\n    address::{AztecAddress, EthAddress},\n    constants::{L2_TO_L1_MESSAGE_LENGTH, SCOPED_L2_TO_L1_MESSAGE_LENGTH},\n    abis::side_effect::{Ordered, Scoped}, traits::{Deserialize, Empty, Serialize},\n    utils::{arrays::array_concat, reader::Reader}\n};\n\n// Note: Not to be confused with L2ToL1Msg in Solidity\nstruct L2ToL1Message {\n    recipient: EthAddress,\n    content: Field,\n    counter: u32,\n}\n\nimpl Ordered for L2ToL1Message {\n    fn counter(self) -> u32 {\n        self.counter\n    }\n}\n\nimpl Empty for L2ToL1Message {\n    fn empty() -> Self {\n        Self {\n            recipient: EthAddress::empty(),\n            content: 0,\n            counter: 0,\n        }\n    }\n}\n\nimpl Eq for L2ToL1Message {\n    fn eq(self, other: Self) -> bool {\n        (self.recipient == other.recipient) & (self.content == other.content) & (self.counter == other.counter)\n    }\n}\n\nimpl Serialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn serialize(self) -> [Field; L2_TO_L1_MESSAGE_LENGTH] {\n        [self.recipient.to_field(), self.content, self.counter as Field]\n    }\n}\n\nimpl Deserialize<L2_TO_L1_MESSAGE_LENGTH> for L2ToL1Message {\n    fn deserialize(values: [Field; L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        Self {\n            recipient: EthAddress::from_field(values[0]),\n            content: values[1],\n            counter: values[2] as u32,\n        }\n    }\n}\n\nimpl L2ToL1Message {\n    pub fn scope(self, contract_address: AztecAddress) -> ScopedL2ToL1Message {\n        ScopedL2ToL1Message { message: self, contract_address }\n    }\n}\n\nstruct ScopedL2ToL1Message {\n    message: L2ToL1Message,\n    contract_address: AztecAddress,\n}\n\nimpl Scoped<L2ToL1Message> for ScopedL2ToL1Message {\n    fn inner(self) -> L2ToL1Message {\n        self.message\n    }\n    fn contract_address(self) -> AztecAddress {\n        self.contract_address\n    }\n}\n\nimpl Ordered for ScopedL2ToL1Message {\n    fn counter(self) -> u32 {\n        self.message.counter\n    }\n}\n\nimpl Eq for ScopedL2ToL1Message {\n    fn eq(self, other: ScopedL2ToL1Message) -> bool {\n        (self.message == other.message)\n            & (self.contract_address == other.contract_address) \n    }\n}\n\nimpl Empty for ScopedL2ToL1Message {\n    fn empty() -> Self {\n        ScopedL2ToL1Message {\n            message: L2ToL1Message::empty(),\n            contract_address: AztecAddress::empty(),\n        }\n    }\n}\n\nimpl Serialize<SCOPED_L2_TO_L1_MESSAGE_LENGTH> for ScopedL2ToL1Message {\n    fn serialize(self) -> [Field; SCOPED_L2_TO_L1_MESSAGE_LENGTH] {\n        array_concat(self.message.serialize(), [self.contract_address.to_field()])\n    }\n}\n\nimpl Deserialize<SCOPED_L2_TO_L1_MESSAGE_LENGTH> for ScopedL2ToL1Message {\n    fn deserialize(values: [Field; SCOPED_L2_TO_L1_MESSAGE_LENGTH]) -> Self {\n        let mut reader = Reader::new(values);\n        let res = Self {\n            message: reader.read_struct(L2ToL1Message::deserialize),\n            contract_address: reader.read_struct(AztecAddress::deserialize),\n        };\n        reader.finish();\n        res\n    }\n}\n\n#[test]\nfn serialization_of_empty_l2() {\n    let item = L2ToL1Message::empty();\n    let serialized = item.serialize();\n    let deserialized = L2ToL1Message::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n\n#[test]\nfn serialization_of_empty_scoped_l2() {\n    let item = ScopedL2ToL1Message::empty();\n    let serialized = item.serialize();\n    let deserialized = ScopedL2ToL1Message::deserialize(serialized);\n    assert(item.eq(deserialized));\n}\n"},"229":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/storage/map.nr","source":"use crate::{hash::pedersen_hash, traits::ToField};\n\npub fn derive_storage_slot_in_map<K>(storage_slot: Field, key: K) -> Field where K: ToField {\n    pedersen_hash([storage_slot, key.to_field()], 0)\n}\n"},"23":{"path":"std/field/mod.nr","source":"mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n\n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n\n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> u64 {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element by modding\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n"},"234":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/type_serialization.nr","source":"use crate::traits::{Serialize, Deserialize};\n\nglobal BOOL_SERIALIZED_LEN: Field = 1;\nglobal U8_SERIALIZED_LEN: Field = 1;\nglobal U32_SERIALIZED_LEN: Field = 1;\nglobal U64_SERIALIZED_LEN: Field = 1;\nglobal U128_SERIALIZED_LEN: Field = 1;\nglobal FIELD_SERIALIZED_LEN: Field = 1;\n\nimpl Serialize<BOOL_SERIALIZED_LEN> for bool {\n    fn serialize(self) -> [Field; BOOL_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<BOOL_SERIALIZED_LEN> for bool {\n    fn deserialize(fields: [Field; BOOL_SERIALIZED_LEN]) -> bool {\n        fields[0] as bool\n    }\n}\n\nimpl Serialize<U8_SERIALIZED_LEN> for u8 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U8_SERIALIZED_LEN> for u8 {\n    fn deserialize(fields: [Field; U8_SERIALIZED_LEN]) -> Self {\n        fields[0] as u8\n    }\n}\n\nimpl Serialize<U32_SERIALIZED_LEN> for u32 {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U32_SERIALIZED_LEN> for u32 {\n    fn deserialize(fields: [Field; U32_SERIALIZED_LEN]) -> Self {\n        fields[0] as u32\n    }\n}\n\nimpl Serialize<U64_SERIALIZED_LEN> for u64 {\n    fn serialize(self) -> [Field; U64_SERIALIZED_LEN] {\n        [self as Field]\n    }\n}\n\nimpl Deserialize<U64_SERIALIZED_LEN> for u64 {\n    fn deserialize(fields: [Field; U64_SERIALIZED_LEN]) -> Self {\n        fields[0] as u64\n    }\n}\n\nimpl Serialize<U128_SERIALIZED_LEN> for U128 {\n    fn serialize(self) -> [Field; 1] {\n        [self.to_integer()]\n    }\n\n}\n\nimpl Deserialize<U128_SERIALIZED_LEN> for U128 {\n    fn deserialize(fields: [Field; U128_SERIALIZED_LEN]) -> Self {\n        U128::from_integer(fields[0])\n    }\n}\n\nimpl Serialize<FIELD_SERIALIZED_LEN> for Field {\n    fn serialize(self) -> [Field; U32_SERIALIZED_LEN] {\n        [self]\n    }\n}\n\nimpl Deserialize<FIELD_SERIALIZED_LEN> for Field {\n    fn deserialize(fields: [Field; FIELD_SERIALIZED_LEN]) -> Self {\n        fields[0]\n    }\n}\n"},"235":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/traits.nr","source":"use crate::utils::field::field_from_bytes;\n\n// Trait: is_empty\n//\n// The general is_empty trait checks if a data type is is empty,\n// and it defines empty for the basic data types as 0.\n//\n// If a Field is equal to zero, then it is regarded as zero.\n// We will go with this definition for now, however it can be problematic \n// if a value can actually be zero. In a future refactor, we can \n// use the optional type for safety. Doing it now would lead to a worse devex\n// and would make it harder to sync up with the cpp code.\n// Preferred over Default trait to convey intent, as default doesn't necessarily mean empty.\ntrait Empty {\n    fn empty() -> Self;\n}\n\nimpl Empty for Field { fn empty() -> Self {0} }\n\nimpl Empty for u1 { fn empty() -> Self {0} }\nimpl Empty for u8 { fn empty() -> Self {0} }\nimpl Empty for u32 { fn empty() -> Self {0} }\nimpl Empty for u64 { fn empty() -> Self {0} }\nimpl Empty for U128 { fn empty() -> Self {U128::from_integer(0)} }\n\npub fn is_empty<T>(item: T) -> bool where T: Empty + Eq {\n    item.eq(T::empty())\n}\n\npub fn is_empty_array<T, N>(array: [T; N]) -> bool where T: Empty + Eq {\n    array.all(|elem| is_empty(elem))\n}\n\ntrait Hash {\n    fn hash(self) -> Field;\n}\n\ntrait ToField {\n    fn to_field(self) -> Field;\n}\n\nimpl ToField for Field {\n    fn to_field(self) -> Field {\n        self\n    }\n}\n\nimpl ToField for bool { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u1 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u8 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u32 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for u64 { fn to_field(self) -> Field { self as Field } }\nimpl ToField for U128 {\n    fn to_field(self) -> Field {\n        self.to_integer()\n    }\n}\nimpl<N> ToField for str<N> {\n    fn to_field(self) -> Field {\n        assert(N < 32, \"String doesn't fit in a field, consider using Serialize instead\");\n        field_from_bytes(self.as_bytes(), true)\n    }\n}\n\ntrait FromField {\n    fn from_field(value: Field) -> Self;\n}\n\nimpl FromField for Field {\n    fn from_field(value: Field) -> Self {\n        value\n    }\n}\n\nimpl FromField for bool { fn from_field(value: Field) -> Self { value as bool } }\nimpl FromField for u1 { fn from_field(value: Field) -> Self { value as u1 } }\nimpl FromField for u8 { fn from_field(value: Field) -> Self { value as u8 } }\nimpl FromField for u32 { fn from_field(value: Field) -> Self { value as u32 } }\nimpl FromField for u64 { fn from_field(value: Field) -> Self { value as u64 } }\nimpl FromField for U128 {\n    fn from_field(value: Field) -> Self {\n        U128::from_integer(value)\n    }\n}\n\n// docs:start:serialize\ntrait Serialize<N> {\n    fn serialize(self) -> [Field; N];\n}\n// docs:end:serialize\n\nimpl<N> Serialize<N> for [Field; N] {\n    fn serialize(self) -> [Field; N] {\n        self\n    }\n}\nimpl<N> Serialize<N> for str<N> {\n    fn serialize(self) -> [Field; N] {\n        let mut result = [0; N];\n        let bytes: [u8; N] = self.as_bytes();\n        for i in 0..N {\n            result[i] = field_from_bytes([bytes[i];1], true);\n        }\n        result\n    }\n}\n\n// docs:start:deserialize\ntrait Deserialize<N> {\n    fn deserialize(fields: [Field; N]) -> Self;\n}\n// docs:end:deserialize\n\nimpl<N> Deserialize<N> for [Field; N] {\n    fn deserialize(fields: [Field; N]) -> Self {\n        fields\n    }\n}\n"},"237":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/content_commitment.nr","source":"use crate::{\n    constants::CONTENT_COMMITMENT_LENGTH, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct ContentCommitment {\n  num_txs: Field,\n  txs_effects_hash: Field,\n  in_hash: Field,\n  out_hash: Field,\n}\n\nimpl Serialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn serialize(self) -> [Field; CONTENT_COMMITMENT_LENGTH] {\n    let mut fields: BoundedVec<Field, CONTENT_COMMITMENT_LENGTH> = BoundedVec::new();\n\n    fields.push(self.num_txs);\n    fields.push(self.txs_effects_hash);\n    fields.push(self.in_hash);\n    fields.push(self.out_hash);\n\n    fields.storage\n  }\n}\n\nimpl Deserialize<CONTENT_COMMITMENT_LENGTH> for ContentCommitment {\n  fn deserialize(serialized: [Field; CONTENT_COMMITMENT_LENGTH]) -> Self {\n    let num_txs = serialized[0];\n\n    let txs_effects_hash = serialized[1];\n\n    let in_hash = serialized[2];\n\n    let out_hash = serialized[3];\n\n    Self {\n      num_txs,\n      txs_effects_hash,\n      in_hash,\n      out_hash,\n    }\n  }\n}\n\nimpl Empty for ContentCommitment {\n  fn empty() -> Self {\n    Self {\n      num_txs: 0,\n      txs_effects_hash: 0,\n      in_hash: 0,\n      out_hash: 0,\n    }\n  }\n}\n\nimpl Eq for ContentCommitment {\n  fn eq(self, other: Self) -> bool {\n    (self.num_txs == other.num_txs)\n      & (self.txs_effects_hash == other.txs_effects_hash)\n      & (self.in_hash == other.in_hash)\n      & (self.out_hash == other.out_hash)\n  }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let empty = ContentCommitment::empty();\n    let serialized = empty.serialize();\n    let deserialized = ContentCommitment::deserialize(serialized);\n\n    assert(empty.eq(deserialized));\n}\n"},"239":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/header.nr","source":"use crate::{\n    abis::{\n    append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    global_variables::{GlobalVariables, GLOBAL_VARIABLES_LENGTH}\n},\n    constants::{GENERATOR_INDEX__BLOCK_HASH, HEADER_LENGTH, STATE_REFERENCE_LENGTH, CONTENT_COMMITMENT_LENGTH},\n    hash::pedersen_hash, state_reference::StateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice, content_commitment::ContentCommitment\n};\n\n// docs:start:header\nstruct Header {\n    last_archive: AppendOnlyTreeSnapshot,\n    content_commitment: ContentCommitment,\n    state: StateReference,\n    global_variables: GlobalVariables,\n    total_fees: Field\n}\n// docs:end:header\n\nimpl Eq for Header {\n    fn eq(self, other: Self) -> bool {\n        self.last_archive.eq(other.last_archive) &\n        self.content_commitment.eq(other.content_commitment) &\n        self.state.eq(other.state) &\n        self.global_variables.eq(other.global_variables) &\n        self.total_fees.eq(other.total_fees)\n    }\n}\n\nimpl Serialize<HEADER_LENGTH> for Header {\n    fn serialize(self) -> [Field; HEADER_LENGTH] {\n        let mut fields: BoundedVec<Field, HEADER_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.last_archive.serialize());\n        fields.extend_from_array(self.content_commitment.serialize());\n        fields.extend_from_array(self.state.serialize());\n        fields.extend_from_array(self.global_variables.serialize());\n        fields.push(self.total_fees);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<HEADER_LENGTH> for Header {\n    fn deserialize(serialized: [Field; HEADER_LENGTH]) -> Self {\n        let mut offset = 0;\n\n        let last_archive_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let content_commitment_fields = arr_copy_slice(serialized, [0; CONTENT_COMMITMENT_LENGTH], offset);\n        offset = offset + CONTENT_COMMITMENT_LENGTH;\n\n        let state_fields = arr_copy_slice(serialized, [0; STATE_REFERENCE_LENGTH], offset);\n        offset = offset + STATE_REFERENCE_LENGTH;\n\n        let global_variables_fields = arr_copy_slice(serialized, [0; GLOBAL_VARIABLES_LENGTH], offset);\n        offset = offset + GLOBAL_VARIABLES_LENGTH;\n\n        let total_fees = serialized[offset];\n\n        Header {\n            last_archive: AppendOnlyTreeSnapshot::deserialize(last_archive_fields),\n            content_commitment: ContentCommitment::deserialize(content_commitment_fields),\n            state: StateReference::deserialize(state_fields),\n            global_variables: GlobalVariables::deserialize(global_variables_fields),\n            total_fees\n        }\n    }\n}\n\nimpl Empty for Header {\n    fn empty() -> Self {\n        Self {\n            last_archive: AppendOnlyTreeSnapshot::zero(),\n            content_commitment: ContentCommitment::empty(),\n            state: StateReference::empty(),\n            global_variables: GlobalVariables::empty(),\n            total_fees: 0\n        }\n    }\n}\n\nimpl Hash for Header {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__BLOCK_HASH)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let header = Header::empty();\n    let serialized = header.serialize();\n    let deserialized = Header::deserialize(serialized);\n    assert(header.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let header = Header::empty();\n    let _hashed = header.hash();\n}\n\n#[test]\nfn empty_hash_is_zero() {\n    let header = Header::empty();\n    let hash = header.hash();\n\n    // Value from new_contract_data.test.ts \"computes empty hash\" test\n    let test_data_empty_hash = 0x124e8c40a6eca2e3ad10c04050b01a3fad00df3cea47b13592c7571b6914c7a7;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"240":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/hash.nr","source":"use crate::{\n    abis::{\n    contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage,\n    function_selector::FunctionSelector, log_hash::{LogHash, ScopedLogHash, ScopedEncryptedLogHash},\n    note_hash::ScopedNoteHash, nullifier::ScopedNullifier\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    FUNCTION_TREE_HEIGHT, GENERATOR_INDEX__SILOED_NOTE_HASH, GENERATOR_INDEX__OUTER_NULLIFIER,\n    GENERATOR_INDEX__VK, GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH,\n    MAX_ENCRYPTED_LOGS_PER_TX, MAX_NOTE_ENCRYPTED_LOGS_PER_TX\n},\n    merkle_tree::root::root_from_sibling_path, messaging::l2_to_l1_message::ScopedL2ToL1Message,\n    recursion::verification_key::VerificationKey, traits::is_empty,\n    utils::field::field_from_bytes_32_trunc\n};\nuse std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n    let hash_in_a_field = field_from_bytes_32_trunc(sha256_hashed);\n\n    hash_in_a_field\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\nfn compute_note_hash_nonce(tx_hash: Field, note_index_in_tx: u32) -> Field {\n    // Hashing tx hash with note index in tx is guaranteed to be unique\n    pedersen_hash(\n        [\n        tx_hash,\n        note_index_in_tx as Field\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_note_hash(nonce: Field, inner_note_hash: Field) -> Field {\n    let inputs = [nonce, inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\npub fn compute_siloed_note_hash(app: AztecAddress, unique_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        unique_note_hash\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_note_hash(note_hash: ScopedNoteHash, tx_hash: Field, note_index_in_tx: u32) -> Field {\n    if note_hash.contract_address.is_zero() {\n        0\n    } else {\n        let nonce = compute_note_hash_nonce(tx_hash, note_index_in_tx);\n        let unique_note_hash = compute_unique_note_hash(nonce, note_hash.value());\n        compute_siloed_note_hash(note_hash.contract_address, unique_note_hash)\n    }\n}\n\npub fn compute_siloed_nullifier(app: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        app.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\npub fn silo_nullifier(nullifier: ScopedNullifier) -> Field {\n    if nullifier.contract_address.is_zero() {\n        nullifier.value() // Return value instead of 0 because the first nullifier's contract address is zero.\n    } else {\n        compute_siloed_nullifier(nullifier.contract_address, nullifier.value())\n    }\n}\n\npub fn compute_siloed_encrypted_log_hash(address: AztecAddress, randomness: Field, log_hash: Field) -> Field {\n    // TODO: Using 0 GENERATOR_INDEX here as interim before we move to posiedon\n    // NB: A unique separator will be needed for masked_contract_address\n    let mut masked_contract_address = pedersen_hash([address.to_field(), randomness], 0);\n    if randomness == 0 {\n        // In some cases, we actually want to reveal the contract address we are siloing with:\n        // e.g. 'handshaking' contract w/ known address\n        // An app providing randomness = 0 signals to not mask the address.\n        masked_contract_address = address.to_field();\n    }\n    accumulate_sha256([masked_contract_address, log_hash])\n}\n\npub fn silo_encrypted_log_hash(log_hash: ScopedEncryptedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_encrypted_log_hash(\n            log_hash.contract_address,\n            log_hash.log_hash.randomness,\n            log_hash.log_hash.value\n        )\n    }\n}\n\npub fn compute_siloed_unencrypted_log_hash(address: AztecAddress, log_hash: Field) -> Field {\n    accumulate_sha256([address.to_field(), log_hash])\n}\n\npub fn silo_unencrypted_log_hash(log_hash: ScopedLogHash) -> Field {\n    if log_hash.contract_address.is_zero() {\n        0\n    } else {\n        compute_siloed_unencrypted_log_hash(log_hash.contract_address, log_hash.value())\n    }\n}\n\npub fn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    recipient: EthAddress,\n    content: Field,\n    rollup_version_id: Field,\n    chain_id: Field\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new();\n\n    let inputs = [contract_address.to_field(), rollup_version_id, recipient.to_field(), chain_id, content];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn silo_l2_to_l1_message(msg: ScopedL2ToL1Message, rollup_version_id: Field, chain_id: Field) -> Field {\n    if msg.contract_address.is_zero() {\n        0\n    } else {\n        compute_l2_to_l1_hash(\n            msg.contract_address,\n            msg.message.recipient,\n            msg.message.content,\n            rollup_version_id,\n            chain_id\n        )\n    }\n}\n\n// Computes sha256 hash of 2 input hashes.\n//\n// NB: This method now takes in two 31 byte fields - it assumes that any input\n// is the result of a sha_to_field hash and => is truncated\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\npub fn accumulate_sha256(input: [Field; 2]) -> Field {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n\n    // Concatentate two fields into 32x2 = 64 bytes\n    // accumulate_sha256 assumes that the inputs are pre-truncated 31 byte numbers\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..input.len() {\n        let input_as_bytes = input[offset].to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    sha256_to_field(hash_input_flattened)\n}\n\n// Computes the final logs hash for a tx.\n// NB: this assumes MAX_ENCRYPTED_LOGS_PER_TX == MAX_UNENCRYPTED_LOGS_PER_TX\n// to avoid doubling code, since we can't define the byte len to be 32*N directly. \npub fn compute_tx_logs_hash(logs: [LogHash; MAX_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn compute_tx_note_logs_hash(logs: [LogHash; MAX_NOTE_ENCRYPTED_LOGS_PER_TX]) -> Field {\n    // Convert each field element into a byte array and append the bytes to `hash_input_flattened`\n    let mut hash_input_flattened = [0; MAX_NOTE_ENCRYPTED_LOGS_PER_TX * 32];\n    for offset in 0..MAX_NOTE_ENCRYPTED_LOGS_PER_TX {\n        let input_as_bytes = logs[offset].value.to_be_bytes(32);\n        for byte_index in 0..32 {\n            hash_input_flattened[offset * 32 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n    // Ideally we would push to a slice then hash, but there is no sha_slice\n    // Hardcode to 256 bytes for now\n    let mut hash = sha256_to_field(hash_input_flattened);\n    // Not having a 0 value hash for empty logs causes issues with empty txs\n    // used for padding. Returning early is currently unsupported.\n    // We always provide sorted logs here, so 0 being empty means all are empty.\n    if is_empty(logs[0]) {\n        hash = 0;\n    }\n    hash\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\npub fn poseidon2_hash<N>(inputs: [Field; N]) -> Field {\n    std::hash::poseidon2::Poseidon2::hash(inputs, N)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n\n    assert(result == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184c7);\n\n    // to show correctness of the current ver (truncate one byte) vs old ver (mod full bytes):\n    let result_bytes = sha256(full_buffer);\n    let truncated_field = crate::utils::field::field_from_bytes_32_trunc(result_bytes);\n    assert(truncated_field == result);\n    let mod_res = result + (result_bytes[31] as Field);\n    assert(mod_res == 0x448ebbc9e1a31220a2f3830c18eef61b9bd070e5084b7fa2a359fe729184e0);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), EthAddress::zero(), 0, 0, 0);\n    assert(hash_result == 0xb393978842a0fa3d3e1470196f098f473f9678e72463cb65ec4ab5581856c2);\n\n    // Non-zero case\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), EthAddress::from_field(3), 5, 2, 4);\n    assert(hash_result == 0x3f88c1044a05e5340ed20466276500f6d45ca5603913b9091e957161734e16);\n}\n"},"241":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/partial_state_reference.nr","source":"use crate::{\n    abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot, constants::PARTIAL_STATE_REFERENCE_LENGTH,\n    traits::{Deserialize, Empty, Serialize}\n};\n\nstruct PartialStateReference {\n    note_hash_tree: AppendOnlyTreeSnapshot,\n    nullifier_tree: AppendOnlyTreeSnapshot,\n    public_data_tree: AppendOnlyTreeSnapshot,\n}\n\nimpl Eq for PartialStateReference {\n    fn eq(self, other: PartialStateReference) -> bool {\n        self.note_hash_tree.eq(other.note_hash_tree) &\n        self.nullifier_tree.eq(other.nullifier_tree) &\n        self.public_data_tree.eq(other.public_data_tree)\n    }\n}\n\nimpl Serialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn serialize(self) -> [Field; PARTIAL_STATE_REFERENCE_LENGTH] {\n        let serialized_note_hash_tree = self.note_hash_tree.serialize();\n        let serialized_nullifier_tree = self.nullifier_tree.serialize();\n        let serialized_public_data_tree = self.public_data_tree.serialize();\n\n        [\n            serialized_note_hash_tree[0], \n            serialized_note_hash_tree[1],\n            serialized_nullifier_tree[0],\n            serialized_nullifier_tree[1],\n            serialized_public_data_tree[0],\n            serialized_public_data_tree[1],\n        ]\n    }\n}\n\nimpl Deserialize<PARTIAL_STATE_REFERENCE_LENGTH> for PartialStateReference {\n    fn deserialize(serialized: [Field; PARTIAL_STATE_REFERENCE_LENGTH]) -> PartialStateReference {\n        PartialStateReference {\n            note_hash_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[0], serialized[1]]\n            ),\n            nullifier_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[2], serialized[3]]\n            ),\n            public_data_tree: AppendOnlyTreeSnapshot::deserialize(\n                [serialized[4], serialized[5]]\n            ),\n        }\n    }\n}\n\nimpl Empty for PartialStateReference {\n    fn empty() -> Self {\n        Self {\n            note_hash_tree: AppendOnlyTreeSnapshot::zero(),\n            nullifier_tree: AppendOnlyTreeSnapshot::zero(),\n            public_data_tree: AppendOnlyTreeSnapshot::zero(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let partial = PartialStateReference::empty();\n    let _serialized = partial.serialize();\n    let _deserialized = PartialStateReference::deserialize(_serialized);\n}\n"},"243":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/transaction/tx_context.nr","source":"use crate::{\n    constants::{GENERATOR_INDEX__TX_CONTEXT, TX_CONTEXT_LENGTH}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize, Empty}, utils::reader::Reader,\n    abis::gas_settings::GasSettings\n};\n\n// docs:start:tx-context\nstruct TxContext {\n    chain_id : Field,\n    version : Field,\n    gas_settings: GasSettings,\n}\n// docs:end:tx-context\n\nimpl TxContext {\n    pub fn new(chain_id: Field, version: Field, gas_settings: GasSettings) -> Self {\n        TxContext { chain_id, version, gas_settings }\n    }\n}\n\nimpl Eq for TxContext {\n    fn eq(self, other: Self) -> bool {\n        (self.chain_id == other.chain_id) &\n        (self.version == other.version) &\n        (self.gas_settings.eq(other.gas_settings))\n    }\n}\n\nimpl Empty for TxContext {\n    fn empty() -> Self {\n        TxContext {\n            chain_id: 0,\n            version: 0,\n            gas_settings: GasSettings::empty(),\n        }\n    }\n}\n\nimpl Serialize<TX_CONTEXT_LENGTH> for TxContext {\n    fn serialize(self) -> [Field; TX_CONTEXT_LENGTH] {\n        let mut fields: BoundedVec<Field, TX_CONTEXT_LENGTH> = BoundedVec::new();\n\n        fields.push(self.chain_id);\n        fields.push(self.version);\n        fields.extend_from_array(self.gas_settings.serialize());\n\n        assert_eq(fields.len(), TX_CONTEXT_LENGTH);\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<TX_CONTEXT_LENGTH> for TxContext {\n    fn deserialize(serialized: [Field; TX_CONTEXT_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n\n        let context = Self {\n            chain_id: reader.read(),\n            version: reader.read(),\n            gas_settings: reader.read_struct(GasSettings::deserialize),\n        };\n\n        reader.finish();\n        context\n    }\n}\n\nimpl Hash for TxContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__TX_CONTEXT)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context = TxContext::empty();\n    let serialized = context.serialize();\n    let deserialized = TxContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let context = TxContext::empty();\n    let hash = context.hash();\n\n    // Value from tx_context.test.ts \"computes empty item hash\" test\n    let test_data_empty_hash = 0x17e4357684c5a4349b4587c95b0b6161dcb4a3c5b02d4eb2ecc3b02c80193261;\n    assert_eq(hash, test_data_empty_hash);\n}\n"},"247":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/contract_instance.nr","source":"use crate::{\n    address::{\n    aztec_address::AztecAddress, eth_address::EthAddress, partial_address::PartialAddress,\n    public_keys_hash::PublicKeysHash\n},\n    contract_class_id::ContractClassId,\n    constants::{GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA, CONTRACT_INSTANCE_LENGTH},\n    traits::{Deserialize, Hash, Serialize}\n};\n\nstruct ContractInstance {\n    salt : Field,\n    deployer: AztecAddress,\n    contract_class_id : ContractClassId,\n    initialization_hash : Field,\n    public_keys_hash : PublicKeysHash,\n}\n\nimpl Eq for ContractInstance {\n    fn eq(self, other: Self) -> bool {\n        self.public_keys_hash.eq(other.public_keys_hash) &\n        self.initialization_hash.eq(other.initialization_hash) &\n        self.contract_class_id.eq(other.contract_class_id) &\n        self.salt.eq(other.salt)\n    }\n}\n\nimpl Serialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn serialize(self) -> [Field; CONTRACT_INSTANCE_LENGTH] {\n        [\n            self.salt,\n            self.deployer.to_field(),\n            self.contract_class_id.to_field(),\n            self.initialization_hash,\n            self.public_keys_hash.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<CONTRACT_INSTANCE_LENGTH> for ContractInstance {\n    fn deserialize(serialized: [Field; CONTRACT_INSTANCE_LENGTH]) -> Self {\n        Self {\n            salt: serialized[0],\n            deployer: AztecAddress::from_field(serialized[1]),\n            contract_class_id: ContractClassId::from_field(serialized[2]),\n            initialization_hash: serialized[3],\n            public_keys_hash: PublicKeysHash::from_field(serialized[4]),\n        }\n    }\n}\n\nimpl Hash for ContractInstance {\n    fn hash(self) -> Field {\n        self.to_address().to_field()\n    }\n}\n\nimpl ContractInstance {\n    fn to_address(self) -> AztecAddress {\n        AztecAddress::compute(\n            self.public_keys_hash,\n            PartialAddress::compute(\n                self.contract_class_id,\n                self.salt,\n                self.initialization_hash,\n                self.deployer\n            )\n        )\n    }\n}\n"},"249":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/state_reference.nr","source":"use crate::{\n    abis::append_only_tree_snapshot::{AppendOnlyTreeSnapshot, APPEND_ONLY_TREE_SNAPSHOT_LENGTH},\n    constants::{PARTIAL_STATE_REFERENCE_LENGTH, STATE_REFERENCE_LENGTH},\n    partial_state_reference::PartialStateReference, traits::{Deserialize, Empty, Hash, Serialize},\n    utils::arr_copy_slice\n};\n\nstruct StateReference {\n    l1_to_l2_message_tree: AppendOnlyTreeSnapshot,\n    partial: PartialStateReference,\n}\n\nimpl Eq for StateReference {\n    fn eq(self, other: StateReference) -> bool {\n        self.l1_to_l2_message_tree.eq(other.l1_to_l2_message_tree) &\n        self.partial.eq(other.partial)\n    }\n}\n\nimpl Serialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn serialize(self) -> [Field; STATE_REFERENCE_LENGTH] {\n        let mut fields: BoundedVec<Field, STATE_REFERENCE_LENGTH> = BoundedVec::new();\n\n        fields.extend_from_array(self.l1_to_l2_message_tree.serialize());\n        fields.extend_from_array(self.partial.serialize());\n\n        fields.storage\n    }\n}\n\nimpl Deserialize<STATE_REFERENCE_LENGTH> for StateReference {\n    fn deserialize(serialized: [Field; STATE_REFERENCE_LENGTH]) -> StateReference {\n        let mut offset = 0;\n\n        let l1_to_l2_message_tree_fields = arr_copy_slice(serialized, [0; APPEND_ONLY_TREE_SNAPSHOT_LENGTH], offset);\n        offset = offset + APPEND_ONLY_TREE_SNAPSHOT_LENGTH;\n\n        let partial_fields = arr_copy_slice(serialized, [0; PARTIAL_STATE_REFERENCE_LENGTH], offset);\n\n        StateReference {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::deserialize(l1_to_l2_message_tree_fields),\n            partial: PartialStateReference::deserialize(partial_fields),\n        }\n    }\n}\n\nimpl Empty for StateReference {\n    fn empty() -> Self {\n        Self {\n            l1_to_l2_message_tree: AppendOnlyTreeSnapshot::zero(),\n            partial: PartialStateReference::empty(),\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let state = StateReference::empty();\n    let _serialized = state.serialize();\n    let _deserialized = StateReference::deserialize(_serialized);\n}\n"},"25":{"path":"std/hash/mod.nr","source":"mod poseidon;\nmod mimc;\nmod poseidon2;\n\nuse crate::default::Default;\nuse crate::uint128::U128;\nuse crate::sha256::{digest, sha256_var};\nuse crate::embedded_curve_ops::{EmbeddedCurvePoint, EmbeddedCurveScalar, multi_scalar_mul};\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<let N: u32>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n#[no_predicates]\n// docs:start:pedersen_commitment\npub fn pedersen_commitment<let N: u32>(input: [Field; N]) -> EmbeddedCurvePoint {\n    // docs:end:pedersen_commitment\n    let value = pedersen_commitment_with_separator(input, 0);\n    if (value.x == 0) & (value.y == 0) {\n        EmbeddedCurvePoint { x: 0, y: 0, is_infinite: true }\n    } else {\n        EmbeddedCurvePoint { x: value.x, y: value.y, is_infinite: false }\n    }\n}\n\nfn pedersen_commitment_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let mut points = [EmbeddedCurveScalar { lo: 0, hi: 0 }; N];\n    for i in 0..N {\n        points[i] = EmbeddedCurveScalar::from_field(input[i]);\n    }\n    let generators = derive_generators(\"DEFAULT_DOMAIN_SEPARATOR\".as_bytes(), separator);\n    let values = multi_scalar_mul(generators, points);\n    EmbeddedCurvePoint { x: values[0], y: values[1], is_infinite: values[2] as bool }\n}\n\n#[no_predicates]\npub fn pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> EmbeddedCurvePoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    EmbeddedCurvePoint { x: values[0], y: values[1], is_infinite: false }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<let N: u32>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[field(bn254)]\nfn derive_generators<let N: u32, let M: u32>(\n    domain_separator_bytes: [u8; M],\n    starting_index: u32\n) -> [EmbeddedCurvePoint; N] {\n    crate::assert_constant(domain_separator_bytes);\n    crate::assert_constant(starting_index);\n    __derive_generators(domain_separator_bytes, starting_index)\n}\n\n#[builtin(derive_pedersen_generators)]\n#[field(bn254)]\nfn __derive_generators<let N: u32, let M: u32>(domain_separator_bytes: [u8; M], starting_index: u32) -> [EmbeddedCurvePoint; N] {}\n\nfn pedersen_hash_with_separator_noir<let N: u32>(input: [Field; N], separator: u32) -> Field {\n    let v1 = pedersen_commitment_with_separator(input, separator);\n    let length_generator : [EmbeddedCurvePoint; 1] = derive_generators(\"pedersen_hash_length\".as_bytes(), 0);\n    multi_scalar_mul(\n        [length_generator[0], v1],\n        [EmbeddedCurveScalar { lo: N as Field, hi: 0 }, EmbeddedCurveScalar { lo: 1, hi: 0 }]\n    )[0]\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<let N: u32>(input: [Field; N], separator: u32) -> Field {}\n\n#[foreign(pedersen_commitment)]\nfn __pedersen_commitment_with_separator<let N: u32>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn hash_to_field(inputs: [Field]) -> Field {\n    let mut sum = 0;\n\n    for input in inputs {\n        let input_bytes: [u8; 32] = input.to_le_bytes(32).as_array();\n        sum += crate::field::bytes32_to_field(blake2s(input_bytes));\n    }\n\n    sum\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<let N: u32>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<let N: u32>(_input: [Field; N], _state_length: u32) -> [Field; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n\n// Generic hashing support. \n// Partially ported and impacted by rust.\n\n// Hash trait shall be implemented per type.\ntrait Hash{\n    fn hash<H>(self, state: &mut H) where H: Hasher;\n}\n\n// Hasher trait shall be implemented by algorithms to provide hash-agnostic means.\n// TODO: consider making the types generic here ([u8], [Field], etc.)\ntrait Hasher{\n    fn finish(self) -> Field;\n    \n    fn write(&mut self, input: Field);\n}\n\n// BuildHasher is a factory trait, responsible for production of specific Hasher.\ntrait BuildHasher<H> where H: Hasher{\n    fn build_hasher(self) -> H;\n}\n\nstruct BuildHasherDefault<H>;\n\nimpl<H> BuildHasher<H> for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn build_hasher(_self: Self) -> H{\n        H::default()\n    }\n}\n\nimpl<H> Default for BuildHasherDefault<H>\nwhere \n    H: Hasher + Default\n{\n    fn default() -> Self{\n        BuildHasherDefault{}\n    }    \n}\n\nimpl Hash for Field {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self);\n    }\n}\n\nimpl Hash for u8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for u64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i8 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i32 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for i64 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for bool {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self as Field);\n    }\n}\n\nimpl Hash for () {\n    fn hash<H>(_self: Self, _state: &mut H) where H: Hasher {}\n}\n\nimpl Hash for U128 {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        H::write(state, self.lo as Field);\n        H::write(state, self.hi as Field);\n    }\n}\n\nimpl<T, let N: u32> Hash for [T; N] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<T> Hash for [T] where T: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.len().hash(state);\n        for elem in self {\n            elem.hash(state);\n        }\n    }\n}\n\nimpl<A, B> Hash for (A, B) where A: Hash, B: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n    }\n}\n\nimpl<A, B, C> Hash for (A, B, C) where A: Hash, B: Hash, C: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n    }\n}\n\nimpl<A, B, C, D> Hash for (A, B, C, D) where A: Hash, B: Hash, C: Hash, D: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n    }\n}\n\nimpl<A, B, C, D, E> Hash for (A, B, C, D, E) where A: Hash, B: Hash, C: Hash, D: Hash, E: Hash {\n    fn hash<H>(self, state: &mut H) where H: Hasher{\n        self.0.hash(state);\n        self.1.hash(state);\n        self.2.hash(state);\n        self.3.hash(state);\n        self.4.hash(state);\n    }\n}\n\n#[test]\nfn assert_pedersen_noir() {\n    // TODO: make this a fuzzer test once fuzzer supports curve-specific blackbox functions.\n    let input = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n    assert_eq(pedersen_hash_with_separator(input, 4), pedersen_hash_with_separator_noir(input, 4));\n    assert_eq(pedersen_commitment_with_separator(input, 4), pedersen_commitment_with_separator_noir(input, 4));\n}\n"},"263":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/reader.nr","source":"struct Reader<N> {\n    data: [Field; N],\n    offset: u32,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_u32(&mut self) -> u32 {\n        self.read() as u32\n    }\n\n    pub fn read_bool(&mut self) -> bool {\n        self.read() as bool\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n"},"273":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/field.nr","source":"pub fn field_from_bytes<N>(bytes: [u8; N], big_endian: bool) -> Field {\n    assert(bytes.len() < 32, \"field_from_bytes: N must be less than 32\");\n    let mut as_field = 0;\n    let mut offset = 1;\n    for i in 0..N {\n        let mut index = i;\n        if big_endian {\n            index = N - i - 1;\n        }\n        as_field += (bytes[index] as Field) * offset;\n        offset *= 256;\n    }\n\n    as_field\n}\n\n// Convert a 32 byte array to a field element by truncating the final byte\npub fn field_from_bytes_32_trunc(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..15 {\n        // covers bytes 16..30 (31 is truncated and ignored)\n        low = low + (bytes32[15 + 15 - i] as Field) * v;\n        v = v * 256;\n        // covers bytes 0..14\n        high = high + (bytes32[14 - i] as Field) * v;\n    }\n    // covers byte 15\n    low = low + (bytes32[15] as Field) * v;\n\n    low + high * v\n}\n\n// TODO to radix returns u8, so we cannot use bigger radixes. It'd be ideal to use a radix of the maximum range-constrained integer noir supports\npub fn full_field_less_than(lhs: Field, rhs: Field) -> bool {\n    lhs.lt(rhs)\n}\n\npub fn full_field_greater_than(lhs: Field, rhs: Field) -> bool {\n    rhs.lt(lhs)\n}\n\n#[test]\nunconstrained fn bytes_field_test() {\n    // Tests correctness of field_from_bytes_32_trunc against existing methods\n    // Bytes representing 0x543e0a6642ffeb8039296861765a53407bba62bd1c97ca43374de950bbe0a7\n    let inputs = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167\n    ];\n    let field = field_from_bytes(inputs, true);\n    let return_bytes = field.to_be_bytes(31);\n    for i in 0..31 {\n        assert_eq(inputs[i], return_bytes[i]);\n    }\n    // 32 bytes - we remove the final byte, and check it matches the field\n    let inputs2 = [\n        84, 62, 10, 102, 66, 255, 235, 128, 57, 41, 104, 97, 118, 90, 83, 64, 123, 186, 98, 189, 28, 151, 202, 67, 55, 77, 233, 80, 187, 224, 167, 158\n    ];\n    let field2 = field_from_bytes_32_trunc(inputs2);\n    let return_bytes2 = field.to_be_bytes(31);\n\n    for i in 0..31 {\n        assert_eq(return_bytes2[i], return_bytes[i]);\n    }\n    assert_eq(field2, field);\n}\n"},"275":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/utils/mod.nr","source":"// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: u32) -> [T; M] {\n    let iterator_len = if N > M { M } else { N };\n    for i in 0..iterator_len {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n"},"289":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/eth_address.nr","source":"use crate::{\n    constants::ETH_ADDRESS_LENGTH, hash::pedersen_hash,\n    traits::{Empty, ToField, Serialize, Deserialize}, utils\n};\n\nstruct EthAddress{\n    inner : Field\n}\n\nimpl Eq for EthAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for EthAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for EthAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn serialize(self: Self) -> [Field; ETH_ADDRESS_LENGTH] {\n        [self.inner]\n    }\n}\n\nimpl Deserialize<ETH_ADDRESS_LENGTH> for EthAddress {\n    fn deserialize(fields: [Field; ETH_ADDRESS_LENGTH]) -> Self {\n        EthAddress::from_field(fields[0])\n    }\n}\n\nimpl EthAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn from_field(field: Field) -> Self {\n        field.assert_max_bit_size(160);\n        Self { inner: field }\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n"},"290":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/aztec_address.nr","source":"use crate::{\n    crate::address::{eth_address::EthAddress, partial_address::PartialAddress, public_keys_hash::PublicKeysHash},\n    constants::{AZTEC_ADDRESS_LENGTH, GENERATOR_INDEX__CONTRACT_ADDRESS_V1},\n    contract_class_id::ContractClassId, hash::poseidon2_hash,\n    traits::{Empty, FromField, ToField, Serialize, Deserialize}, utils\n};\n\n// Aztec address\nstruct AztecAddress {\n    inner : Field\n}\n\nimpl Eq for AztecAddress {\n    fn eq(self, other : Self) -> bool {\n        self.to_field() == other.to_field()\n    }\n}\n\nimpl Empty for AztecAddress {\n    fn empty() -> Self {\n        Self {\n            inner : 0\n        }\n    }\n}\n\nimpl ToField for AztecAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl FromField for AztecAddress {\n    fn from_field(value: Field) -> AztecAddress {\n        AztecAddress { inner: value }\n    }\n}\n\nimpl Serialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn serialize(self: Self) -> [Field; AZTEC_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<AZTEC_ADDRESS_LENGTH> for AztecAddress {\n    fn deserialize(fields: [Field; AZTEC_ADDRESS_LENGTH]) -> Self {\n        FromField::from_field(fields[0])\n    }\n}\n\nimpl AztecAddress {\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n\n    pub fn compute(pub_keys_hash: PublicKeysHash, partial_address: PartialAddress) -> AztecAddress {\n        AztecAddress::from_field(\n            poseidon2_hash([pub_keys_hash.to_field(), partial_address.to_field(), GENERATOR_INDEX__CONTRACT_ADDRESS_V1])\n        )\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.inner == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n\n    pub fn conditional_assign(predicate: bool, lhs: Self, rhs: Self) -> Self {\n        let result = utils::conditional_assign(predicate, rhs.to_field(), lhs.to_field());\n        Self { inner: result }\n    }\n}\n\n#[test]\nfn compute_address_from_partial_and_pub_keys_hash() {\n    let pub_keys_hash = PublicKeysHash::from_field(1);\n    let partial_address = PartialAddress::from_field(2);\n\n    let address = AztecAddress::compute(pub_keys_hash, partial_address);\n    let expected_computed_address_from_partial_and_pubkey = 0x1b6ead051e7b42665064ca6cf1ec77da0a36d86e00d1ff6e44077966c0c3a9fa;\n    assert(address.to_field() == expected_computed_address_from_partial_and_pubkey);\n}\n\n#[test]\nfn from_field_to_field() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(FromField::from_field(address.to_field()), address);\n}\n\n#[test]\nfn serde() {\n    let address = AztecAddress { inner: 37 };\n    assert_eq(Deserialize::deserialize(address.serialize()), address);\n}\n"},"292":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/partial_address.nr","source":"use crate::{\n    address::{\n    eth_address::EthAddress, salted_initialization_hash::SaltedInitializationHash,\n    aztec_address::AztecAddress\n},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, contract_class_id::ContractClassId,\n    hash::pedersen_hash, traits::{ToField, FromField, Serialize, Deserialize}\n};\n\nglobal PARTIAL_ADDRESS_LENGTH = 1;\n\n// Partial address\nstruct PartialAddress {\n    inner : Field\n}\n\nimpl ToField for PartialAddress {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl Serialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn serialize(self: Self) -> [Field; PARTIAL_ADDRESS_LENGTH] {\n        [self.to_field()]\n    }\n}\n\nimpl Deserialize<PARTIAL_ADDRESS_LENGTH> for PartialAddress {\n    fn deserialize(fields: [Field; PARTIAL_ADDRESS_LENGTH]) -> Self {\n       PartialAddress { inner: fields[0] }\n    }\n}\n\nimpl PartialAddress {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(\n        contract_class_id: ContractClassId,\n        salt: Field,\n        initialization_hash: Field,\n        deployer: AztecAddress\n    ) -> Self {\n        PartialAddress::compute_from_salted_initialization_hash(\n            contract_class_id,\n            SaltedInitializationHash::compute(salt, initialization_hash, deployer)\n        )\n    }\n\n    pub fn compute_from_salted_initialization_hash(\n        contract_class_id: ContractClassId,\n        salted_initialization_hash: SaltedInitializationHash\n    ) -> Self {\n        PartialAddress::from_field(\n            pedersen_hash(\n                [\n            contract_class_id.to_field(),\n            salted_initialization_hash.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn to_field(self) -> Field {\n        self.inner\n    }\n\n    pub fn is_zero(self) -> bool {\n        self.to_field() == 0\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"293":{"path":"/usr/src/noir-projects/noir-protocol-circuits/crates/types/src/address/salted_initialization_hash.nr","source":"use crate::{\n    address::{eth_address::EthAddress, aztec_address::AztecAddress},\n    constants::GENERATOR_INDEX__PARTIAL_ADDRESS, hash::pedersen_hash, traits::ToField\n};\n\n// Salted initialization hash. Used in the computation of a partial address.\nstruct SaltedInitializationHash {\n    inner: Field\n}\n\nimpl ToField for SaltedInitializationHash {\n    fn to_field(self) -> Field {\n        self.inner\n    }\n}\n\nimpl SaltedInitializationHash {\n    pub fn from_field(field: Field) -> Self {\n        Self { inner: field }\n    }\n\n    pub fn compute(salt: Field, initialization_hash: Field, deployer: AztecAddress) -> Self {\n        SaltedInitializationHash::from_field(\n            pedersen_hash(\n                [\n            salt,\n            initialization_hash,\n            deployer.to_field()\n        ],\n                GENERATOR_INDEX__PARTIAL_ADDRESS\n            )\n        )\n    }\n\n    pub fn assert_is_zero(self) {\n        assert(self.to_field() == 0);\n    }\n}\n"},"30":{"path":"std/hash/poseidon2.nr","source":"use crate::hash::Hasher;\nuse crate::default::Default;\n\nglobal RATE: u32 = 3;\n\nstruct Poseidon2 {\n    cache: [Field;3],\n    state: [Field;4],\n    cache_size: u32,\n    squeeze_mode: bool, // 0 => absorb, 1 => squeeze\n}\n\nimpl Poseidon2 {\n    #[no_predicates]\n    pub fn hash<let N: u32>(input: [Field; N], message_size: u32) -> Field {\n        if message_size == N {\n            Poseidon2::hash_internal(input, N, false)\n        } else {\n            Poseidon2::hash_internal(input, message_size, true)\n        }\n    }\n\n    fn new(iv: Field) -> Poseidon2 {\n        let mut result = Poseidon2 { cache: [0; 3], state: [0; 4], cache_size: 0, squeeze_mode: false };\n        result.state[RATE] = iv;\n        result\n    }\n\n    fn perform_duplex(&mut self) -> [Field; RATE] {\n        // zero-pad the cache\n        for i in 0..RATE {\n            if i >= self.cache_size {\n                self.cache[i] = 0;\n            }\n        }\n        // add the cache into sponge state\n        for i in 0..RATE {\n            self.state[i] += self.cache[i];\n        }\n        self.state = crate::hash::poseidon2_permutation(self.state, 4);\n        // return `RATE` number of field elements from the sponge state.\n        let mut result = [0; RATE];\n        for i in 0..RATE {\n            result[i] = self.state[i];\n        }\n        result\n    }\n\n    fn absorb(&mut self, input: Field) {\n        if (!self.squeeze_mode) & (self.cache_size == RATE) {\n            // If we're absorbing, and the cache is full, apply the sponge permutation to compress the cache\n            let _ = self.perform_duplex();\n            self.cache[0] = input;\n            self.cache_size = 1;\n        } else if (!self.squeeze_mode) & (self.cache_size != RATE) {\n            // If we're absorbing, and the cache is not full, add the input into the cache\n            self.cache[self.cache_size] = input;\n            self.cache_size += 1;\n        } else if self.squeeze_mode {\n            // If we're in squeeze mode, switch to absorb mode and add the input into the cache.\n            // N.B. I don't think this code path can be reached?!\n            self.cache[0] = input;\n            self.cache_size = 1;\n            self.squeeze_mode = false;\n        }\n    }\n\n    fn squeeze(&mut self) -> Field {\n        if self.squeeze_mode & (self.cache_size == 0) {\n            // If we're in squeze mode and the cache is empty, there is nothing left to squeeze out of the sponge!\n            // Switch to absorb mode.\n            self.squeeze_mode = false;\n            self.cache_size = 0;\n        }\n        if !self.squeeze_mode {\n            // If we're in absorb mode, apply sponge permutation to compress the cache, populate cache with compressed\n            // state and switch to squeeze mode. Note: this code block will execute if the previous `if` condition was\n            // matched\n            let new_output_elements = self.perform_duplex();\n            self.squeeze_mode = true;\n            for i in 0..RATE {\n                self.cache[i] = new_output_elements[i];\n            }\n            self.cache_size = RATE;\n        }\n        // By this point, we should have a non-empty cache. Pop one item off the top of the cache and return it.\n        let result = self.cache[0];\n        for i in 1..RATE {\n            if i < self.cache_size {\n                self.cache[i - 1] = self.cache[i];\n            }\n        }\n        self.cache_size -= 1;\n        self.cache[self.cache_size] = 0;\n        result\n    }\n\n    fn hash_internal<let N: u32>(input: [Field; N], in_len: u32, is_variable_length: bool) -> Field {\n        let two_pow_64 = 18446744073709551616;\n        let iv : Field = (in_len as Field) * two_pow_64;\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..input.len() {\n            if i < in_len {\n                sponge.absorb(input[i]);\n            }\n        }\n\n        // In the case where the hash preimage is variable-length, we append `1` to the end of the input, to distinguish\n        // from fixed-length hashes. (the combination of this additional field element + the hash IV ensures\n        // fixed-length and variable-length hashes do not collide)\n        if is_variable_length {\n            sponge.absorb(1);\n        }\n        sponge.squeeze()\n    }\n}\n\nstruct Poseidon2Hasher{\n    _state: [Field],\n}\n\nimpl Hasher for Poseidon2Hasher {\n    fn finish(self) -> Field {\n        let iv : Field = (self._state.len() as Field)*18446744073709551616;    // iv = (self._state.len() << 64)\n        let mut sponge = Poseidon2::new(iv);\n        for i in 0..self._state.len() {\n            sponge.absorb(self._state[i]);\n        }\n        sponge.squeeze()\n    }\n\n    fn write(&mut self, input: Field){\n        self._state = self._state.push_back(input);\n    }\n}\n\nimpl Default for Poseidon2Hasher {\n    fn default() -> Self {\n        Poseidon2Hasher {\n            _state: &[],\n        }\n    }\n}\n"},"303":{"path":"/usr/src/noir-projects/noir-contracts/contracts/token_contract/src/main.nr","source":"// docs:start:token_all\n// docs:start:imports\nmod types;\nmod test;\n\n// Minimal token implementation that supports `AuthWit` accounts.\n// The auth message follows a similar pattern to the cross-chain message and includes a designated caller.\n// The designated caller is ALWAYS used here, and not based on a flag as cross-chain.\n// message hash = H([caller, contract, selector, ...args])\n// To be read as `caller` calls function at `contract` defined by `selector` with `args`\n// Including a nonce in the message hash ensures that the message can only be used once.\n\ncontract Token {\n    // Libs\n\n    use dep::compressed_string::FieldCompressedString;\n\n    use dep::aztec::{\n        hash::compute_secret_hash,\n        prelude::{NoteGetterOptions, Map, PublicMutable, SharedImmutable, PrivateSet, AztecAddress},\n        encrypted_logs::{\n        encrypted_note_emission::{\n        encode_and_encrypt_note, encode_and_encrypt_note_with_keys,\n        encode_and_encrypt_note_with_keys_unconstrained\n    },\n        encrypted_event_emission::{encode_and_encrypt_event, encode_and_encrypt_event_with_keys_unconstrained}\n    }\n    };\n\n    // docs:start:import_authwit\n    use dep::authwit::auth::{assert_current_call_valid_authwit, assert_current_call_valid_authwit_public, compute_authwit_nullifier};\n    // docs:end:import_authwit\n\n    use crate::types::{transparent_note::TransparentNote, token_note::{TokenNote, TOKEN_NOTE_LEN}, balances_map::BalancesMap};\n    // docs:end::imports\n\n    #[aztec(event)]\n    struct Transfer {\n        from: AztecAddress,\n        to: AztecAddress,\n        amount: Field,\n    }\n\n    // docs:start:storage_struct\n    #[aztec(storage)]\n    struct Storage {\n        // docs:start:storage_admin\n        admin: PublicMutable<AztecAddress>,\n        // docs:end:storage_admin\n        // docs:start:storage_minters\n        minters: Map<AztecAddress, PublicMutable<bool>>,\n        // docs:end:storage_minters\n        // docs:start:storage_balances\n        balances: BalancesMap<TokenNote>,\n        // docs:end:storage_balances\n        total_supply: PublicMutable<U128>,\n        // docs:start:storage_pending_shields\n        pending_shields: PrivateSet<TransparentNote>,\n        // docs:end:storage_pending_shields\n        public_balances: Map<AztecAddress, PublicMutable<U128>>,\n        symbol: SharedImmutable<FieldCompressedString>,\n        name: SharedImmutable<FieldCompressedString>,\n        // docs:start:storage_decimals\n        decimals: SharedImmutable<u8>,\n        // docs:end:storage_decimals\n    }\n    // docs:end:storage_struct\n\n    // docs:start:constructor\n    #[aztec(public)]\n    #[aztec(initializer)]\n    fn constructor(admin: AztecAddress, name: str<31>, symbol: str<31>, decimals: u8) {\n        assert(!admin.is_zero(), \"invalid admin\");\n        storage.admin.write(admin);\n        storage.minters.at(admin).write(true);\n        storage.name.initialize(FieldCompressedString::from_string(name));\n        storage.symbol.initialize(FieldCompressedString::from_string(symbol));\n        // docs:start:initialize_decimals\n        storage.decimals.initialize(decimals);\n        // docs:end:initialize_decimals\n    }\n    // docs:end:constructor\n\n    // docs:start:set_admin\n    #[aztec(public)]\n    fn set_admin(new_admin: AztecAddress) {\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:start:write_admin\n        storage.admin.write(new_admin);\n        // docs:end:write_admin\n    }\n    // docs:end:set_admin\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn public_get_name() -> pub FieldCompressedString {\n        storage.name.read_public()\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn private_get_name() -> pub FieldCompressedString {\n        storage.name.read_private()\n    }\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn public_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_public()\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn private_get_symbol() -> pub FieldCompressedString {\n        storage.symbol.read_private()\n    }\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn public_get_decimals() -> pub u8 {\n        // docs:start:read_decimals_public\n        storage.decimals.read_public()\n        // docs:end:read_decimals_public\n    }\n\n    #[aztec(private)]\n    #[aztec(view)]\n    fn private_get_decimals() -> pub u8 {\n        // docs:start:read_decimals_private\n        storage.decimals.read_private()\n        // docs:end:read_decimals_private\n    }\n\n    // docs:start:admin\n    #[aztec(public)]\n    #[aztec(view)]\n    fn admin() -> Field {\n        storage.admin.read().to_field()\n    }\n    // docs:end:admin\n\n    // docs:start:is_minter\n    #[aztec(public)]\n    #[aztec(view)]\n    fn is_minter(minter: AztecAddress) -> bool {\n        storage.minters.at(minter).read()\n    }\n    // docs:end:is_minter\n\n    // docs:start:total_supply\n    #[aztec(public)]\n    #[aztec(view)]\n    fn total_supply() -> Field {\n        storage.total_supply.read().to_integer()\n    }\n    // docs:end:total_supply\n\n    // docs:start:balance_of_public\n    #[aztec(public)]\n    #[aztec(view)]\n    fn balance_of_public(owner: AztecAddress) -> Field {\n        storage.public_balances.at(owner).read().to_integer()\n    }\n    // docs:end:balance_of_public\n\n    // docs:start:set_minter\n    #[aztec(public)]\n    fn set_minter(minter: AztecAddress, approve: bool) {\n        // docs:start:read_admin\n        assert(storage.admin.read().eq(context.msg_sender()), \"caller is not admin\");\n        // docs:end:read_admin\n        // docs:start:write_minter\n        storage.minters.at(minter).write(approve);\n        // docs:end:write_minter\n    }\n    // docs:end:set_minter\n\n    // docs:start:mint_public\n    #[aztec(public)]\n    fn mint_public(to: AztecAddress, amount: Field) {\n        // docs:start:read_minter\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n        // docs:end:read_minter\n        let amount = U128::from_integer(amount);\n        let new_balance = storage.public_balances.at(to).read().add(amount);\n        let supply = storage.total_supply.read().add(amount);\n\n        storage.public_balances.at(to).write(new_balance);\n        storage.total_supply.write(supply);\n    }\n    // docs:end:mint_public\n\n    // docs:start:mint_private\n    #[aztec(public)]\n    fn mint_private(amount: Field, secret_hash: Field) {\n        assert(storage.minters.at(context.msg_sender()).read(), \"caller is not minter\");\n        let pending_shields = storage.pending_shields;\n        let mut note = TransparentNote::new(amount, secret_hash);\n        let supply = storage.total_supply.read().add(U128::from_integer(amount));\n\n        storage.total_supply.write(supply);\n        // docs:start:insert_from_public\n        pending_shields.insert_from_public(&mut note);\n        // docs:end:insert_from_public\n    }\n    // docs:end:mint_private\n\n    // TODO: Nuke this - test functions do not belong to token contract!\n    #[aztec(private)]\n    fn privately_mint_private_note(amount: Field) {\n        let caller = context.msg_sender();\n        storage.balances.add(caller, U128::from_integer(amount)).emit(encode_and_encrypt_note(&mut context, caller, caller));\n\n        Token::at(context.this_address()).assert_minter_and_mint(context.msg_sender(), amount).enqueue(&mut context);\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn assert_minter_and_mint(minter: AztecAddress, amount: Field) {\n        assert(storage.minters.at(minter).read(), \"caller is not minter\");\n        let supply = storage.total_supply.read() + U128::from_integer(amount);\n        storage.total_supply.write(supply);\n    }\n\n    // docs:start:shield\n    #[aztec(public)]\n    fn shield(from: AztecAddress, amount: Field, secret_hash: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            // The redeem is only spendable once, so we need to ensure that you cannot insert multiple shields from the same message.\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n\n        let pending_shields = storage.pending_shields;\n        let mut note = TransparentNote::new(amount.to_field(), secret_hash);\n\n        storage.public_balances.at(from).write(from_balance);\n        pending_shields.insert_from_public(&mut note);\n    }\n    // docs:end:shield\n\n    // docs:start:transfer_public\n    #[aztec(public)]\n    fn transfer_public(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n\n        let to_balance = storage.public_balances.at(to).read().add(amount);\n        storage.public_balances.at(to).write(to_balance);\n    }\n    // docs:end:transfer_public\n\n    // docs:start:burn_public\n    #[aztec(public)]\n    fn burn_public(from: AztecAddress, amount: Field, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit_public\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit_public(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit_public\n\n        let amount = U128::from_integer(amount);\n        let from_balance = storage.public_balances.at(from).read().sub(amount);\n        storage.public_balances.at(from).write(from_balance);\n\n        let new_supply = storage.total_supply.read().sub(amount);\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:burn_public\n\n    // docs:start:redeem_shield\n    #[aztec(private)]\n    fn redeem_shield(to: AztecAddress, amount: Field, secret: Field) {\n        let pending_shields = storage.pending_shields;\n        let secret_hash = compute_secret_hash(secret);\n        // Get 1 note (set_limit(1)) which has amount stored in field with index 0 (select(0, amount)) and secret_hash\n        // stored in field with index 1 (select(1, secret_hash)).\n        let mut options = NoteGetterOptions::new();\n        options = options.select(TransparentNote::properties().amount, amount, Option::none()).select(\n            TransparentNote::properties().secret_hash,\n            secret_hash,\n            Option::none()\n        ).set_limit(1);\n        let notes = pending_shields.get_notes(options);\n        let note = notes.get_unchecked(0);\n        // Remove the note from the pending shields set\n        pending_shields.remove(note);\n\n        // Add the token note to user's balances set\n        // Note: Using context.msg_sender() as a sender below makes this incompatible with escrows because we send\n        // outgoing logs to that address and to send outgoing logs you need to get a hold of ovsk_m.\n        let from = context.msg_sender();\n        storage.balances.add(to, U128::from_integer(amount)).emit(encode_and_encrypt_note(&mut context, from, to));\n    }\n    // docs:end:redeem_shield\n\n    // docs:start:unshield\n    #[aztec(private)]\n    fn unshield(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        storage.balances.sub(from, U128::from_integer(amount)).emit(encode_and_encrypt_note(&mut context, from, from));\n\n        Token::at(context.this_address())._increase_public_balance(to, amount).enqueue(&mut context);\n    }\n    // docs:end:unshield\n\n    // docs:start:transfer\n    #[aztec(private)]\n    fn transfer(to: AztecAddress, amount: Field) {\n        let from = context.msg_sender();\n\n        // By fetching the keys here, we can avoid doing an extra read from the storage, since from_ovpk would\n        // be needed twice.\n        let header = context.get_header();\n        let from_ovpk = header.get_ovpk_m(&mut context, from);\n        let from_ivpk = header.get_ivpk_m(&mut context, from);\n        let to_ivpk = header.get_ivpk_m(&mut context, to);\n\n        let amount = U128::from_integer(amount);\n        storage.balances.sub(from, amount).emit(encode_and_encrypt_note_with_keys_unconstrained(&mut context, from_ovpk, from_ivpk));\n        storage.balances.add(to, amount).emit(encode_and_encrypt_note_with_keys_unconstrained(&mut context, from_ovpk, to_ivpk));\n\n        Transfer { from, to, amount: amount.to_field() }.emit(encode_and_encrypt_event_with_keys_unconstrained(&mut context, from_ovpk, to_ivpk));\n    }\n    // docs:end:transfer\n\n    /**\n     * Cancel a private authentication witness.\n     * @param inner_hash The inner hash of the authwit to cancel.\n     */\n    // docs:start:cancel_authwit\n    #[aztec(private)]\n    fn cancel_authwit(inner_hash: Field) {\n        let on_behalf_of = context.msg_sender();\n        let nullifier = compute_authwit_nullifier(on_behalf_of, inner_hash);\n        context.push_nullifier(nullifier, 0);\n    }\n    // docs:end:cancel_authwit\n\n    // docs:start:transfer_from\n    #[aztec(private)]\n    fn transfer_from(from: AztecAddress, to: AztecAddress, amount: Field, nonce: Field) {\n        // docs:start:assert_current_call_valid_authwit\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n        // docs:end:assert_current_call_valid_authwit\n\n        // By fetching the keys here, we can avoid doing an extra read from the storage, since from_ovpk would\n        // be needed twice.\n        let header = context.get_header();\n        let from_ovpk = header.get_ovpk_m(&mut context, from);\n        let from_ivpk = header.get_ivpk_m(&mut context, from);\n        let to_ivpk = header.get_ivpk_m(&mut context, to);\n\n        let amount = U128::from_integer(amount);\n        // docs:start:increase_private_balance\n        // docs:start:encrypted\n        storage.balances.sub(from, amount).emit(encode_and_encrypt_note_with_keys(&mut context, from_ovpk, from_ivpk));\n        // docs:end:encrypted\n        // docs:end:increase_private_balance\n        storage.balances.add(to, amount).emit(encode_and_encrypt_note_with_keys(&mut context, from_ovpk, to_ivpk));\n    }\n    // docs:end:transfer_from\n\n    // docs:start:burn\n    #[aztec(private)]\n    fn burn(from: AztecAddress, amount: Field, nonce: Field) {\n        if (!from.eq(context.msg_sender())) {\n            assert_current_call_valid_authwit(&mut context, from);\n        } else {\n            assert(nonce == 0, \"invalid nonce\");\n        }\n\n        storage.balances.sub(from, U128::from_integer(amount)).emit(encode_and_encrypt_note(&mut context, from, from));\n\n        Token::at(context.this_address())._reduce_total_supply(amount).enqueue(&mut context);\n    }\n    // docs:end:burn\n\n    /// Internal ///\n\n    // docs:start:increase_public_balance\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _increase_public_balance(to: AztecAddress, amount: Field) {\n        let new_balance = storage.public_balances.at(to).read().add(U128::from_integer(amount));\n        storage.public_balances.at(to).write(new_balance);\n    }\n    // docs:end:increase_public_balance\n\n    // docs:start:reduce_total_supply\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _reduce_total_supply(amount: Field) {\n        // Only to be called from burn.\n        let new_supply = storage.total_supply.read().sub(U128::from_integer(amount));\n        storage.total_supply.write(new_supply);\n    }\n    // docs:end:reduce_total_supply\n\n    /// Unconstrained ///\n\n    // docs:start:balance_of_private\n    unconstrained fn balance_of_private(owner: AztecAddress) -> pub Field {\n        storage.balances.balance_of(owner).to_field()\n    }\n    // docs:end:balance_of_private\n}\n// docs:end:token_all"},"315":{"path":"/usr/src/noir-projects/noir-contracts/contracts/token_contract/src/types/token_note.nr","source":"use dep::aztec::{\n    prelude::{AztecAddress, NoteHeader, NoteInterface, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash},\n    note::utils::compute_note_hash_for_consumption, oracle::unsafe_rand::unsafe_rand,\n    keys::getters::get_nsk_app\n};\n\ntrait OwnedNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self;\n    fn get_amount(self) -> U128;\n}\n\nglobal TOKEN_NOTE_LEN: Field = 3; // 3 plus a header.\n// TOKEN_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal TOKEN_NOTE_BYTES_LEN: Field = 3 * 32 + 64;\n\n#[aztec(note)]\nstruct TokenNote {\n    // The amount of tokens in the note\n    amount: U128,\n    // The nullifying public key hash is used with the nsk_app to ensure that the note can be privately spent.\n    npk_m_hash: Field,\n    // Randomness of the note to hide its contents\n    randomness: Field,\n}\n\nimpl NoteInterface<TOKEN_NOTE_LEN, TOKEN_NOTE_BYTES_LEN> for TokenNote {\n    // docs:start:nullifier\n    fn compute_note_hash_and_nullifier(self, context: &mut PrivateContext) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nsk_app(self.npk_m_hash);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n    // docs:end:nullifier\n\n    fn compute_note_hash_and_nullifier_without_context(self) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nsk_app(self.npk_m_hash);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            secret,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n}\n\nimpl OwnedNote for TokenNote {\n    fn new(amount: U128, owner_npk_m_hash: Field) -> Self {\n        Self {\n            amount,\n            npk_m_hash: owner_npk_m_hash,\n            randomness: unsafe_rand(),\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn get_amount(self) -> U128 {\n        self.amount\n    }\n}\n"},"317":{"path":"/usr/src/noir-projects/noir-contracts/contracts/token_contract/src/types/transparent_note.nr","source":"// docs:start:token_types_all\nuse dep::aztec::{\n    note::{note_getter_options::PropertySelector, utils::compute_note_hash_for_consumption},\n    prelude::{NoteHeader, NoteInterface, PrivateContext},\n    protocol_types::{constants::GENERATOR_INDEX__NOTE_NULLIFIER, hash::poseidon2_hash}\n};\n\nglobal TRANSPARENT_NOTE_LEN: Field = 2;\n// TRANSPARENT_NOTE_LEN * 32 + 32(storage_slot as bytes) + 32(note_type_id as bytes)\nglobal TRANSPARENT_NOTE_BYTES_LEN: Field = 2 * 32 + 64;\n\n// Transparent note represents a note that is created in the clear (public execution), but can only be spent by those\n// that know the preimage of the \"secret_hash\" (the secret). This is typically used when shielding a token balance.\n// Owner of the tokens provides a \"secret_hash\" as an argument to the public \"shield\" function and then the tokens\n// can be redeemed in private by presenting the preimage of the \"secret_hash\" (the secret).\n#[aztec(note)]\nstruct TransparentNote {\n    amount: Field,\n    secret_hash: Field,\n}\n\nstruct TransparentNoteProperties {\n    amount: PropertySelector,\n    secret_hash: PropertySelector,\n}\n\nimpl NoteInterface<TRANSPARENT_NOTE_LEN, TRANSPARENT_NOTE_BYTES_LEN> for TransparentNote {\n\n    // Custom serialization to avoid disclosing the secret field\n    fn serialize_content(self) -> [Field; TRANSPARENT_NOTE_LEN] {\n        [self.amount, self.secret_hash]\n    }\n\n    // Custom deserialization since we don't have access to the secret plaintext\n    fn deserialize_content(serialized_note: [Field; TRANSPARENT_NOTE_LEN]) -> Self {\n        TransparentNote {\n            amount: serialized_note[0],\n            secret_hash: serialized_note[1],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1386): Ensure nullifier collisions are prevented\n    fn compute_note_hash_and_nullifier(self, _context: &mut PrivateContext) -> (Field, Field) {\n        self.compute_note_hash_and_nullifier_without_context()\n    }\n\n    // Computing a nullifier in a transparent note is not guarded by making secret a part of the nullifier preimage (as\n    // is common in other cases) and instead is guarded by the functionality of \"redeem_shield\" function. There we do\n    // the following:\n    //      1) We pass the secret as an argument to the function and use it to compute a secret hash,\n    //      2) we fetch a note via the \"get_notes\" oracle which accepts the secret hash as an argument,\n    //      3) the \"get_notes\" oracle constrains that the secret hash in the returned note matches the one computed in\n    //         circuit. \n    // This achieves that the note can only be spent by the party that knows the secret.\n    fn compute_note_hash_and_nullifier_without_context(self) -> (Field, Field) {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let nullifier = poseidon2_hash([\n            note_hash_for_nullify,\n            GENERATOR_INDEX__NOTE_NULLIFIER as Field,\n        ]);\n        (note_hash_for_nullify, nullifier)\n    }\n}\n\nimpl TransparentNote {\n    // CONSTRUCTORS\n    pub fn new(amount: Field, secret_hash: Field) -> Self {\n        TransparentNote { amount, secret_hash, header: NoteHeader::empty() }\n    }\n\n    // CUSTOM FUNCTIONS FOR THIS NOTE TYPE\n    // Custom serialization forces us to manually create the metadata struct and its getter\n    pub fn properties() -> TransparentNoteProperties {\n        TransparentNoteProperties {\n            amount: PropertySelector { index: 0, offset: 0, length: 32 },\n            secret_hash: PropertySelector { index: 1, offset: 0, length: 32 }\n        }\n    }\n}\n// docs:end:token_types_all\n"},"32":{"path":"std/merkle.nr","source":"// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<let N: u32>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n"},"363":{"path":"/usr/src/noir-projects/noir-contracts/contracts/lending_contract/src/helpers.nr","source":"use crate::interest_math::compute_multiplier;\nuse dep::aztec::hash::pedersen_hash;\n\n// Utility used to easily get a \"id\" for a private user that sits in the same\n// \"space\" as the public users.\n// It help us to have a single mapping for collateral that have both public and private users.\npub fn compute_identifier(secret: Field, on_behalf_of: Field, self: Field) -> Field {\n    // EITHER secret OR on_behalf_of MUST be set. But not both\n    assert(!((secret == 0) as bool & (on_behalf_of == 0) as bool));\n    if (secret != 0) {\n        pedersen_hash([self, secret], 0)\n    } else {\n        on_behalf_of\n    }\n}\n\npub fn covered_by_collateral(\n    price: U128,\n    loan_to_value: U128,\n    collateral: U128,\n    increase: U128,\n    decrease: U128\n) -> U128 {\n    let price_precision = U128::from_integer(1000000000);\n    let ltv_precision = U128::from_integer(10000);\n\n    let collateral = (collateral + increase) - decrease;\n\n    let collateral_value = (collateral * price) / price_precision;\n    let debt_covered = (collateral_value * loan_to_value) / ltv_precision;\n\n    debt_covered\n}\n\nstruct DebtReturn {\n    debt_value: U128,\n    static_debt: U128,\n}\n\nfn div_up(a: U128, b: U128) -> U128 {\n    let div = a / b;\n    if div * b < a {\n        div + U128::from_integer(1)\n    } else {\n        div\n    }\n}\n\npub fn debt_updates(\n    interest_accumulator: U128,\n    static_debt: U128,\n    increase: U128,\n    decrease: U128\n) -> DebtReturn {\n    assert(interest_accumulator > U128::from_integer(0));\n    let accumulator_precision = U128::from_integer(1000000000);\n\n    let current_debt_value = (static_debt * interest_accumulator) / accumulator_precision;\n    let new_debt_value = current_debt_value.add(increase).sub(decrease);\n\n    // static_debt_increase = amount / accumulator\n    // rounding up new debt.\n    let static_debt_increase = div_up(increase * accumulator_precision, interest_accumulator);\n    // rounding down repayment.\n    let static_debt_decrease = (decrease * accumulator_precision) / interest_accumulator;\n\n    // We need to allow repaying of the entire debt as well etc. This is very prone to failing\n    // if you try to repay exact due to time diff between sim and execution.\n    let new_static_debt = static_debt.add(static_debt_increase).sub(static_debt_decrease);\n\n    DebtReturn { debt_value: new_debt_value, static_debt: new_static_debt }\n}\n\npub fn debt_value(static_debt: U128, interest_accumulator: U128) -> U128 {\n    let accumulator_precision = U128::from_integer(1000000000);\n    div_up(static_debt * interest_accumulator, accumulator_precision)\n}\n"},"365":{"path":"/usr/src/noir-projects/noir-contracts/contracts/lending_contract/src/main.nr","source":"mod asset;\nmod position;\nmod interest_math;\nmod helpers;\n\n// Single asset CDP contract.\n// Shoving re-entries up the ass.\n// TODO's:\n// - Use asset address instead of 0. We only use 0, as there is only one collateral asset :shrug:.\n// - Update accumulator should be for specific asset, just abusing only 1 asset atm.\n// - A way to repay all debt at once\n// - Liquidations\ncontract Lending {\n    use dep::aztec::prelude::{FunctionSelector, AztecAddress, PrivateContext, Map, PublicMutable};\n    use dep::aztec::context::{PublicContext, gas::GasOpts};\n\n    use crate::asset::Asset;\n    use crate::position::Position;\n    use crate::interest_math::compute_multiplier;\n    use crate::helpers::{covered_by_collateral, DebtReturn, debt_updates, debt_value, compute_identifier};\n    use dep::token::Token;\n    use dep::price_feed::PriceFeed;\n\n    // Storage structure, containing all storage, and specifying what slots they use.\n    #[aztec(storage)]\n    struct Storage {\n        collateral_asset: PublicMutable<AztecAddress>,\n        stable_coin: PublicMutable<AztecAddress>,\n        assets: Map<Field, PublicMutable<Asset>>,\n        collateral: Map<AztecAddress, PublicMutable<Field>>,\n        static_debt: Map<AztecAddress, PublicMutable<Field>>, // abusing keys very heavily\n    }\n\n    // Constructs the contract.\n    #[aztec(private)]\n    #[aztec(initializer)]\n    fn constructor(\n    ) {}\n\n    #[aztec(public)]\n    fn init(\n        oracle: AztecAddress,\n        loan_to_value: Field,\n        collateral_asset: AztecAddress,\n        stable_coin: AztecAddress\n    ) {\n        let asset_loc = storage.assets.at(0);\n        let asset: Asset = asset_loc.read();\n\n        let loan_to_value = U128::from_integer(loan_to_value);\n\n        assert(loan_to_value <= U128::from_integer(10000));\n        assert(asset.last_updated_ts == 0);\n        assert(asset.interest_accumulator == U128::from_integer(0));\n\n        let last_updated_ts = context.timestamp();\n\n        asset_loc.write(\n            Asset { interest_accumulator: U128::from_integer(1000000000), last_updated_ts, loan_to_value, oracle }\n        );\n\n        storage.collateral_asset.write(collateral_asset);\n        storage.stable_coin.write(stable_coin);\n    }\n\n    // Create a position.\n    #[aztec(public)]\n    fn update_accumulator() -> Asset {\n        let asset_loc = storage.assets.at(0);\n        let mut asset: Asset = asset_loc.read();\n\n        let timestamp = context.timestamp();\n        let dt = timestamp - asset.last_updated_ts;\n\n        // Only update if time has passed.\n        if !(dt == 0) {\n            let precision = U128::from_integer(1000000000);\n            let rate_per_second = U128::from_integer(1268391679); // 4% yearly rate / (60 * 60 * 24 * 365)\n            // if rate_per_second < sqrt(WAD) our approx is eq precision + rate * dt\n            let multiplier = compute_multiplier(rate_per_second, dt);\n\n            // accumulator *= multiplier, and multiplier >= 1\n            asset.interest_accumulator = (asset.interest_accumulator * multiplier) / precision;\n            asset.last_updated_ts = context.timestamp();\n\n            asset_loc.write(asset);\n        }\n\n        asset\n    }\n\n    #[aztec(private)]\n    fn deposit_private(\n        from: AztecAddress,\n        amount: Field,\n        nonce: Field,\n        secret: Field,\n        on_behalf_of: Field,\n        collateral_asset: AztecAddress\n    ) {\n        let on_behalf_of = compute_identifier(secret, on_behalf_of, context.msg_sender().to_field());\n        let _res = Token::at(collateral_asset).unshield(from, context.this_address(), amount, nonce).call(&mut context);\n        // docs:start:enqueue_public\n        Lending::at(context.this_address())._deposit(\n            AztecAddress::from_field(on_behalf_of),\n            amount,\n            collateral_asset\n        ).enqueue(&mut context);\n        // docs:end:enqueue_public\n    }\n\n    #[aztec(public)]\n    fn deposit_public(amount: Field, nonce: Field, on_behalf_of: Field, collateral_asset: AztecAddress) {\n        let _ = Token::at(collateral_asset).transfer_public(context.msg_sender(), context.this_address(), amount, nonce).call(&mut context);\n        let _ = Lending::at(context.this_address())._deposit(\n            AztecAddress::from_field(on_behalf_of),\n            amount,\n            collateral_asset\n        ).call(&mut context);\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _deposit(owner: AztecAddress, amount: Field, collateral_asset: AztecAddress) {\n        let _asset = Lending::at(context.this_address()).update_accumulator().call(&mut context);\n\n        let coll_asset = storage.collateral_asset.read();\n        assert(coll_asset.eq(collateral_asset));\n\n        let coll_loc = storage.collateral.at(owner);\n        let collateral = coll_loc.read();\n        coll_loc.write(collateral + amount);\n    }\n\n    #[aztec(private)]\n    fn withdraw_private(secret: Field, to: AztecAddress, amount: Field) {\n        let on_behalf_of = compute_identifier(secret, 0, context.msg_sender().to_field());\n        Lending::at(context.this_address())._withdraw(AztecAddress::from_field(on_behalf_of), to, amount).enqueue(&mut context);\n    }\n\n    #[aztec(public)]\n    fn withdraw_public(to: AztecAddress, amount: Field) {\n        let _ = Lending::at(context.this_address())._withdraw(context.msg_sender(), to, amount).call(&mut context);\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _withdraw(owner: AztecAddress, recipient: AztecAddress, amount: Field) {\n        let asset = Lending::at(context.this_address()).update_accumulator().call(&mut context);\n        let price = PriceFeed::at(asset.oracle).get_price(0).view(&mut context).price;\n\n        let coll_loc = storage.collateral.at(owner);\n        let collateral: Field = coll_loc.read();\n\n        let debt_loc = storage.static_debt.at(owner);\n        let static_debt: Field = debt_loc.read();\n\n        // debt_covered will revert if decrease would leave insufficient collateral to cover debt.\n        // or trying to remove more collateral than available\n        let debt_covered = covered_by_collateral(\n            price,\n            asset.loan_to_value,\n            U128::from_integer(collateral),\n            U128::from_integer(0),\n            U128::from_integer(amount)\n        );\n        let debt_returns = debt_updates(\n            asset.interest_accumulator,\n            U128::from_integer(static_debt),\n            U128::from_integer(0),\n            U128::from_integer(0)\n        );\n\n        assert(debt_returns.debt_value < debt_covered);\n\n        coll_loc.write(collateral - amount);\n\n        // @todo @LHerskind Support both shielding and transfers (for now just transfer)\n        let collateral_asset = storage.collateral_asset.read();\n        let _ = Token::at(collateral_asset).transfer_public(context.this_address(), recipient, amount, 0).call(&mut context);\n    }\n\n    #[aztec(private)]\n    fn borrow_private(secret: Field, to: AztecAddress, amount: Field) {\n        let on_behalf_of = compute_identifier(secret, 0, context.msg_sender().to_field());\n        let _ = Lending::at(context.this_address())._borrow(AztecAddress::from_field(on_behalf_of), to, amount).enqueue(&mut context);\n    }\n\n    #[aztec(public)]\n    fn borrow_public(to: AztecAddress, amount: Field) {\n        let _ = Lending::at(context.this_address())._borrow(context.msg_sender(), to, amount).call(&mut context);\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _borrow(owner: AztecAddress, to: AztecAddress, amount: Field) {\n        let asset = Lending::at(context.this_address()).update_accumulator().call(&mut context);\n        let price = PriceFeed::at(asset.oracle).get_price(0).view(&mut context).price;\n\n        // Fetch collateral and static_debt, compute health of current position\n        let collateral = U128::from_integer(storage.collateral.at(owner).read());\n        let static_debt = U128::from_integer(storage.static_debt.at(owner).read());\n\n        let debt_covered = covered_by_collateral(\n            price,\n            asset.loan_to_value,\n            collateral,\n            U128::from_integer(0),\n            U128::from_integer(0)\n        );\n        let debt_returns = debt_updates(\n            asset.interest_accumulator,\n            static_debt,\n            U128::from_integer(amount),\n            U128::from_integer(0)\n        );\n\n        assert(debt_returns.debt_value < debt_covered);\n\n        storage.static_debt.at(owner).write(debt_returns.static_debt.to_integer());\n\n        // @todo @LHerskind Need to support both private and public minting.\n        let stable_coin = storage.stable_coin.read();\n        let _ = Token::at(stable_coin).mint_public(to, amount).call(&mut context);\n    }\n\n    #[aztec(private)]\n    fn repay_private(\n        from: AztecAddress,\n        amount: Field,\n        nonce: Field,\n        secret: Field,\n        on_behalf_of: Field,\n        stable_coin: AztecAddress\n    ) {\n        let on_behalf_of = compute_identifier(secret, on_behalf_of, context.msg_sender().to_field());\n        // docs:start:private_call\n        let _ = Token::at(stable_coin).burn(from, amount, nonce).call(&mut context);\n        // docs:end:private_call\n        let _ = Lending::at(context.this_address())._repay(AztecAddress::from_field(on_behalf_of), amount, stable_coin).enqueue(&mut context);\n    }\n\n    #[aztec(public)]\n    fn repay_public(amount: Field, nonce: Field, owner: AztecAddress, stable_coin: AztecAddress) {\n        let _ = Token::at(stable_coin).burn_public(context.msg_sender(), amount, nonce).call(&mut context);\n        let _ = Lending::at(context.this_address())._repay(owner, amount, stable_coin).call(&mut context);\n    }\n\n    #[aztec(public)]\n    #[aztec(internal)]\n    fn _repay(owner: AztecAddress, amount: Field, stable_coin: AztecAddress) {\n        let asset = Lending::at(context.this_address()).update_accumulator().call(&mut context);\n\n        // To ensure that private is using the correct token.\n        assert(stable_coin.eq(storage.stable_coin.read()));\n\n        let static_debt = U128::from_integer(storage.static_debt.at(owner).read());\n        let debt_returns = debt_updates(\n            asset.interest_accumulator,\n            static_debt,\n            U128::from_integer(0),\n            U128::from_integer(amount)\n        );\n\n        storage.static_debt.at(owner).write(debt_returns.static_debt.to_integer());\n    }\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn get_asset(asset_id: Field) -> pub Asset {\n        storage.assets.at(asset_id).read()\n    }\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn get_position(owner: AztecAddress) -> pub Position {\n        let collateral = storage.collateral.at(owner).read();\n        let static_debt = storage.static_debt.at(owner).read();\n        let asset: Asset = storage.assets.at(0).read();\n        let debt = debt_value(\n            U128::from_integer(static_debt),\n            U128::from_integer(asset.interest_accumulator)\n        ).to_integer();\n        Position { collateral, static_debt, debt }\n    }\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn get_assets() -> pub [AztecAddress; 2] {\n        [storage.collateral_asset.read(), storage.stable_coin.read()]\n    }\n}\n"},"366":{"path":"/usr/src/noir-projects/noir-contracts/contracts/lending_contract/src/interest_math.nr","source":"// Binomial approximation of exponential\n// using lower than desired precisions for everything due to u128 limit\n// (1+x)^n = 1+n*x+[n/2*(n-1)]*x^2+[n/6*(n-1)*(n-2)*x^3]...\n// we are loosing around almost 8 digits of precision from yearly -> daily interest\n// dividing with 31536000 (seconds per year).\n// rate must be measured with higher precision than 10^9.\n// we use e18, and rates >= 4% yearly. Otherwise need more precision\npub fn compute_multiplier(rate_per_second: U128, dt: u64) -> U128 {\n    let base = U128::from_integer(1000000000); // 1e9\n    let WAD = U128::from_integer(1000000000000000000); // 1e18\n    let diff = WAD.div(base);\n    let mut res = base;\n    if dt != 0 {\n        let exp_minus_one = U128::from_integer(dt - 1);\n        let exp_minus_two = U128::from_integer(if (dt > 2) { dt - 2 } else { 0 });\n        let dt = U128::from_integer(dt);\n\n        // if rate_per_second < sqrt(WAD), then base_power_two and base_power_three = 0\n        let rate = rate_per_second;\n        let base_power_two = (rate * rate) / WAD;\n        let base_power_three = (base_power_two * rate) / WAD;\n\n        let temp = dt.mul(exp_minus_one);\n        let second_term = temp.mul(base_power_two).div(U128::from_integer(2));\n        let third_term = temp.mul(exp_minus_two).mul(base_power_three).div(U128::from_integer(6));\n\n        // throwing away precision to keep us under u128 :sob:\n        let offset = dt.mul(rate).add(second_term).add(third_term).div(diff);\n\n        res = base.add(offset);\n    }\n    res\n}\n"},"367":{"path":"/usr/src/noir-projects/noir-contracts/contracts/lending_contract/src/asset.nr","source":"use dep::aztec::prelude::AztecAddress;\nuse dep::aztec::protocol_types::traits::{Deserialize, Serialize};\n\n// Struct to be used to represent \"totals\". Generally, there should be one per Asset.\n// It stores the global values that are shared among all users, such as an accumulator\n// and last time it was updated.\n// In practice, it should also point to an oracle and have more fields related to\n// loan to value ratios and other things, but we did not have enough reads/writes for this.\nstruct Asset {\n    interest_accumulator: U128,\n    last_updated_ts: u64,\n    loan_to_value: U128,\n    oracle: AztecAddress,\n}\n\nglobal SERIALIZED_LEN: Field = 6;\n\nimpl Serialize<SERIALIZED_LEN> for Asset {\n    fn serialize(Asset: Asset) -> [Field; SERIALIZED_LEN] {\n        [\n            Asset.interest_accumulator.lo,\n            Asset.interest_accumulator.hi,\n            Asset.last_updated_ts as Field,\n            Asset.loan_to_value.lo,\n            Asset.loan_to_value.hi,\n            Asset.oracle.to_field()\n        ]\n    }\n}\n\nimpl Deserialize<SERIALIZED_LEN> for Asset {\n    // Right now we are wasting so many writes. If changing last_updated_ts\n    // we will end up rewriting all of them, wasting writes.\n    fn deserialize(fields: [Field; SERIALIZED_LEN]) -> Asset {\n        let interest_accumulator = U128 { lo: fields[0], hi: fields[1] };\n        let last_updated_ts = fields[2] as u64;\n        let loan_to_value = U128 { lo: fields[3], hi: fields[4] };\n        let oracle = AztecAddress::from_field(fields[5]);\n\n        Asset {\n            interest_accumulator,\n            last_updated_ts,\n            loan_to_value,\n            oracle,\n        }\n    }\n}\n"},"368":{"path":"/usr/src/noir-projects/noir-contracts/contracts/price_feed_contract/src/main.nr","source":"mod asset;\n\ncontract PriceFeed {\n    use dep::aztec::prelude::{AztecAddress, FunctionSelector, PrivateContext, Map, PublicMutable};\n    use crate::asset::Asset;\n\n    // Storage structure, containing all storage, and specifying what slots they use.\n    #[aztec(storage)]\n    struct Storage {\n        assets: Map<Field, PublicMutable<Asset>>,\n    }\n\n    #[aztec(public)]\n    fn set_price(asset_id: Field, price: Field) {\n        let asset = storage.assets.at(asset_id);\n        asset.write(Asset { price: U128::from_integer(price) });\n    }\n\n    #[aztec(public)]\n    #[aztec(view)]\n    fn get_price(asset_id: Field) -> Asset {\n        storage.assets.at(asset_id).read()\n    }\n}\n"},"369":{"path":"/usr/src/noir-projects/noir-contracts/contracts/price_feed_contract/src/asset.nr","source":"use dep::aztec::protocol_types::traits::{Serialize, Deserialize};\n\nstruct Asset {\n    price: U128,\n}\n\nglobal ASSET_SERIALIZED_LEN: Field = 2;\n\nimpl Serialize<ASSET_SERIALIZED_LEN> for Asset {\n    fn serialize(asset: Asset) -> [Field; ASSET_SERIALIZED_LEN] {\n        [asset.price.lo, asset.price.hi]\n    }\n}\n\nimpl Deserialize<ASSET_SERIALIZED_LEN> for Asset {\n    fn deserialize(fields: [Field; ASSET_SERIALIZED_LEN]) -> Asset {\n        let price = U128 { lo: fields[0], hi: fields[1] };\n        Asset { price }\n    }\n}\n"},"4":{"path":"std/cmp.nr","source":"// docs:start:eq-trait\ntrait Eq {\n    fn eq(self, other: Self) -> bool;\n}\n// docs:end:eq-trait\n\nimpl Eq for Field { fn eq(self, other: Field) -> bool { self == other } }\n\nimpl Eq for u64 { fn eq(self, other: u64) -> bool { self == other } }\nimpl Eq for u32 { fn eq(self, other: u32) -> bool { self == other } }\nimpl Eq for u8 { fn eq(self, other: u8) -> bool { self == other } }\nimpl Eq for u1 { fn eq(self, other: u1) -> bool { self == other } }\n\nimpl Eq for i8 { fn eq(self, other: i8) -> bool { self == other } }\nimpl Eq for i32 { fn eq(self, other: i32) -> bool { self == other } }\nimpl Eq for i64 { fn eq(self, other: i64) -> bool { self == other } }\n\nimpl Eq for () { fn eq(_self: Self, _other: ()) -> bool { true } }\nimpl Eq for bool { fn eq(self, other: bool) -> bool { self == other } }\n\nimpl<T, let N: u32> Eq for [T; N] where T: Eq {\n    fn eq(self, other: [T; N]) -> bool {\n        let mut result = true;\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<T> Eq for [T] where T: Eq {\n    fn eq(self, other: [T]) -> bool {\n        let mut result = self.len() == other.len();\n        for i in 0 .. self.len() {\n            result &= self[i].eq(other[i]);\n        }\n        result\n    }\n}\n\nimpl<let N: u32> Eq for str<N> {\n    fn eq(self, other: str<N>) -> bool {\n        let self_bytes = self.as_bytes();\n        let other_bytes = other.as_bytes();\n        self_bytes == other_bytes\n    }\n}\n\nimpl<A, B> Eq for (A, B) where A: Eq, B: Eq {\n    fn eq(self, other: (A, B)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1)\n    }\n}\n\nimpl<A, B, C> Eq for (A, B, C) where A: Eq, B: Eq, C: Eq {\n    fn eq(self, other: (A, B, C)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2)\n    }\n}\n\nimpl<A, B, C, D> Eq for (A, B, C, D) where A: Eq, B: Eq, C: Eq, D: Eq {\n    fn eq(self, other: (A, B, C, D)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3)\n    }\n}\n\nimpl<A, B, C, D, E> Eq for (A, B, C, D, E) where A: Eq, B: Eq, C: Eq, D: Eq, E: Eq {\n    fn eq(self, other: (A, B, C, D, E)) -> bool {\n        self.0.eq(other.0) & self.1.eq(other.1) & self.2.eq(other.2) & self.3.eq(other.3) & self.4.eq(other.4)\n    }\n}\n\nimpl Eq for Ordering {\n    fn eq(self, other: Ordering) -> bool {\n        self.result == other.result\n    }\n}\n\n// Noir doesn't have enums yet so we emulate (Lt | Eq | Gt) with a struct\n// that has 3 public functions for constructing the struct.\nstruct Ordering {\n    result: Field,\n}\n\nimpl Ordering {\n    // Implementation note: 0, 1, and 2 for Lt, Eq, and Gt are built\n    // into the compiler, do not change these without also updating\n    // the compiler itself!\n    pub fn less() -> Ordering {\n        Ordering { result: 0 }\n    }\n\n    pub fn equal() -> Ordering {\n        Ordering { result: 1 }\n    }\n\n    pub fn greater() -> Ordering {\n        Ordering { result: 2 }\n    }\n}\n\n// docs:start:ord-trait\ntrait Ord {\n    fn cmp(self, other: Self) -> Ordering;\n}\n// docs:end:ord-trait\n\n// Note: Field deliberately does not implement Ord\n\nimpl Ord for u64 {\n    fn cmp(self, other: u64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u32 {\n    fn cmp(self, other: u32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for u8 {\n    fn cmp(self, other: u8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i8 {\n    fn cmp(self, other: i8) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i32 {\n    fn cmp(self, other: i32) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for i64 {\n    fn cmp(self, other: i64) -> Ordering {\n        if self < other {\n            Ordering::less()\n        } else if self > other {\n            Ordering::greater()\n        } else {\n            Ordering::equal()\n        }\n    }\n}\n\nimpl Ord for () {\n    fn cmp(_self: Self, _other: ()) -> Ordering {\n        Ordering::equal()\n    }\n}\n\nimpl Ord for bool {\n    fn cmp(self, other: bool) -> Ordering {\n        if self {\n            if other {\n                Ordering::equal()\n            } else {\n                Ordering::greater()\n            }\n        } else {\n            if other {\n                Ordering::less()\n            } else {\n                Ordering::equal()\n            }\n        }\n    }\n}\n\nimpl<T, let N: u32> Ord for [T; N] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T; N]) -> Ordering {\n        let mut result = Ordering::equal();\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<T> Ord for [T] where T: Ord {\n    // The first non-equal element of both arrays determines\n    // the ordering for the whole array.\n    fn cmp(self, other: [T]) -> Ordering {\n        let mut result = self.len().cmp(other.len());\n        for i in 0 .. self.len() {\n            if result == Ordering::equal() {\n                let result_i = self[i].cmp(other[i]);\n\n                if result_i == Ordering::less() {\n                    result = result_i;\n                } else if result_i == Ordering::greater() {\n                    result = result_i;\n                }\n            }\n        }\n        result\n    }\n}\n\nimpl<A, B> Ord for (A, B) where A: Ord, B: Ord {\n    fn cmp(self, other: (A, B)) -> Ordering {\n        let result = self.0.cmp(other.0);\n\n        if result != Ordering::equal() {\n            result\n        } else {\n            self.1.cmp(other.1)\n        }\n    }\n}\n\nimpl<A, B, C> Ord for (A, B, C) where A: Ord, B: Ord, C: Ord {\n    fn cmp(self, other: (A, B, C)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D> Ord for (A, B, C, D) where A: Ord, B: Ord, C: Ord, D: Ord {\n    fn cmp(self, other: (A, B, C, D)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        result\n    }\n}\n\nimpl<A, B, C, D, E> Ord for (A, B, C, D, E) where A: Ord, B: Ord, C: Ord, D: Ord, E: Ord {\n    fn cmp(self, other: (A, B, C, D, E)) -> Ordering {\n        let mut result = self.0.cmp(other.0);\n\n        if result == Ordering::equal() {\n            result = self.1.cmp(other.1);\n        }\n\n        if result == Ordering::equal() {\n            result = self.2.cmp(other.2);\n        }\n\n        if result == Ordering::equal() {\n            result = self.3.cmp(other.3);\n        }\n\n        if result == Ordering::equal() {\n            result = self.4.cmp(other.4);\n        }\n\n        result\n    }\n}\n\n// Compares and returns the maximum of two values.\n//\n// Returns the second argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::max(1, 2), 2);\n// assert_eq(cmp::max(2, 2), 2);\n// ```\npub fn max<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v1 } else { v2 }\n}\n\n// Compares and returns the minimum of two values.\n//\n// Returns the first argument if the comparison determines them to be equal.\n//\n// # Examples\n//\n// ```\n// use std::cmp;\n//\n// assert_eq(cmp::min(1, 2), 1);\n// assert_eq(cmp::min(2, 2), 2);\n// ```\npub fn min<T>(v1: T, v2: T) -> T where T: Ord {\n    if v1 > v2 { v2 } else { v1 }\n}\n\nmod cmp_tests {\n    use crate::cmp::{min, max};\n\n    #[test]\n    fn sanity_check_min() {\n        assert_eq(min(0 as u64, 1 as u64), 0);\n        assert_eq(min(0 as u64, 0 as u64), 0);\n        assert_eq(min(1 as u64, 1 as u64), 1);\n        assert_eq(min(255 as u8, 0 as u8), 0);\n    }\n\n    #[test]\n    fn sanity_check_max() {\n        assert_eq(max(0 as u64, 1 as u64), 1);\n        assert_eq(max(0 as u64, 0 as u64), 0);\n        assert_eq(max(1 as u64, 1 as u64), 1);\n        assert_eq(max(255 as u8, 0 as u8), 255);\n    }\n}\n"},"44":{"path":"std/slice.nr","source":"use crate::append::Append;\n\nimpl<T> [T] {\n    #[builtin(array_len)]\n    pub fn len(self) -> u32 {}\n\n    /// Push a new element to the end of the slice, returning a\n    /// new slice with a length one greater than the\n    /// original unmodified slice.\n    #[builtin(slice_push_back)]\n    pub fn push_back(self, elem: T) -> Self {}\n\n    /// Push a new element to the front of the slice, returning a\n    /// new slice with a length one greater than the \n    /// original unmodified slice. \n    #[builtin(slice_push_front)]\n    pub fn push_front(self, elem: T) -> Self {}\n\n    /// Remove the last element of the slice, returning the\n    /// popped slice and the element in a tuple\n    #[builtin(slice_pop_back)]\n    pub fn pop_back(self) -> (Self, T) {}\n\n    /// Remove the first element of the slice, returning the\n    /// element and the popped slice in a tuple\n    #[builtin(slice_pop_front)]\n    pub fn pop_front(self) -> (T, Self) {}\n\n    /// Insert an element at a specified index, shifting all elements \n    /// after it to the right\n    #[builtin(slice_insert)]\n    pub fn insert(self, index: u32, elem: T) -> Self {}\n\n    /// Remove an element at a specified index, shifting all elements\n    /// after it to the left, returning the altered slice and \n    /// the removed element\n    #[builtin(slice_remove)]\n    pub fn remove(self, index: u32) -> (Self, T) {}\n\n    // Append each element of the `other` slice to the end of `self`.\n    // This returns a new slice and leaves both input slices unchanged.\n    pub fn append(mut self, other: Self) -> Self {\n        for elem in other {\n            self = self.push_back(elem);\n        }\n        self\n    }\n\n    pub fn as_array<let N: u32>(self) -> [T; N] {\n        assert(self.len() == N);\n\n        let mut array = [crate::unsafe::zeroed(); N];\n        for i in 0..N {\n            array[i] = self[i];\n        }\n        array\n    }\n\n    // Apply a function to each element of the slice, returning a new slice\n    // containing the mapped elements.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> [U] {\n        let mut ret = &[];\n        for elem in self {\n            ret = ret.push_back(f(elem));\n        }\n        ret\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. This function is also sometimes\n    // called `foldl`, `fold_left`, `reduce`, or `inject`.\n    pub fn fold<U, Env>(self, mut accumulator: U, f: fn[Env](U, T) -> U) -> U {\n        for elem in self {\n            accumulator = f(accumulator, elem);\n        }\n        accumulator\n    }\n\n    // Apply a function to each element of the slice and an accumulator value,\n    // returning the final accumulated value. Unlike fold, reduce uses the first\n    // element of the given slice as its starting accumulator value.\n    pub fn reduce<Env>(self, f: fn[Env](T, T) -> T) -> T {\n        let mut accumulator = self[0];\n        for i in 1..self.len() {\n            accumulator = f(accumulator, self[i]);\n        }\n        accumulator\n    }\n\n    // Returns a new slice containing only elements for which the given predicate\n    // returns true.\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        let mut ret = &[];\n        for elem in self {\n            if predicate(elem) {\n                ret = ret.push_back(elem);\n            }\n        }\n        ret\n    }\n\n    // Flatten each element in the slice into one value, separated by `separator`.\n    pub fn join(self, separator: T) -> T where T: Append {\n        let mut ret = T::empty();\n\n        if self.len() != 0 {\n            ret = self[0];\n\n            for i in 1..self.len() {\n                ret = ret.append(separator).append(self[i]);\n            }\n        }\n\n        ret\n    }\n\n    // Returns true if all elements in the slice satisfy the predicate\n    pub fn all<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = true;\n        for elem in self {\n            ret &= predicate(elem);\n        }\n        ret\n    }\n\n    // Returns true if any element in the slice satisfies the predicate\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        for elem in self {\n            ret |= predicate(elem);\n        }\n        ret\n    }\n}\n"},"47":{"path":"std/uint128.nr","source":"use crate::ops::{Add, Sub, Mul, Div, Rem, Not, BitOr, BitAnd, BitXor, Shl, Shr};\nuse crate::cmp::{Eq, Ord, Ordering};\nuse crate::println;\n\nglobal pow64 : Field = 18446744073709551616; //2^64;\nglobal pow63 : Field = 9223372036854775808; // 2^63;\nstruct U128 {\n    lo: Field,\n    hi: Field,\n}\n\nimpl U128 {\n\n    pub fn from_u64s_le(lo: u64, hi: u64) -> U128 {\n        // in order to handle multiplication, we need to represent the product of two u64 without overflow\n        assert(crate::field::modulus_num_bits() as u32 > 128);\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    pub fn from_u64s_be(hi: u64, lo: u64) -> U128 {\n        U128::from_u64s_le(lo, hi)\n    }\n\n    pub fn zero() -> U128 {\n        U128 { lo: 0, hi: 0 }\n    }\n\n    pub fn one() -> U128 {\n        U128 { lo: 1, hi: 0 }\n    }\n    pub fn from_le_bytes(bytes: [u8; 16]) -> U128 {\n        let mut lo = 0;\n        let mut base = 1;\n        for i in 0..8 {\n            lo += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        let mut hi = 0;\n        base = 1;\n        for i in 8..16 {\n            hi += (bytes[i] as Field)*base;\n            base *= 256;\n        }\n        U128 { lo, hi }\n    }\n\n    pub fn to_be_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_be_bytes(8);\n        let hi = self.hi.to_be_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = hi[i];\n            bytes[i+8] = lo[i];\n        }\n        bytes\n    }\n\n    pub fn to_le_bytes(self: Self) -> [u8; 16] {\n        let lo = self.lo.to_le_bytes(8);\n        let hi = self.hi.to_le_bytes(8);\n        let mut bytes = [0; 16];\n        for i in 0..8 {\n            bytes[i] = lo[i];\n            bytes[i+8] = hi[i];\n        }\n        bytes\n    }\n\n    pub fn from_hex<let N: u32>(hex: str<N>) -> U128 {\n        let N = N as u32;\n        let bytes = hex.as_bytes();\n        // string must starts with \"0x\"\n        assert((bytes[0] == 48) & (bytes[1] == 120), \"Invalid hexadecimal string\");\n        assert(N < 35, \"Input does not fit into a U128\");\n\n        let mut lo = 0;\n        let mut hi = 0;\n        let mut base = 1;\n        if N <= 18 {\n            for i in 0..N - 2 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n        } else {\n            for i in 0..16 {\n                lo += U128::decode_ascii(bytes[N-i-1])*base;\n                base = base*16;\n            }\n            base = 1;\n            for i in 17..N - 1 {\n                hi += U128::decode_ascii(bytes[N-i])*base;\n                base = base*16;\n            }\n        }\n        U128 { lo: lo as Field, hi: hi as Field }\n    }\n\n    unconstrained fn uconstrained_check_is_upper_ascii(ascii: u8) -> bool {\n        ((ascii >= 65) & (ascii <= 90)) // Between 'A' and 'Z'\n    }\n\n    fn decode_ascii(ascii: u8) -> Field {\n        if ascii < 58 {\n            ascii - 48\n        } else {\n            let ascii = ascii + 32 * (U128::uconstrained_check_is_upper_ascii(ascii) as u8);\n            assert(ascii >= 97); // enforce >= 'a'\n            assert(ascii <= 102); // enforce <= 'f'\n            ascii - 87\n        } as Field\n    }\n\n    // TODO: Replace with a faster version. \n    // A circuit that uses this function can be slow to compute\n    // (we're doing up to 127 calls to compute the quotient)\n    unconstrained fn unconstrained_div(self: Self, b: U128) -> (U128, U128) {\n        if b == U128::zero() {\n            // Return 0,0 to avoid eternal loop\n            (U128::zero(), U128::zero())\n        } else if self < b {\n            (U128::zero(), self)\n        } else if self == b {\n            (U128::one(), U128::zero())\n        } else {\n            let (q,r) = if b.hi as u64 >= pow63 as u64 {\n                // The result of multiplication by 2 would overflow\n                (U128::zero(), self)\n            } else {\n                self.unconstrained_div(b * U128::from_u64s_le(2, 0))\n            };\n            let q_mul_2 = q * U128::from_u64s_le(2, 0);\n            if r < b {\n                (q_mul_2, r)\n            } else {\n                (q_mul_2 + U128::one(), r - b)\n            }\n        }\n    }\n\n    pub fn from_integer<T>(i: T) -> U128 {\n        let f = crate::as_field(i);\n        // Reject values which would overflow a u128\n        f.assert_max_bit_size(128);\n        let lo = f as u64 as Field;\n        let hi = (f - lo) / pow64;\n        U128 { lo, hi }\n    }\n\n    pub fn to_integer<T>(self) -> T {\n        crate::from_field(self.lo + self.hi * pow64)\n    }\n\n    fn wrapping_mul(self: Self, b: U128) -> U128 {\n        let low = self.lo * b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = self.lo * b.hi + self.hi * b.lo + carry;\n        let hi = high as u64 as Field;\n        U128 { lo, hi }\n    }\n}\n\nimpl Add for U128 {\n    fn add(self: Self, b: U128) -> U128 {\n        let low = self.lo + b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;  \n        let high = self.hi + b.hi + carry;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to add with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Sub for U128 {\n    fn sub(self: Self, b: U128) -> U128 {\n        let low = pow64 + self.lo - b.lo;\n        let lo = low as u64 as Field;\n        let borrow = (low == lo) as Field;\n        let high = self.hi - b.hi - borrow;\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to subtract with underflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Mul for U128 {\n    fn mul(self: Self, b: U128) -> U128 {\n        assert(self.hi*b.hi == 0, \"attempt to multiply with overflow\");\n        let low = self.lo*b.lo;\n        let lo = low as u64 as Field;\n        let carry = (low - lo) / pow64;\n        let high = if crate::field::modulus_num_bits() as u32 > 196 {\n            (self.lo+self.hi)*(b.lo+b.hi) - low + carry\n        } else {\n            self.lo*b.hi + self.hi*b.lo + carry\n        };\n        let hi = high as u64 as Field;\n        assert(hi == high, \"attempt to multiply with overflow\");\n        U128 {\n            lo,\n            hi,\n        }\n    }\n}\n\nimpl Div for U128 {\n    fn div(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        q\n    }\n}\n\nimpl Rem for U128 {\n    fn rem(self: Self, b: U128) -> U128 {\n        let (q,r) = self.unconstrained_div(b);\n        let a = b * q + r;\n        assert_eq(self, a);\n        assert(r < b);\n        r\n    }\n}\n\nimpl Eq for U128 {\n    fn eq(self: Self, b: U128) -> bool {\n        (self.lo == b.lo) & (self.hi == b.hi)\n    }\n}\n\nimpl Ord for U128 {\n    fn cmp(self, other: Self) -> Ordering {\n        let hi_ordering = (self.hi as u64).cmp((other.hi as u64));\n        let lo_ordering = (self.lo as u64).cmp((other.lo as u64));\n        \n        if hi_ordering == Ordering::equal() {\n            lo_ordering\n        } else {\n            hi_ordering\n        }\n    }\n}\n\nimpl Not for U128 { \n    fn not(self) -> U128 {\n        U128 {\n            lo: (!(self.lo as u64)) as Field,\n            hi: (!(self.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitOr for U128 { \n    fn bitor(self, other: U128) -> U128 {\n        U128 {\n            lo: ((self.lo as u64) | (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) | (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitAnd for U128 {\n    fn bitand(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) & (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) & (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl BitXor for U128 {\n    fn bitxor(self, other: U128) -> U128 { \n        U128 {\n            lo: ((self.lo as u64) ^ (other.lo as u64)) as Field,\n            hi: ((self.hi as u64) ^ (other.hi as u64)) as Field\n        }\n    }\n}\n\nimpl Shl for U128 { \n    fn shl(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift left with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self.wrapping_mul(U128::from_integer(y))\n    } \n}\n\nimpl Shr for U128 { \n    fn shr(self, other: u8) -> U128 { \n        assert(other < 128, \"attempt to shift right with overflow\");\n        let exp_bits = (other as Field).to_be_bits(7);\n\n        let mut r: Field = 2;\n        let mut y: Field = 1;\n        for i in 1..8 {\n            y = (exp_bits[7-i] as Field) * (r * y) + (1 - exp_bits[7-i] as Field) * y;\n            r *= r;\n        }\n        self / U128::from_integer(y)\n    } \n}\n\nmod tests {\n    use crate::uint128::{U128, pow64, pow63};\n\n    #[test]\n    fn test_not(lo: u64, hi: u64) {\n        let num = U128::from_u64s_le(lo, hi);\n        let not_num = num.not();\n\n        assert_eq(not_num.hi, (hi.not() as Field));\n        assert_eq(not_num.lo, (lo.not() as Field));\n\n        let not_not_num = not_num.not();\n        assert_eq(num, not_not_num);\n    }\n    #[test]\n    fn test_construction() {\n        // Check little-endian u64 is inversed with big-endian u64 construction\n        let a = U128::from_u64s_le(2, 1);\n        let b = U128::from_u64s_be(1, 2);\n        assert_eq(a, b);\n        // Check byte construction is equivalent\n        let c = U128::from_le_bytes([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]);\n        let d = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        assert_eq(c, d);\n    }\n    #[test]\n    fn test_byte_decomposition() {\n        let a = U128::from_u64s_le(0x0706050403020100, 0x0f0e0d0c0b0a0908);\n        // Get big-endian and little-endian byte decompostions\n        let le_bytes_a= a.to_le_bytes();\n        let be_bytes_a= a.to_be_bytes();\n\n        // Check equivalence\n        for i in 0..16 {\n            assert_eq(le_bytes_a[i], be_bytes_a[15 - i]);\n        }\n        // Reconstruct U128 from byte decomposition\n        let b= U128::from_le_bytes(le_bytes_a);\n        // Check that it's the same element\n        assert_eq(a, b);\n    }\n    #[test]\n    fn test_hex_constuction() {\n        let a = U128::from_u64s_le(0x1, 0x2);\n        let b = U128::from_hex(\"0x20000000000000001\");\n        assert_eq(a, b);\n\n        let c= U128::from_hex(\"0xffffffffffffffffffffffffffffffff\");\n        let d= U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff);\n        assert_eq(c, d);\n\n        let e= U128::from_hex(\"0x00000000000000000000000000000000\");\n        let f= U128::from_u64s_le(0, 0);\n        assert_eq(e, f);\n    }\n\n    // Ascii decode tests\n\n    #[test]\n    fn test_ascii_decode_correct_range() {\n        // '0'..'9' range\n        for i in 0..10 {\n            let decoded= U128::decode_ascii(48 + i);\n            assert_eq(decoded, i as Field);\n        }\n        // 'A'..'F' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(65 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n        // 'a'..'f' range\n        for i in 0..6 {\n            let decoded = U128::decode_ascii(97 + i);\n            assert_eq(decoded, (i + 10) as Field);\n        }\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_0() {\n        crate::println(U128::decode_ascii(0));\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_less_than_48_fails_1() {\n        crate::println(U128::decode_ascii(47));\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_0() {\n        let _ = U128::decode_ascii(58);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_58_64_fails_1() {\n        let _ = U128::decode_ascii(64);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_0() {\n        let _ = U128::decode_ascii(71);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_71_96_fails_1() {\n        let _ = U128::decode_ascii(96);\n    }\n    #[test(should_fail)]\n    fn test_ascii_decode_range_greater_than_102_fails() {\n        let _ = U128::decode_ascii(103);\n    }\n\n    #[test(should_fail)]\n    fn test_ascii_decode_regression() {\n        // This code will actually fail because of ascii_decode,\n        // but in the past it was possible to create a value > (1<<128)\n        let a = U128::from_hex(\"0x~fffffffffffffffffffffffffffffff\");\n        let b:Field= a.to_integer();\n        let c= b.to_le_bytes(17);\n        assert(c[16] != 0);\n    }\n\n    #[test]\n    fn test_unconstrained_div() {\n        // Test the potential overflow case\n        let a= U128::from_u64s_le(0x0, 0xffffffffffffffff);\n        let b= U128::from_u64s_le(0x0, 0xfffffffffffffffe);\n        let c= U128::one();\n        let d= U128::from_u64s_le(0x0, 0x1);\n        let (q,r) = a.unconstrained_div(b);\n        assert_eq(q, c);\n        assert_eq(r, d);\n\n        let a = U128::from_u64s_le(2, 0);\n        let b = U128::one();\n        // Check the case where a is a multiple of b\n        let (c,d ) = a.unconstrained_div(b);\n        assert_eq((c, d), (a, U128::zero()));\n\n        // Check where b is a multiple of a\n        let (c,d) = b.unconstrained_div(a);\n        assert_eq((c, d), (U128::zero(), b));\n\n        // Dividing by zero returns 0,0\n        let a = U128::from_u64s_le(0x1, 0x0);\n        let b = U128::zero();\n        let (c,d)= a.unconstrained_div(b);\n        assert_eq((c, d), (U128::zero(), U128::zero()));\n\n        // Dividing 1<<127 by 1<<127 (special case)\n        let a = U128::from_u64s_le(0x0, pow63 as u64);\n        let b = U128::from_u64s_le(0x0, pow63 as u64);\n        let (c,d )= a.unconstrained_div(b);\n        assert_eq((c, d), (U128::one(), U128::zero()));\n    }\n\n    #[test]\n    fn integer_conversions() {\n        // Maximum\n        let start:Field = 0xffffffffffffffffffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Minimum\n        let start:Field = 0x0;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // Low limb\n        let start:Field = 0xffffffffffffffff;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n\n        // High limb\n        let start:Field = 0xffffffffffffffff0000000000000000;\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn integer_conversions_fuzz(lo: u64, hi: u64) {\n        let start: Field = (lo as Field) + pow64 * (hi as Field);\n        let a = U128::from_integer(start);\n        let end = a.to_integer();\n        assert_eq(start, end);\n    }\n\n    #[test]\n    fn test_wrapping_mul() {\n        // 1*0==0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::one()));\n\n        // 0*1==0\n        assert_eq(U128::zero(), U128::one().wrapping_mul(U128::zero()));\n\n        // 1*1==1\n        assert_eq(U128::one(), U128::one().wrapping_mul(U128::one()));\n\n        // 0 * ( 1 << 64 ) ==  0\n        assert_eq(U128::zero(), U128::zero().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * 0 == 0\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::zero()));\n\n        // 1 * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::from_u64s_le(0, 1).wrapping_mul(U128::one()));\n\n        // ( 1 << 64 ) * 1 == 1 << 64\n        assert_eq(U128::from_u64s_le(0, 1), U128::one().wrapping_mul(U128::from_u64s_le(0, 1)));\n\n        // ( 1 << 64 ) * ( 1 << 64 ) == 1 << 64\n        assert_eq(U128::zero(), U128::from_u64s_le(0, 1).wrapping_mul(U128::from_u64s_le(0, 1)));\n        // -1 * -1 == 1\n        assert_eq(\n            U128::one(), U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff).wrapping_mul(U128::from_u64s_le(0xffffffffffffffff, 0xffffffffffffffff))\n        );\n    }\n}\n"},"65":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/keys/getters.nr","source":"use dep::protocol_types::{\n    header::Header, abis::validation_requests::KeyValidationRequest, address::AztecAddress,\n    constants::CANONICAL_KEY_REGISTRY_ADDRESS, point::Point, storage::map::derive_storage_slot_in_map,\n    traits::is_empty\n};\nuse crate::{\n    context::PrivateContext,\n    oracle::{keys::get_public_keys_and_partial_address, key_validation_request::get_key_validation_request},\n    keys::{public_keys::PublicKeys, constants::{NULLIFIER_INDEX, INCOMING_INDEX, OUTGOING_INDEX, TAGGING_INDEX}},\n    state_vars::{shared_mutable::shared_mutable_private_getter::SharedMutablePrivateGetter}\n};\n\nglobal DELAY = 5;\n\n// docs:start:key-getters\ntrait KeyGetters {\n  fn get_npk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_ivpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_ovpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_tpk_m(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Point;\n  fn get_npk_m_hash(header: Header, context: &mut PrivateContext, address: AztecAddress) -> Field;\n}\n\nimpl KeyGetters for Header {\n    fn get_npk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, NULLIFIER_INDEX, self)\n    }\n\n    fn get_ivpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, INCOMING_INDEX, self)\n    }\n\n    fn get_ovpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, OUTGOING_INDEX, self)\n    }\n\n    fn get_tpk_m(self, context: &mut PrivateContext, address: AztecAddress) -> Point {\n        get_master_key(context, address, TAGGING_INDEX, self)\n    }\n\n    fn get_npk_m_hash(self, context: &mut PrivateContext, address: AztecAddress) -> Field {\n        get_master_key(context, address, NULLIFIER_INDEX, self).hash()\n    }\n}\n// docs:end:key-getters\n\nfn get_master_key(\n    context: &mut PrivateContext,\n    address: AztecAddress,\n    key_index: Field,\n    header: Header\n) -> Point {\n    let key = fetch_key_from_registry(context, key_index, address, header);\n    if is_empty(key) {\n        // Keys were not registered in registry yet --> fetch key from PXE\n        let keys = fetch_and_constrain_keys(address);\n        // Return the corresponding to index\n        keys.get_key_by_index(key_index)\n    } else {\n        // Keys were registered --> return the key\n        key\n    }\n}\n\nfn fetch_key_from_registry(\n    context: &mut PrivateContext,\n    key_index: Field,\n    address: AztecAddress,\n    header: Header\n) -> Point {\n    let x_coordinate_map_slot = key_index * 2 + 1;\n    let y_coordinate_map_slot = x_coordinate_map_slot + 1;\n    let x_coordinate_derived_slot = derive_storage_slot_in_map(x_coordinate_map_slot, address);\n    let y_coordinate_derived_slot = derive_storage_slot_in_map(y_coordinate_map_slot, address);\n\n    let x_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        x_coordinate_derived_slot\n    );\n    let y_coordinate_registry: SharedMutablePrivateGetter<Field, DELAY> = SharedMutablePrivateGetter::new(\n        context,\n        AztecAddress::from_field(CANONICAL_KEY_REGISTRY_ADDRESS),\n        y_coordinate_derived_slot\n    );\n    let x_coordinate = x_coordinate_registry.get_value_in_private(header);\n    let y_coordinate = y_coordinate_registry.get_value_in_private(header);\n\n    Point::new(x_coordinate, y_coordinate, false)\n}\n\n// Passes only when keys were not rotated - is expected to be called only when keys were not registered yet\nfn fetch_and_constrain_keys(address: AztecAddress) -> PublicKeys {\n    let (public_keys, partial_address) = get_public_keys_and_partial_address(address);\n\n    let computed_address = AztecAddress::compute(public_keys.hash(), partial_address);\n\n    assert(computed_address.eq(address));\n\n    public_keys\n}\n\n// A helper function since requesting nsk_app is very common\n// TODO(#6543)\npub fn get_nsk_app(npk_m_hash: Field) -> Field {\n    get_key_validation_request(npk_m_hash, NULLIFIER_INDEX).sk_app\n}\n"},"81":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/history/nullifier_inclusion.nr","source":"use std::merkle::compute_merkle_root;\nuse dep::protocol_types::header::Header;\n\nuse crate::{\n    context::PrivateContext, oracle::get_nullifier_membership_witness::get_nullifier_membership_witness,\n    note::{utils::compute_siloed_nullifier, note_interface::NoteInterface}\n};\n\ntrait ProveNullifierInclusion {\n    fn prove_nullifier_inclusion(header: Header, nullifier: Field);\n}\n\nimpl ProveNullifierInclusion for Header {\n    fn prove_nullifier_inclusion(self, nullifier: Field) {\n        // 1) Get the membership witness of the nullifier\n        let witness = get_nullifier_membership_witness(self.global_variables.block_number as u32, nullifier);\n\n        // 2) Check that the witness we obtained matches the nullifier\n        assert(witness.leaf_preimage.nullifier == nullifier, \"Nullifier does not match value in witness\");\n\n        // 3) Compute the nullifier tree leaf\n        let nullifier_leaf = witness.leaf_preimage.hash();\n\n        // 4) Prove that the nullifier is in the nullifier tree\n        assert(\n            self.state.partial.nullifier_tree.root\n            == compute_merkle_root(nullifier_leaf, witness.index, witness.path), \"Proving nullifier inclusion failed\"\n        );\n        // --> Now we have traversed the trees all the way up to archive root and verified that the nullifier\n        //     was included in the nullifier tree.\n    }\n}\n\ntrait ProveNoteIsNullified {\n    fn prove_note_is_nullified<Note, N, M>(header: Header, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N, M>;\n}\n\nimpl ProveNoteIsNullified for Header {\n    // docs:start:prove_note_is_nullified\n    fn prove_note_is_nullified<Note, N, M>(self, note: Note, context: &mut PrivateContext) where Note: NoteInterface<N, M> {\n        let nullifier = compute_siloed_nullifier(note, context);\n\n        self.prove_nullifier_inclusion(nullifier);\n    }\n    // docs:end:prove_note_is_nullified\n}\n"},"89":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/packed_returns.nr","source":"use crate::{hash::hash_args_array, oracle::returns::unpack_returns};\nuse dep::protocol_types::traits::Deserialize;\n\nstruct PackedReturns {\n  packed_returns: Field,\n}\n\nimpl PackedReturns {\n    pub fn new(packed_returns: Field) -> Self {\n        PackedReturns { packed_returns }\n    }\n\n    pub fn assert_empty(self) {\n        assert_eq(self.packed_returns, 0);\n    }\n\n    pub fn raw(self) -> Field {\n        self.packed_returns\n    }\n\n    pub fn unpack<N>(self) -> [Field; N] {\n        let unpacked: [Field; N] = unpack_returns(self.packed_returns);\n        assert_eq(self.packed_returns, hash_args_array(unpacked));\n        unpacked\n    }\n\n    pub fn unpack_into<T, N>(self) -> T where T: Deserialize<N> {\n        let unpacked: [Field; N] = self.unpack();\n        Deserialize::deserialize(unpacked)\n    }\n}\n"},"93":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/call_interfaces.nr","source":"use dep::protocol_types::{\n    abis::{function_selector::FunctionSelector, private_circuit_public_inputs::PrivateCircuitPublicInputs},\n    address::AztecAddress, traits::Deserialize\n};\n\nuse crate::context::{\n    private_context::PrivateContext, public_context::PublicContext, gas::GasOpts,\n    public_context::FunctionReturns, inputs::{PrivateContextInputs, PublicContextInputs}\n};\n\nuse crate::oracle::arguments::pack_arguments;\nuse crate::hash::hash_args;\n\ntrait CallInterface<N, T, P, Env> {\n    fn get_original(self) -> fn[Env](T) -> P;\n\n    fn get_args(self) -> [Field] {\n        self.args\n    }\n\n    fn get_selector(self) -> FunctionSelector {\n        self.selector\n    }\n\n    fn get_name(self) -> str<N> {\n        self.name\n    }\n\n    fn get_contract_address(self) -> AztecAddress {\n        self.target_contract\n    }\n\n    fn get_is_static(self) -> bool {\n        self.is_static\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, T, Env> PrivateCallInterface<N, T, Env> {\n    pub fn call<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        );\n        let unpacked: T = returns.unpack_into();\n        unpacked\n    }\n\n    pub fn view<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n\n    pub fn delegate_call<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true);\n        returns.unpack_into()\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, Env> PrivateVoidCallInterface<N, Env> {\n    pub fn call(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            self.args_hash,\n            false,\n            false\n        ).assert_empty();\n    }\n\n    pub fn view(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n\n    pub fn delegate_call(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, false, true).assert_empty();\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateStaticCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, T, Env> PrivateStaticCallInterface<N, T, Env> {\n    pub fn view<M>(self, context: &mut PrivateContext) -> T where T: Deserialize<M> {\n        assert(self.args_hash == pack_arguments(self.args));\n        let returns = context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false);\n        returns.unpack_into()\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PrivateContextInputs, PrivateCircuitPublicInputs, Env> for PrivateStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs {\n        self.original\n    }\n}\n\nstruct PrivateStaticVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args_hash: Field,\n    args: [Field],\n    original: fn[Env](PrivateContextInputs) -> PrivateCircuitPublicInputs,\n    is_static: bool\n}\n\nimpl<N, Env> PrivateStaticVoidCallInterface<N, Env> {\n    pub fn view(self, context: &mut PrivateContext) {\n        assert(self.args_hash == pack_arguments(self.args));\n        context.call_private_function_with_packed_args(self.target_contract, self.selector, self.args_hash, true, false).assert_empty();\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, T, Env> for PublicCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> T {\n        self.original\n    }\n}\n\nstruct PublicCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    gas_opts: GasOpts,\n    original: fn[Env](PublicContextInputs) -> T,\n    is_static: bool\n}\n\nimpl<N, T, Env> PublicCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn view<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.deserialize_into()\n    }\n\n    pub fn delegate_call<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.deserialize_into()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, (), Env> for PublicVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> () {\n        self.original\n    }\n}\n\nstruct PublicVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<N, Env> PublicVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn call(self, context: &mut PublicContext) {\n        let returns = context.call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn delegate_call(self, context: &mut PublicContext) {\n        let returns = context.delegate_call_public_function(self.target_contract, self.selector, self.args);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n\n    pub fn delegate_enqueue(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ false,\n            /*delegate=*/ true\n        )\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, T, Env> for PublicStaticCallInterface<N, T, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> T {\n        self.original\n    }\n}\n\nstruct PublicStaticCallInterface<N, T, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> T,\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<N, T, Env> PublicStaticCallInterface<N, T, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view<M>(self, context: &mut PublicContext) -> T where T: Deserialize<M> {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        let unpacked: T = returns.deserialize_into();\n        unpacked\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n\nimpl<N, T, P, Env> CallInterface<N, PublicContextInputs, (), Env> for PublicStaticVoidCallInterface<N, Env> {\n    fn get_original(self) -> fn[Env](PublicContextInputs) -> () {\n        self.original\n    }\n}\n\nstruct PublicStaticVoidCallInterface<N, Env> {\n    target_contract: AztecAddress,\n    selector: FunctionSelector,\n    name: str<N>,\n    args: [Field],\n    original: fn[Env](PublicContextInputs) -> (),\n    is_static: bool,\n    gas_opts: GasOpts\n}\n\nimpl<N, Env> PublicStaticVoidCallInterface<N, Env> {\n    pub fn with_gas(self: &mut Self, gas_opts: GasOpts) -> &mut Self {\n        self.gas_opts = gas_opts;\n        self\n    }\n\n    pub fn view(self, context: &mut PublicContext) {\n        let returns = context.static_call_public_function(self.target_contract, self.selector, self.args, self.gas_opts);\n        returns.assert_empty()\n    }\n\n    pub fn enqueue_view(self, context: &mut PrivateContext) {\n        let args_hash = hash_args(self.args);\n        assert(args_hash == pack_arguments(self.args));\n        context.call_public_function_with_packed_args(\n            self.target_contract,\n            self.selector,\n            args_hash,\n            /*static=*/ true,\n            /*delegate=*/ false\n        )\n    }\n}\n"},"94":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/private_context.nr","source":"use crate::{\n    context::{inputs::PrivateContextInputs, packed_returns::PackedReturns},\n    messaging::process_l1_to_l2_message, hash::{hash_args_array, ArgsHasher},\n    keys::constants::{NULLIFIER_INDEX, OUTGOING_INDEX, NUM_KEY_TYPES, sk_generators},\n    oracle::{\n    key_validation_request::get_key_validation_request, arguments, returns::pack_returns,\n    call_private_function::call_private_function_internal, header::get_header_at,\n    logs::{emit_encrypted_note_log, emit_encrypted_event_log},\n    enqueue_public_function_call::{\n    enqueue_public_function_call_internal, set_public_teardown_function_call_internal,\n    parse_public_call_stack_item_from_oracle\n}\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    caller_context::CallerContext, function_selector::FunctionSelector,\n    max_block_number::MaxBlockNumber,\n    validation_requests::{KeyValidationRequest, KeyValidationRequestAndGenerator},\n    private_call_request::PrivateCallRequest, private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem, read_request::ReadRequest, note_hash::NoteHash,\n    nullifier::Nullifier, log_hash::{LogHash, NoteLogHash, EncryptedLogHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NOTE_HASHES_PER_CALL, MAX_L2_TO_L1_MSGS_PER_CALL, MAX_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_NOTE_HASH_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_READ_REQUESTS_PER_CALL,\n    MAX_KEY_VALIDATION_REQUESTS_PER_CALL, MAX_ENCRYPTED_LOGS_PER_CALL, MAX_UNENCRYPTED_LOGS_PER_CALL,\n    MAX_NOTE_ENCRYPTED_LOGS_PER_CALL\n},\n    header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader, traits::Empty\n};\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n    is_fee_payer: bool,\n\n    args_hash: Field,\n    return_hash: Field,\n\n    max_block_number: MaxBlockNumber,\n\n    note_hash_read_requests: BoundedVec<ReadRequest, MAX_NOTE_HASH_READ_REQUESTS_PER_CALL>,\n    nullifier_read_requests: BoundedVec<ReadRequest, MAX_NULLIFIER_READ_REQUESTS_PER_CALL>,\n    key_validation_requests_and_generators: BoundedVec<KeyValidationRequestAndGenerator, MAX_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    note_hashes: BoundedVec<NoteHash, MAX_NOTE_HASHES_PER_CALL>,\n    nullifiers: BoundedVec<Nullifier, MAX_NULLIFIERS_PER_CALL>,\n\n    private_call_requests : BoundedVec<PrivateCallRequest, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    public_teardown_function_hash: Field,\n    l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    note_encrypted_logs_hashes: BoundedVec<NoteLogHash, MAX_NOTE_ENCRYPTED_LOGS_PER_CALL>,\n    encrypted_logs_hashes: BoundedVec<EncryptedLogHash, MAX_ENCRYPTED_LOGS_PER_CALL>,\n    unencrypted_logs_hashes: BoundedVec<LogHash, MAX_UNENCRYPTED_LOGS_PER_CALL>,\n\n    // Contains the last key validation request for each key type. This is used to cache the last request and avoid\n    // fetching the same request multiple times.\n    // The index of the array corresponds to the key type (0 nullifier, 1 incoming, 2 outgoing, 3 tagging).\n    last_key_validation_requests: [Option<KeyValidationRequest>; NUM_KEY_TYPES],\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        PrivateContext {\n            inputs,\n            side_effect_counter: inputs.start_side_effect_counter + 1,\n            min_revertible_side_effect_counter: 0,\n            is_fee_payer: false,\n            args_hash,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            historical_header: inputs.historical_header,\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: BoundedVec::new(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n\n    fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    fn chain_id(self) -> Field {\n        self.inputs.tx_context.chain_id\n    }\n\n    fn version(self) -> Field {\n        self.inputs.tx_context.version\n    }\n\n    fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    fn get_args_hash(self) -> Field {\n        self.args_hash\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        self.note_hashes.push(NoteHash { value: note_hash, counter: self.next_counter() });\n    }\n\n    // TODO(#7112): This function is called with non-zero note hash only in 1 of 25 cases in aztec-packages repo\n    // - consider creating a separate function with 1 arg for the zero note hash case.\n    fn push_nullifier(&mut self, nullifier: Field, nullified_note_hash: Field) {\n        self.nullifiers.push(Nullifier { value: nullifier, note_hash: nullified_note_hash, counter: self.next_counter() });\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn set_return_hash(&mut self, returns_hasher: ArgsHasher) {\n        pack_returns(returns_hasher.fields);\n        self.return_hash = returns_hasher.hash();\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            returns_hash: self.return_hash,\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            is_fee_payer: self.is_fee_payer,\n            max_block_number: self.max_block_number,\n            note_hash_read_requests: self.note_hash_read_requests.storage,\n            nullifier_read_requests: self.nullifier_read_requests.storage,\n            key_validation_requests_and_generators: self.key_validation_requests_and_generators.storage,\n            note_hashes: self.note_hashes.storage,\n            nullifiers: self.nullifiers.storage,\n            private_call_requests: self.private_call_requests.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            public_teardown_function_hash: self.public_teardown_function_hash,\n            l2_to_l1_msgs: self.l2_to_l1_msgs.storage,\n            start_side_effect_counter: self.inputs.start_side_effect_counter,\n            end_side_effect_counter: self.side_effect_counter,\n            note_encrypted_logs_hashes: self.note_encrypted_logs_hashes.storage,\n            encrypted_logs_hashes: self.encrypted_logs_hashes.storage,\n            unencrypted_logs_hashes: self.unencrypted_logs_hashes.storage,\n            historical_header: self.historical_header,\n            tx_context: self.inputs.tx_context\n        }\n    }\n\n    pub fn set_as_fee_payer(&mut self) {\n        dep::protocol_types::debug_log::debug_log_format(\"Setting {0} as fee payer\", [self.this_address().to_field()]);\n        self.is_fee_payer = true;\n    }\n\n    pub fn end_setup(&mut self) {\n        // dep::protocol_types::debug_log::debug_log_format(\n        //     \"Ending setup at counter {0}\",\n        //     [self.side_effect_counter as Field]\n        // );\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    // docs:start:max-block-number\n    pub fn set_tx_max_block_number(&mut self, max_block_number: u32) {\n        // docs:end:max-block-number\n        self.max_block_number = MaxBlockNumber::min_with_u32(self.max_block_number, max_block_number);\n    }\n\n    pub fn push_note_hash_read_request(&mut self, note_hash: Field) {\n        let side_effect = ReadRequest { value: note_hash, counter: self.next_counter() };\n        self.note_hash_read_requests.push(side_effect);\n    }\n\n    pub fn push_nullifier_read_request(&mut self, nullifier: Field) {\n        let request = ReadRequest { value: nullifier, counter: self.next_counter() };\n        self.nullifier_read_requests.push(request);\n    }\n\n    pub fn request_nsk_app(&mut self, npk_m_hash: Field) -> Field {\n        self.request_sk_app(npk_m_hash, NULLIFIER_INDEX)\n    }\n\n    pub fn request_ovsk_app(&mut self, ovpk_m_hash: Field) -> Field {\n        self.request_sk_app(ovpk_m_hash, OUTGOING_INDEX)\n    }\n\n    fn request_sk_app(&mut self, pk_m_hash: Field, key_index: Field) -> Field {\n        let cached_request = self.last_key_validation_requests[key_index].unwrap_or(KeyValidationRequest::empty());\n\n        if cached_request.pk_m.hash() == pk_m_hash {\n            // We get a match so the cached request is the latest one \n            cached_request.sk_app\n        } else {\n            // We didn't get a match meaning the cached result is stale. We fetch new values from oracle and instruct\n            // protocol circuits to validate them by storing the validation request in context.\n            let request = get_key_validation_request(pk_m_hash, key_index);\n            let request_and_generator = KeyValidationRequestAndGenerator { request, sk_app_generator: sk_generators[key_index] };\n            // We constrain that the pk_m_hash matches the one in the request (otherwise we could get an arbitrary\n            // valid key request and not the one corresponding to pk_m_hash).\n            assert(request.pk_m.hash() == pk_m_hash);\n            self.key_validation_requests_and_generators.push(request_and_generator);\n            self.last_key_validation_requests[key_index] = Option::some(request);\n            request.sk_app\n        }\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content, counter: self.next_counter() };\n        self.l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    // NB: A randomness value of 0 signals that the kernels should not mask the contract address\n    // used in siloing later on e.g. 'handshaking' contract w/ known address.\n    pub fn emit_raw_event_log_with_masked_address<M>(&mut self, randomness: Field, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let contract_address = self.this_address();\n        let len = log.len() as Field + 4;\n        let side_effect = EncryptedLogHash { value: log_hash, counter, length: len, randomness };\n        self.encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_event_log(contract_address, randomness, log, counter);\n    }\n\n    pub fn emit_raw_note_log<M>(&mut self, note_hash_counter: u32, log: [u8; M], log_hash: Field) {\n        let counter = self.next_counter();\n        let len = log.len() as Field + 4;\n        let side_effect = NoteLogHash { value: log_hash, counter, length: len, note_hash_counter };\n        self.note_encrypted_logs_hashes.push(side_effect);\n\n        emit_encrypted_note_log(note_hash_counter, log, counter);\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> PackedReturns {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> PackedReturns {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args<RETURNS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> PackedReturns {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let start_side_effect_counter = self.side_effect_counter;\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            start_side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.start_side_effect_counter, start_side_effect_counter);\n        let end_side_effect_counter = item.public_inputs.end_side_effect_counter;\n        self.side_effect_counter = end_side_effect_counter + 1;\n\n        // TODO (fees) figure out why this crashes the prover and enable it\n        // we need this in order to pay fees inside child call contexts\n        // assert(\n        //     (item.public_inputs.min_revertible_side_effect_counter == 0 as u32)\n        //     | (item.public_inputs.min_revertible_side_effect_counter\n        //         > self.min_revertible_side_effect_counter)\n        // );\n\n        // if item.public_inputs.min_revertible_side_effect_counter\n        //     > self.min_revertible_side_effect_counter {\n        //     self.min_revertible_side_effect_counter = item.public_inputs.min_revertible_side_effect_counter;\n        // }\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        let mut caller_context = CallerContext::empty();\n        caller_context.is_static_call = self.inputs.call_context.is_static_call;\n        if is_delegate_call {\n            caller_context.msg_sender = self.inputs.call_context.msg_sender;\n            caller_context.storage_contract_address = self.inputs.call_context.storage_contract_address;\n        }\n        self.private_call_requests.push(\n            PrivateCallRequest {\n            target: item.contract_address,\n            call_context: item.public_inputs.call_context,\n            function_data: item.function_data,\n            args_hash: item.public_inputs.args_hash,\n            returns_hash: item.public_inputs.returns_hash,\n            caller_context,\n            start_side_effect_counter,\n            end_side_effect_counter\n        }\n        );\n\n        PackedReturns::new(item.public_inputs.returns_hash)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_call_stack_hashes.push(item.get_compressed().hash());\n    }\n\n    pub fn set_public_teardown_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args_array(args);\n        assert(args_hash == arguments::pack_arguments_array(args));\n        self.set_public_teardown_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn set_public_teardown_function_with_packed_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let mut is_static_call = is_static_call | self.inputs.call_context.is_static_call;\n        let fields = set_public_teardown_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let item = parse_public_call_stack_item_from_oracle(fields);\n        self.validate_call_stack_item_from_oracle(\n            item,\n            contract_address,\n            function_selector,\n            args_hash,\n            is_static_call,\n            is_delegate_call\n        );\n\n        self.side_effect_counter = self.side_effect_counter + 1;\n        self.public_teardown_function_hash = item.get_compressed().hash();\n    }\n\n    fn validate_call_stack_item_from_oracle(\n        self,\n        item: PublicCallStackItem,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.start_side_effect_counter, self.side_effect_counter);\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n    }\n\n    fn next_counter(&mut self) -> u32 {\n        let counter = self.side_effect_counter;\n        self.side_effect_counter += 1;\n        counter\n    }\n}\n\nimpl Empty for PrivateContext {\n    fn empty() -> Self {\n        PrivateContext {\n            inputs: PrivateContextInputs::empty(),\n            side_effect_counter: 0 as u32,\n            min_revertible_side_effect_counter: 0 as u32,\n            is_fee_payer: false,\n            args_hash: 0,\n            return_hash: 0,\n            max_block_number: MaxBlockNumber::empty(),\n            note_hash_read_requests: BoundedVec::new(),\n            nullifier_read_requests: BoundedVec::new(),\n            key_validation_requests_and_generators: BoundedVec::new(),\n            note_hashes: BoundedVec::new(),\n            nullifiers: BoundedVec::new(),\n            private_call_requests: BoundedVec::new(),\n            public_call_stack_hashes: BoundedVec::new(),\n            public_teardown_function_hash: 0,\n            l2_to_l1_msgs: BoundedVec::new(),\n            historical_header: Header::empty(),\n            note_encrypted_logs_hashes: BoundedVec::new(),\n            encrypted_logs_hashes: BoundedVec::new(),\n            unencrypted_logs_hashes: BoundedVec::new(),\n            last_key_validation_requests: [Option::none(); NUM_KEY_TYPES]\n        }\n    }\n}\n"},"95":{"path":"/usr/src/noir-projects/aztec-nr/aztec/src/context/public_context.nr","source":"use crate::hash::{compute_secret_hash, compute_message_hash, compute_message_nullifier};\nuse dep::protocol_types::address::{AztecAddress, EthAddress};\nuse dep::protocol_types::traits::{Serialize, Deserialize, Empty};\nuse dep::protocol_types::abis::function_selector::FunctionSelector;\nuse crate::context::inputs::public_context_inputs::PublicContextInputs;\nuse crate::context::gas::GasOpts;\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs) -> Self {\n        PublicContext { inputs }\n    }\n\n    pub fn emit_unencrypted_log<T, N>(&mut self, log: T) where T: Serialize<N> {\n        emit_unencrypted_log(Serialize::serialize(log).as_slice());\n    }\n\n    pub fn note_hash_exists(self, note_hash: Field, leaf_index: Field) -> bool {\n        note_hash_exists(note_hash, leaf_index) == 1\n    }\n\n    pub fn l1_to_l2_msg_exists(self, msg_hash: Field, msg_leaf_index: Field) -> bool {\n        l1_to_l2_msg_exists(msg_hash, msg_leaf_index) == 1\n    }\n\n    fn nullifier_exists(self, unsiloed_nullifier: Field, address: AztecAddress) -> bool {\n        nullifier_exists(unsiloed_nullifier, address.to_field()) == 1\n    }\n\n    fn consume_l1_to_l2_message(\n        &mut self,\n        content: Field,\n        secret: Field,\n        sender: EthAddress,\n        leaf_index: Field\n    ) {\n        let secret_hash = compute_secret_hash(secret);\n        let message_hash = compute_message_hash(\n            sender,\n            self.chain_id(),\n            /*recipient=*/ self.this_address(),\n            self.version(),\n            content,\n            secret_hash\n        );\n        let nullifier = compute_message_nullifier(message_hash, secret, leaf_index);\n\n        assert(\n            !self.nullifier_exists(nullifier, self.this_address()), \"L1-to-L2 message is already nullified\"\n        );\n        assert(\n            self.l1_to_l2_msg_exists(message_hash, leaf_index), \"Tried to consume nonexistent L1-to-L2 message\"\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_nullifier(nullifier, 0);\n    }\n\n    fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        send_l2_to_l1_msg(recipient, content);\n    }\n\n    fn call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let results = call(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n        let data_to_return: [Field; RETURNS_COUNT] = results.0;\n        let success: u8 = results.1;\n        assert(success == 1, \"Nested call failed!\");\n\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn static_call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field],\n        gas_opts: GasOpts\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        let (data_to_return, success): ([Field; RETURNS_COUNT], u8) = call_static(\n            gas_for_call(gas_opts),\n            contract_address,\n            args,\n            function_selector.to_field()\n        );\n\n        assert(success == 1, \"Nested static call failed!\");\n        FunctionReturns::new(data_to_return)\n    }\n\n    fn delegate_call_public_function<RETURNS_COUNT>(\n        self: &mut Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field]\n    ) -> FunctionReturns<RETURNS_COUNT> {\n        assert(false, \"'delegate_call_public_function' not implemented!\");\n        FunctionReturns::new([0; RETURNS_COUNT])\n    }\n\n    fn push_note_hash(&mut self, note_hash: Field) {\n        emit_note_hash(note_hash);\n    }\n    fn push_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        // Cannot nullify pending commitments in AVM, so `nullified_commitment` is not used\n        emit_nullifier(nullifier);\n    }\n\n    fn this_address(self) -> AztecAddress {\n        address()\n    }\n    pub fn storage_address(self) -> AztecAddress {\n        storage_address()\n    }\n    fn msg_sender(self) -> AztecAddress {\n        sender()\n    }\n    fn selector(self) -> FunctionSelector {\n        FunctionSelector::from_u32(function_selector())\n    }\n    fn get_args_hash(self) -> Field {\n        self.inputs.args_hash\n    }\n    fn transaction_fee(self) -> Field {\n        transaction_fee()\n    }\n\n    fn chain_id(self) -> Field {\n        chain_id()\n    }\n    fn version(self) -> Field {\n        version()\n    }\n    fn block_number(self) -> Field {\n        block_number()\n    }\n    fn timestamp(self) -> u64 {\n        timestamp()\n    }\n    pub fn fee_per_l2_gas(self) -> Field {\n        fee_per_l2_gas()\n    }\n    pub fn fee_per_da_gas(self) -> Field {\n        fee_per_da_gas()\n    }\n\n    fn l2_gas_left(self) -> Field {\n        l2_gas_left()\n    }\n    fn da_gas_left(self) -> Field {\n        da_gas_left()\n    }\n\n    fn raw_storage_read<N>(_self: Self, storage_slot: Field) -> [Field; N] {\n        storage_read(storage_slot)\n    }\n\n    fn storage_read<T, N>(self, storage_slot: Field) -> T where T: Deserialize<N> {\n        T::deserialize(self.raw_storage_read(storage_slot))\n    }\n\n    fn raw_storage_write<N>(_self: Self, storage_slot: Field, values: [Field; N]) {\n        storage_write(storage_slot, values);\n    }\n\n    fn storage_write<T, N>(self, storage_slot: Field, value: T) where T: Serialize<N> {\n        self.raw_storage_write(storage_slot, value.serialize());\n    }\n}\n\n// Helper functions\nfn gas_for_call(user_gas: GasOpts) -> [Field; 2] {\n    // It's ok to use the max possible gas here, because the gas will be\n    // capped by the gas left in the (STATIC)CALL instruction.\n    let MAX_POSSIBLE_FIELD: Field = 0 - 1;\n    [\n        user_gas.l2_gas.unwrap_or(MAX_POSSIBLE_FIELD),\n        user_gas.da_gas.unwrap_or(MAX_POSSIBLE_FIELD)\n    ]\n}\n\n// Unconstrained opcode wrappers (do not use directly).\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/6420): reconsider.\nunconstrained fn address() -> AztecAddress {\n    address_opcode()\n}\nunconstrained fn storage_address() -> AztecAddress {\n    storage_address_opcode()\n}\nunconstrained fn sender() -> AztecAddress {\n    sender_opcode()\n}\nunconstrained fn portal() -> EthAddress {\n    portal_opcode()\n}\nunconstrained fn function_selector() -> u32 {\n    function_selector_opcode()\n}\nunconstrained fn transaction_fee() -> Field {\n    transaction_fee_opcode()\n}\nunconstrained fn chain_id() -> Field {\n    chain_id_opcode()\n}\nunconstrained fn version() -> Field {\n    version_opcode()\n}\nunconstrained fn block_number() -> Field {\n    block_number_opcode()\n}\nunconstrained fn timestamp() -> u64 {\n    timestamp_opcode()\n}\nunconstrained fn fee_per_l2_gas() -> Field {\n    fee_per_l2_gas_opcode()\n}\nunconstrained fn fee_per_da_gas() -> Field {\n    fee_per_da_gas_opcode()\n}\nunconstrained fn l2_gas_left() -> Field {\n    l2_gas_left_opcode()\n}\nunconstrained fn da_gas_left() -> Field {\n    da_gas_left_opcode()\n}\nunconstrained fn note_hash_exists(note_hash: Field, leaf_index: Field) -> u8 {\n    note_hash_exists_opcode(note_hash, leaf_index)\n}\nunconstrained fn emit_note_hash(note_hash: Field) {\n    emit_note_hash_opcode(note_hash)\n}\nunconstrained fn nullifier_exists(nullifier: Field, address: Field) -> u8 {\n    nullifier_exists_opcode(nullifier, address)\n}\nunconstrained fn emit_nullifier(nullifier: Field) {\n    emit_nullifier_opcode(nullifier)\n}\nunconstrained fn emit_unencrypted_log(message: [Field]) {\n    emit_unencrypted_log_opcode(message)\n}\nunconstrained fn l1_to_l2_msg_exists(msg_hash: Field, msg_leaf_index: Field) -> u8 {\n    l1_to_l2_msg_exists_opcode(msg_hash, msg_leaf_index)\n}\nunconstrained fn send_l2_to_l1_msg(recipient: EthAddress, content: Field) {\n    send_l2_to_l1_msg_opcode(recipient, content)\n}\nunconstrained fn call<RET_SIZE>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_opcode(gas, address, args, function_selector)\n}\nunconstrained fn call_static<RET_SIZE>(\n    gas: [Field; 2],\n    address: AztecAddress,\n    args: [Field],\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {\n    call_static_opcode(gas, address, args, function_selector)\n}\n\nunconstrained fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_opcode(storage_slot, N)\n}\n\nunconstrained fn storage_write<N>(storage_slot: Field, values: [Field; N]) {\n    storage_write_opcode(storage_slot, values);\n}\n\nimpl Empty for PublicContext {\n    fn empty() -> Self {\n        PublicContext::new(PublicContextInputs::empty())\n    }\n}\n\n// AVM oracles (opcodes) follow, do not use directly.\n#[oracle(avmOpcodeAddress)]\nunconstrained fn address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeStorageAddress)]\nunconstrained fn storage_address_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodeSender)]\nunconstrained fn sender_opcode() -> AztecAddress {}\n\n#[oracle(avmOpcodePortal)]\nunconstrained fn portal_opcode() -> EthAddress {}\n\n#[oracle(avmOpcodeFunctionSelector)]\nunconstrained fn function_selector_opcode() -> u32 {}\n\n#[oracle(avmOpcodeTransactionFee)]\nunconstrained fn transaction_fee_opcode() -> Field {}\n\n#[oracle(avmOpcodeChainId)]\nunconstrained fn chain_id_opcode() -> Field {}\n\n#[oracle(avmOpcodeVersion)]\nunconstrained fn version_opcode() -> Field {}\n\n#[oracle(avmOpcodeBlockNumber)]\nunconstrained fn block_number_opcode() -> Field {}\n\n#[oracle(avmOpcodeTimestamp)]\nunconstrained fn timestamp_opcode() -> u64 {}\n\n#[oracle(avmOpcodeFeePerL2Gas)]\nunconstrained fn fee_per_l2_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeFeePerDaGas)]\nunconstrained fn fee_per_da_gas_opcode() -> Field {}\n\n#[oracle(avmOpcodeL2GasLeft)]\nunconstrained fn l2_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeDaGasLeft)]\nunconstrained fn da_gas_left_opcode() -> Field {}\n\n#[oracle(avmOpcodeNoteHashExists)]\nunconstrained fn note_hash_exists_opcode(note_hash: Field, leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNoteHash)]\nunconstrained fn emit_note_hash_opcode(note_hash: Field) {}\n\n#[oracle(avmOpcodeNullifierExists)]\nunconstrained fn nullifier_exists_opcode(nullifier: Field, address: Field) -> u8 {}\n\n#[oracle(avmOpcodeEmitNullifier)]\nunconstrained fn emit_nullifier_opcode(nullifier: Field) {}\n\n#[oracle(avmOpcodeEmitUnencryptedLog)]\nunconstrained fn emit_unencrypted_log_opcode(message: [Field]) {}\n\n#[oracle(avmOpcodeL1ToL2MsgExists)]\nunconstrained fn l1_to_l2_msg_exists_opcode(msg_hash: Field, msg_leaf_index: Field) -> u8 {}\n\n#[oracle(avmOpcodeSendL2ToL1Msg)]\nunconstrained fn send_l2_to_l1_msg_opcode(recipient: EthAddress, content: Field) {}\n\n#[oracle(avmOpcodeCall)]\nunconstrained fn call_opcode<RET_SIZE>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStaticCall)]\nunconstrained fn call_static_opcode<RET_SIZE>(\n    gas: [Field; 2], // gas allocation: [l2_gas, da_gas]\n    address: AztecAddress,\n    args: [Field],\n    // TODO(5110): consider passing in calldata directly\n    function_selector: Field\n) -> ([Field; RET_SIZE], u8) {}\n//    ^ return data      ^ success\n\n#[oracle(avmOpcodeStorageRead)]\nunconstrained fn storage_read_opcode<N>(storage_slot: Field, length: Field) -> [Field; N] {}\n\n#[oracle(avmOpcodeStorageWrite)]\nunconstrained fn storage_write_opcode<N>(storage_slot: Field, values: [Field; N]) {}\n\nstruct FunctionReturns<N> {\n    values: [Field; N]\n}\n\nimpl<N> FunctionReturns<N> {\n    pub fn new(values: [Field; N]) -> FunctionReturns<N> {\n        FunctionReturns { values }\n    }\n\n    pub fn assert_empty(returns: FunctionReturns<0>) {\n        assert(returns.values.len() == 0);\n    }\n\n    pub fn raw(self) -> [Field; N] {\n        self.values\n    }\n\n    pub fn deserialize_into<T>(self) -> T where T: Deserialize<N> {\n        Deserialize::deserialize(self.raw())\n    }\n}\n"}}}