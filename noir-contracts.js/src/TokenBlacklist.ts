/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractInstanceWithAddress,
  ContractMethod,
  ContractNotes,
  ContractStorageLayout,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  EventSelector,
  FieldLike,
  Fr,
  FunctionSelectorLike,
  L1EventPayload,
  NoirCompiledContract,
  NoteSelector,
  Point,
  PublicKey,
  Wallet,
  WrappedFieldLike,
  loadContractArtifact,
} from '@aztec/aztec.js';

import TokenBlacklistContractArtifactJson from '../artifacts/token_blacklist_contract-TokenBlacklist.json' assert { type: 'json' };

export const TokenBlacklistContractArtifact = loadContractArtifact(
  TokenBlacklistContractArtifactJson as NoirCompiledContract,
);

/**
 * Type-safe interface for contract TokenBlacklist;
 */
export class TokenBlacklistContract extends ContractBase {
  private constructor(instance: ContractInstanceWithAddress, wallet: Wallet) {
    super(instance, TokenBlacklistContractArtifact, wallet);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(address: AztecAddress, wallet: Wallet) {
    return Contract.at(address, TokenBlacklistContract.artifact, wallet) as Promise<TokenBlacklistContract>;
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet, admin: AztecAddressLike) {
    return new DeployMethod<TokenBlacklistContract>(
      Fr.ZERO,
      wallet,
      TokenBlacklistContractArtifact,
      TokenBlacklistContract.at,
      Array.from(arguments).slice(1),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
   */
  public static deployWithPublicKeysHash(publicKeysHash: Fr, wallet: Wallet, admin: AztecAddressLike) {
    return new DeployMethod<TokenBlacklistContract>(
      publicKeysHash,
      wallet,
      TokenBlacklistContractArtifact,
      TokenBlacklistContract.at,
      Array.from(arguments).slice(2),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified constructor method.
   */
  public static deployWithOpts<M extends keyof TokenBlacklistContract['methods']>(
    opts: { publicKeysHash?: Fr; method?: M; wallet: Wallet },
    ...args: Parameters<TokenBlacklistContract['methods'][M]>
  ) {
    return new DeployMethod<TokenBlacklistContract>(
      opts.publicKeysHash ?? Fr.ZERO,
      opts.wallet,
      TokenBlacklistContractArtifact,
      TokenBlacklistContract.at,
      Array.from(arguments).slice(1),
      opts.method ?? 'constructor',
    );
  }

  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return TokenBlacklistContractArtifact;
  }

  public static get storage(): ContractStorageLayout<
    'balances' | 'total_supply' | 'pending_shields' | 'public_balances' | 'roles'
  > {
    return {
      balances: {
        slot: new Fr(1n),
      },
      total_supply: {
        slot: new Fr(2n),
      },
      pending_shields: {
        slot: new Fr(3n),
      },
      public_balances: {
        slot: new Fr(4n),
      },
      roles: {
        slot: new Fr(5n),
      },
    } as ContractStorageLayout<'balances' | 'total_supply' | 'pending_shields' | 'public_balances' | 'roles'>;
  }

  public static get notes(): ContractNotes<'TransparentNote' | 'TokenNote'> {
    return {
      TransparentNote: {
        id: new NoteSelector(1049878767),
      },
      TokenNote: {
        id: new NoteSelector(3992089675),
      },
    } as ContractNotes<'TransparentNote' | 'TokenNote'>;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public override methods!: {
    /** transfer(from: struct, to: struct, amount: field, nonce: field) */
    transfer: ((
      from: AztecAddressLike,
      to: AztecAddressLike,
      amount: FieldLike,
      nonce: FieldLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** mint_public(to: struct, amount: field) */
    mint_public: ((to: AztecAddressLike, amount: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** constructor(admin: struct) */
    constructor: ((admin: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** get_roles(user: struct) */
    get_roles: ((user: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** update_roles(user: struct, roles: struct) */
    update_roles: ((
      user: AztecAddressLike,
      roles: { is_admin: boolean; is_minter: boolean; is_blacklisted: boolean },
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** compute_note_hash_and_optionally_a_nullifier(contract_address: struct, nonce: field, storage_slot: field, note_type_id: field, compute_nullifier: boolean, serialized_note: array) */
    compute_note_hash_and_optionally_a_nullifier: ((
      contract_address: AztecAddressLike,
      nonce: FieldLike,
      storage_slot: FieldLike,
      note_type_id: FieldLike,
      compute_nullifier: boolean,
      serialized_note: FieldLike[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** redeem_shield(to: struct, amount: field, secret: field) */
    redeem_shield: ((to: AztecAddressLike, amount: FieldLike, secret: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** balance_of_public(owner: struct) */
    balance_of_public: ((owner: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** total_supply() */
    total_supply: (() => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** balance_of_private(owner: struct) */
    balance_of_private: ((owner: AztecAddressLike) => ContractFunctionInteraction) & Pick<ContractMethod, 'selector'>;

    /** burn(from: struct, amount: field, nonce: field) */
    burn: ((from: AztecAddressLike, amount: FieldLike, nonce: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** transfer_public(from: struct, to: struct, amount: field, nonce: field) */
    transfer_public: ((
      from: AztecAddressLike,
      to: AztecAddressLike,
      amount: FieldLike,
      nonce: FieldLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** unshield(from: struct, to: struct, amount: field, nonce: field) */
    unshield: ((
      from: AztecAddressLike,
      to: AztecAddressLike,
      amount: FieldLike,
      nonce: FieldLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** burn_public(from: struct, amount: field, nonce: field) */
    burn_public: ((from: AztecAddressLike, amount: FieldLike, nonce: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** shield(from: struct, amount: field, secret_hash: field, nonce: field) */
    shield: ((
      from: AztecAddressLike,
      amount: FieldLike,
      secret_hash: FieldLike,
      nonce: FieldLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** mint_private(amount: field, secret_hash: field) */
    mint_private: ((amount: FieldLike, secret_hash: FieldLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;
  };
}
