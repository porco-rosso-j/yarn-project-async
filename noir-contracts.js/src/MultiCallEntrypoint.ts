/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractInstanceWithAddress,
  ContractMethod,
  ContractNotes,
  ContractStorageLayout,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  EventSelector,
  FieldLike,
  Fr,
  FunctionSelectorLike,
  L1EventPayload,
  NoirCompiledContract,
  NoteSelector,
  Point,
  PublicKey,
  Wallet,
  WrappedFieldLike,
  loadContractArtifact,
} from '@aztec/aztec.js';

import MultiCallEntrypointContractArtifactJson from '../artifacts/multi_call_entrypoint_contract-MultiCallEntrypoint.json' assert { type: 'json' };

export const MultiCallEntrypointContractArtifact = loadContractArtifact(
  MultiCallEntrypointContractArtifactJson as NoirCompiledContract,
);

/**
 * Type-safe interface for contract MultiCallEntrypoint;
 */
export class MultiCallEntrypointContract extends ContractBase {
  private constructor(instance: ContractInstanceWithAddress, wallet: Wallet) {
    super(instance, MultiCallEntrypointContractArtifact, wallet);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(address: AztecAddress, wallet: Wallet) {
    return Contract.at(address, MultiCallEntrypointContract.artifact, wallet) as Promise<MultiCallEntrypointContract>;
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet) {
    return new DeployMethod<MultiCallEntrypointContract>(
      Fr.ZERO,
      wallet,
      MultiCallEntrypointContractArtifact,
      MultiCallEntrypointContract.at,
      Array.from(arguments).slice(1),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
   */
  public static deployWithPublicKeysHash(publicKeysHash: Fr, wallet: Wallet) {
    return new DeployMethod<MultiCallEntrypointContract>(
      publicKeysHash,
      wallet,
      MultiCallEntrypointContractArtifact,
      MultiCallEntrypointContract.at,
      Array.from(arguments).slice(2),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified constructor method.
   */
  public static deployWithOpts<M extends keyof MultiCallEntrypointContract['methods']>(
    opts: { publicKeysHash?: Fr; method?: M; wallet: Wallet },
    ...args: Parameters<MultiCallEntrypointContract['methods'][M]>
  ) {
    return new DeployMethod<MultiCallEntrypointContract>(
      opts.publicKeysHash ?? Fr.ZERO,
      opts.wallet,
      MultiCallEntrypointContractArtifact,
      MultiCallEntrypointContract.at,
      Array.from(arguments).slice(1),
      opts.method ?? 'constructor',
    );
  }

  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return MultiCallEntrypointContractArtifact;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public override methods!: {
    /** compute_note_hash_and_optionally_a_nullifier(contract_address: struct, nonce: field, storage_slot: field, note_type_id: field, compute_nullifier: boolean, serialized_note: array) */
    compute_note_hash_and_optionally_a_nullifier: ((
      contract_address: AztecAddressLike,
      nonce: FieldLike,
      storage_slot: FieldLike,
      note_type_id: FieldLike,
      compute_nullifier: boolean,
      serialized_note: FieldLike[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** entrypoint(app_payload: struct) */
    entrypoint: ((app_payload: {
      function_calls: {
        args_hash: FieldLike;
        function_selector: FunctionSelectorLike;
        target_address: AztecAddressLike;
        is_public: boolean;
        is_static: boolean;
      }[];
      nonce: FieldLike;
    }) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;
  };
}
