/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractInstanceWithAddress,
  ContractMethod,
  ContractNotes,
  ContractStorageLayout,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  EventSelector,
  FieldLike,
  Fr,
  FunctionSelectorLike,
  L1EventPayload,
  NoirCompiledContract,
  NoteSelector,
  Point,
  PublicKey,
  Wallet,
  WrappedFieldLike,
  loadContractArtifact,
} from '@aztec/aztec.js';

import ClaimContractArtifactJson from '../artifacts/claim_contract-Claim.json' assert { type: 'json' };

export const ClaimContractArtifact = loadContractArtifact(ClaimContractArtifactJson as NoirCompiledContract);

/**
 * Type-safe interface for contract Claim;
 */
export class ClaimContract extends ContractBase {
  private constructor(instance: ContractInstanceWithAddress, wallet: Wallet) {
    super(instance, ClaimContractArtifact, wallet);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(address: AztecAddress, wallet: Wallet) {
    return Contract.at(address, ClaimContract.artifact, wallet) as Promise<ClaimContract>;
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet, target_contract: AztecAddressLike, reward_token: AztecAddressLike) {
    return new DeployMethod<ClaimContract>(
      Fr.ZERO,
      wallet,
      ClaimContractArtifact,
      ClaimContract.at,
      Array.from(arguments).slice(1),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
   */
  public static deployWithPublicKeysHash(
    publicKeysHash: Fr,
    wallet: Wallet,
    target_contract: AztecAddressLike,
    reward_token: AztecAddressLike,
  ) {
    return new DeployMethod<ClaimContract>(
      publicKeysHash,
      wallet,
      ClaimContractArtifact,
      ClaimContract.at,
      Array.from(arguments).slice(2),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified constructor method.
   */
  public static deployWithOpts<M extends keyof ClaimContract['methods']>(
    opts: { publicKeysHash?: Fr; method?: M; wallet: Wallet },
    ...args: Parameters<ClaimContract['methods'][M]>
  ) {
    return new DeployMethod<ClaimContract>(
      opts.publicKeysHash ?? Fr.ZERO,
      opts.wallet,
      ClaimContractArtifact,
      ClaimContract.at,
      Array.from(arguments).slice(1),
      opts.method ?? 'constructor',
    );
  }

  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return ClaimContractArtifact;
  }

  public static get storage(): ContractStorageLayout<
    | 'admin'
    | 'minters'
    | 'balances'
    | 'total_supply'
    | 'pending_shields'
    | 'public_balances'
    | 'symbol'
    | 'name'
    | 'decimals'
  > {
    return {
      admin: {
        slot: new Fr(1n),
      },
      minters: {
        slot: new Fr(2n),
      },
      balances: {
        slot: new Fr(3n),
      },
      total_supply: {
        slot: new Fr(4n),
      },
      pending_shields: {
        slot: new Fr(5n),
      },
      public_balances: {
        slot: new Fr(6n),
      },
      symbol: {
        slot: new Fr(7n),
      },
      name: {
        slot: new Fr(8n),
      },
      decimals: {
        slot: new Fr(9n),
      },
    } as ContractStorageLayout<
      | 'admin'
      | 'minters'
      | 'balances'
      | 'total_supply'
      | 'pending_shields'
      | 'public_balances'
      | 'symbol'
      | 'name'
      | 'decimals'
    >;
  }

  public static get notes(): ContractNotes<'TransparentNote' | 'TokenNote' | 'ValueNote'> {
    return {
      TransparentNote: {
        id: new NoteSelector(1049878767),
      },
      TokenNote: {
        id: new NoteSelector(3992089675),
      },
      ValueNote: {
        id: new NoteSelector(1900156023),
      },
    } as ContractNotes<'TransparentNote' | 'TokenNote' | 'ValueNote'>;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public override methods!: {
    /** constructor(target_contract: struct, reward_token: struct) */
    constructor: ((target_contract: AztecAddressLike, reward_token: AztecAddressLike) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** compute_note_hash_and_optionally_a_nullifier(contract_address: struct, nonce: field, storage_slot: field, note_type_id: field, compute_nullifier: boolean, serialized_note: array) */
    compute_note_hash_and_optionally_a_nullifier: ((
      contract_address: AztecAddressLike,
      nonce: FieldLike,
      storage_slot: FieldLike,
      note_type_id: FieldLike,
      compute_nullifier: boolean,
      serialized_note: FieldLike[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** claim(proof_note: struct, recipient: struct) */
    claim: ((
      proof_note: {
        value: FieldLike;
        npk_m_hash: FieldLike;
        randomness: FieldLike;
        header: {
          contract_address: AztecAddressLike;
          nonce: FieldLike;
          storage_slot: FieldLike;
          note_hash_counter: bigint | number;
        };
      },
      recipient: AztecAddressLike,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;
  };
}
