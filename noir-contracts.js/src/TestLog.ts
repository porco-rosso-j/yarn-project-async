/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractInstanceWithAddress,
  ContractMethod,
  ContractNotes,
  ContractStorageLayout,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  EventSelector,
  FieldLike,
  Fr,
  FunctionSelectorLike,
  L1EventPayload,
  NoirCompiledContract,
  NoteSelector,
  Point,
  PublicKey,
  Wallet,
  WrappedFieldLike,
  loadContractArtifact,
} from '@aztec/aztec.js';

import TestLogContractArtifactJson from '../artifacts/test_log_contract-TestLog.json' assert { type: 'json' };

export const TestLogContractArtifact = loadContractArtifact(TestLogContractArtifactJson as NoirCompiledContract);

export type ExampleEvent1 = {
  value2: Fr;
  value3: Fr;
};

export type ExampleEvent0 = {
  value0: Fr;
  value1: Fr;
};

/**
 * Type-safe interface for contract TestLog;
 */
export class TestLogContract extends ContractBase {
  private constructor(instance: ContractInstanceWithAddress, wallet: Wallet) {
    super(instance, TestLogContractArtifact, wallet);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(address: AztecAddress, wallet: Wallet) {
    return Contract.at(address, TestLogContract.artifact, wallet) as Promise<TestLogContract>;
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet) {
    return new DeployMethod<TestLogContract>(
      Fr.ZERO,
      wallet,
      TestLogContractArtifact,
      TestLogContract.at,
      Array.from(arguments).slice(1),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
   */
  public static deployWithPublicKeysHash(publicKeysHash: Fr, wallet: Wallet) {
    return new DeployMethod<TestLogContract>(
      publicKeysHash,
      wallet,
      TestLogContractArtifact,
      TestLogContract.at,
      Array.from(arguments).slice(2),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified constructor method.
   */
  public static deployWithOpts<M extends keyof TestLogContract['methods']>(
    opts: { publicKeysHash?: Fr; method?: M; wallet: Wallet },
    ...args: Parameters<TestLogContract['methods'][M]>
  ) {
    return new DeployMethod<TestLogContract>(
      opts.publicKeysHash ?? Fr.ZERO,
      opts.wallet,
      TestLogContractArtifact,
      TestLogContract.at,
      Array.from(arguments).slice(1),
      opts.method ?? 'constructor',
    );
  }

  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return TestLogContractArtifact;
  }

  public static get storage(): ContractStorageLayout<'example_set'> {
    return {
      example_set: {
        slot: new Fr(1n),
      },
    } as ContractStorageLayout<'example_set'>;
  }

  public static get notes(): ContractNotes<'ValueNote'> {
    return {
      ValueNote: {
        id: new NoteSelector(1900156023),
      },
    } as ContractNotes<'ValueNote'>;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public override methods!: {
    /** emit_unencrypted_events(preimages: array) */
    emit_unencrypted_events: ((preimages: FieldLike[]) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** emit_encrypted_events(other: struct, randomness: array, preimages: array) */
    emit_encrypted_events: ((
      other: AztecAddressLike,
      randomness: FieldLike[],
      preimages: FieldLike[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** compute_incoming_log_body_ciphertext(secret: struct, point: struct, randomness: field, event_type_id: field, preimage: array) */
    compute_incoming_log_body_ciphertext: ((
      secret: { lo: FieldLike; hi: FieldLike },
      point: { x: FieldLike; y: FieldLike; is_infinite: boolean },
      randomness: FieldLike,
      event_type_id: FieldLike,
      preimage: FieldLike[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** compute_note_hash_and_optionally_a_nullifier(contract_address: struct, nonce: field, storage_slot: field, note_type_id: field, compute_nullifier: boolean, serialized_note: array) */
    compute_note_hash_and_optionally_a_nullifier: ((
      contract_address: AztecAddressLike,
      nonce: FieldLike,
      storage_slot: FieldLike,
      note_type_id: FieldLike,
      compute_nullifier: boolean,
      serialized_note: FieldLike[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;
  };

  // Partial application is chosen is to avoid the duplication of so much codegen.
  private static decodeEvent<T>(
    fieldsLength: number,
    eventSelector: EventSelector,
    fields: string[],
  ): (payload: L1EventPayload | undefined) => T | undefined {
    return (payload: L1EventPayload | undefined): T | undefined => {
      if (payload === undefined) {
        return undefined;
      }
      if (!eventSelector.equals(payload.eventTypeId)) {
        return undefined;
      }
      if (payload.event.items.length !== fieldsLength) {
        throw new Error(
          'Something is weird here, we have matching EventSelectors, but the actual payload has mismatched length',
        );
      }

      return fields.reduce(
        (acc, curr, i) => ({
          ...acc,
          [curr]: payload.event.items[i],
        }),
        {} as T,
      );
    };
  }

  public static get events(): {
    ExampleEvent1: {
      decode: (payload: L1EventPayload | undefined) => ExampleEvent1 | undefined;
      eventSelector: EventSelector;
      fieldNames: string[];
    };
    ExampleEvent0: {
      decode: (payload: L1EventPayload | undefined) => ExampleEvent0 | undefined;
      eventSelector: EventSelector;
      fieldNames: string[];
    };
  } {
    return {
      ExampleEvent1: {
        decode: this.decodeEvent(2, EventSelector.fromSignature('ExampleEvent1(Field,Field)'), ['value2', 'value3']),
        eventSelector: EventSelector.fromSignature('ExampleEvent1(Field,Field)'),
        fieldNames: ['value2', 'value3'],
      },
      ExampleEvent0: {
        decode: this.decodeEvent(2, EventSelector.fromSignature('ExampleEvent0(Field,Field)'), ['value0', 'value1']),
        eventSelector: EventSelector.fromSignature('ExampleEvent0(Field,Field)'),
        fieldNames: ['value0', 'value1'],
      },
    };
  }
}
