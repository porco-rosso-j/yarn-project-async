/* Autogenerated file, do not edit! */

/* eslint-disable */
import {
  AztecAddress,
  AztecAddressLike,
  CompleteAddress,
  Contract,
  ContractArtifact,
  ContractBase,
  ContractFunctionInteraction,
  ContractInstanceWithAddress,
  ContractMethod,
  ContractNotes,
  ContractStorageLayout,
  DeployMethod,
  EthAddress,
  EthAddressLike,
  EventSelector,
  FieldLike,
  Fr,
  FunctionSelectorLike,
  L1EventPayload,
  NoirCompiledContract,
  NoteSelector,
  Point,
  PublicKey,
  Wallet,
  WrappedFieldLike,
  loadContractArtifact,
} from '@aztec/aztec.js';

import ContractInstanceDeployerContractArtifactJson from '../artifacts/contract_instance_deployer_contract-ContractInstanceDeployer.json' assert { type: 'json' };

export const ContractInstanceDeployerContractArtifact = loadContractArtifact(
  ContractInstanceDeployerContractArtifactJson as NoirCompiledContract,
);

export type ContractInstanceDeployed = {
  DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE: Fr;
  address: Fr;
  version: Fr;
  salt: Fr;
  contract_class_id: Fr;
  initialization_hash: Fr;
  public_keys_hash: Fr;
  deployer: Fr;
};

/**
 * Type-safe interface for contract ContractInstanceDeployer;
 */
export class ContractInstanceDeployerContract extends ContractBase {
  private constructor(instance: ContractInstanceWithAddress, wallet: Wallet) {
    super(instance, ContractInstanceDeployerContractArtifact, wallet);
  }

  /**
   * Creates a contract instance.
   * @param address - The deployed contract's address.
   * @param wallet - The wallet to use when interacting with the contract.
   * @returns A promise that resolves to a new Contract instance.
   */
  public static async at(address: AztecAddress, wallet: Wallet) {
    return Contract.at(
      address,
      ContractInstanceDeployerContract.artifact,
      wallet,
    ) as Promise<ContractInstanceDeployerContract>;
  }

  /**
   * Creates a tx to deploy a new instance of this contract.
   */
  public static deploy(wallet: Wallet) {
    return new DeployMethod<ContractInstanceDeployerContract>(
      Fr.ZERO,
      wallet,
      ContractInstanceDeployerContractArtifact,
      ContractInstanceDeployerContract.at,
      Array.from(arguments).slice(1),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
   */
  public static deployWithPublicKeysHash(publicKeysHash: Fr, wallet: Wallet) {
    return new DeployMethod<ContractInstanceDeployerContract>(
      publicKeysHash,
      wallet,
      ContractInstanceDeployerContractArtifact,
      ContractInstanceDeployerContract.at,
      Array.from(arguments).slice(2),
    );
  }

  /**
   * Creates a tx to deploy a new instance of this contract using the specified constructor method.
   */
  public static deployWithOpts<M extends keyof ContractInstanceDeployerContract['methods']>(
    opts: { publicKeysHash?: Fr; method?: M; wallet: Wallet },
    ...args: Parameters<ContractInstanceDeployerContract['methods'][M]>
  ) {
    return new DeployMethod<ContractInstanceDeployerContract>(
      opts.publicKeysHash ?? Fr.ZERO,
      opts.wallet,
      ContractInstanceDeployerContractArtifact,
      ContractInstanceDeployerContract.at,
      Array.from(arguments).slice(1),
      opts.method ?? 'constructor',
    );
  }

  /**
   * Returns this contract's artifact.
   */
  public static get artifact(): ContractArtifact {
    return ContractInstanceDeployerContractArtifact;
  }

  /** Type-safe wrappers for the public methods exposed by the contract. */
  public override methods!: {
    /** deploy(salt: field, contract_class_id: struct, initialization_hash: field, public_keys_hash: struct, universal_deploy: boolean) */
    deploy: ((
      salt: FieldLike,
      contract_class_id: WrappedFieldLike,
      initialization_hash: FieldLike,
      public_keys_hash: WrappedFieldLike,
      universal_deploy: boolean,
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;

    /** compute_note_hash_and_optionally_a_nullifier(contract_address: struct, nonce: field, storage_slot: field, note_type_id: field, compute_nullifier: boolean, serialized_note: array) */
    compute_note_hash_and_optionally_a_nullifier: ((
      contract_address: AztecAddressLike,
      nonce: FieldLike,
      storage_slot: FieldLike,
      note_type_id: FieldLike,
      compute_nullifier: boolean,
      serialized_note: FieldLike[],
    ) => ContractFunctionInteraction) &
      Pick<ContractMethod, 'selector'>;
  };

  // Partial application is chosen is to avoid the duplication of so much codegen.
  private static decodeEvent<T>(
    fieldsLength: number,
    eventSelector: EventSelector,
    fields: string[],
  ): (payload: L1EventPayload | undefined) => T | undefined {
    return (payload: L1EventPayload | undefined): T | undefined => {
      if (payload === undefined) {
        return undefined;
      }
      if (!eventSelector.equals(payload.eventTypeId)) {
        return undefined;
      }
      if (payload.event.items.length !== fieldsLength) {
        throw new Error(
          'Something is weird here, we have matching EventSelectors, but the actual payload has mismatched length',
        );
      }

      return fields.reduce(
        (acc, curr, i) => ({
          ...acc,
          [curr]: payload.event.items[i],
        }),
        {} as T,
      );
    };
  }

  public static get events(): {
    ContractInstanceDeployed: {
      decode: (payload: L1EventPayload | undefined) => ContractInstanceDeployed | undefined;
      eventSelector: EventSelector;
      fieldNames: string[];
    };
  } {
    return {
      ContractInstanceDeployed: {
        decode: this.decodeEvent(
          8,
          EventSelector.fromSignature('ContractInstanceDeployed(Field,Field,Field,Field,Field,Field,Field,Field)'),
          [
            'DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE',
            'address',
            'version',
            'salt',
            'contract_class_id',
            'initialization_hash',
            'public_keys_hash',
            'deployer',
          ],
        ),
        eventSelector: EventSelector.fromSignature(
          'ContractInstanceDeployed(Field,Field,Field,Field,Field,Field,Field,Field)',
        ),
        fieldNames: [
          'DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE',
          'address',
          'version',
          'salt',
          'contract_class_id',
          'initialization_hash',
          'public_keys_hash',
          'deployer',
        ],
      },
    };
  }
}
