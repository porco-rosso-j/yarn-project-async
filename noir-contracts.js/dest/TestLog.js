/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, EventSelector, Fr, NoteSelector, loadContractArtifact, } from '@aztec/aztec.js';
import TestLogContractArtifactJson from '../artifacts/test_log_contract-TestLog.json' assert { type: 'json' };
export const TestLogContractArtifact = loadContractArtifact(TestLogContractArtifactJson);
/**
 * Type-safe interface for contract TestLog;
 */
export class TestLogContract extends ContractBase {
    constructor(instance, wallet) {
        super(instance, TestLogContractArtifact, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, TestLogContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet) {
        return new DeployMethod(Fr.ZERO, wallet, TestLogContractArtifact, TestLogContract.at, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
     */
    static deployWithPublicKeysHash(publicKeysHash, wallet) {
        return new DeployMethod(publicKeysHash, wallet, TestLogContractArtifact, TestLogContract.at, Array.from(arguments).slice(2));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts(opts, ...args) {
        return new DeployMethod(opts.publicKeysHash ?? Fr.ZERO, opts.wallet, TestLogContractArtifact, TestLogContract.at, Array.from(arguments).slice(1), opts.method ?? 'constructor');
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return TestLogContractArtifact;
    }
    static get storage() {
        return {
            example_set: {
                slot: new Fr(1n),
            },
        };
    }
    static get notes() {
        return {
            ValueNote: {
                id: new NoteSelector(1900156023),
            },
        };
    }
    // Partial application is chosen is to avoid the duplication of so much codegen.
    static decodeEvent(fieldsLength, eventSelector, fields) {
        return (payload) => {
            if (payload === undefined) {
                return undefined;
            }
            if (!eventSelector.equals(payload.eventTypeId)) {
                return undefined;
            }
            if (payload.event.items.length !== fieldsLength) {
                throw new Error('Something is weird here, we have matching EventSelectors, but the actual payload has mismatched length');
            }
            return fields.reduce((acc, curr, i) => ({
                ...acc,
                [curr]: payload.event.items[i],
            }), {});
        };
    }
    static get events() {
        return {
            ExampleEvent1: {
                decode: this.decodeEvent(2, EventSelector.fromSignature('ExampleEvent1(Field,Field)'), ['value2', 'value3']),
                eventSelector: EventSelector.fromSignature('ExampleEvent1(Field,Field)'),
                fieldNames: ['value2', 'value3'],
            },
            ExampleEvent0: {
                decode: this.decodeEvent(2, EventSelector.fromSignature('ExampleEvent0(Field,Field)'), ['value0', 'value1']),
                eventSelector: EventSelector.fromSignature('ExampleEvent0(Field,Field)'),
                fieldNames: ['value0', 'value1'],
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdExvZy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9UZXN0TG9nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHNDQUFzQztBQUV0QyxvQkFBb0I7QUFDcEIsT0FBTyxFQUlMLFFBQVEsRUFFUixZQUFZLEVBTVosWUFBWSxFQUdaLGFBQWEsRUFFYixFQUFFLEVBSUYsWUFBWSxFQUtaLG9CQUFvQixHQUNyQixNQUFNLGlCQUFpQixDQUFDO0FBRXpCLE9BQU8sMkJBQTJCLE1BQU0sNkNBQTZDLENBQUMsU0FBUyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFFOUcsTUFBTSxDQUFDLE1BQU0sdUJBQXVCLEdBQUcsb0JBQW9CLENBQUMsMkJBQW1ELENBQUMsQ0FBQztBQVlqSDs7R0FFRztBQUNILE1BQU0sT0FBTyxlQUFnQixTQUFRLFlBQVk7SUFDL0MsWUFBb0IsUUFBcUMsRUFBRSxNQUFjO1FBQ3ZFLEtBQUssQ0FBQyxRQUFRLEVBQUUsdUJBQXVCLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbkQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBcUIsRUFBRSxNQUFjO1FBQzFELE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsZUFBZSxDQUFDLFFBQVEsRUFBRSxNQUFNLENBQTZCLENBQUM7SUFDNUYsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFjO1FBQ2pDLE9BQU8sSUFBSSxZQUFZLENBQ3JCLEVBQUUsQ0FBQyxJQUFJLEVBQ1AsTUFBTSxFQUNOLHVCQUF1QixFQUN2QixlQUFlLENBQUMsRUFBRSxFQUNsQixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FDL0IsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyx3QkFBd0IsQ0FBQyxjQUFr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