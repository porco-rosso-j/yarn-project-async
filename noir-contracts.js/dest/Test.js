/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, EventSelector, Fr, NoteSelector, loadContractArtifact, } from '@aztec/aztec.js';
import TestContractArtifactJson from '../artifacts/test_contract-Test.json' assert { type: 'json' };
export const TestContractArtifact = loadContractArtifact(TestContractArtifactJson);
/**
 * Type-safe interface for contract Test;
 */
export class TestContract extends ContractBase {
    constructor(instance, wallet) {
        super(instance, TestContractArtifact, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, TestContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet) {
        return new DeployMethod(Fr.ZERO, wallet, TestContractArtifact, TestContract.at, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
     */
    static deployWithPublicKeysHash(publicKeysHash, wallet) {
        return new DeployMethod(publicKeysHash, wallet, TestContractArtifact, TestContract.at, Array.from(arguments).slice(2));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts(opts, ...args) {
        return new DeployMethod(opts.publicKeysHash ?? Fr.ZERO, opts.wallet, TestContractArtifact, TestContract.at, Array.from(arguments).slice(1), opts.method ?? 'constructor');
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return TestContractArtifact;
    }
    static get storage() {
        return {
            example_constant: {
                slot: new Fr(1n),
            },
            example_set: {
                slot: new Fr(2n),
            },
        };
    }
    static get notes() {
        return {
            ValueNote: {
                id: new NoteSelector(1900156023),
            },
            TestNote: {
                id: new NoteSelector(1541719451),
            },
        };
    }
    // Partial application is chosen is to avoid the duplication of so much codegen.
    static decodeEvent(fieldsLength, eventSelector, fields) {
        return (payload) => {
            if (payload === undefined) {
                return undefined;
            }
            if (!eventSelector.equals(payload.eventTypeId)) {
                return undefined;
            }
            if (payload.event.items.length !== fieldsLength) {
                throw new Error('Something is weird here, we have matching EventSelectors, but the actual payload has mismatched length');
            }
            return fields.reduce((acc, curr, i) => ({
                ...acc,
                [curr]: payload.event.items[i],
            }), {});
        };
    }
    static get events() {
        return {
            ExampleEvent: {
                decode: this.decodeEvent(5, EventSelector.fromSignature('ExampleEvent(Field,Field,Field,Field,Field)'), [
                    'value0',
                    'value1',
                    'value2',
                    'value3',
                    'value4',
                ]),
                eventSelector: EventSelector.fromSignature('ExampleEvent(Field,Field,Field,Field,Field)'),
                fieldNames: ['value0', 'value1', 'value2', 'value3', 'value4'],
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVGVzdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9UZXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLHNDQUFzQztBQUV0QyxvQkFBb0I7QUFDcEIsT0FBTyxFQUlMLFFBQVEsRUFFUixZQUFZLEVBTVosWUFBWSxFQUdaLGFBQWEsRUFFYixFQUFFLEVBSUYsWUFBWSxFQUtaLG9CQUFvQixHQUNyQixNQUFNLGlCQUFpQixDQUFDO0FBRXpCLE9BQU8sd0JBQXdCLE1BQU0sc0NBQXNDLENBQUMsU0FBUyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFFcEcsTUFBTSxDQUFDLE1BQU0sb0JBQW9CLEdBQUcsb0JBQW9CLENBQUMsd0JBQWdELENBQUMsQ0FBQztBQVUzRzs7R0FFRztBQUNILE1BQU0sT0FBTyxZQUFhLFNBQVEsWUFBWTtJQUM1QyxZQUFvQixRQUFxQyxFQUFFLE1BQWM7UUFDdkUsS0FBSyxDQUFDLFFBQVEsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUNoRCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFxQixFQUFFLE1BQWM7UUFDMUQsT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSxZQUFZLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBMEIsQ0FBQztJQUN0RixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQWM7UUFDakMsT0FBTyxJQUFJLFlBQVksQ0FDckIsRUFBRSxDQUFDLElBQUksRUFDUCxNQUFNLEVBQ04sb0JBQW9CLEVBQ3BCLFlBQVksQ0FBQyxFQUFFLEVBQ2YsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQy9CLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsd0JBQXdCLENBQUMsY0FBa0IsRUFBRSxN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