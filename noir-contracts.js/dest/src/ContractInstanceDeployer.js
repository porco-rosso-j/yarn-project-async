/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, Point, loadContractArtifact, } from '@aztec/aztec.js';
import ContractInstanceDeployerContractArtifactJson from '../artifacts/contract_instance_deployer_contract-ContractInstanceDeployer.json' assert { type: 'json' };
export const ContractInstanceDeployerContractArtifact = loadContractArtifact(ContractInstanceDeployerContractArtifactJson);
/**
 * Type-safe interface for contract ContractInstanceDeployer;
 */
export class ContractInstanceDeployerContract extends ContractBase {
    constructor(instance, wallet) {
        super(instance, ContractInstanceDeployerContractArtifact, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, ContractInstanceDeployerContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet) {
        return new DeployMethod(Point.ZERO, wallet, ContractInstanceDeployerContractArtifact, ContractInstanceDeployerContract.at, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    static deployWithPublicKey(publicKey, wallet) {
        return new DeployMethod(publicKey, wallet, ContractInstanceDeployerContractArtifact, ContractInstanceDeployerContract.at, Array.from(arguments).slice(2));
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return ContractInstanceDeployerContractArtifact;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29udHJhY3RJbnN0YW5jZURlcGxveWVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL0NvbnRyYWN0SW5zdGFuY2VEZXBsb3llci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFFdEMsb0JBQW9CO0FBQ3BCLE9BQU8sRUFJTCxRQUFRLEVBRVIsWUFBWSxFQUlaLFlBQVksRUFPWixLQUFLLEVBSUwsb0JBQW9CLEdBQ3JCLE1BQU0saUJBQWlCLENBQUM7QUFFekIsT0FBTyw0Q0FBNEMsTUFBTSxnRkFBZ0YsQ0FBQyxTQUFTLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUVsSyxNQUFNLENBQUMsTUFBTSx3Q0FBd0MsR0FBRyxvQkFBb0IsQ0FDMUUsNENBQW9FLENBQ3JFLENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sT0FBTyxnQ0FBaUMsU0FBUSxZQUFZO0lBQ2hFLFlBQW9CLFFBQXFDLEVBQUUsTUFBYztRQUN2RSxLQUFLLENBQUMsUUFBUSxFQUFFLHdDQUF3QyxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3BFLENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQXFCLEVBQUUsTUFBYztRQUMxRCxPQUFPLFFBQVEsQ0FBQyxFQUFFLENBQ2hCLE9BQU8sRUFDUCxnQ0FBZ0MsQ0FBQyxRQUFRLEVBQ3pDLE1BQU0sQ0FDc0MsQ0FBQztJQUNqRCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQWM7UUFDakMsT0FBTyxJQUFJLFlBQVksQ0FDckIsS0FBSyxDQUFDLElBQUksRUFDVixNQUFNLEVBQ04sd0NBQXdDLEVBQ3hDLGdDQUFnQyxDQUFDLEVBQUUsRUFDbkMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQy9CLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsbUJBQW1CLENBQUMsU0FBb0IsRUFBRSxNQUFjO1FBQ3BFLE9BQU8sSUFBSSxZQUFZLENBQ3JCLFNBQVMsRUFDVCxNQUFNLEVBQ04sd0NBQXdDLEVBQ3hDLGdDQUFnQyxDQUFDLEVBQUUsRUFDbkMsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQy9CLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLEtBQUssUUFBUTtRQUN4QixPQUFPLHdDQUF3QyxDQUFDO0lBQ2xELENBQUM7Q0E0QkYifQ==