/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, Point, loadContractArtifact, } from '@aztec/aztec.js';
import StatefulTestContractArtifactJson from '../artifacts/stateful_test_contract-StatefulTest.json' assert { type: 'json' };
export const StatefulTestContractArtifact = loadContractArtifact(StatefulTestContractArtifactJson);
/**
 * Type-safe interface for contract StatefulTest;
 */
export class StatefulTestContract extends ContractBase {
    constructor(instance, wallet) {
        super(instance, StatefulTestContractArtifact, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, StatefulTestContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet, owner, value) {
        return new DeployMethod(Point.ZERO, wallet, StatefulTestContractArtifact, StatefulTestContract.at, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public key to derive the address.
     */
    static deployWithPublicKey(publicKey, wallet, owner, value) {
        return new DeployMethod(publicKey, wallet, StatefulTestContractArtifact, StatefulTestContract.at, Array.from(arguments).slice(2));
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return StatefulTestContractArtifact;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiU3RhdGVmdWxUZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL1N0YXRlZnVsVGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFFdEMsb0JBQW9CO0FBQ3BCLE9BQU8sRUFJTCxRQUFRLEVBRVIsWUFBWSxFQUlaLFlBQVksRUFPWixLQUFLLEVBSUwsb0JBQW9CLEdBQ3JCLE1BQU0saUJBQWlCLENBQUM7QUFFekIsT0FBTyxnQ0FBZ0MsTUFBTSx1REFBdUQsQ0FBQyxTQUFTLElBQUksRUFBRSxNQUFNLEVBQUUsQ0FBQztBQUU3SCxNQUFNLENBQUMsTUFBTSw0QkFBNEIsR0FBRyxvQkFBb0IsQ0FDOUQsZ0NBQXdELENBQ3pELENBQUM7QUFFRjs7R0FFRztBQUNILE1BQU0sT0FBTyxvQkFBcUIsU0FBUSxZQUFZO0lBQ3BELFlBQW9CLFFBQXFDLEVBQUUsTUFBYztRQUN2RSxLQUFLLENBQUMsUUFBUSxFQUFFLDRCQUE0QixFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQ3hELENBQUM7SUFFRDs7Ozs7T0FLRztJQUNJLE1BQU0sQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLE9BQXFCLEVBQUUsTUFBYztRQUMxRCxPQUFPLFFBQVEsQ0FBQyxFQUFFLENBQUMsT0FBTyxFQUFFLG9CQUFvQixDQUFDLFFBQVEsRUFBRSxNQUFNLENBQWtDLENBQUM7SUFDdEcsQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFjLEVBQUUsS0FBdUIsRUFBRSxLQUFnQjtRQUM1RSxPQUFPLElBQUksWUFBWSxDQUNyQixLQUFLLENBQUMsSUFBSSxFQUNWLE1BQU0sRUFDTiw0QkFBNEIsRUFDNUIsb0JBQW9CLENBQUMsRUFBRSxFQUN2QixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FDL0IsQ0FBQztJQUNKLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxTQUFvQixFQUFFLE1BQWMsRUFBRSxLQUF1QixFQUFFLEtBQWdCO1FBQy9HLE9BQU8sSUFBSSxZQUFZLENBQ3JCLFNBQVMsRUFDVCxNQUFNLEVBQ04sNEJBQTRCLEVBQzVCLG9CQUFvQixDQUFDLEVBQUUsRUFDdkIsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQy9CLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLEtBQUssUUFBUTtRQUN4QixPQUFPLDRCQUE0QixDQUFDO0lBQ3RDLENBQUM7Q0FvQ0YifQ==