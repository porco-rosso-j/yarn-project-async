/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, Fr, NoteSelector, loadContractArtifact, } from '@aztec/aztec.js';
import AppSubscriptionContractArtifactJson from '../artifacts/app_subscription_contract-AppSubscription.json' assert { type: 'json' };
export const AppSubscriptionContractArtifact = loadContractArtifact(AppSubscriptionContractArtifactJson);
/**
 * Type-safe interface for contract AppSubscription;
 */
export class AppSubscriptionContract extends ContractBase {
    constructor(instance, wallet) {
        super(instance, AppSubscriptionContractArtifact, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, AppSubscriptionContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet, target_address, subscription_recipient_address, subscription_token_address, subscription_price, gas_token_address, gas_token_limit_per_tx) {
        return new DeployMethod(Fr.ZERO, wallet, AppSubscriptionContractArtifact, AppSubscriptionContract.at, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
     */
    static deployWithPublicKeysHash(publicKeysHash, wallet, target_address, subscription_recipient_address, subscription_token_address, subscription_price, gas_token_address, gas_token_limit_per_tx) {
        return new DeployMethod(publicKeysHash, wallet, AppSubscriptionContractArtifact, AppSubscriptionContract.at, Array.from(arguments).slice(2));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts(opts, ...args) {
        return new DeployMethod(opts.publicKeysHash ?? Fr.ZERO, opts.wallet, AppSubscriptionContractArtifact, AppSubscriptionContract.at, Array.from(arguments).slice(1), opts.method ?? 'constructor');
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return AppSubscriptionContractArtifact;
    }
    static get storage() {
        return {
            balances: {
                slot: new Fr(1n),
            },
            portal_address: {
                slot: new Fr(2n),
            },
        };
    }
    static get notes() {
        return {
            TransparentNote: {
                id: new NoteSelector(1049878767),
            },
            TokenNote: {
                id: new NoteSelector(3992089675),
            },
            SubscriptionNote: {
                id: new NoteSelector(2695603941),
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQXBwU3Vic2NyaXB0aW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0FwcFN1YnNjcmlwdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFFdEMsb0JBQW9CO0FBQ3BCLE9BQU8sRUFJTCxRQUFRLEVBRVIsWUFBWSxFQU1aLFlBQVksRUFLWixFQUFFLEVBSUYsWUFBWSxFQUtaLG9CQUFvQixHQUNyQixNQUFNLGlCQUFpQixDQUFDO0FBRXpCLE9BQU8sbUNBQW1DLE1BQU0sNkRBQTZELENBQUMsU0FBUyxJQUFJLEVBQUUsTUFBTSxFQUFFLENBQUM7QUFFdEksTUFBTSxDQUFDLE1BQU0sK0JBQStCLEdBQUcsb0JBQW9CLENBQ2pFLG1DQUEyRCxDQUM1RCxDQUFDO0FBRUY7O0dBRUc7QUFDSCxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsWUFBWTtJQUN2RCxZQUFvQixRQUFxQyxFQUFFLE1BQWM7UUFDdkUsS0FBSyxDQUFDLFFBQVEsRUFBRSwrQkFBK0IsRUFBRSxNQUFNLENBQUMsQ0FBQztJQUMzRCxDQUFDO0lBRUQ7Ozs7O09BS0c7SUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxPQUFxQixFQUFFLE1BQWM7UUFDMUQsT0FBTyxRQUFRLENBQUMsRUFBRSxDQUFDLE9BQU8sRUFBRSx1QkFBdUIsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFxQyxDQUFDO0lBQzVHLENBQUM7SUFFRDs7T0FFRztJQUNJLE1BQU0sQ0FBQyxNQUFNLENBQ2xCLE1BQWMsRUFDZCxjQUFnQyxFQUNoQyw4QkFBZ0QsRUFDaEQsMEJBQTRDLEVBQzVDLGtCQUE2QixFQUM3QixpQkFBbUMsRUFDbkMsc0JBQWlDO1FBRWpDLE9BQU8sSUFBSSxZQUFZLENBQ3JCLEVBQUUsQ0FBQyxJQUFJLEVBQ1AsTUFBTSxFQUNOLCtCQUErQixFQUMvQix1QkFBdUIsQ0FBQyxFQUFFLEVBQzFCLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUMvQixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLHdCQUF3QixDQUNwQyxjQUFrQixFQUNsQixNQUFjLEVBQ2QsY0FBZ0MsRUFDaEMsOEJBQWdELEVBQ2hELDBCQUE0QyxFQUM1QyxrQkFBNkIsRUFDN0IsaUJBQW1DLEVBQ25DLHNCQUFpQztRQUVqQyxPQUFPLElBQUksWUFBWSxDQUNyQixjQUFjLEVBQ2QsTUFBTSxFQUNOLCtCQUErQixFQUMvQix1QkFBdUIsQ0FBQyxFQUFFLEVBQzFCLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUMvQixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxDQUFDLGNBQWMsQ0FDMUIsSUFBeUQsRUFDekQsR0FBRyxJQUF1RDtRQUUxRCxPQUFPLElBQUksWUFBWSxDQUNyQixJQUFJLENBQUMsY0FBYyxJQUFJLEVBQUUsQ0FBQyxJQUFJLEVBQzlCLElBQUksQ0FBQyxNQUFNLEVBQ1gsK0JBQStCLEVBQy9CLHVCQUF1QixDQUFDLEVBQUUsRUFDMUIsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQzlCLElBQUksQ0FBQyxNQUFNLElBQUksYUFBYSxDQUM3QixDQUFDO0lBQ0osQ0FBQztJQUVEOztPQUVHO0lBQ0ksTUFBTSxLQUFLLFFBQVE7UUFDeEIsT0FBTywrQkFBK0IsQ0FBQztJQUN6QyxDQUFDO0lBRU0sTUFBTSxLQUFLLE9BQU87UUFDdkIsT0FBTztZQUNMLFFBQVEsRUFBRTtnQkFDUixJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDO2FBQ2pCO1lBQ0QsY0FBYyxFQUFFO2dCQUNkLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUM7YUFDakI7U0FDc0QsQ0FBQztJQUM1RCxDQUFDO0lBRU0sTUFBTSxLQUFLLEtBQUs7UUFDckIsT0FBTztZQUNMLGVBQWUsRUFBRTtnQkFDZixFQUFFLEVBQUUsSUFBSSxZQUFZLENBQUMsVUFBVSxDQUFDO2FBQ2pDO1lBQ0QsU0FBUyxFQUFFO2dCQUNULEVBQUUsRUFBRSxJQUFJLFlBQVksQ0FBQyxVQUFVLENBQUM7YUFDakM7WUFDRCxnQkFBZ0IsRUFBRTtnQkFDaEIsRUFBRSxFQUFFLElBQUksWUFBWSxDQUFDLFVBQVUsQ0FBQzthQUNqQztTQUNxRSxDQUFDO0lBQzNFLENBQUM7Q0F1REYifQ==