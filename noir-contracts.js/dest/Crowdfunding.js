/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, EventSelector, Fr, NoteSelector, loadContractArtifact, } from '@aztec/aztec.js';
import CrowdfundingContractArtifactJson from '../artifacts/crowdfunding_contract-Crowdfunding.json' assert { type: 'json' };
export const CrowdfundingContractArtifact = loadContractArtifact(CrowdfundingContractArtifactJson);
/**
 * Type-safe interface for contract Crowdfunding;
 */
export class CrowdfundingContract extends ContractBase {
    constructor(instance, wallet) {
        super(instance, CrowdfundingContractArtifact, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, CrowdfundingContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet, donation_token, operator, deadline) {
        return new DeployMethod(Fr.ZERO, wallet, CrowdfundingContractArtifact, CrowdfundingContract.at, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
     */
    static deployWithPublicKeysHash(publicKeysHash, wallet, donation_token, operator, deadline) {
        return new DeployMethod(publicKeysHash, wallet, CrowdfundingContractArtifact, CrowdfundingContract.at, Array.from(arguments).slice(2));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts(opts, ...args) {
        return new DeployMethod(opts.publicKeysHash ?? Fr.ZERO, opts.wallet, CrowdfundingContractArtifact, CrowdfundingContract.at, Array.from(arguments).slice(1), opts.method ?? 'constructor');
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return CrowdfundingContractArtifact;
    }
    static get storage() {
        return {
            admin: {
                slot: new Fr(1n),
            },
            minters: {
                slot: new Fr(2n),
            },
            balances: {
                slot: new Fr(3n),
            },
            total_supply: {
                slot: new Fr(4n),
            },
            pending_shields: {
                slot: new Fr(5n),
            },
            public_balances: {
                slot: new Fr(6n),
            },
            symbol: {
                slot: new Fr(7n),
            },
            name: {
                slot: new Fr(8n),
            },
            decimals: {
                slot: new Fr(9n),
            },
        };
    }
    static get notes() {
        return {
            TransparentNote: {
                id: new NoteSelector(1049878767),
            },
            TokenNote: {
                id: new NoteSelector(3992089675),
            },
            ValueNote: {
                id: new NoteSelector(1900156023),
            },
        };
    }
    // Partial application is chosen is to avoid the duplication of so much codegen.
    static decodeEvent(fieldsLength, eventSelector, fields) {
        return (payload) => {
            if (payload === undefined) {
                return undefined;
            }
            if (!eventSelector.equals(payload.eventTypeId)) {
                return undefined;
            }
            if (payload.event.items.length !== fieldsLength) {
                throw new Error('Something is weird here, we have matching EventSelectors, but the actual payload has mismatched length');
            }
            return fields.reduce((acc, curr, i) => ({
                ...acc,
                [curr]: payload.event.items[i],
            }), {});
        };
    }
    static get events() {
        return {
            WithdrawalProcessed: {
                decode: this.decodeEvent(2, EventSelector.fromSignature('WithdrawalProcessed(Field,Field)'), ['who', 'amount']),
                eventSelector: EventSelector.fromSignature('WithdrawalProcessed(Field,Field)'),
                fieldNames: ['who', 'amount'],
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3Jvd2RmdW5kaW5nLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL0Nyb3dkZnVuZGluZy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxzQ0FBc0M7QUFFdEMsb0JBQW9CO0FBQ3BCLE9BQU8sRUFJTCxRQUFRLEVBRVIsWUFBWSxFQU1aLFlBQVksRUFHWixhQUFhLEVBRWIsRUFBRSxFQUlGLFlBQVksRUFLWixvQkFBb0IsR0FDckIsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLGdDQUFnQyxNQUFNLHNEQUFzRCxDQUFDLFNBQVMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBRTVILE1BQU0sQ0FBQyxNQUFNLDRCQUE0QixHQUFHLG9CQUFvQixDQUM5RCxnQ0FBd0QsQ0FDekQsQ0FBQztBQU9GOztHQUVHO0FBQ0gsTUFBTSxPQUFPLG9CQUFxQixTQUFRLFlBQVk7SUFDcEQsWUFBb0IsUUFBcUMsRUFBRSxNQUFjO1FBQ3ZFLEtBQUssQ0FBQyxRQUFRLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDeEQsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBcUIsRUFBRSxNQUFjO1FBQzFELE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUsb0JBQW9CLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBa0MsQ0FBQztJQUN0RyxDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsTUFBTSxDQUNsQixNQUFjLEVBQ2QsY0FBZ0MsRUFDaEMsUUFBMEIsRUFDMUIsUUFBeUI7UUFFekIsT0FBTyxJQUFJLFlBQVksQ0FDckIsRUFBRSxDQUFDLElBQUksRUFDUCxNQUFNLEVBQ04sNEJBQTRCLEVBQzVCLG9CQUFvQixDQUFDLEVBQUUsRUFDdkIsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQy9CLENBQUM7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