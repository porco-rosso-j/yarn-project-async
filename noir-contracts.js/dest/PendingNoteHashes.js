/* Autogenerated file, do not edit! */
/* eslint-disable */
import { Contract, ContractBase, DeployMethod, Fr, NoteSelector, loadContractArtifact, } from '@aztec/aztec.js';
import PendingNoteHashesContractArtifactJson from '../artifacts/pending_note_hashes_contract-PendingNoteHashes.json' assert { type: 'json' };
export const PendingNoteHashesContractArtifact = loadContractArtifact(PendingNoteHashesContractArtifactJson);
/**
 * Type-safe interface for contract PendingNoteHashes;
 */
export class PendingNoteHashesContract extends ContractBase {
    constructor(instance, wallet) {
        super(instance, PendingNoteHashesContractArtifact, wallet);
    }
    /**
     * Creates a contract instance.
     * @param address - The deployed contract's address.
     * @param wallet - The wallet to use when interacting with the contract.
     * @returns A promise that resolves to a new Contract instance.
     */
    static async at(address, wallet) {
        return Contract.at(address, PendingNoteHashesContract.artifact, wallet);
    }
    /**
     * Creates a tx to deploy a new instance of this contract.
     */
    static deploy(wallet) {
        return new DeployMethod(Fr.ZERO, wallet, PendingNoteHashesContractArtifact, PendingNoteHashesContract.at, Array.from(arguments).slice(1));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified public keys hash to derive the address.
     */
    static deployWithPublicKeysHash(publicKeysHash, wallet) {
        return new DeployMethod(publicKeysHash, wallet, PendingNoteHashesContractArtifact, PendingNoteHashesContract.at, Array.from(arguments).slice(2));
    }
    /**
     * Creates a tx to deploy a new instance of this contract using the specified constructor method.
     */
    static deployWithOpts(opts, ...args) {
        return new DeployMethod(opts.publicKeysHash ?? Fr.ZERO, opts.wallet, PendingNoteHashesContractArtifact, PendingNoteHashesContract.at, Array.from(arguments).slice(1), opts.method ?? 'constructor');
    }
    /**
     * Returns this contract's artifact.
     */
    static get artifact() {
        return PendingNoteHashesContractArtifact;
    }
    static get storage() {
        return {
            balances: {
                slot: new Fr(1n),
            },
        };
    }
    static get notes() {
        return {
            ValueNote: {
                id: new NoteSelector(1900156023),
            },
        };
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUGVuZGluZ05vdGVIYXNoZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvUGVuZGluZ05vdGVIYXNoZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0NBQXNDO0FBRXRDLG9CQUFvQjtBQUNwQixPQUFPLEVBSUwsUUFBUSxFQUVSLFlBQVksRUFNWixZQUFZLEVBS1osRUFBRSxFQUlGLFlBQVksRUFLWixvQkFBb0IsR0FDckIsTUFBTSxpQkFBaUIsQ0FBQztBQUV6QixPQUFPLHFDQUFxQyxNQUFNLGtFQUFrRSxDQUFDLFNBQVMsSUFBSSxFQUFFLE1BQU0sRUFBRSxDQUFDO0FBRTdJLE1BQU0sQ0FBQyxNQUFNLGlDQUFpQyxHQUFHLG9CQUFvQixDQUNuRSxxQ0FBNkQsQ0FDOUQsQ0FBQztBQUVGOztHQUVHO0FBQ0gsTUFBTSxPQUFPLHlCQUEwQixTQUFRLFlBQVk7SUFDekQsWUFBb0IsUUFBcUMsRUFBRSxNQUFjO1FBQ3ZFLEtBQUssQ0FBQyxRQUFRLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDN0QsQ0FBQztJQUVEOzs7OztPQUtHO0lBQ0ksTUFBTSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsT0FBcUIsRUFBRSxNQUFjO1FBQzFELE9BQU8sUUFBUSxDQUFDLEVBQUUsQ0FBQyxPQUFPLEVBQUUseUJBQXlCLENBQUMsUUFBUSxFQUFFLE1BQU0sQ0FBdUMsQ0FBQztJQUNoSCxDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQWM7UUFDakMsT0FBTyxJQUFJLFlBQVksQ0FDckIsRUFBRSxDQUFDLElBQUksRUFDUCxNQUFNLEVBQ04saUNBQWlDLEVBQ2pDLHlCQUF5QixDQUFDLEVBQUUsRUFDNUIsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQy9CLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsd0JBQXdCLENBQUMsY0FBa0IsRUFBRSxNQUFjO1FBQ3ZFLE9BQU8sSUFBSSxZQUFZLENBQ3JCLGNBQWMsRUFDZCxNQUFNLEVBQ04saUNBQWlDLEVBQ2pDLHlCQUF5QixDQUFDLEVBQUUsRUFDNUIsS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQy9CLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLENBQUMsY0FBYyxDQUMxQixJQUF5RCxFQUN6RCxHQUFHLElBQXlEO1FBRTVELE9BQU8sSUFBSSxZQUFZLENBQ3JCLElBQUksQ0FBQyxjQUFjLElBQUksRUFBRSxDQUFDLElBQUksRUFDOUIsSUFBSSxDQUFDLE1BQU0sRUFDWCxpQ0FBaUMsRUFDakMseUJBQXlCLENBQUMsRUFBRSxFQUM1QixLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsRUFDOUIsSUFBSSxDQUFDLE1BQU0sSUFBSSxhQUFhLENBQzdCLENBQUM7SUFDSixDQUFDO0lBRUQ7O09BRUc7SUFDSSxNQUFNLEtBQUssUUFBUTtRQUN4QixPQUFPLGlDQUFpQyxDQUFDO0lBQzNDLENBQUM7SUFFTSxNQUFNLEtBQUssT0FBTztRQUN2QixPQUFPO1lBQ0wsUUFBUSxFQUFFO2dCQUNSLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUM7YUFDakI7U0FDbUMsQ0FBQztJQUN6QyxDQUFDO0lBRU0sTUFBTSxLQUFLLEtBQUs7UUFDckIsT0FBTztZQUNMLFNBQVMsRUFBRTtnQkFDVCxFQUFFLEVBQUUsSUFBSSxZQUFZLENBQUMsVUFBVSxDQUFDO2FBQ2pDO1NBQzRCLENBQUM7SUFDbEMsQ0FBQztDQWtJRiJ9