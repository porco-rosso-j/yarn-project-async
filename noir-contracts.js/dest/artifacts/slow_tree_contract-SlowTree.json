{ "noir_version": "0.24.0+78ef0134b82e76a73dadb6c7975def22290e3a1a", "name": "SlowTree", "functions": [{ "name": "_update", "function_type": "Open", "is_internal": true, "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "is_contract_deployment", "type": { "kind": "boolean" } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "contract_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] }, "visibility": "private" }, { "name": "caller", "type": { "kind": "field" }, "visibility": "private" }, { "name": "index", "type": { "kind": "field" }, "visibility": "private" }, { "name": "new_value", "type": { "kind": "field" }, "visibility": "private" }, { "name": "before", "type": { "kind": "field" }, "visibility": "private" }, { "name": "after", "type": { "kind": "field" }, "visibility": "private" }, { "name": "new_root", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "after": [{ "start": 43, "end": 44 }], "before": [{ "start": 42, "end": 43 }], "caller": [{ "start": 39, "end": 40 }], "index": [{ "start": 40, "end": 41 }], "inputs": [{ "start": 0, "end": 39 }], "new_root": [{ "start": 44, "end": 45 }], "new_value": [{ "start": 41, "end": 42 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "is_contract_deployment", "type": { "kind": "boolean" } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "contract_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] }, "visibility": "public" }, "return_witnesses": [45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238] }, "bytecode": "", "debug_symbols": "" }, { "name": "compute_note_hash_and_nullifier", "function_type": "Unconstrained", "is_internal": false, "abi": { "parameters": [{ "name": "contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "nonce", "type": { "kind": "field" }, "visibility": "private" }, { "name": "storage_slot", "type": { "kind": "field" }, "visibility": "private" }, { "name": "note_type_id", "type": { "kind": "field" }, "visibility": "private" }, { "name": "serialized_note", "type": { "kind": "array", "length": 20, "type": { "kind": "field" } }, "visibility": "private" }], "param_witnesses": { "contract_address": [{ "start": 0, "end": 1 }], "nonce": [{ "start": 1, "end": 2 }], "note_type_id": [{ "start": 3, "end": 4 }], "serialized_note": [{ "start": 4, "end": 24 }], "storage_slot": [{ "start": 2, "end": 3 }] }, "return_type": { "abi_type": { "kind": "array", "length": 4, "type": { "kind": "field" } }, "visibility": "public" }, "return_witnesses": [24, 25, 26, 27] }, "bytecode": "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", "debug_symbols": "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" }, { "name": "constructor", "function_type": "Secret", "is_internal": false, "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "is_contract_deployment", "type": { "kind": "boolean" } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "contract_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "contract_deployment_data", "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "initialization_hash", "type": { "kind": "field" } }, { "name": "contract_class_id", "type": { "kind": "struct", "path": "aztec::protocol_types::contract_class_id::ContractClassId", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "contract_address_salt", "type": { "kind": "field" } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }] }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 41 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "is_contract_deployment", "type": { "kind": "boolean" } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "contract_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "contract_deployment_data", "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "initialization_hash", "type": { "kind": "field" } }, { "name": "contract_class_id", "type": { "kind": "struct", "path": "aztec::protocol_types::contract_class_id::ContractClassId", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "contract_address_salt", "type": { "kind": "field" } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259] }, "bytecode": "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", "debug_symbols": "tZBBCoUgFEX3cscOMq1PbuXT4FUGglikBCHuPaNo0tjRewcOZ3Aj7DJSMIvzUBGcQ/0j/EruQh9oC1AVg3ZTvolhNlZD1W2X2McTsmkeVchf99ptlXoGXhdsi4JtWaqdYafN0GD1tX7GcKz3m04=" }, { "name": "un_read_leaf_at", "function_type": "Unconstrained", "is_internal": false, "abi": { "parameters": [{ "name": "address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }, { "name": "key", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "address": [{ "start": 0, "end": 1 }], "key": [{ "start": 1, "end": 2 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "slow_updates_tree::leaf::Leaf", "fields": [{ "name": "next_change", "type": { "kind": "field" } }, { "name": "before", "type": { "kind": "field" } }, { "name": "after", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [2, 3, 4] }, "bytecode": "H4sIAAAAAAAA/81YTW/TQBAd25ukiRM3n205sb+gchq4cQh3uFBOcApyipDSWLIdAX8eEbsz5HVj2qrdlbySs+PZ+XjzdrNrWxGRR3ct2F8+HTcZX3Ifv6zNLcaKXeL0LOIMAKcPfJdN7a+U5ROw07byv4nftiURHc9xiDp10Ak+j3Wd/dVFHyNe5aPu11bqlLoXmobgG0Ddbdt1x/FVCHmleca9BrkNeFr28cwd1RmXcTsc6w/Z/a/imlQGTwMY7wB3Jw648yCvxMb5ohr5Ibx+A/C6XA9d+3GvIo4rvHYNfrGukGWL67Ha73t0mFvJF0LeAcs29+8yVp9jtTi24BgAnj5wXrZTxhQ5mIsQMBDUjE2DHAFHfft45o7qjIVHaT2jngGM4/o7dVCjB3klttwjxqfiDRqA11Huf3tFz8jXruGDDJ3LPZkMPghymni8BuAJ6fh/HcJ4BDrf8C3P5ATGRyzjM9uY5aAm9gh0Q5bHNb7I0whqWbIcv6xVPGEuDfeSrw84xg3BE9XgcbBHVnhkfiS23EcNyS28LMnuc87Efk2LsqYpx2pzbMEv+RTYfORe9jjRS+1E9etiCjYT+/xUZ/LMET9nBj+Cfwb8iM1ngx/RIz8T4Gdq2GEdS7J3RpVxzx3xc2HwI/jPgR+x+WrwI3rkZwb8nBl2uD/jeSC+U9BdGNziuTEEHT6biE4Zebs8LrYWn/UXjt6NFk37JtCjw/tLXqTZ6vv603qVeABN4Aagkx6hyzh+4vEfGSdOL2Uq0MkrfQt0vkELLhWx79IxpVbPm7pC/kdEwEWpGrvX3L/j/vqOf51v0kLHerv/XW026c91cqlxLNe3u7zQebHKCn2Tpbd6folxP3D/ivv3Wbb6rX9sk/Uvne4Knd7ob+lum+TodP0cpy9PdaK/AkkhzuwVAAA=", "debug_symbols": "1dvRasJAEIXhd9lrKTOzs7M7vkrpRdpaEERFpVDEd2/EJCoKoWLDyV0Cs+4nhj+E4D4sVh/Vbr5absN0H+jFw/R1H7brank83+6qzS5MU8xpEmbLz/pQmQ+T8DVfzMJUzA+Tm2nXdti9dLNMdGeWWaWdro+Ln+edD2+TWsSER2I8kuCRIh5J8UgJj2R4pIxHKngkvHoLXr0Fr96CV2/Bq7fg1Vvw6i1PqDdTjt0ukXpQ1IxSz6dmLs1kjuk8m2MDz2OFl7HCfaTwSGOF81jh/Xco8T64c27hnuxqk3tf07idJr/47NyIIpxI4UQJTmRwogwnKnAiRxMpwYkYTgTXbIVrtsI1W+GarXDN1qc0u5sWIu8RxSzNsHLsZnPzzKUFzONYnkRgHgbzCJgngnkUzJPAPAbmAetzAutzAuuzgfXZwPpsYH02sD4bWJ8NrM8G1mcD67P9c59Pm/gAm2QaYhMeYpMnNE+Iz5so9V0j7t01Ihez0oAiGkjRQAkNZGigjAYqaCAfGqTS3Rqu3jw1oEJoIEYDCRooooEUDZTQQIOXWlVbUMp3QBkNVNBADgZyQgMxGkjAQEx3fzOx9mVNJL15WmPiRxbJI4viI4v0kUXpb4vqk+9qM6/eF7PjXyfq093P+nR4+AU=" }, { "name": "un_read_root", "function_type": "Unconstrained", "is_internal": false, "abi": { "parameters": [{ "name": "address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] }, "visibility": "private" }], "param_witnesses": { "address": [{ "start": 0, "end": 1 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "slow_updates_tree::leaf::Leaf", "fields": [{ "name": "next_change", "type": { "kind": "field" } }, { "name": "before", "type": { "kind": "field" } }, { "name": "after", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [1, 2, 3] }, "bytecode": "H4sIAAAAAAAA/81YTU/jMBAdx2nTNv1IoZe97PoXIAc47kpZ7Z52b8AdBbUgpNJISSrgzyNI6xEvVvgQdaTOATsz4zdvXtzYQhKRoK1JmKOxLzGj3s1ih1haNvD0oJ9LM+9BnnJV/1SfdisQv16fLQQunBMAlyou/DrnzRr/lT/7pF+DoQjWSuix47pHrY9DqMFm96pg3gE+vns+cUt96gq3a7CeyO1+D0Afaek0gngXtAta0E5AXcbmZ+T4Wb7eHvBtcz/03OMej18w+lT/3dIbfQ3M3OF+1GTqV+ZDvQHUHZq5cFi3wgqhVwE8hsCHc36YcULbPUcN+vTdv5/4vW8b10M+Yg/4hNR8/vQtzfBMwtgFxLk3PJPGZi4bsEfg43c3bliLOo2gl8TM9W620QlrKXjmekPgMd4TPkEDn7a+pfx+GJufgz2pzbok5PY7PnHf00nVU2Swugab+XM9H3J+WTH2V2b/lnBfRKDPxL0+m/vUtCV9Dix9mP8U9OGcv5Y+7Ed9JqBPZOVhHwm5O68r3MOW9JlZ+jD/Q9CHc/5bGrAf9ZmCPgdWHn6f8TzgtRH4Zpa2eG6EMEqrfkivd/4ZxHqQ6/Auc4J3duUQF/tge+8cxnt7C3fReAC6F2WWpzeLs0U6F0CN6UqLrqA6dY574PM+iJMpz2364OOt1AGfZ8mCW4Xz+9Tw74bEjHo325w3thDU0KQwZCU0hfnfzfjTjOdb7VWxzEql1erlb7pcZveL+ZHCWKHu1kWpijLNS3WdZ3cqPkJcxvtmxt95nj6q29V88aCydamya3WVrVfzAhf9+cqif59dRM8fXiu2DBIAAA==", "debug_symbols": "1drRasJAEAXQf9lnKbuzMzs7+ZXSh7S1IIiKhkKR/HsjJrGiEBqM3Lztwl3ngOHGSI5uvf0oq9V2c3DF0fmX7IrXozvsys1pf6jKfeUKkZAWbrn5PC2F6oX7Wq2XrqBk9eImbSxt2Cz32eD9nWwITF26WWe75C3Ub4tGZHCi4PFIAY9EeKSIR2I8kuCREh5J8Uh45R3w2pvw2pvw2pvw2pvw2pvw2pse0N7Ba+ynRD+A8m3UD3yqhtwmNcolq7GFp7nCda7wPFe4zRQe/Vzhw3eoxENFF7QrOs5XI26zUanNcoh9VtuOiwSliVAahtIIlCZBaRRKk6E0hqRhD6WB6mKG6mKG6mKG6mKG6mKG6mKG6mKG6mKG6mKB6mKB6mKZtIvPI+L0I3j6ETL9iEf0m3A3Qm3oyjDrr4w/j5BKLUexOBmLY1Cc5LE4AYtDWJz4XA5Tfwu4+qem4zAWR7A4CYujWJyMxTEojj65lZm7LIve4QQsDmFxIhaHsTiCxUlQnHz3y6LU/d6Pnm8evbKMOJNGnNERZ/KIM/a/M83mu9yvyvf18vQmYbOtfnbnZf0L" }, { "name": "update_at_public", "function_type": "Open", "is_internal": false, "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "is_contract_deployment", "type": { "kind": "boolean" } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "contract_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] }, "visibility": "private" }, { "name": "p", "type": { "kind": "struct", "path": "slow_updates_tree::slow_update_proof::SlowUpdateProof", "fields": [{ "name": "index", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }, { "name": "before", "type": { "kind": "struct", "path": "slow_updates_tree::slow_update_proof::SlowUpdateInner", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "sibling_path", "type": { "kind": "array", "length": 254, "type": { "kind": "field" } } }] } }, { "name": "after", "type": { "kind": "struct", "path": "slow_updates_tree::slow_update_proof::SlowUpdateInner", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "sibling_path", "type": { "kind": "array", "length": 254, "type": { "kind": "field" } } }] } }] }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 39 }], "p": [{ "start": 39, "end": 551 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "is_contract_deployment", "type": { "kind": "boolean" } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "contract_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] }, "visibility": "public" }, "return_witnesses": [551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744] }, "bytecode": "H4sIAAAAAAAA/+3dB5gUVbYH8OphiM0Agkgw0BhQojMDEkzMkDNIzisIiKKMEnTMOeeICQUFRCWp6+acc1435+Tu2337Nr63yX3nTt/j/KmpHqfHurPn4OnvO3TV6a66v3u60nRXFa+VRFEmyj9aUQyIGj749Sr/XP7WHhUpzqs8pDOjxFmixNlKibNUibO1EmcbJc62SpztlDjbK3F2SNHpbCXRwY+0vdkAdU3b2FFZTcsU1LSTspp2VlDTLpGObdRhSpxdlTi7KXEersTZXYnzCCXOHkqcPZU4eylx9lbiPFKJ8yglzqOVOI9R4uyjxJlT4uyrxHmsEudxSpzHK3GeoMTZT4nzRCXOk5Q4+6fodLbXo4MfaXsHBKhr2saBCoyDFBgHKzAOUWA8WYGxXIGxQoGxUoFxqALjMAXGUxQYhyswjlBgHKnAOEqB8VQFxtMUGE9XYDxDgfFMBcbRCoxVCozVCoxjFBjHKjCOU2Acr8A4QYFxogLjJAXGyQqMUxQYpyowTlNgnK7AOEOBcaYC4ywFxrMUGGcrMM5RYJyrwDhPgXG+AuMCBcaFCoyLFBgXKzAuUWBcqsC4TIFxuQLjOxQYz1ZgXKHAuFKB8RwFxlUKjKsVGNcoMJ6rwLhWgfE8BcbzFRjXKTBeoMB4oQLjegXGGgXGixQYL1Zg3KDAuFGBcZMC42YFxksUGC9VYKxVYLxMgfFyBcYrFBivVGC8SoHxagXGaxQYr1VgvE6B8XoFxhsUGG9UYLxJgfFmBcZbFBhvVWC8TYHxdgXGOxQY71RgvEuB8W4FxnsUGO9VYLxPgfF+BcYHFBgfVGB8SIHxYQXGLQqMjygwPqrA+JgC4+MKjE8oMG5VYHxSgfEpBcZtCozbFRifVmB8RoFxhwLjTgXGXQqMzyow7lZgfE6B8XkFxhcUGPcoMO5VYNynwLhfgfGAAuOLCowvKTC+rMD4TgXGVxQY36XA+G4FxvcoML5XgfF9CozvV2D8gALjBxUYP6TA+GEFxo8oMH5UgfFjCowfV2D8hALjJxUYP6XA+GkFxs8oMH5WgfFzCoyfV2D8ggLjFxUYv6TA+GUFxq8oMH5VgfFrCoxfV2D8hgLjNxUYX1Vg/JYC47cVGL+jwPhdBcbvKTB+X4HxBwqMP1Rg/JEC448VGH+iwPhTBcafKTD+XIHxFwqMv1Rg/JUC42sKjL9WYPyNAuN/KTD+VoHxdwqM/63A+HsFxv9RYPyDAuMfFRj/pMD4ZwXGvygw/lWB8X8VGP9PgfFvCox/V2D8hwLjPxUY/6XA+LoC478VGN0MpRszCowlCoytFBhLFRhbKzC2UWBsq8DYToGxvQJjBwXGrAJjRwXGMgXGTgqMnRUYuygwHqbA2FWBsZsC4+EKjN0VGI9QYOyhwNhTgbGXAmNvBcYjFRiPUmA8WoHxGAXGPgqMOQXGvgqMxyowHqfAeLwC4wkKjP0UGE8MYAzhPClFp7O9Hh38SNvbX8FnP0CBcaAC4yAFxsEKjEMUGE9WYCxXYKxQYKxUYByqwDhMgfEUBcbhCowjFBhHKjCOUmA8VYHxNAXG0xUYz1BgPFOBcbQCY5UCY7UC4xgFxrEKjOMUGMcrME5QYJyowDhJgXGyAuMUBcapCozTFBinKzDOUGCcqcA4S4HxLAXG2QqMcxQY5yowzlNgnK/AuECBcaEC4yIFxsUKjEsUGJcqMC5TYFyuwPgOBcazFRhXKDCuVGA8R4FxlQLjagXGNQqM5yowrlVgPE+B8XwFxnUKjBcoMF6owLhegbFGgfEiBcaLFRg3KDBuVGDcpMC4WYHxEgXGSxUYaxUYL1NgvFyB8QoFxisVGK9SYLxagfEaBcZrFRivU2C8XoHxBgXGGxUYb1JgvFmB8RYFxlsVGG9TYLxdgfEOBcY7FRjvUmC8W4HxHgXGexUY71NgvF+B8QEFxgcVGB9SYHxYgXGLAuMjCoyPKjA+psD4uALjEwqMWxUYn1RgfEqBcZsC43YFxqcVGJ9RYNyhwLhTgXGXAuOzCoy7FRifU2B8XoHxBQXGPQqMexUY9ykw7ldgPKDA+KIC40sKjC8rML5TgfEVBcZ3KTC+W4HxPQqM71VgfJ8C4/sVGD+gwPhBBcYPKTB+WIHxIwqMH1Vg/JgC48cVGD+hwPhJBcZPKTB+WoHxMwqMn1Vg/JwC4+cVGL+gwPhFBcYvKTB+WYHxKwqMX1Vg/JoC49cVGL+hwPhNBcZXFRi/pcD4bQXG7ygwfleB8XsKjN9XYPyBAuMPFRh/pMD4YwXGnygw/lSB8WcKjD9XYPyFAuMvFRh/pcD4mgLjrxUYf6PA+F8KjL9VYPydAuN/KzD+XoHxfxQY/6DA+EcFxj8pMP5ZgfEvCox/VWD8XwXG/1Ng/JsC498VGP+hwPhPBcZ/KTC+rsD4bwXGqES+MaPAWKLA2EqBsVSBsbUCYxsFxrYKjO0UGNsrMHZQYMwqMHZUYCxTYOykwNhZgbGLAuNhCoxdFRi7KTAersDYXYHxCAXGHgqMPRUYeykw9lZgPFKB8SgFxqMVGI9RYOyjwJhTYOyrwHisAuNxCozHKzCeoMDYL0Vj/6j+cWJJ/vkk/9zfPw/wzwP98yD/PNg/D/HPJ5fk+1rKNhqvoKikGOpfy/nXhtH4KRTDKUZQjKQYRXEqxWkUp1OcQXEmxWjXX4pqijEUYynGUYynmEAxkWISxWSKKRRTKaZRTKeYQTGTYhbFWRSzKebELHNpfB7FfIoFFAspFlEsplhCsZRiGcVyindQnE2xgmIlxTkUqyhWU6yhOJdiLcV5FOdTrKO4gOJCivUUNRQXUVxMsYFiY6xmm2h8M8UlFJfGnLU0fhnF5RRXUFxJcRXF1RTXUFxLcR3F9RQ3UNxIcRPFzRS3UNxKcRvF7RR3UNxJcRfF3RT3UNxLcR/F/RQPUDxI8RDFwxRbvIUX6kdo/FGKxygep3iCYivFkxRPUWyj2E7xNMUzFDsodlLsoniWYjfFcxTPU7xAsYdiL8U+iv0UByhepHiJ4mWKd1K8QvEuindTvIfivRTvo3g/xQcoPkjxIYoPU3yE4qMUH6P4OMUnKD5J8SmKT8dq/hka/yzF5yg+718r8a99gQa+6Ee+5J+/7J+/4p+/GpvmazTw9VjuGzTwzVjuVRr4lh/5tn/+jn/+rn/+nn/+vn/+gX/+oX/+kX/+sX/+iX/+qX/+mX/+uX/+hX/+pX/+lX9+jZ7H980Pt4vqH7kopW3N8NWj2riZ+KLztoYfbrSVf42fcz5f6sf5mWvY2o+3juXb+PE2sXxbP942Nv/2frx9LN/Vj3eN5Q/344fH8kf48SNi+Z5+vGcs39uP94Z8NqpfPrhWLtfKpzKQ4+W3BHKtfa4V5Nrw7CDX1udaQ44/9zaQa+9zbSHXwefaQS7rc+0h19HnOvicm39ZVN/XKj9c/lYew8pXuvl2Snu+7vcpmkfn9L2r3Hy7BPIelr53jZtv1wBet4x08/M6DJabw32uK+S6+1w3yB3hc4dDrofPdYdcT587AnK9fK4H5Hr7XE/IHelzvSB3lM/1htzRPnck5I7xuaMg18fnjoZczueOgZzfFEd9IHesz+Ugd5zP9YXc8T53LORO8LnjINfP546H3Ik+dwLkTvK5fpDj48YTITfA506C3ECf6w/bgEHcjyitZbRyhZvv4LTn65fRIdyv1vV9ODnttk6pHOXmWx6gD25b/9cIPmO/QyiB3Ek+1wpy/X2uFHIDfK415Ab6XBvIDfIjbSE3uE19/Tg3xOfaQ+5kn3tjP0MxPO26DB9a7uY7Iu350tLo5jsq/fmWu+OYU6P6WuegnRFQq9P8cCa9tiuw7YwPbofzpTA8N6p/nAbDfJzAbneMMDLhfTg8PDZNGbw+MqHfuZT7PQosORjn9ty6MBkcAZbVYWGW1cpyW1bp7/io/oHLHR+rHmrL6gJwpL+snmLLatMfRS+rF0X1D1zu+O+UQ21ZXQ2O9JfVEcPsGKDJj6KX1auj+gcud/w36qG2rG4ER4BldaRtV5v8KHpZvTOqf+Byx99PHGrL6nXgSH9ZHRVoWR1qyyo9HovqH7jc8Xdkh9qyeg840l9WzxlpxwBNfhS9rO6O6h+43PH3tIfasroVHAGW1XMCLauVtqzSb8tR/QOXu17++VBbVl/ww+47uS/571yPhNyXfe4oyH3F546G3Fd97hjoV/rL/qpKW/ab/Ch62f9MVP/A5Zh/rzrUlv0PgiPAsjrMltUmP4peVl+N6h+43PX1z4fasvp5cARYVofbstrkR9HL6s+j+gcud/y7/aG2rH7HD7vjgm/744ITIPcdn+sHue/63ImQ+57PnQS57/tcf8j9wOcGQO6HPjcQcj/yuUGQ+7HPDYbcT3xuCOR+6nMnQ+5nPlcOuZ/7XAXkfuFzlZD7pc8NhdyvfG4Y5F7zuVN8zp0zxL/df8zn3Odd5YdzUbrnPYyODn5kYuM5GK5K8Lyenqe8DDzY1pj0+z7U9b06anrfx4BnbPqe8iy00RTPWPCMS99Td57Z+PTnW/cZV8dqmoW2qqFfEwL0KwNt8bx5nNsrg9xYME5IME5M31iZgbZ43jw+EYycG9cCNRsc8wyO1Sxk2+WxtssT2g6wrFbiZ86PxtbJ8eCZlLanMr+NGF+EZxJ4AiynFUH6WZ6/pmZy1LCu3FYZvN4f+jg5QB8z0C7Pm8fR2FTvAGXegcq8VeY1r3nNa17zmte85jWvec1rXvOa17zmNa95zWte85rXvOY1r3nNa17zmte85jWvec1rXvOa17zmNa95zWte85rXvOY1r3nNa17zmte85jWvec1rXvOa17zmNa95zWte85rXvOY1r3nNa17zmte85jWvec1rXvOa17zmNa95zWte85rXvOY1r3nNa17zmte85jWvec1rXvOa17zmNa95zWte85rXvOY1r3nNa17zmte85jWvec1rXvOa17zmNa95zWte85rXvOY1r3nNa17zmte85jWvec1rXvOa17zmNa95zWte85rXvOY1r3nNa95UvEOUeavMa17zmte85jWvec1rXvOa17zmNa95zWte85rXvOY1r3nNa17zmte85jWvec1rXvOa17zmNa95zWte85rXvOY1r3nNa17zmte85jWvec1rXvOa17zmNa95zWte85rXvOY1r3nNa17zmte85jWvec1rXvOa17zmNa95zWte85rXvOY1r3nNa17zmte85jWvec1rXvOa17zmNa95zWte85rXvOY1r3nNa17zmte85jWvec1rXvOa17zmNa95zWte85rXvOY1r3nNa17zmte85jWvec1rXvOa17zmNa95zWte85rXvOY1r3nNa17zmte8Bb3OMyFmzcL7Jggxcm4iGCuig+vYmqJP+3rvOJ9/PTXvmtUZqFMbimvAwe2Vwnu+lau3HedtHeH1CdCfsbGc68MYqEtVKn3I15zb4nnzOLfXEfozFjwTAnnGxTzjEmrBw1XptV3u6l4Za8t9VoPbN/wMUluOKsvL8TNo4+dbGfsMSuE923L1tgpYjtgzOqrP8XC1f85CPauhnrwM5qKW+SzHg5H7OK7ljZVNNY6NGduBLUVPo+tjtbUdYDteXo5tlMJ8cRvOr/fI5p/dujc+Yf+SS89VmYV2+ZGJjedgGJfN9LfNleW4XjbFg9vrENuXQPugcjdfPrZIezmblPB5cR+Sjm3aQS4Xpbu+TYgO/tx4HI3mNa95zWte85rXvOY1r3nNa17zmte85jWvec1r3jf3Ok91zJqF91ULMcbPAWgXhfme3fV9qJ8X/t76Kvyukv7vBpV1v7dy/dv4eQ+N9bkU3vNa+3rbdxN+b+XPzfVnTCzn+jA29T7kP0tui+fN49we/v47Bjyhfr8bHfOMTqjFodV25TlhPt/K8k40j/Ywv/hvofx5umXulFjOLae9s/X9DvHbW7G/BeK2hIfT/G2tLGr4u71ra2Lqfc9vP3h7VRIdvP1I2s+k0M8KHnBt87lQbtvVN2q4DS+F9/zJb686R2H3K4V+u58E9QhwzlhdPSbF2uZ5T4bPaHLM496H0/J+YEJs2lJ4zz9gP/Bkh/p+Bdg31v32z8sxPxpbv/C39vQ/4/xv/xOK8ODnnv46mP/tP8CyXI7Ladq//U+JGn5eeNzFr0+G2k0JULukdYbH0Whe85rXvOY1r3nNa17zmte85jWvec1rXvOa17zmfXOv8yRd583vGy/EyLnA50vU/Z4wzM+L5+9+V7mzQ327oX+74998hsX6XArv+XyHetu9frhj1PAciUKf5X/qPgkdoT+TwBPqOu+JMc/EhFocWm3nf/tP//Ot/+0//ltk0v1DxsVy+Nsk3lui2j9noT7VUJ8A63ijnw23h+vSRMjxMPevBIb5t/aqKNT2Mr+dmOrnxdsJbp/bK4X3POdrzr+zTw1gCrVvcPOYBn2akNBPfn0fbA8P+OGkbZ97/cMJr/MjExvPwTDXzvV3Rvr9rftsZ/p58Wc7I6HtWWBNqe0KbDvjg9vhfCkMf6jDG2V5433uwXVmt1tnpie8D4cnxaYpg9enJ/Q7l3K/Z4AlB+PcnltmXobl68NwLBBiP4r9xvqMg/rw6xMhVx17f6H7lYQ47yETFb5fCRo5h8e+obbxk2OeoQn1GRrzxM/zfLufp/VV2H8kHd/xtMPAPaGF3GyZkOB+NbbfC3AuVKPnl+F5T6HOL4ufM83zTjq/DPuf9LdG/Dgd97c/hG1fN3/+Jh4L4d8a8WPCkH83xtdvHuf28BiusXPuqnwex/k5A/Nr43Px6fG4Ku19Mh4/o4Xbw/MAf1NgXW0Tq8+YhGl/B9Ni39yDz1nGv+GmxN6HdeVtQZWvDe+rclG629AZBfo3HfrH7/lzbHuQ/vFb/jg4/b7mjwfwGGxCQj/59b/BuvqPhONcXmfd6x2yDV/nR2PHwVw719+z0u9v3Wc728+LP9uzEtqeA9aU2q7Atvk4mNvhfCkMt8++UZY33uceXGd2u3VmVsL7cHhSbJoyeH1WQr9zKff7LLDkYJzbc8vM67B8dYBz+acFMGG/sT54z01+Pen7TDzO49db4juwKbE6Tklwc24a1LYb1DPUMXr8mCH+HSN+/4nXPuH3n7w/SPM8ZLxeZDS0i9eLjA5Uk07RwTXpFHOEbLtLrO0uLdh211jbXVuwbau51VxSzasCtJ2NDr7+zz0aO67idstguhIwVgcyVhVhrAYjT9cKjGMCGauLMI4BI09XCsYQ173iNbZNMY4FI14fycYA922twPt3N8WI3zfifaDZKOn6TfxusS0YQ3zv09xr4PDYtB08hzjWK/a6OPyOlqdrD8YQ39Hib35NMeLvizxdBzCGOJ4v9m/jpP8PIAvGEN+F4fduTTHi30r4nU5IY2PHH1Og7fR/n8xfs4p/k71ZfaZCfbBW7pGF19Ed4u/fDLTF8+bxaeDiXKewdWz0OG5q2FpUYt350dhnmFQf/m4zC6+jO8R3dxloi+fN49PByLkuYevY6PHwtLC1qMS686OxzzCpPof55yy8ju4Av8vX1Wx6zMjj+Js157oG9mRjnjerY5KxGxhnBjLOKMI4E4w83eFgDPHbfxbabYpxFhh5uu5gDPBdeJ1xVhFG/O6YpzsCjLMDGc8qwjgbjDxdDzCG+H47C+02xTgHjDxdTzDODWScU4RxLhh5ul5gnBfIOLcI4zww8nS9wTg/kHFeEcb5YOTpjgTjgkDG+UUYF4CRpzsKjAsDGRcUYVwIRp7uaDAuCmRcWIRxERh5umPAuDiQcVERxsVg5On6gHFJIOPiIoxLwLg49rozLg1kXFKEcSkYebq+YFwWyLi0COMyMPJ0x4JxeSDjsiKMy8HI0x2nwHi8AuMJCoz9FBhPVGA8SYGxvQLjKWB8R/rGuu8plhdhfAd4VqTvGZaFNpriWQGes9P3VATqZ935cyv9vNK+x905UcPPi/tQBq+vhNqdE6B2GWiX583jaDSvec8Bz/KYNQvvWy7EyLmzA3uyMY97NLY9TDKG/lwVGCuba3Se1al78vdyPacIz2rwrErdk9/Ppd/P/P5oTdSwrtxWGbyOy8CaAH3MQLs8bx5Ho3nNa17zmte85jWvec1rXvOa17zmNa95zWte85r3zb34HT9bs/C+FUKMnFsV2JONedwjExvPwXCSMfTnasZUjJXNNTrP2tQ9+d+c1hThWQuec1P35H9zSr+f+d+czosa1pXbKoPXcRk4L0AfM9Auz5vH0Whe85rXvOY1r3nNa17zmte85jWvec1rXvOa17zmfXMvfsfP1iy8b7UQI+fODezJxjzukYmN52A4yRj6czVjKsbK5hqdZ136nrrrec8rwrMOPOen76kI1M+635wuiBrWldsqg9dxGbggQB8z0C7Pm8fRaF7zXgCe+D4qC+9bK8TIufMDe7Ixj3s0tt1KMob+XBUYK5trdJ71qXvy50BcUIRnPXguTN2T3x+l38/8/qgmalhXbqsMXsdloCZAHzPQLs+bx2vCtl1Xh4vepA4XJVguauE6oLGp3pXKvFZfq6/V1+pbyGv1tfpafa2+hbxWX6uv1dfqW8hr9bX6Wn2tvoW8Vl+rr9X3rXnxtwO2ZuF964QYOXdhYE825nGPTGw8B8NJxtDL4dvFGHj9qGyu0Xk2pO4ZWvdb1kVFeDaA5+LUPfnfstLvZ/43nI1Rw7pyW2XwOi6nGwP0MQPt8rx5HI2HqrdGmdeWh7BeWx7Ma8uDeQt5bXkwry0P5i3kteXBvLY8mLeQ15YH89ryYN5CXlsezGvLg3kLeW15MK8tD+Yt5LXlwby2PJi3kFfC8oDnuLA1C+9bL8TIuYsDe7Ixj3tkYuM5GE4yhl4OzSjHGHgdrmyu0Xk2p++pu+fOxiI8m8GzKX1PRaB+lrt5XBI1rCu3VQav43J6SYA+ZqBdnjePo9G85r0EPPH9aBbet0GIkXObAnuyMY97NLbdSjKG/lzNmIqxsrlG56kN5LmkCE8teC5N31MRqJ91+8zLooZ15bbK4HVcBi4L0McMtMvz5nE0avLiOsTWLLxvsxAj5y4FT4DlrehtUW1CHVea8W1j7KDAmFVg7AjGAH971W1nOsU8PL45bH0q06hPmX+WvG3uBJ5Qn2GXmKdLQi2kfoad/bPkz7ALeEJ9hl1jnq4JtZD6GR7mnyV/hl3D1jGV7X03BcbDFRi7KzAeocDYQ4GxpwJjLwXG3gqMRyowHqXAeLQC4zEKjH0UGHMKjH0VGI9VYAz93VBj3xfUtkDbhf7ObYm2C/191hJtW82t5lZzq7nV3Gr+Vtu2mlvNreb/+ZqH+E4cv3/nRyY2noPhpO/JQ59/YUY5xhqhRvRk0vOUY9+xrcsF9J0NZkzfWKPAuFKB0eqY/728OUbnuTKQ5/IiPFeC54r0PRWB+ll3zutVUcO6cltl8DouA1cF6GMG2uV58zgaNXlxHWJrFt5XK8TIuSvAE2q9KmY9x/Xq6kCeK4vwXA2eEJ9XoH7WrefXRA3rym2Vweu43lwToI8ZaJfnzeNo1OTF9ZytWXhfrRAj564CT6j1qpj1HNerawN5ri7Ccy14QnxegfpZt55fFzWsK7dVBq/jenNdgD5moF2eN4+jUZMX13O2ZuF9tUKMnLsGPNcG8BS7nl8LxqS/LaQaaxQYrY5WxypBRquj1bFKkFFDHc1oxiozmtGMZjSjGaO3x7GZHT8W/53pteC5Pn3PMPxeqyme68ET4ruvQP2s+870hqhhXbmtMngdl4EbAvQxA+3yvHkcjeY17w3gqY1Zs/C+WiFGzl0HngDrc9Hb+usT6rjSjJXNNTrPjal7hpXjMt0Uz43gCbHch+lnfn90U9SwrtxWGbyOy8BNAfqYgXZ53jyOxqZ6a5R5rb5WX6uv1beQ1+pr9bX6Wn0Lea2+Vl+rr9W3kNfqa/W1+lp9C3mtvlZfq6/Vt5DX6mv1tfpafQt5rb5WX6uv1beQ1+pr9bX6Wn0Lea2+Vl+rr9W3kNfqa/W1+lp9C3mtvsV78RxvtmbhfbVCjJy7ATw3BvAUex76jQl1XGnGVIw1YY2VzTU6z83pe4bhetcUz83gCbFuBupn3TUHt0QN68ptlcHruJzeEqCPGWiX583jaDSveW8BT23MmoX31Qoxcu4m8ARYn4ve1t+cUMeVZjTj28dY2Vyj89yauqeyHLdfTfHcCp4Q27gw/cwfe9wWNawrt1UGr+MycFuAPmagXZ43j6Oxqd4aZV6rr9XX6mv1LeS1+lp9rb5W30Jeq6/V1+pr9S3ktfpafa2+Vt9CXquv1dfq+/aqL37Hz9YsvK9WiJFzt4Dn1gCeYn+HuDWhjivNmIqxJqyxsrlG57k9dc/QclzvmuK5HTwh1s0w/cz/5nRH1LCu3FYZvI7L6R0B+piBdnnePI7GQ9Vbo8xry0NYry0P5rXlwbyFvLY8mNeWB/MW8tryYF5bHsxbyGvLg3lteTBvIa8tD+a15cG8hby2PJjXlgfzFvLa8mBeWx7MW8grYXnAc1zYmoX31Qoxcu428NwewJONijsP5/aEOq4049vGWBPWWNlco/Pcmb5nGG4bmuK5Ezwhth+B+ll3XthdUcO6cltl8Doup3cF6GMG2uV58zgazWveu8BTG7Nm4X21QoycuwM8Adbnorf1dybUcaUZK5trdJ670/cMw2W6KZ67wRNiuQ/Uz7r90T1Rw7pyW2XwOi4D9wToYwba5XnzOBrNa957wFMbs2bhfbVCjJy7CzwB1ueit/V3J9RxpRkrm2t0nnvT9wzDZbopnnvBE2K5D9TPuv3RfVHDunJbZfA6LgP3BehjBtrlefM4Gs1r3vvAUxuzZuF9tUKMnLsHPAHW56K39fcm1HGlGc0oyFijwBi4jpXNNTrP/YE89xbhuR88IbbDgfpZd3z0QNSwrtxWGbyOy8ADAfqYgXZ53jyORk1eXIfYmoX31Qoxcu4+8IRar4pZz3G9ejCQ5/4iPA+CJ8TnFaifdev5Q1HDunJbZfA6rjcPBehjBtrlefM4GjV5cT1naxbeVyvEyLkHwBNqvSpmPcf16uFAngeL8DwMnhCfV6B+1q3nW6KGdeW2yuB1XG+2BOhjBtrlefM4GjV5cT1naxbeVyvEyLmHwBNgeSv6b4uHE+q4UoGxRoHR6mh1rBJktDpaHasEGTXU0YxmrDJjUcbLFBjtszZjlVBjbQCj83SKeXi8tgXa7hJru0sLtt011nbXFmzbam41t5pbza3mVvO32rbV3GpuNbeaW82t5m+1bau51dxqbjW3mqfXtvSaBzj/pejzyraAJ8R3sYH6We7m+4if1+spet08HoX61MbqVAavPwK1ezRA7TLRwed+5WAcjU31lgjwBmq70m1X2kP/uY2aWD1c+48F6nuhbd1jLdB2oW1dS7RdaFvXEm1bza3mVvO3b81xuDRqeC60m8fjfri1H+f3XwbTvfGe7vnnzpF9niHatnXIam41t5ofajUfHGt7cAu2XR5ru7wF27ZlzdZvq7nV3GresjXnv1dq02u7HP824nn388PcXgkMPwbvc6YnUjcNH4amUj9vbv8JqMeTqbed/yy2xurBliehbc4V9T10ReMvu7af8vNqE+X/Vt0aq3spvGcc/N2KNSvx7q0JNdvaQm62bE1wTwZ3SUIfX49sGxOibduuy6t5Gbx+Vgt4opgnasQzVZhnqzDPeGGe0cI8G4R5BgjzrBXmqRTmWSbMc5gwT1dhnjOEeWYL81QI8wwT5pkmzDNBmGehME+VMM9QYZ6BwjzrhXmWC/OcKcwzR5hnkTDPdGGe4cI8E4V5HhfmqRbmGSTMM1iY5zRhntXCPIuFeeYK88wQ5pkkzDNGmGeIMM/pwjzrhHlGCPOMEuaZJ8yzRJhnpjDPZGGescI8LXF9VTGek4V5yoV5VgjzlAnzdBLmOVWYZ74wz1JhnpHCPLOEeaYI84wT5ukvzNNZmKeLMM9mYZ4FwjwZAZ5s1PBeGFl4fQvkSmLTtqWo7Fv/+jafL4FptvvhVgnz3gY5Pvd1e8K0WKdt0JcqP1z+1h51dcK2cjDO7XUEx3YhngXCPJuFeboI83QW5ukvzDNOmGeKMM8sYZ6RwjxLhXnmC/OcKszTSZinTJhnhTBPuTDPycI8W4R5xgrzTBbmmSnMs0SYZ54wzyhhnhHCPOuEeU4X5hkizDNGmGeSMM8MYZ65wjyLhXlWC/OcJswzWJhnkDBPtTDP48I8E4V5hgvzTBfmWSTMM0eY50xhnuXCPOuFeQYK8wwV5qkS5lkozDNBmGeaMM8wYZ4KYZ7ZwjxnCPN0FeY5TJhnmTBPpTDPWmGeAcI8G4R5RgvzjBfm2SrMM1WY56wW9PD5fTzvp2Ke/3TbT/vhqvTarvv/uJ5Jv09DXZ92+Hm18fNmP7dXCu/p2CP/zOefcd49+FxMnr4j1GUH1OeZ9OtT9/+g7QxUn12x+rB/J9SH39MtVh/OY32egfrsiL0P+1EVpdaPSjffZwPVZ3esPux/FurD7+kdqw/nsT47oT67Yu8LdX4znjfMj0xsPJdgLYuStwG7AxkfK8K4G4w83Y4WMO5opjFpXQhhdJ5C98jd3QJtF7pHbku0XegeuS3RttW8cM2fS7/tuv+rFLev7tHYuvgceALsKyoC9bPuVMLnoR+7Y/0pg9fxOurnA/QxA+3yvHkcjU319hfgDfW5ufm+kP583/i/SrmuL8Tq+zzUmR94P/A9geocxerMjz0JnqnCPFuFecYL8zwmzDNamGeDMM8AYZ61wjyVwjzLhHnOEOaZLcxTIcwzTJhnmjDPBGGehcI8VcI8O4R5hgrzDBTmWS/Ms1yY50xhnjnCPIuEeaYL8wwX5pkozPO4ME+1MM82YZ7nhXkGCfMMFuY5TZhntTDPYmGeucI8M4R5JgnzjBHmGSLMc7owzzphnhHCPKOEeeYJ8ywR5pkpzLNLmGeyMM9YYZ4twjwnC/OUC/OsEOY5VZhnvjDPUmGekcI8s4R5pgjzPCXMM06Yp78wz2ZhngXCPBkBnkL3A+fXn4dcSWza+P3A9/l8CUyz3w+3Spj3Psjt9cP7E6bFOu2DvlT54fK39qirE7aVg3FuryM49gvxLBDm2SzM01+YZ5wwz1PCPFOEeWYJ84wU5lkqzDNfmOdUYZ4VwjzlwjwnC/NsEeYZK8wzWZhnlzDPTGGeJcI884R5RgnzjBDmWSfMc7owzxBhnjHCPJOEeWYI88wV5lkszLNamOc0YZ7BwjyDhHmeF+bZJsxTLczzuDDPRGGe4cI804V5FgnzzBHmOVOYZ7kwz3phnoHCPEOFeXYI81QJ8ywU5pkgzDNNmGeYME+FMM9sYZ4zhHmWCfNUCvOsFeYZIMyzQZhntDDPY8I844V5tgrzTBXmOSvBE+r+hXx+H8+bx58X0jbXpSq9tuvunXgg/T7V3c/5RT8vvp8z+7m9UnjP33vmnzv7cc67xx7/nPQ95YtQnwPp16fuXqMvBarPy7H6sP8lqA+/J9Pr4PpwHutzAOrzYux92I+qKLV+1N0P/J2B6vNKrD7sfyfUh9/TLlYfzmN9XoL6vBx7X6jzm/G8YX5kYuO5BGtZlLwNeCWQcU8RxlfAyNO92ALGF5tpTFoXeBmqTc9Yjsssz5s/O26vBIZfgffFl/daeB9/x4/L+1F+eW/t+t2rvq/xZQY/o5cbqQnOx9Vnf6D68DaK573ND++H+vDwgVh9DsTqsz+hPvyeflCfAVCf+D328Z72uyAXv4c8zqcjtMPTdgQP1zvksRP/jsnz5vF9h2zba1a7+fL9xF9Pr0919zd/IdYHl3suoV+7U+9XftuG9/F2j8a2bc+BkZdPvK4qwP/vUrfuPu3nFf//S/B+79vBn1LbFdh2xge3w/lSGJ7Qq/692+H116Fez8L8tvnhEv+e7Qnv2QnDOB+eNj7MnyfXqAxex3ntehNfuyjc/0H0DHhzMM7tuW3eKNgnhLiXv3Psjjl2J9QgwP/JU7fePRsd/GhsvWNDGUyHf5fycIrbpnJnjP+G7T6XmfC57Eu93TWr8e9zt75fAw5urxTec26u3jYH9pP8OtYZ/z+fA7G+lcLrC+CYHuf1xv8hBdPj8Weo5bQ8qn/kYPzZQ7bt/D6X18e097n7Yn3A/SD2K8D/GVGB+3x+NLbu4zWmEva5+DehhH3uxibsc3fD/Lb54fg+F99T7D6XP8/m7nO57f/0PncNbNtDHG86R6H/qwVrEGqfi/t7/kyimIcfuM/l6Q6AkYfT3ueOiLXlPpcrE46F0t7n4t+414AjaZ85JFdvuzbhb1Os826YPv73Nf6/ejcW2OcmfS+1FXL8+n7I8T6Zf7PD+eH/cxLg++dG95kHDtm28/trXpfT3l/H1z/ch2K/QvxGgscL/Ghsu/ECGHndwf11gG1bOW7f4/+H5QvQNu5XU2r7oH0L76+5Hfz/V3n4Gdhf4/78dajXczA/3j/z/vrphPfsgmGcD08bH+bPE7fx/DrO69k38eExUC5Kt6Y7wZuDcW7PbXsfhv1CiGNV53g+5ng+oQa7ArSN34NF8JlEMQ8/8DtUnm5AgjHt/fXIWPvuc9nzH9hfsyNpf/2XPvW2Awn7a/x/+/h7atzHxs+lwO+p8bc/zu2FHA/vgVzSbzfcbi5Kd99RzG83eA+tEP9Hb6B+1u3icV15MdYfXCfwPo6hthmF/o9xNDbV21+AN9TnFui3kjf+/0iu675YfbFfAf7OG1rsdxz4t1+IY7hA/axb7/D7xRdi/cHva/H/O/pPfZ9djHevMu8eAV68fx3+f6yhvkuJYp4ooT78mCrMs1WYZ7wwT4kwz2hhng3CPHuEeQYI86wV5jlemOcYYZ5KYZ5lwjw9hXkOE+bpKsyzUJhntjDPNGGe9sI8E4R5WgnzVAnzVAjzrBfmOUOYZ5gwz0BhnhOEefoI8ywX5uklzNNNmGeoMM8iYZ45wjwdhHmmC/OUCvNMFOY5U5inWphnuDDPIGGewcI8pwnz9BPmWS3MkxPm6S3Mc7gwz2JhnrnCPFlhnhnCPK2FeSYJ84wR5jkgzDNEmGe/MM86YZ4ThXn6CvOcLsxzpDDPCGGe7sI8S4R5OgrzzBPmaSPMM1OYZ5Qwz2RhnrHCPFuEeU4R5jlZmKdcmGeHMM9JwjzHCvOsEOY5SpjnCGGepcI8ZcI8nYR55gvztBXmmSXME/iavaI9U4R5ThXmGSfMM1KYZ68wz3HCPEcL8/QQ5ukszNNFmGezMM8CYZ52wjwZAZ5s1PA6fbz/Et7/l695xvsd8T1Q8J6FJQlt8LULeP9FPn+O5+GOB8/o23DeWKdQ13ljW7mo4b1xO4JjlxBPO2GeBcI8m4V5ugjzdBbm6SHMc7Qwz3HCPHuFeUYK84wT5jlVmGeKMM9zwjyzhHnaCvPMF+bpJMxTJsyzVJjnCGGeo4R5VgjzHCvMc5Iwzw5hnnJhnpOFeU4R5tkizDNWmGeyMM8oYZ6ZwjxthHnmCfN0FOZZIszTXZhnhDDPkcI8pwvz9BXmOVGYZ50wz35hniHCPAeEecYI80wS5mktzDNDmCcrzDNXmGexMM/hwjy9hXlywjyrhXn6CfOcJswzWJhnkDDPcGGeamGeM4V5JgrzlArzTBfm6SDMM0eYZ5Ewz1Bhnm7CPL2EeZYL8/QR5jlBmGegMM8wYZ4zhHnWC/NUCPNUCfO0EuaZIMzTXphnmjDPbGGehcI8XYV5DhPm6SnMs0yYp1KY5xhhnuOFedYK8wwQ5tkjzLNBmGe0ME+JMM94YZ6twjxThXnOSvDsSN9T93+v87VLEbjwkYNhvC/angD1CdTPutPJ90I/nov1pwxex/9rem+APmagXZ43j6Oxqd79yrwHBHjxXgr4f68HWPYqmrI+oWeqMM9WYZ7xwjwlwjyjhXk2CPMMEOZZK8xzvDDPMcI8lcI8y4R5egrzHCbM01WYZ6Ewz2xhnmnCPO2FeSYI87QS5qkS5qkQ5lkvzHOGMM8wYZ6BwjwnCPP0EeZZLszTS5inmzDPUGGeRcI8c4R5OgjzTBfmKRXmmSjMc6YwT7Uwz3BhnkHCPIOFeU4T5uknzLNamCcnzNNbmOdwYZ7FwjxzhXmywjwzhHlaC/NMEuYZI8xzQJhniDDPfmGedcI8Jwrz9BXmOV2Y50hhnhHCPN2FeZYI83QU5pknzNNGmGemMM8oYZ7JwjxjhXm2CPOcIsxzsjBPuTDPScI8xwrzrBDmOUqY5whhnqXCPGXCPJ2EeeYL87QV5pklzDNFmOdUYZ5xwjwjhXmOE+Y5WpinhzBPZ2GeLsI8m4V5FgjztBPmyQjwFPq/s/n1LZDb64eT/j/tPZArSWiDz4XfC7lSP8zzcMc7+H9ncx7rFOo6XWwrB+PcHv7f2c8K8bQT5lkgzLNZmKeLME9nYZ4ewjxHC/McJ8wzUphnnDDPqcI8U4R5ZgnztBXmmS/M00mYp0yYZ6kwzxHCPEcJ86wQ5jlWmOckYZ5yYZ6ThXlOEebZIswzVphnsjDPKGGemcI8bYR55gnzdBTmWSLM012YZ4Qwz5HCPKcL8/QV5jlRmGedMM9+YZ4hwjwHhHnGCPNMEuZpLcwzQ5gnK8wzV5hnsTDP4cI8vYV5csI8q4V5+gnznCbMM1iYZ5Awz3BhnmphnjOFeSYK85QK80wX5ukgzDNHmGeRMM9QYZ5uwjy9hHmWC/P0EeY5QZhnoDDPMGGeM4R51gvzVAjzVAnztBLmmSDM016YZ5owz2xhnoXCPF2FeQ4T5ukpzLNMmKdSmOcYYZ7jhXnWCvMMEObZIMwzWpinRJhnvDDPVmGeqcI8Z8U8eM7CaMjxcBXkeLgacjw8BnI8PBZyPDwOcjw8HnI8PAFyPDwRcjw8CXI8PBlyPMzXCbnfs7fGcu4z4fNaclG6nwm3xfPm8f1g5HOKt0KObVPBvT+WC7ks7Y+5eTxpXcO+sG0auPfGciGvDd8bc/P4DjAm9YVt0yHHwzMgx8MzIcfDsyDHw2dBjodnQ46H50COh+dCjofnQY6H50OOhxdAjocXQo6HF0GOhxdDjoeXQI6Hl0KOh5dBjof5O1W8Bh//36TdfjgXpbsscFs8bx7fDcak5YNtK8C9O5Zz7p2B3Ltjbh7fCcakvrBtNbh3xnLO/Uwg986Ym8efAWNSX9i2FtzPxHLO/XQg9zMxN48/DcakvrBtHbifjuWce3sg99MxN49vB2NSX9i2HtzbYznn3hbIvT3m5vFtYEzqC9s2gHtbLOfcTwZyb4u5efxJMCb1hW14L5vNgYxbYsYtLdh2oWOdlmi70PFKS7Rd6JijJdoutI9ribYL7adaou1C+5qWaLvQ/qIl2i60zW+Jtgttt205PzS3LW/X5fw/uW35T65jduxgxw4t1bYdO9ixQ0u1bdu1wtu1AH8rV2ahDX5kYuM5GH4SPNsC1CJQP8vdfJ/w83o9xfm6eTwO9dkcq1MZvP4E1O7xALXLQLs8bx5HoyZvFnIHIMevj4bco364CnKP+OFqyD3sh8dA7iE/PBZyD/rhcZB7wA+Ph9z9fngp5O7zw8sgd68f3gu5e/wwfu9+tx/G+9fe5YdXQO5OP7wbcnf4Yfxe+XY/vBNyt/nhtZC71Q8/A7lb/DB+b3qzH34acjf5Yfye8kY/vB1yN/jhzZC73g9vg9x1fvgJyF3rhydA7ho/PBFyV/vhSZC7yg9PhtyVfhjvMXyFH8bfIC/3w1shd5kfngq5Wj+8H3KX+mH8je0SPzwdcpv88AzIbfTDMyF3sR+eBbmL/PBZkKvxw7Mhd6EfngO5C/zwXMid74fnQe48Pzwfcuf64QWQW+OHF0JulR9eBLlz/PBiyK30w0sgd7Yfxu+R+byKJyHH577idoOvT3oUcnwN+SOQ4/vqPAy5tn74Ici188MPQo7PKX0Acnzdz/2Qy/rh+yDX0Q/fC7kyP3wP5Pi+h3dDju+dexfk+P6+d0KOzxG8A3J8HuPtkONrTW6DHF+ffCvkuvvhWyDH9/m7GXJ8L92bIMfnB94IOb6m5AbI8XXI10OO781yHeT4fn7XQo7vmXsN5Pg8t6shx9dqXAW5nB++EnJ9/fAVkDvWD18OOb437mWQ4/PZaiHH12RcCjm+jvcSyJ3ohzdB7iQ/vBFy/f3wxZDj88QugtxAP1wDuUF++ELIDfbDF0CO79txPuT43nPnQY7vj3cu5Pic/TWQ4/MgV0GOr706B3J8fcZKyJ3ih8/2z279c9sDPjbgewJX+TyfO7Mb8u64Y5cfb+NzSfcC4f1lJgpz7k/rmIXbK4X3/NMvqJ39e58Fdw7cLyRM+2+YFvvmHvv8M0/fERzPwrw41ylXb26Vq5+Gp+d78mPN8bPAeuaitOq5ZjX+nc414faxnvye9rmDa4J/48fvp4g1wWMivk8dHo/yvZb5/a5OvXL1NTlQoCa7AtVkZ6wmB2K+UnhPt9zBNdmZUBNcTuL1TVoOsE7PQu7U2PywTmHqkf8bl9vjR2N/47KhHdhT9FQE6mfd5hc/u/hnXgav4/9tGurcmF3RwfWNb+eK8Z4qwBvqcwt0nk+lO25sD3V9JlbfnVDn5xL6yn/fpfh9SQW24R68PcS/JUfGLG4bsccfKOK2lO8fWBUdvN/ZB3lN+/pTcvnnN9vXP58w7UiYFvvmHnxs0NR9/cRcvfn0XP00PD0fS2HN8bOQsq8fkzu4Js3Z1/M9bXBfz/dlxH397Fx9TQ4UqImEff203ME1eSv7evzeKX7vH6wT7uu5Travf2sPN4+m7jtPgz5q2NefLsB7KO/rdyf0tSX29bw9xH39iJjFbSOuhH09f5fK96qq8nnex78A+aR9PU+/D/oaal+/D/pQaF/P71mfyz/zvn4fuHPgfi5h2othWuybe/CxAV7nsSv2PtzXX5urN2/O1U8Tv3cs1hw/i5bc13P7Sfv6K3IH1wT39YNi/S+0r+f7b+D393wPMNzX35Grr8n+AjVpqX39/pgP9/U35Q6uyc6EmuByEq9v0nKAddoHuTNj88M6hdzX4+/m7tHUff2+9D0ttq+Pf+a47zwD+ihlX9+Y90wBXq37eq5rY/v6ZxP62hL7et4e4r5+eMzithEz/b4erzvFa1v5N3r8/X5iLOf6xL/15qJ0lx1ui+eddC0rtzex5Y2VTTVOiBmDeCrLy52Hf2PnfVRlzFMK79mXyz/zPorz7jHeP1dCPybG3tcOhnNRup/9hOjguk5IaHtaoLYnx9rmdWNaC7Q9JdZ2Vaxtt3xPig5+NLbfxWu3pwYwu/lOT3++dcsyn4/ByzK3UwV9mgk1SKtP2HbGB7fD+VIY/mQueuMxs37wje0nXis9LeF9ODwpNk0ZvD4tod+5lPs9HSw5GOf23H7jfbl6R4D1oO6znxZz8HgV5Kcn1G0a1I1fnwg53r9Nhlx1bB5ZeB33IWPT72vi9obHx4Ix6f4MYxOME9M31u3nxsaMYxNqy7mp4GFvVZRuzaaCx823MqE+lTGPW3YH+5OGku6hgTWdAH0Yk35NKxqrKbeH9/4Ym+BJ8RhyaBTzcBt8DkkJtMW5qijUsVX+7+34sQzPO+lY5me5/HPSscwg8EZR8rFMSdRwvauKDl6Gc1G6x2pTY/2Lr+Ol8J7f5Or7F2RfXpn/myn1vvq/T6ZBn8Yl9JNf/30u/+zW1T/4YVwveZ11r/MJYvg6Pxo7JsLt04z0+1uOxwv82c5IaHsWWFNquwLb5mMXbofzpTD871z0xmNW/eAbdcZ7ukxPeB8Oj41NUwavT0/ody4Kc8zG854RM7pl5s+5+mFefkL9DYv9xvrgsUf8GMVZeP1IbfteUV6J7UbQRgW0m/6xQ347zut2fDvO7eH6395/Jrwdx+NA/o2Up8d9OL8P91OT4f1B+ue341Oa0D9+TxfoX6h9S6DjwLpFZSr0aVJCP/n17r6fbj3rAdvp+D7Wvd4v4XV+NPVv25bejmPbErbjJ/R9oyyNbpObsh2fHJtG4na8Nyxf/WA7HuJ7Gew31qcK6sOvj4dc/DurLEyDf1+E+v60Kjq4jjw+CYycw+8W2Jv2d9S4La9IqE1FzOI+2z7t612t0ncNdfNtk379h+I1MPxobFvWBurfOn1PRYeo/jqYjZtqNqw4d/Xs1StWZYDG3FYxbiY6mM6vl0Cu5E1ej6KDL/cphVxbP9waciWxsuBlRvx+t2SEKhfWg+ddGnO2A0uKbQ/FS6X40dii0xY8ARblukWHL5fyi86CDedtWo3LB3vfyrKTgdeT3ldoXu2jhvVJdUHghk4sORhT4l8r9QVwxXcfRjuP4nXOFc9ta91vh+64r0uUvzbMXQvmrv1y13q5a7vctVzu2i13rZb7ac5di+WuvXLXWrlrq9y1VO6yklyU/9Pl2Ch/7ZO71umEKH8t04lR/lold22SuxZpYJT//sNdW+SuJXLH0O5HbbetdX8UuC9+3LU+7toe9xuhOyfInQPszlF3532789fcOWHut233e/FoX9vqKP8dkTu+cH9LuP2e26e5Y0G3f3HbdXeM5I4H3fbc7R/dftwdr7j9uLte0l0f6a6HdNc/uusd3fWN7npGd/2iu17RXZ/orkd01/a6a3nddbrviPLXH62I8tcmnRPlr2VaHeWvczo3yl9Xe16Uv2ZqXZS/nspdZ+Wuj62J8tdmuWu23HWN7noud52XuybWXQPmrg1z14y5a8ncNWbu2jN3TZq7Vs1dw+aubbs2yl8Ld32Uv3bOXVN3U5S/Bu+WKH/N3m1R/hq/O6L8NYF3RflrCO+J8tccumsR3TWK7tpFd02ju9bRXQPprod110e66yYfi/LXVLrrcN31r+6ay6ei/LW626P877vu9+cdUf53XfcbtPvNeXeUP3fJnY/kztHaE+Wve3bnXbjfrd15ai9SvETxMsU7KV6heBfFuyneQ/FeivdRvJ/iAxQfpPgQxYcpPkLxUYqPUXyc4hMUn6T4FMWnKT5D8VmKz1F8nuILFF+k+BLFlym+QvFViq9RfJ3iGxTfpHiV4lsU36b4DsV3Kb5H8X2KH1D8kOJHFD+m+AnFTyl+RvFzil9Q/JLiVxSvUfya4jcU/0XxW4rfUfw3xe8p/ofiDxR/pPgTxZ8p/kLxV4r/pfg/ir9R/J3iHxT/pPhXlD/u+DeFW/kzFCUUrShKKVpTtKFoS9GOoj1FB4osRUeKMopOFJ0pulAcRtGVohvF4RTdKY6g6EHRk6IXRW+KIymOojia4hiKPhQ5ir4Ux1IcR3E8xQkU/ShOpDiJoj/FAIqBFIMoBlMMoTiZwv1h4zZs7ov9oRTDKE6hGE4xgmIkxSiKUylOozid4gyKMylGU1RRVFOMoRhLMY5iPMUEiokUkygmU0yhmEoxjWI6xQyKmRSzKM6imE0xh2IuxTyK+RQLKBZSLKJYTLGEYinFMorlFO+gOJtiBcVKinMo3FGM2xutoTiXYi3FeRTnU6yjuIDiQor1FDUUF1FcTLGBYiPFJorNFJdQXEpRS3EZxeUUV1BcSXEVxdUU11BcS3EdxfUUN1DcSHETxc0Ut1DcSnEbxe0Ud1DcSXEXxd0U91DcS3Efxf0UD1A8SPEQxcMUWygeoXiU4jGKxymeoNhK8STFUxTbKLZTPE3xDMUOip0UuyiepdhN8RzF8xQvUOyh2Euxj2I/xQGKFyleoniZ4p0Ur1C8i+LdFO+heC/F+yjeT/EBig9SfIjiwxQfofgoxccoPk7xCYpPUnyK4tMUn6H4LMXnKD5P8QWKL1J8ieLLFF+h+CrF1yi+TvENim9SvErxLYpvU3yH4rsU36P4PsUPKH5I8SOKH1P8hOKnFD+j+DnFLyh+SfEritcofk3xG4r/ovgtxe8o/pvi9xT/Q/EHij9S/InizxR/ofgrxf9S/B/F3yj+TvEPin9S/IvidYp/U7gdf4aihKIVRSlFa4o2FG0p2lG0p+hAkaXoSFFG0YmiM0UXisMoulJ0ozicojvFERQ9KHpS9KLoTXEkxVEUR1McQ9GHIkfRl+JYiuMojqc4gaIfHJ98zD+7Y5aTKPpTDKAYSDGIYjDFEIqTKcopKigqKYZSDKM4hWI4xQiKkRSjKE6lOI3idIozKM6kGE1RRVFNMYZiLMU4ivEUEygmUkyimEwxhWIqxTSK6RQzKGZSzKI4i2I2xRyKuRTzKOZTLKBYSLGIYjHFEoqlFMsollO8g+JsihUUKynOoVhFsZpiDcW5FGspzqM4n2IdxQUUF1Ksp6ihuIjiYooNFBspNlFspriE4lKKWorLKC6nuILiSoqrKK6muIbiWorrKK6nuIHiRoqbKG6muIXiVorbKG6nuIPiToq7KO6muIfiXor7KO6neIDiQYqHKB6m2ELxCMWjFI9RPE7xBMVWiicpnqLYRrGd4mmKZyh2UOyk2EXxLMVuiuconqd4gWIPxV6KfRT7KQ5QvEjxEsXLFO+keIXiXRTvpngPxXsp3kfxfooPUHyQ4kMUH6b4CMVHKT5G8XGKT1B8kuJTFJ+m+AzFZyk+R/F5ii9QfJHiSxRfpvgKxVcpvkbxdYpvUHyT4lWKb1F8m+I7FN+l+B7F9yl+QPFDih9R/JjiJxQ/pfgZxc8pfkHxS4pfUbxWUn+PgEz9KhL90X+30NePr9i0afWFF23KbarJXbj5gk3nXXTBZblLz9u0NldzyeoNay6ouRQn3u3vNME3UajesGHFZbnz1q9aXZur2bwpV7Mmt7Jm8/pVG3Gir3R4Cy1+0098VMOJV6xaVXi6X/vp+DYTkxs3/rY5HftTcyYq9Te04GtO5uT/uMxtvKBmU648t57+XXEBdWb1qiE5fG0jFWvjptzGTSs2bMqt2VBzYa5iCM53bPfmFWpS97fw6WR7NKMCXZszUa/mTPS3ns2YiN9d1ERtmzPRfP9uvnXJmNVrajaszm2ooWVgVc36EzflLlyx6Zy1OMkNfhK+A0r1mk2rNzQ6xT/8PRmauCK83qcZHWmXa8ZEXZsz0bBcUb0Z0Zw2qpsz0dTmTHRhcb25qDltXN6ciW5szkR7mzPRT5sz0a+bM1G7vs2YqHNTJ4r+H0QVfSyYSwcA", "debug_symbols": "" }, { "name": "update_at_private", "function_type": "Secret", "is_internal": false, "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "is_contract_deployment", "type": { "kind": "boolean" } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "contract_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "contract_deployment_data", "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "initialization_hash", "type": { "kind": "field" } }, { "name": "contract_class_id", "type": { "kind": "struct", "path": "aztec::protocol_types::contract_class_id::ContractClassId", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "contract_address_salt", "type": { "kind": "field" } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }] }, "visibility": "private" }, { "name": "index", "type": { "kind": "field" }, "visibility": "private" }, { "name": "new_value", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "index": [{ "start": 41, "end": 42 }], "inputs": [{ "start": 0, "end": 41 }], "new_value": [{ "start": 42, "end": 43 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "is_contract_deployment", "type": { "kind": "boolean" } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "contract_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "contract_deployment_data", "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "initialization_hash", "type": { "kind": "field" } }, { "name": "contract_class_id", "type": { "kind": "struct", "path": "aztec::protocol_types::contract_class_id::ContractClassId", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "contract_address_salt", "type": { "kind": "field" } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [4448, 4449, 4450, 4451, 4452, 4453, 4454, 4455, 4456, 4457, 4458, 4459, 4460, 4461, 4462, 4463, 4464, 4465, 4466, 4467, 4468, 4469, 4470, 4471, 4472, 4473, 4474, 4475, 4476, 4477, 4478, 4479, 4480, 4481, 4482, 4483, 4484, 4485, 4486, 4487, 4488, 4489, 4490, 4491, 4492, 4493, 4494, 4495, 4496, 4497, 4498, 4499, 4500, 4501, 4502, 4503, 4504, 4505, 4506, 4507, 4508, 4509, 4510, 4511, 4512, 4513, 4514, 4515, 4516, 4517, 4518, 4519, 4520, 4521, 4522, 4523, 4524, 4525, 4526, 4527, 4528, 4529, 4530, 4531, 4532, 4533, 4534, 4535, 4536, 4537, 4538, 4539, 4540, 4541, 4542, 4543, 4544, 4545, 4546, 4547, 4548, 4549, 4550, 4551, 4552, 4553, 4554, 4555, 4556, 4557, 4558, 4559, 4560, 4561, 4562, 4563, 4564, 4565, 4566, 4567, 4568, 4569, 4570, 4571, 4572, 4573, 4574, 4575, 4576, 4577, 4578, 4579, 4580, 4581, 4582, 4583, 4584, 4585, 4586, 4587, 4588, 4589, 4590, 4591, 4592, 4593, 4594, 4595, 4596, 4597, 4598, 4599, 4600, 4601, 4602, 4603, 4604, 4605, 4606, 4607, 4608, 4609, 4610, 4611, 4612, 4613, 4614, 4615, 4616, 4617, 4618, 4619, 4620, 4621, 4622, 4623, 4624, 4625, 4626, 4627, 4628, 4629, 4630, 4631, 4632, 4633, 4634, 4635, 4636, 4637, 4638, 4639, 4640, 4641, 4642, 4643, 4644, 4645, 4646, 4647, 4648, 4649, 4650, 4651, 4652, 4653, 4654, 4655, 4656, 4657, 4658, 4659, 4660, 4661] }, "bytecode": "", "debug_symbols": "" }, { "name": "read_at", "function_type": "Secret", "is_internal": false, "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::private_context_inputs::PrivateContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "is_contract_deployment", "type": { "kind": "boolean" } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "contract_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "contract_deployment_data", "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "initialization_hash", "type": { "kind": "field" } }, { "name": "contract_class_id", "type": { "kind": "struct", "path": "aztec::protocol_types::contract_class_id::ContractClassId", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "contract_address_salt", "type": { "kind": "field" } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "private_global_variables", "type": { "kind": "struct", "path": "aztec::context::globals::private_global_variables::PrivateGlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] } }] }, "visibility": "private" }, { "name": "index", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "index": [{ "start": 41, "end": 42 }], "inputs": [{ "start": 0, "end": 41 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::private_circuit_public_inputs::PrivateCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "is_contract_deployment", "type": { "kind": "boolean" } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "min_revertible_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "read_requests", "type": { "kind": "array", "length": 32, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "nullifier_key_validation_requests", "type": { "kind": "array", "length": 1, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::nullifier_key_validation_request::NullifierKeyValidationRequest", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "secret_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_private_key::GrumpkinPrivateKey", "fields": [{ "name": "high", "type": { "kind": "field" } }, { "name": "low", "type": { "kind": "field" } }] } }] } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "private_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "end_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }, { "name": "encrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "encrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "contract_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "contract_deployment_data", "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::contract_deployment_data::ContractDeploymentData", "fields": [{ "name": "public_key", "type": { "kind": "struct", "path": "aztec::protocol_types::grumpkin_point::GrumpkinPoint", "fields": [{ "name": "x", "type": { "kind": "field" } }, { "name": "y", "type": { "kind": "field" } }] } }, { "name": "initialization_hash", "type": { "kind": "field" } }, { "name": "contract_class_id", "type": { "kind": "struct", "path": "aztec::protocol_types::contract_class_id::ContractClassId", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "contract_address_salt", "type": { "kind": "field" } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }, { "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }] }, "visibility": "public" }, "return_witnesses": [1651, 1652, 1653, 1654, 1655, 1656, 1657, 1658, 1659, 1660, 1661, 1662, 1663, 1664, 1665, 1666, 1667, 1668, 1669, 1670, 1671, 1672, 1673, 1674, 1675, 1676, 1677, 1678, 1679, 1680, 1681, 1682, 1683, 1684, 1685, 1686, 1687, 1688, 1689, 1690, 1691, 1692, 1693, 1694, 1695, 1696, 1697, 1698, 1699, 1700, 1701, 1702, 1703, 1704, 1705, 1706, 1707, 1708, 1709, 1710, 1711, 1712, 1713, 1714, 1715, 1716, 1717, 1718, 1719, 1720, 1721, 1722, 1723, 1724, 1725, 1726, 1727, 1728, 1729, 1730, 1731, 1732, 1733, 1734, 1735, 1736, 1737, 1738, 1739, 1740, 1741, 1742, 1743, 1744, 1745, 1746, 1747, 1748, 1749, 1750, 1751, 1752, 1753, 1754, 1755, 1756, 1757, 1758, 1759, 1760, 1761, 1762, 1763, 1764, 1765, 1766, 1767, 1768, 1769, 1770, 1771, 1772, 1773, 1774, 1775, 1776, 1777, 1778, 1779, 1780, 1781, 1782, 1783, 1784, 1785, 1786, 1787, 1788, 1789, 1790, 1791, 1792, 1793, 1794, 1795, 1796, 1797, 1798, 1799, 1800, 1801, 1802, 1803, 1804, 1805, 1806, 1807, 1808, 1809, 1810, 1811, 1812, 1813, 1814, 1815, 1816, 1817, 1818, 1819, 1820, 1821, 1822, 1823, 1824, 1825, 1826, 1827, 1828, 1829, 1830, 1831, 1832, 1833, 1834, 1835, 1836, 1837, 1838, 1839, 1840, 1841, 1842, 1843, 1844, 1845, 1846, 1847, 1848, 1849, 1850, 1851, 1852, 1853, 1854, 1855, 1856, 1857, 1858, 1859, 1860, 1861, 1862, 1863, 1864] }, "bytecode": "", "debug_symbols": "" }, { "name": "read_at_pub", "function_type": "Open", "is_internal": false, "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "is_contract_deployment", "type": { "kind": "boolean" } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "contract_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] }, "visibility": "private" }, { "name": "key", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 39 }], "key": [{ "start": 39, "end": 40 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "is_contract_deployment", "type": { "kind": "boolean" } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "contract_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] }, "visibility": "public" }, "return_witnesses": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233] }, "bytecode": "", "debug_symbols": "" }, { "name": "initialize", "function_type": "Open", "is_internal": false, "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "is_contract_deployment", "type": { "kind": "boolean" } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "contract_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 39 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "is_contract_deployment", "type": { "kind": "boolean" } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "contract_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] }, "visibility": "public" }, "return_witnesses": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232] }, "bytecode": "", "debug_symbols": "" }, { "name": "read_leaf_at_pub", "function_type": "Open", "is_internal": false, "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "is_contract_deployment", "type": { "kind": "boolean" } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "contract_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] }, "visibility": "private" }, { "name": "key", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "inputs": [{ "start": 0, "end": 39 }], "key": [{ "start": 39, "end": 40 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "is_contract_deployment", "type": { "kind": "boolean" } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "contract_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] }, "visibility": "public" }, "return_witnesses": [40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233] }, "bytecode": "H4sIAAAAAAAA/+2dB3AUV7aGe4RIHgZEMCbZHnAEg5gZSYiMyNlGYHIagRAeGxAGYcAR44SNcTa2ccTrzTnn5M151xu93vXm4H2v6lW9V/Xq1Qtb796Ze9DPnR4xI/qMb4vTVUdz7t/hfPf07ds9091Xb3meF/FyUzdll3n5E81vMJ+Js5uSAW4rwckZCQlnRUg4u4WEszIknN1DwtkjJJw9Q8LZKyScvUPCeV6AnJqtwjt9Cpo3ypDXoBn7hCynsRDktG/IctovBDmt8sLRR/UPCeeAkHAODAnnoJBwnh8SzsEh4bwgJJxDQsI5NCScw0LCOTwknCNCwnlhSDgvCgnnxSHhjIeEc2RIOEeFhPOSkHBeGhLOy0LCeXlIOK8IkHM0cF5pPkkbYz6vMp9jzec481ltPscTi6lrpSnrm0kpZTXKas28uJlXp2yCsnplE5VNUjZZ2RRlU5VNUzZd2QxT15nKZimbrWyOsrnK5imbr2yBsoXKFilbrGyJsqXKrlZ2jbJlyhqVLVe2Qtm1FstKZauUrVa2RtlaZeuUrVe2QdlGZZuUbVaWVtakbIuyrcqalW1T1qJsu7LrlGWUXa/sBmU7lO1UtktZq7Ldym5UtkfZXmVtVs72KbtJ2X5lByzOg8puVnaLsluV3absdmV3KDuk7E5lh5XdpexuZfcou1fZfcqOKLtf2QPKjip7UNkxZQ8pe1jZI8oeVfaYsseVPaHsSWXHlT2l7GnDQg37GWUnlD2r7Dllzyt7QdmLyl5SdlLZy8reoewVZe9U9i5l71b2HmXvVfY+Ze9X9gFlH1T2IWUfVvYRZR9V9jFlH1f2CWWfVPYpZZ9W9hlln1X2OWWfV/YFZV9U9iVlX1b2FWVfVfaqsq8p+7qybyj7prJvKfu2lfPvKPuusu8p+76ZR7+//UDZD43/I/P5Y/P5E/P5mrXOT5X9zNJ+ruwXlvZLZb8y/uvm89fm8w3z+Rvz+Vvz+ab5/J35/L35/IP5/KP5/JP5/LP5/Iv5/Kv5/Jv5/Lv5fEvZrP45v5fXPsW9gPqa2m1N+l4TJf1K7/RJ56SbmUefcaNXmjJ9Ug67m3J3S+9hyj0svacp97S239uUe1v6AFMeYOmDTHmQpQ825cGWPsSUh1j6MFMeBnrUg99+ja61bkaKgEbttwK07kbrBloP2hxoPY3WHTTa7z1A6220nqCdZ7ReoEWN1hu0PkY7z2h6+zGvva4Nxk+czVSb2KK32zfo7Zp7ef2C523W261i4u0fPG+L3u4ABl7dRgaabfWHdjPIaANAO99oA0EbbLRBoF1gtPNBG2K0waANNdoFoA0z2hDQhhttKGgjjDYMtAuNNhy0i4w2ArSLjXYhaHGjXQTaSKNdDNooo8VBu8RoI0G71GijQKNnhy4B7XKjXQraFUa7DDTqqy8Hja4Rr6A+Vdm/ebCO0StAG039O2hjqG8H7Srq10EbS306aOMgNmnV0NeQNp76d9ASRjvVl3m561E9xb2gjp2a7DFZH/R21Zb1dicFv93svcfJXnuu4xCnHnI1xfgBPoeVxNgRYxSH9Erwl3rt0xTw6VxE3Po8NNFnOfQnWOvEYP5En3rHA673JGCJQ5ni6WNhFnAwtNU6nraaSkhbzX2X9Kx9qie6HupqbXUZcATfVuukrRY/ldxWM177hO2OroW7WlvdBBzBt9X6OrkGKHoqua3u99onbHf0PairtdUdwMHQVidJv1r0VHJbvcdrn7Dd0XfgrtZWbwaO4NvqJKa2WiNt1cvdA/Csfaon+h2mq7XVI8ARfFvdOkmuAYqeSm6rJ732Cdsd/RbY1drqceBgaKvNTG01JW01d3/Ts/apnoaaz67WVl8xvv5N7kfmN9fhoP3YaCNA+4nRLgTtNaNdBPUKvu0310jbL3oque1/1WufsB3TPZGu1vY/BRwMbbVO2mrRU8ltlZ71wH2qp5Hms6u11a8DB0NbrZe2WvRUclulZ4Nwn+qJ7g13tbb6mvH1dcHr5rrgMtB+bbTLQXvDaFeA9hvrWSSt/dZoo0F702hjQPud0a4C7fdGGwvaH4w2DrQ/Gq0atD8ZbTxofzZaArS/GC0J2l+NlgLtb0arAe3vRqsF7S2j1RlNP5dC9+5fNVov4Ip7wT7/QTmgKWKV4+CPB55E8Dw1UYhRDE/Ch+efAeYnBvnBWMng617yvkgCT4qBR2+3JvjtZtNYC/WgOlOsGMwfDXWsZahjBOLStqlcCzzjLdYoLDfeEUbSsF+q9WGsC54xFfFO36dxKNcBI2kp3pylSu1Halnzk0rgviiGpw54GI7BJFM7SOC1a4D9cLbPqPfy9xe2LZo/AXLHcL2bPR7rvNP3G5WRUXiFV3iFV3iFV3iFV3iFV3iFV3iFV3iFV3iFV3iFV3jPzIv3YPDeKS033hFG0mqAh+N39ux722ZbtH19X/5EpD1u8PdnU9lnMugeGD2TQRwUrxKWuaCqne0Fw9bHyx+3SNcnaWlc9zUjEIu2TWWK1wfqg/dZOe7BRyAWbTvhk4uuFTu1lWf/phJ6HBI9zkC1tU/HW/szO86Bpel2+gE4hqoD58vlnMZKoW1Tudrjj11lxa4qY+wBVuwBZYwtOZecu5Rzl57nwuecKoCR4RmvZGef8cJrwG7AyPUsVsIrnjEJjHgdRIwc1zF4zVQMYwoY8XxHjBzPmUQhbjGM+AwYrdcDGDmer8JnuYph9HvmqicwMlzvJzv7/BA+c9ULPgN/vtww1pXAOAEYab3ewMjxPS4KcYthxO92tB6OVzWRibG+BMaJwEjrRYGR4dn8LOPEEhjxWXZarw8zY0fXH5Mg9uTgY2efP8Tn6M+Un8mQH8yVnqIwH7m5nv+fbDFSeQpwkdaXN48dXsdN5s1FCvNOU0f70C8/NF5P1Mt/f0RzT2XK2RSLkcpTgZG0Kt48dng9PIU3FynMO00d7UO//NA4NlGYj9zTmHI21WKk8jRgJG0AM0/U4jlTHv0YBwLjdCbGaSUwTgdGWm8QMM5gYpxeAuMMYKT1zgfGBibGGSUwNgAjrTcYGGcyMTaUwDgTGGm9C4BxFhPjzBIYZwEjrTcEGGczMc4qgXE2MNJ6Q4FxDhPj7BIY5wAjrTcMGOcyMc4pgXEuMNJ6w4FxHhPj3BIY5wEjrTcCGOczMc4rgXE+MNJ6FwLjAibG+SUwLgBGWg/H0FjIxLigBMaFwEjrXQyMi5gYF5bAuAgYF1rzNeNiJsZFJTAuBkZabyQwLmFiXFwC4xJgpPVGAeNSJsYlJTAuBUZa75IQMF4aAsbLQsB4eQgYrwgB45UhYOwdAsargPHq4Bmzv1MsLYHxauBZFjxPbRRiFMODY41fEzxPkqme2feVG822gn5febmXv7+oDjGY3wi5W86QuwjEpW1TGRmFV3iXA89SizUKyy11hJG0a5h5ohaPnjrqD/0Ycb+uYGJcXgLjCmD0a3vXBs+YPc+tKIHxWuBZFThPblyOa0vgWQU8KwPnyZ3ngq9n7ny02svPK8WKwXxsA6sZ6hiBuLRtKiOj8Aqv8Aqv8Aqv8Aqv8Aqv8Aqv8Aqv8Aqv8Aqv8Aqv8J6ZV/OssFijsNwKRxhJW8nME7V49BSxynHw/Ri596swBsKY6iyj5lkbOE/untPqEnjWAs+awHly95yCr2funtM6Lz+vFCsG87ENrGOoYwTi0rapjIzCK7zCK7zCK7zCK7zCK7zCK7zCK7zCK7zCK7zCK7zCe2Ze/I2fWKOw3CpHGElbw8wTtXj0FLHKcfD9GLn3qzAGwpjqLKPm2RA8T/Z93nUl8GwAnvXB8ySZ6pm957TRy88rxYrBfGwDGxnqGIG4tG0qI6PwCu9G4LHPUVFYbq0jjKStZ+aJWjx66qjf8mPk3q8hYEx1llHzbA6cJ/cMxMYSeDYDz6bAeXLno+DrmTsfpb38vFKsGMzHNpBmqGME4tK2qZzmjZ3NQ9MZ8tDkw9JU5jwgY7G8jSHjTYeMV/Ir+ZX8Sn4L8Up+Jb+SX8lvIV7Jr+RX8iv5LcQr+ZX8Sn4lv4V4Jb+SX9fyi/cOiDUKy21whJG0Tcw8UYtHTxGrHAffj5G7HZ4rjGlexlRnGTXP1sB5arL3sppK4NkKPFsC58ndywq+nrl7OM1efl4pVgzmYzttZqhjBOLStqmMjF2VNx0yXmkPvLzpkPFKe+DlTYeMV9oDL286ZLzSHnh50yHjlfbAy5sOGa+0B17edMh4pT3w8qZDxivtgZc3HTJeaQ+8vOmQ8Up74OVNh4xX2gMvbzpkvNIeeHnTIeOV9sDLmw4Zr7QHXt50yHilPfDyph3gxWdciDUKy212hJG0Lcw8UYtHTxGrHAffj5G7HQqjO4xpXsZUZxk1T0vwPNkxd5pL4GkBnm3B8ySZ6pl9Lmy7l59XihWD+dhOtzPUMQJxadtURkbhFd7twGOfR6Ow3FZHGEnbxswTtXj01FG/5cfIvV+FMRDGVGcZNU+GiWd7CTwZ4LkueJ4kUz2z58zrvfy8UqwYzMc2cD1DHSMQl7ZNZWQMEy8eQ8QaheVaHGEk7TrgYWhvJfdFGZ88NgrjOcN4XggYoyFg7AOMDN+9sv1MX4uHyi28+UkFkZ+Y+XS5b+4LPFz7sMriqfLJhav7sJ/5dHkfVgEP1z4cYPEM8MmFq/uwv/l0eR8O4M1jIP39wBAwDgoB4/khYBwcAsYLQsA4JASMQ0PAOCwEjMNDwDgiBIwXhoDxohAwXhwCxngIGEeGgHFUCBi5fxvq6PeCTBliF/qeW47Yhb6flSO25FxyLjmXnEvOJednG1tyLjmXnL/9Oef4TRx/f6cpYpXj4Pv9Ts79/IUwusOYdpQReSLB8SSw7hjrBgfqTgzCGDxjOgSMjSFgTIeAkTmPqc4yap6dTDw3lMCzE3h2BM+TZKpn9pnXXV5+XilWDOZjG9jFUMcIxKVtUxkZw8SLxxCxRmG5jCOMpO0AHq7jqpTjHI+rViaenSXwtAIPx/5iqmf2ON/t5eeVYsVgPh43uxnqGIG4tG0qI2OYePE4J9YoLJdxhJG0XcDDdVyVcpzjcXUjE09rCTw3Ag/H/mKqZ/Y43+Pl55VixWA+Hjd7GOoYgbi0bSojY5h48Tgn1igsl3GEkbTdwMPQ3kr+bnGjTx4bQ8CYDgGj5FHy2OAQo+RR8tjgEGMY8iiMwtggjMIojMIojMLonRvXZukQMDLv61RnGTXP3uB5avF3rWJ49gIPx29fTPXM/mba5uXnlWLFYD62gTaGOkYgLm2bysgovMLbBjwZizUKy2UcYSRtD/AwHM8l9/V7ffLYKIypzjJqnn2B89QmsE0Xw7MPeDjaPU89c+ejm7z8vFKsGMzHNnATQx0jEJe2TWVkLJY3HTJeya/kV/Ir+S3EK/mV/Ep+Jb+FeCW/kl/Jr+S3EK/kV/Ir+ZX8FuKV/Ep+Jb+S30K8kl/Jr+RX8luIV/Ir+ZX8Sn4L8Up+Jb+SX8lvIV7Jr+RX8iv5LcQr+ZX8Sn4lv4V4Jb+l8+Iz3sQaheUyjjCS1gY8+xh4Sn0OfZ9PHhuFMRDGNC9jqrOMmmd/8Dy1eNwVw7MfeDiOTaZ6Zt85OODl55VixWA+ttMDDHWMQFzaNpWRUXiF9wDwZCzWKCyXcYSRtJuAh+F4Lrmv3++Tx0ZhFMZzhzHVWUbNczBwnlQC+69ieA4CD0cfx1PP3LXHzV5+XilWDOZjG7iZoY4RiEvbpjIyFsubDhmv5FfyK/mV/BbilfxKfiW/kt9CvJJfya/kV/JbiFfyK/mV/Ep+C/FKfiW/kt9zK7/4Gz+xRmG5jCOMpB0AHobfw0u+V3LQJ4+NwhgIY5qXMdVZRs1zS+A8NQk87orhuQV4OI5Nnnrm7jnd6uXnlWLFYD6201sZ6hiBuLRtKiNjV+VNh4xX2gMvbzpkvNIeeHnTIeOV9sDLmw4Zr7QHXt50yHilPfDypkPGK+2BlzcdMl5pD7y86ZDxSnvg5U2HjFfaAy9vOmS80h54edMh45X2wMubDhmvtAde3nTIeKU98PKmQ8Yr7YGXNx0yXmkPvLxpB3jxGRdijcJyGUcYSbsZeG5h4Cn1OZxbfPLYKIznDGOalzHVWUbNc1vwPLXYNxTDcxvwcPQfTPXMPhd2u5efV4oVg/nYTm9nqGME4tK2qYyMwiu8twNPxmKNwnIZRxhJuxV4GI7nkvv623zy2CiMqc4yap47guepxTZdDM8dwMPR7pnqmT0fHfLy80qxYjAf28AhhjpGIC5tm8qHQBde4T0EPBmLNQrLZRxhJO124GE4nkvu6+/wyWOjMKY6y6h57gyepxbbdDE8dwLPoeB5kkz1zJ6PDnv5eaVYMZiPbeAwQx0jEJe2TWVkFF7hPQw8GYs1CstlHGEk7RDwMBzPJff1d/rksVEYhdEhxnQIGJnzmOoso+a5i4nnzhJ47gIejn6YqZ7Z66O7vfy8UqwYzMc2cDdDHSMQl7ZNZWQMEy8eQ8QaheUyjjCSdhh4uI6rUo5zPK7uYeK5qwSee4CHY38x1TN7nN/r5eeVYsVgPh439zLUMQJxadtURsYw8eJxTqxRWC7jCCNpdwMP13FVynGOx9V9TDz3lMBzH/Bw7C+memaP8yNefl4pVgzm43FzhKGOEYhL26YyMoaJF49zYo3CchlHGEm7F3gY2lvJ3y3u88ljYwgY0yFglDxKHhscYpQ8Sh4bHGIMQx6FURgbhLEkxutDwCj7WhgbHGXMMDBqnr4WD5UzZYhdZcWuKmPsAVbsAWWMLTmXnEvOJeeSc8n52caWnEvOJeeSc8m55PxsY0vOJeeSc8m55PzcyfmR4GOX/FzZEeDh+C2WqZ4Jvd37zbb+GSCv3sYDkJ+MlacYzL8fcvcAQ+4i3unPfsWhjIzF8lY4wMsUO6X7ld5Qf4qRtvKh4x9lqnuhvu5oGWIX6uvKEbtQX1eO2JJzybnk/NzNOfqVXv6z0HobDxq/uynT8tfDerTMU9HcZz9P9idHbDmGJOeSc8n525XzY8HHzn7nxvORniJWOQ7+MeB5kCEXTPVM6G08BPU4atUnBvPx+9ZDDHWMQFzaNpWRsVje0Q7wMsU+9d34qBUv7ZMPmvC3Aq73tDwrHzQd8eFZ6hjPAsd4ZjnGM9UxngmO8SQc4+nvGM8Ax3hWOcazzDGehY7xzHaMZ5pjPPWO8SQd49ngGM9yx3gWOcYzxzGe6Y7xTHSMJ+UYzwrHeMY4xrPYMZ65jvHMcIxnkmM8NY7xjHOMp8UxnnmO8TQ4xjPZMZ5ax3iqHePZ6hjPWsd4Yo7x9HWMZ4ljPPMd45npGM8Ux3hGO8ZT5xjPMcd4xjvGs9kxnn6O8VQ5xjPWMZ6IAzxRL/+5iCjMPwZahbVuT2X1/dvnP2L0CljnUeN389n2I6A9bPxHfdbFPD0CdWkwfuLspmyeMFYcyhSvD3A86gjPWMd4qhzj6ecYz2bHeMY7xnPMMZ46x3hGO8YzxTGemY7xzHeMZ4ljPH0d44k5xrPWMZ6tjvFUO8ZT6xjPZMd4GhzjmecYT4tjPOMc46lxjGeSYzwzHOOZ6xjPYsd4xjjGs8IxnpRjPBMd45nuGM8cx3gWOcaz3DGeDY7xJB3jqXeMZ5pjPLMd41noGM8yx3hWOcYzwDGe/o7xJBzjmeAYz1THeGY5xrPAMZ6ljvFU+PAwvKPf4fgPx8oQu8qKXVXG2IXGfyhHbMm55Fxyfm7n/LHgY2fHljnmnT5FrHIc/MeAh+N8x1TP7Hiuj5ttBT2e6xOQn2NWnmIw/3HI3RMMuYtAXNo2lZGxWN4KB3g528OTwW/31Fg4lNcnrfxivY4z5bRQH3q8DLEL9aHliF2oDy1HbMm55Fxyfm7n/CnjB3h9kcAYehxZOn88BXGfMX4kwLh6W0+bbdG4tsTxDPDQMsvNA2f9PGl/HLHlmJecS84l529Xzk8EHzv728Nx7/QpYpXj4J8AnqcZcsFUz+w5/Fmox3GrPjGYj98Pn2WoYwTi0rapjIzF8o52gJcp9qnv8seteI/55IOmpcDE9ZuJZ+WDpid8eBY4xjPLMZ6pjvFMcIzniGM8DzvGk3CMZ5VjPMsc41noGM9sx3imOcZzwjGeesd4ko7xbHCMZ7ljPIsc45njGM90x3gmOsaTcoxnhWM8YxzjWewYz1zHeGY4xjPJMZ4ax3jGOcbT4hjPPMd4GhzjmewYT61jPNWO8Wx1jGetYzxLHOOZ7xjPTMd4pjjGU+cYz3jHeDY7xjPWMZ6IAzyFxt2k+SdAq7DWtcfdfN7oFbDOC8bv5rPt50F7zvgv+KyLeXoe6tJg/MTZTdk8Yaw4lCkejrv5giM8Yx3j2ewYz3jHeOoc45niGM9Mx3jmO8azxDGetY7xbHWMp9oxnlrHeCY7xtPgGM88x3haHOMZ5xhPjWM8kxzjmeEYz1zHeBY7xjPGMZ4VjvGkHOOZ6BjPdMd45jjGs8gxnuWO8WxwjCfpGE+9YzwnHOOZ5hjPbMd4FjrGs8wxnlWO8SQc43nYMZ4jjvFMcIxnqmM8sxzjWeAYz1IfHoZ3HLM8dP+Ntk3lE47Eprw0BBc7O47Qi8HXqUbX6SWzrR5m28RP8Sphmfebl5Xp/8SRrif7XileZ70E+Xkx+Pxk36k9yZSfl638EP9JyA8t8zErP6Rjfl6E/LxkLYf1aPCCe8dUb/cdTPl5xcoP8b8D8kPLfNbKD+mYn5OQn5et5XQ96Jj7Z3D1SOh7+GPNtmj7ejySL/Vtj/ti8HGz+TsJ+bsDOPD4o2V+0K+d7dW+7XnaZuZTP6zrs8XSdB2ajB/3gu0XKRZtm8oUTzM2G38LaOTT9/kY8G6DujT51CXNVBeKRdumchoYSWsGHmILsn3oWMususcgX365rAaN/PGgkZ8AjfwkaOSnQCO/BjTya0Ejvw408ieARn49aORPBI18uk+g28QyS+Ns3xSLtk1lbN+0T5aBRmyTgbvJ0t7OttynQF2IbQpwpy1Nc29i4k5b3FTeBIx+dSG2qaCRPw008qeDRv4M0MhvAI38maCRPws08meDRv4c0MifCxr580Ajfz5o5C8AjfyFoJG/CDTyF4NG/hLQyKd7GrotbLI03RY2Gj/uBdsWKBZtm8obgTFtfGwfxLYKuDdamuZez8S90eKm8npg9KsLsa0F7vWWprnXMXGvt7ipvA4Y/epCbBuAe52lae41TNzrLG4qrwFGv7oQ22bgXmNpmns1E/cai5vKq4HRry7EthW4V1ua5l7JxL3a4qbySmD0qwux4TtVLUyMyy3G5WWMXeiaoRyxC533yxG72YrdXMbYaSt2uoyxC52nyhG70LmmHLELnS/KEbtQn1+O2IX6bWnnXbNvOVfb+dvZt7ydx5hcO8i1Q7liy7WDXDuUK7b0a4X7NYbvytnxh1u806eIVY6DvxJ4OH5zYKpn9h71tWZbQd6b09tohPy0WHmKwfxrIXeNDLmLQFzaNpWRMUy8UdC2gEbzq0G7xvjjQbuaWEHbbvwkaNcZPwVaxvg1oF1v/FrQbjD+YtB2GB/vE+40fjNou4y/BLRW46dB2218/J37RuNvAm2P8fF35b3G3wham/Hxd9x9xl8P2k3Gx99N9xt/HWgHjI+/Ux40/hrQbjZ+C2i3GH81aLca/1rQbjN+HWi3G38CaHcYvx60Q8afCNqdxl8O2mHj4728u4y/DLS7jY/3zu4xfhNo9xof71XdZ/ypoB0x/jTQ7jf+dNAeMP4M0I4avwG0B40/E7Rjxp8F2kPGnw0aPY84BzT6P3dzQaP/szoPNBoXfD5o9D/fFoBGz1MsBI3+T9gi0GjccfwducL4K0GjcRGw36g0/jWgdTf+1aD1MP520Hoa/zrQehk/A1pv418P2nnGvwG0qPF3gNbH+DtBo3EtdoFG/4OhFTR6RmU3aPT/Em4Ejf4H9h7Q6H8b7AVtoPHbQBtk/H2gnW/8m0AbbPz9oF1g/AOgDTH+QdCGGv9m0IYZ/xbQhhv/VtBGGP820C40/u2gXWT8O0C72PiHQIsb/07QRhr/MGijjH8XaJcY/27QLjX+PaBdZvx7Qbvc+PeBdoXxj4B2pfHvB43+98ADoNH7ZkdBu8r4D4I21vjHQKN3QR8Cjc6xD4NG59hHQLP/v7nW6Bz7GGh0jn0cNDrH4ngqdI59EjTq+6lf0MefPo5OmjI+Y/SCpZXjOVTatt9zqPTM1AugkY/PZdA6y0F7zlpOT/j/KWg+7dMKH63B5IDhf6jU6Hw/7Z0+dfQ9wu9/hgXIk2SqZ7aJPwn1eNqqTwzm43O3DP9nM9vujlv5pTIyFsv7Ush4X3aAl+t4ikAMenb1OSsXlbDMv5oLgn4WH+aQ1tf9yTPWcthfUL/SwFe/Wl2/J4qoHy3zH1A/pnG+apnqmj0FPg51etGnnjT/v+AZ2v82fhT2CZ3n9PzeVfnzaeqo78X/r/Ro8PXN/t9Eui6gffuoT+yHgTWg2EmMHTFGcUivBL8X/NOxh9vdU3kmbn3MPOazHPrPWuvEYP5jPvWOB1zvR4ElDmWKp9vM/0H7ovbD1X9ivTE/z0F+aP4zoC21ltftm44ZvJY7yZTHF73T82i/UxED7UnQ7Pcu8Vno54Gb5gf4O2QSY+jJHtMOr/dpOfsdggRDPvH7A00d9U34v4QSwecpEQMejJUKvO6pbD9I338qzLbpuxn+D4Oa4OqZJEfHpu9Pug8eCSwUrxKWGWX6Ajq/1gaejxwTxe5utk1MtcBEy1xe1b7sd6CvSgbPlsLvrzR11E7xf87UBM6TSuB352J4cIz84Nty7vtU8PXM3ZehfR/0fZk6L39/UR1iMB/HP69jyB22e9o2lZFReIVXeIVXeIVXeIVXeIVXeIVXeIVXeIVXeIVXeIVXeM/Mq3nscYPwObOEI4yk+d0PCpAngc/24T2YT8N9Fe57YPQswDirzpWwzH/CPZ/PGx/He8Ln+P32JcN9qw73JY4rZY8/xXVPNQKxaNspn1x0rdiprTz7N5XQt8D1c6T2vciEtT/18VptaXhvEscqw3dQUpbGdIx3uG8o3pnGTqP6VYBP96wbPK7+MtdP0Dsc1E9QfIpXCcv8zLpfPYGBievcoLdRD3VK+tST5r8O/eEb8LyX3ffp+f/wmU9TxCrHwafc6fpOCr6+2X1L78nQvp3kE3sKsAYUO4mxI8YoDumV4L8Fz4NNaXdP5Zm4cdw/XA79GmudGMyf6FPveMD1ngQscShTPN1m3oT29Q+4FuA4j2K9MT/VkB+anwJtvLU8PhuBfSrX+S5p5dG+Fol5+ecOzj6+1uIZ45OfMRaP3r8nIu1s5/rzTv8L5w+/6ztadxxwJ8vETSxJH+5I/3Zuzue0KDY9p2Vf7+J5q3v/9mVrjI/XFHjNbl9bcX7/so8Tv3Ff7eO2Anyqc4PF2eAFm2u8lmzw4cRn4vrB/kfWcRZrfeA5zR3f1D/3sHKK1zO0zCCrrU5kYOKpa+5cNQnqlPSpJ80fCu1/OPwfb/u7vZ4/xmc+TR1dozFfL2T3Lb2PTPvW71plGrAGFDuJsekajeKQXgn+6P6n0nJqOT1RnokbxwrG5dCvsdaJwfzJPvWOB1xvvF6MQ5ni6TZzEbQvaj8833ly7X6yT35qIT80fzRo9ndlvEbjfc6642s0vI4kbQLktqZ/+dns37/wtzk87+Jvc/R+e5Djt+vt9gi+zjX47j1NHfVtxNDLa38/P0Ce5Hle+/v3e9ta9zRt37Z8W1NzBNAIt5uFG/FOR6f5FaBVnGG+550+zEAlaDTMQHfQKqy04PAGtHxvLz+lgbZZCnglbD9i4LqZSnQ3kBqql4GiXOu+Vx9z+rc1ff7XTVkfanrsgYFebmyB873c2AF6rAA9NoAeC0C/+6/f9dfv9ut3+fW7+/pd/biXuzYe5eXetdfv1ut36fW781cA46vArfsn/f1Dv/uu333Rx5j+rqm/M+o+SR9r+hjUfZbu3/T1lu4b9Dlen/P0+V33dbpP1uce3SfrsThmmFzP9HJjaeixM/RYGXpsDD0Whh77YoGXG9tCj2Wx2MuN77LUy407ocejWOblxqrQ7wet8HLjnKz0cuO26HFQ9JgpemwWPcaKHo9Fj7+ix2/RY73oMVbSXm6ckS1ebmwMPaaMHmtGj6uix7G4zsuNU6HHpbjBy407sdPLjSuhx5HY7eXGidDjQuz1cuM+7PNy4zrocRz0uA16nAY9LoMeh0GPu6DHWdDjKuhxFA55uXESDnu5cRD0uAd6nAM9roEex+CIlxunQI9LcNTLjTtwzMuNK6DfR3vEy72fpt//etzLvRf4pJd7J1K/D67fWdXvhOl3qPV7YPqdMf3ekn6fSb979ZKXex/rZS/3v1xeUfZOZe9S9m5l71H2XmXvU/Z+ZR9Q9kFlH1L2YWUfUfZRZR9T9nFln1D2SWWfUvZpZZ9R9llln1P2eWVfUPZFZV9S9mVlX1H2VS/X3r6m7OvKvqHsm8q+pezbyr6j7LvKvqfs+8p+oOyHyn6k7MfKfqLsNWU/VfYzZT9X9gtlv1T2K2WvK/u1sjeU/UbZb5W9qex3yn6v7A/K/qjsT8r+rOwvyv6q7G/K/q7sLa99PBHsLI6bzpCup1bk+sT43h2tbfFEfJf627RjR+v+bc3VcZy3N75z3962+N62pj1t8ZY9rTvjyWrcbmOMZ7vvM++o0VghM/fsaToYz+xq3nYg3rqvLd7aEt/Sum9X815c6aOdWekznVnpX/p1YqV/78xKI80FwUhTbmpr27Zzd1u8rVVlcEdbZveOg/H9mbbr4q03bdvTojKNK/+0qhMR/+dsItLgMyPyV25qbi68Xl+z3kBTXtgx48D+RVbM+38EQeevBSsDAA==", "debug_symbols": "" }, { "name": "_assert_current_root", "function_type": "Open", "is_internal": true, "abi": { "parameters": [{ "name": "inputs", "type": { "kind": "struct", "path": "aztec::context::inputs::public_context_inputs::PublicContextInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "is_contract_deployment", "type": { "kind": "boolean" } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "contract_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "public_global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] }, "visibility": "private" }, { "name": "caller", "type": { "kind": "field" }, "visibility": "private" }, { "name": "expected", "type": { "kind": "field" }, "visibility": "private" }], "param_witnesses": { "caller": [{ "start": 39, "end": 40 }], "expected": [{ "start": 40, "end": 41 }], "inputs": [{ "start": 0, "end": 39 }] }, "return_type": { "abi_type": { "kind": "struct", "path": "aztec::protocol_types::abis::public_circuit_public_inputs::PublicCircuitPublicInputs", "fields": [{ "name": "call_context", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::call_context::CallContext", "fields": [{ "name": "msg_sender", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "storage_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "portal_contract_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "function_selector", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::function_selector::FunctionSelector", "fields": [{ "name": "inner", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "is_delegate_call", "type": { "kind": "boolean" } }, { "name": "is_static_call", "type": { "kind": "boolean" } }, { "name": "is_contract_deployment", "type": { "kind": "boolean" } }, { "name": "start_side_effect_counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "args_hash", "type": { "kind": "field" } }, { "name": "return_values", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "contract_storage_update_requests", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_update_request::StorageUpdateRequest", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "new_value", "type": { "kind": "field" } }] } } }, { "name": "contract_storage_reads", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::contrakt::storage_read::StorageRead", "fields": [{ "name": "storage_slot", "type": { "kind": "field" } }, { "name": "current_value", "type": { "kind": "field" } }] } } }, { "name": "public_call_stack_hashes", "type": { "kind": "array", "length": 4, "type": { "kind": "field" } } }, { "name": "new_note_hashes", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffect", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_nullifiers", "type": { "kind": "array", "length": 16, "type": { "kind": "struct", "path": "aztec::protocol_types::abis::side_effect::SideEffectLinkedToNoteHash", "fields": [{ "name": "value", "type": { "kind": "field" } }, { "name": "note_hash", "type": { "kind": "field" } }, { "name": "counter", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } } }, { "name": "new_l2_to_l1_msgs", "type": { "kind": "array", "length": 2, "type": { "kind": "struct", "path": "aztec::protocol_types::messaging::l2_to_l1_message::L2ToL1Message", "fields": [{ "name": "recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "content", "type": { "kind": "field" } }] } } }, { "name": "unencrypted_logs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "unencrypted_log_preimages_length", "type": { "kind": "field" } }, { "name": "historical_header", "type": { "kind": "struct", "path": "aztec::protocol_types::header::Header", "fields": [{ "name": "last_archive", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "content_commitment", "type": { "kind": "struct", "path": "aztec::protocol_types::content_commitment::ContentCommitment", "fields": [{ "name": "tx_tree_height", "type": { "kind": "field" } }, { "name": "txs_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "in_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }, { "name": "out_hash", "type": { "kind": "array", "length": 2, "type": { "kind": "field" } } }] } }, { "name": "state", "type": { "kind": "struct", "path": "aztec::protocol_types::state_reference::StateReference", "fields": [{ "name": "l1_to_l2_message_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "partial", "type": { "kind": "struct", "path": "aztec::protocol_types::partial_state_reference::PartialStateReference", "fields": [{ "name": "note_hash_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "nullifier_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "contract_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }, { "name": "public_data_tree", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::append_only_tree_snapshot::AppendOnlyTreeSnapshot", "fields": [{ "name": "root", "type": { "kind": "field" } }, { "name": "next_available_leaf_index", "type": { "kind": "integer", "sign": "unsigned", "width": 32 } }] } }] } }] } }, { "name": "global_variables", "type": { "kind": "struct", "path": "aztec::protocol_types::abis::global_variables::GlobalVariables", "fields": [{ "name": "chain_id", "type": { "kind": "field" } }, { "name": "version", "type": { "kind": "field" } }, { "name": "block_number", "type": { "kind": "field" } }, { "name": "timestamp", "type": { "kind": "field" } }, { "name": "coinbase", "type": { "kind": "struct", "path": "aztec::protocol_types::address::eth_address::EthAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }, { "name": "fee_recipient", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] } }] } }, { "name": "prover_address", "type": { "kind": "struct", "path": "aztec::protocol_types::address::aztec_address::AztecAddress", "fields": [{ "name": "inner", "type": { "kind": "field" } }] } }] }, "visibility": "public" }, "return_witnesses": [41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234] }, "bytecode": "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", "debug_symbols": "" }], "events": [], "file_map": { "3": { "source": "struct BoundedVec<T, MaxLen> {\n    storage: [T; MaxLen],\n    // TODO: change this to return a u64 as Noir now\n    // uses u64 for indexing\n    len: Field,\n    empty_value: T,\n}\n\nimpl<T, MaxLen> BoundedVec<T, MaxLen> {\n    pub fn new(initial_value: T) -> Self {\n        BoundedVec { storage: [initial_value; MaxLen], len: 0, empty_value: initial_value }\n    }\n\n    pub fn get(mut self: Self, index: Field) -> T {\n        assert(index as u64 < self.len as u64);\n        self.storage[index]\n    }\n\n    pub fn get_unchecked(mut self: Self, index: Field) -> T {\n        self.storage[index]\n    }\n\n    pub fn push(&mut self, elem: T) {\n        assert(self.len as u64 < MaxLen as u64, \"push out of bounds\");\n\n        self.storage[self.len] = elem;\n        self.len += 1;\n    }\n\n    pub fn len(self) -> Field {\n        self.len\n    }\n\n    pub fn max_len(_self: BoundedVec<T, MaxLen>) -> Field {\n        MaxLen\n    }\n\n    // This is a intermediate method, while we don't have an\n    // .extend method\n    pub fn storage(self) -> [T; MaxLen] {\n        self.storage\n    }\n\n    pub fn extend_from_array<Len>(&mut self, array: [T; Len]) {\n        let new_len = self.len + array.len();\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_array out of bounds\");\n        for i in 0..array.len() {\n            self.storage[self.len + i] = array[i];\n        }\n        self.len = new_len;\n    }\n\n    pub fn extend_from_bounded_vec<Len>(&mut self, vec: BoundedVec<T, Len>) {\n        let append_len = vec.len();\n        let new_len = self.len + append_len;\n        assert(new_len as u64 <= MaxLen as u64, \"extend_from_bounded_vec out of bounds\");\n\n        let mut exceeded_len = false;\n        for i in 0..Len {\n            exceeded_len |= i == append_len;\n            if !exceeded_len {\n                self.storage[self.len + (i as Field)] = vec.get_unchecked(i as Field);\n            }\n        }\n        self.len = new_len;\n    }\n\n    pub fn pop(&mut self) -> T {\n        assert(self.len as u64 > 0);\n        self.len -= 1;\n\n        let elem = self.storage[self.len];\n        self.storage[self.len] = self.empty_value;\n        elem\n    }\n\n    pub fn any<Env>(self, predicate: fn[Env](T) -> bool) -> bool {\n        let mut ret = false;\n        let mut exceeded_len = false;\n        for i in 0..MaxLen {\n            exceeded_len |= i == self.len;\n            if (!exceeded_len) {\n                ret |= predicate(self.storage[i]);\n            }\n        }\n        ret\n    }\n}", "path": "std/collections/bounded_vec.nr" }, "19": { "source": "mod bn254;\nuse bn254::lt as bn254_lt;\n\nimpl Field {\n    pub fn to_le_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_le_bits(bit_size)\n    }\n    \n    pub fn to_be_bits(self: Self, bit_size: u32) -> [u1] {\n        crate::assert_constant(bit_size);\n        self.__to_be_bits(bit_size)\n    }\n\n    #[builtin(to_le_bits)]\n    fn __to_le_bits(self, _bit_size: u32) -> [u1] {}\n    \n    #[builtin(to_be_bits)]\n    fn __to_be_bits(self, bit_size: u32) -> [u1] {}\n\n    #[builtin(apply_range_constraint)]\n    fn __assert_max_bit_size(self, bit_size: u32) {}\n\n    pub fn assert_max_bit_size(self: Self, bit_size: u32) {\n        crate::assert_constant(bit_size);\n        assert(bit_size < modulus_num_bits() as u32);\n        self.__assert_max_bit_size(bit_size);\n    }\n\n    pub fn to_le_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_le_radix(256, byte_size)\n    }\n\n    pub fn to_be_bytes(self: Self, byte_size: u32) -> [u8] {\n        self.to_be_radix(256, byte_size)\n    }\n\n\n    pub fn to_le_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_le_radix(radix, result_len)\n    }\n\n    pub fn to_be_radix(self: Self, radix: u32, result_len: u32) -> [u8] {\n        crate::assert_constant(radix);\n        crate::assert_constant(result_len);\n        self.__to_be_radix(radix, result_len)\n    }\n\n\n\n    // decompose `_self` into a `_result_len` vector over the `_radix` basis\n    // `_radix` must be less than 256\n    #[builtin(to_le_radix)]\n    fn __to_le_radix(self, radix: u32, result_len: u32) -> [u8] {}\n    \n    #[builtin(to_be_radix)]\n    fn __to_be_radix(self, radix: u32, result_len: u32) -> [u8] {}\n\n\n    // Returns self to the power of the given exponent value.\n    // Caution: we assume the exponent fits into 32 bits\n    // using a bigger bit size impacts negatively the performance and should be done only if the exponent does not fit in 32 bits\n    pub fn pow_32(self, exponent: Field) -> Field {\n        let mut r: Field = 1;\n        let b = exponent.to_le_bits(32);\n\n        for i in 1..33 {\n            r *= r;\n            r = (b[32-i] as Field) * (r * self) + (1 - b[32-i] as Field) * r;\n        }\n        r\n    }\n\n    // Parity of (prime) Field element, i.e. sgn0(x mod p) = 0 if x ∈ {0, ..., p-1} is even, otherwise sgn0(x mod p) = 1.\n    pub fn sgn0(self) -> u1 {\n        self as u1\n    }\n\n    pub fn lt(self, another: Field) -> bool {\n        if crate::compat::is_bn254() {\n            bn254_lt(self, another)\n        } else {\n            lt_fallback(self, another)\n        }\n    }\n\n}\n\n#[builtin(modulus_num_bits)]\npub fn modulus_num_bits() -> Field {}\n\n#[builtin(modulus_be_bits)]\npub fn modulus_be_bits() -> [u1] {}\n\n#[builtin(modulus_le_bits)]\npub fn modulus_le_bits() -> [u1] {}\n\n#[builtin(modulus_be_bytes)]\npub fn modulus_be_bytes() -> [u8] {}\n\n#[builtin(modulus_le_bytes)]\npub fn modulus_le_bytes() -> [u8] {}\n// Convert a 32 byte array to a field element\npub fn bytes32_to_field(bytes32: [u8; 32]) -> Field {\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (bytes32[15 - i] as Field) * v;\n        low = low + (bytes32[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    low + high * v\n}\n\nfn lt_fallback(x: Field, y: Field) -> bool {\n    let num_bytes = (modulus_num_bits() as u32 + 7) / 8;\n    let x_bytes = x.to_le_bytes(num_bytes);\n    let y_bytes = y.to_le_bytes(num_bytes);\n    let mut x_is_lt = false;\n    let mut done = false;\n    for i in 0..num_bytes {\n        if (!done) {\n            let x_byte = x_bytes[num_bytes - 1 - i] as u8;\n            let y_byte = y_bytes[num_bytes - 1 - i] as u8;\n            let bytes_match = x_byte == y_byte;\n            if !bytes_match {\n                x_is_lt = x_byte < y_byte;\n                done = true;\n            }\n        }\n    }\n    x_is_lt\n}\n\n", "path": "std/field.nr" }, "27": { "source": "mod poseidon;\nmod mimc;\n\n#[foreign(sha256)]\n// docs:start:sha256\npub fn sha256<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:sha256\n{}\n\n#[foreign(blake2s)]\n// docs:start:blake2s\npub fn blake2s<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake2s\n{}\n\n#[foreign(blake3)]\n// docs:start:blake3\npub fn blake3<N>(input: [u8; N]) -> [u8; 32]\n// docs:end:blake3\n{}\n\n// docs:start:pedersen_commitment\nstruct PedersenPoint {\n   x : Field,\n   y : Field,\n}\n\npub fn pedersen_commitment<N>(input: [Field; N]) -> PedersenPoint\n// docs:end:pedersen_commitment\n{\n    pedersen_commitment_with_separator(input, 0)\n}\n\n#[foreign(pedersen_commitment)]\npub fn __pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> [Field; 2] {}\n\npub fn pedersen_commitment_with_separator<N>(input: [Field; N], separator: u32) -> PedersenPoint {\n    let values = __pedersen_commitment_with_separator(input, separator);\n    PedersenPoint { x: values[0], y: values[1] }\n}\n\n// docs:start:pedersen_hash\npub fn pedersen_hash<N>(input: [Field; N]) -> Field\n// docs:end:pedersen_hash\n{\n    pedersen_hash_with_separator(input, 0)\n}\n\n#[foreign(pedersen_hash)]\npub fn pedersen_hash_with_separator<N>(input: [Field; N], separator: u32) -> Field {}\n\npub fn hash_to_field<N>(input: [Field; N]) -> Field {\n    let mut inputs_as_bytes = [];\n\n    for i in 0..N {\n        let input_bytes = input[i].to_le_bytes(32);\n        for i in 0..32 {\n            inputs_as_bytes = inputs_as_bytes.push_back(input_bytes[i]);\n        }\n    }\n\n    let hashed_input = blake2s(inputs_as_bytes);\n    crate::field::bytes32_to_field(hashed_input)\n}\n\n#[foreign(keccak256)]\n// docs:start:keccak256\npub fn keccak256<N>(input: [u8; N], message_size: u32) -> [u8; 32]\n// docs:end:keccak256\n{}\n\n#[foreign(poseidon2_permutation)]\npub fn poseidon2_permutation<N>(_input: [u8; N], _state_length: u32) -> [u8; N] {}\n\n#[foreign(sha256_compression)]\npub fn sha256_compression(_input: [u32; 16], _state: [u32; 8]) -> [u32; 8] {}\n", "path": "std/hash.nr" }, "29": { "source": "// Regular merkle tree means a append-only merkle tree (Explain why this is the only way to have privacy and alternatives if you don't want it)\n// Currently we assume that it is a binary tree, so depth k implies a width of 2^k\n// XXX: In the future we can add an arity parameter\n// Returns the merkle root of the tree from the provided leaf, its hashpath, using a pedersen hash function.\npub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n        current = crate::hash::pedersen_hash([hash_left, hash_right]);\n    }\n    current\n}\n", "path": "std/merkle.nr" }, "31": { "source": "struct Option<T> {\n    _is_some: bool,\n    _value: T,\n}\n\nimpl<T> Option<T> {\n    /// Constructs a None value\n    pub fn none() -> Self {\n        Self { _is_some: false, _value: crate::unsafe::zeroed() }\n    }\n\n    /// Constructs a Some wrapper around the given value\n    pub fn some(_value: T) -> Self {\n        Self { _is_some: true, _value }\n    }\n\n    /// True if this Option is None\n    pub fn is_none(self) -> bool {\n        !self._is_some\n    }\n\n    /// True if this Option is Some\n    pub fn is_some(self) -> bool {\n        self._is_some\n    }\n\n    /// Asserts `self.is_some()` and returns the wrapped value.\n    pub fn unwrap(self) -> T {\n        assert(self._is_some);\n        self._value\n    }\n\n    /// Returns the inner value without asserting `self.is_some()`\n    /// Note that if `self` is `None`, there is no guarantee what value will be returned,\n    /// only that it will be of type `T`.\n    pub fn unwrap_unchecked(self) -> T {\n        self._value\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, returns the given default value.\n    pub fn unwrap_or(self, default: T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default\n        }\n    }\n\n    /// Returns the wrapped value if `self.is_some()`. Otherwise, calls the given function to return\n    /// a default value.\n    pub fn unwrap_or_else<Env>(self, default: fn[Env]() -> T) -> T {\n        if self._is_some {\n            self._value\n        } else {\n            default()\n        }\n    }\n\n    /// Asserts `self.is_some()` with a provided custom message and returns the contained `Some` value\n    fn expect<N, MessageTypes>(self, message: fmtstr<N, MessageTypes>) -> T {\n        assert(self.is_some(), message);\n        self._value\n    }\n\n    /// If self is `Some(x)`, this returns `Some(f(x))`. Otherwise, this returns `None`.\n    pub fn map<U, Env>(self, f: fn[Env](T) -> U) -> Option<U> {\n        if self._is_some {\n            Option::some(f(self._value))\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns the given default value.\n    pub fn map_or<U, Env>(self, default: U, f: fn[Env](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default\n        }\n    }\n\n    /// If self is `Some(x)`, this returns `f(x)`. Otherwise, this returns `default()`.\n    pub fn map_or_else<U, Env1, Env2>(self, default: fn[Env1]() -> U, f: fn[Env2](T) -> U) -> U {\n        if self._is_some {\n            f(self._value)\n        } else {\n            default()\n        }\n    }\n\n    /// Returns None if self is None. Otherwise, this returns `other`.\n    pub fn and(self, other: Self) -> Self {\n        if self.is_none() {\n            Option::none()\n        } else {\n            other\n        }\n    }\n\n    /// If self is None, this returns None. Otherwise, this calls the given function\n    /// with the Some value contained within self, and returns the result of that call.\n    ///\n    /// In some languages this function is called `flat_map` or `bind`.\n    pub fn and_then<U, Env>(self, f: fn[Env](T) -> Option<U>) -> Option<U> {\n        if self._is_some {\n            f(self._value)\n        } else {\n            Option::none()\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `other`.\n    pub fn or(self, other: Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            other\n        }\n    }\n\n    /// If self is Some, return self. Otherwise, return `default()`.\n    pub fn or_else<U, Env>(self, default: fn[Env]() -> Self) -> Self {\n        if self._is_some {\n            self\n        } else {\n            default()\n        }\n    }\n\n    // If only one of the two Options is Some, return that option.\n    // Otherwise, if both options are Some or both are None, None is returned.\n    pub fn xor(self, other: Self) -> Self {\n        if self._is_some {\n            if other._is_some {\n                Option::none()\n            } else {\n                self\n            }\n        } else if other._is_some {\n            other\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Returns `Some(x)` if self is `Some(x)` and `predicate(x)` is true.\n    /// Otherwise, this returns `None`\n    pub fn filter<Env>(self, predicate: fn[Env](T) -> bool) -> Self {\n        if self._is_some {\n            if predicate(self._value) {\n                self\n            } else {\n                Option::none()\n            }\n        } else {\n            Option::none()\n        }\n    }\n\n    /// Flattens an Option<Option<T>> into a Option<T>.\n    /// This returns None if the outer Option is None. Otherwise, this returns the inner Option.\n    pub fn flatten(option: Option<Option<T>>) -> Option<T> {\n        if option._is_some {\n            option._value\n        } else {\n            Option::none()\n        }\n    }\n}\n", "path": "std/option.nr" }, "50": { "source": "use crate::{context::PrivateContext, note::{note_header::NoteHeader, note_interface::NoteInterface}};\n\nuse dep::protocol_types::{\n    address::AztecAddress,\n    constants::{GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__SILOED_NOTE_HASH},\n    hash::pedersen_hash, utils::arr_copy_slice\n};\n\nfn compute_siloed_hash(contract_address: AztecAddress, inner_note_hash: Field) -> Field {\n    let inputs = [contract_address.to_field(), inner_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__SILOED_NOTE_HASH)\n}\n\nfn compute_unique_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    let inputs = [nonce, siloed_note_hash];\n    pedersen_hash(inputs, GENERATOR_INDEX__UNIQUE_NOTE_HASH)\n}\n\nfn compute_inner_note_hash<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    let note_hash = note.compute_note_content_hash();\n\n    // TODO(#1205) Do we need a generator index here?\n    pedersen_hash([header.storage_slot, note_hash], 0)\n}\n\nfn compute_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let inner_note_hash = compute_inner_note_hash(note_with_header);\n\n    compute_siloed_hash(header.contract_address, inner_note_hash)\n}\n\nfn compute_unique_siloed_note_hash<Note, N>(note_with_header: Note) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n\n    let siloed_note_hash = compute_siloed_note_hash(note_with_header);\n\n    compute_unique_hash(header.nonce, siloed_note_hash)\n}\n\npub fn compute_siloed_nullifier<Note, N>(\n    note_with_header: Note,\n    context: &mut PrivateContext\n) -> Field where Note: NoteInterface<N> {\n    let header = note_with_header.get_header();\n    let inner_nullifier = note_with_header.compute_nullifier(context);\n\n    let input = [header.contract_address.to_field(), inner_nullifier];\n    pedersen_hash(input, GENERATOR_INDEX__OUTER_NULLIFIER)\n}\n\npub fn compute_note_hash_for_insertion<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    compute_inner_note_hash(note)\n}\n\npub fn compute_note_hash_for_consumption<Note, N>(note: Note) -> Field where Note: NoteInterface<N> {\n    let header = note.get_header();\n    // There are 3 cases for reading a note intended for consumption:\n    // 1. The note was inserted in this transaction, and is transient.\n    // 2. The note was inserted in a previous transaction, and was inserted in public\n    // 3. The note was inserted in a previous transaction, and was inserted in private\n\n    if (header.is_transient) {\n        // If a note is transient, we just read the inner_note_hash (kernel will silo by contract address).\n        compute_inner_note_hash(note)\n    } else if (header.nonce == 0) {\n        // If not transient and nonce is zero, that means we are reading a public note.\n        compute_siloed_note_hash(note)\n    } else {\n        // When nonce is nonzero, that means we are reading a settled note (from tree) created in a\n        // previous TX. So we need the unique_siloed_note_hash which has already been hashed with\n        // contract address and then nonce. This hash will match the existing leaf in the private\n        // data tree, so the kernel can just perform a membership check directly on this hash/leaf.\n        compute_unique_siloed_note_hash(note)\n    }\n}\n\npub fn compute_note_hash_and_nullifier<T, N, S>(\n    deserialize_content: fn([Field; N]) -> T,\n    note_header: NoteHeader,\n    serialized_note: [Field; S]\n) -> [Field; 4] where T: NoteInterface<N> {\n    let mut note = deserialize_content(arr_copy_slice(serialized_note, [0; N], 0));\n    // TODO: change this to note.setHeader(header) once https://github.com/noir-lang/noir/issues/4095 is fixed\n    T::set_header((&mut note), note_header);\n\n    let inner_note_hash = compute_inner_note_hash(note);\n\n    let siloed_note_hash = compute_siloed_hash(note_header.contract_address, inner_note_hash);\n\n    let unique_siloed_note_hash = compute_unique_hash(note_header.nonce, siloed_note_hash);\n\n    let inner_nullifier = note.compute_nullifier_without_context();\n\n    [inner_note_hash, siloed_note_hash, unique_siloed_note_hash, inner_nullifier]\n}\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/note/utils.nr" }, "58": { "source": "use crate::{\n    context::inputs::PublicContextInputs, messaging::process_l1_to_l2_message,\n    oracle::{arguments, public_call::call_public_function_internal}\n};\nuse dep::protocol_types::{\n    abis::{\n    global_variables::GlobalVariables, function_selector::FunctionSelector,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, MAX_READ_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::hash_args, header::Header, messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader\n};\n\nstruct PublicContext {\n    inputs: PublicContextInputs,\n    side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    contract_storage_update_requests: BoundedVec<StorageUpdateRequest, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL>,\n    contract_storage_reads: BoundedVec<StorageRead, MAX_PUBLIC_DATA_READS_PER_CALL>,\n    public_call_stack_hashes: BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    new_l2_to_l1_msgs: BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n\n    unencrypted_logs_hash: BoundedVec<Field, NUM_FIELDS_PER_SHA256>,\n    unencrypted_logs_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n    prover_address: AztecAddress,\n}\n\nimpl PublicContext {\n    pub fn new(inputs: PublicContextInputs, args_hash: Field) -> PublicContext {\n        let empty_storage_read = StorageRead::empty();\n        let empty_storage_update = StorageUpdateRequest::empty();\n        PublicContext {\n            inputs,\n            side_effect_counter: inputs.call_context.start_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(0),\n            contract_storage_update_requests: BoundedVec::new(empty_storage_update),\n            contract_storage_reads: BoundedVec::new(empty_storage_read),\n            public_call_stack_hashes: BoundedVec::new(0),\n            new_note_hashes: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n            new_l2_to_l1_msgs: BoundedVec::new(L2ToL1Message::empty()),\n            unencrypted_logs_hash: BoundedVec::new(0),\n            unencrypted_logs_preimages_length: 0,\n            historical_header: inputs.historical_header,\n            prover_address: AztecAddress::zero() // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.public_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.public_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    pub fn block_number(self) -> Field {\n        self.inputs.public_global_variables.block_number\n    }\n\n    pub fn timestamp(self) -> Field {\n        self.inputs.public_global_variables.timestamp\n    }\n\n    pub fn coinbase(self) -> EthAddress {\n        self.inputs.public_global_variables.coinbase\n    }\n\n    pub fn fee_recipient(self) -> AztecAddress {\n        self.inputs.public_global_variables.fee_recipient\n    }\n\n    pub fn finish(self) -> PublicCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_log_preimages_length = 0;\n\n        // Compute the public call stack hashes\n        let pub_circuit_pub_inputs = PublicCircuitPublicInputs {\n            call_context: self.inputs.call_context, // Done\n            args_hash: self.args_hash, // Done\n            contract_storage_update_requests: self.contract_storage_update_requests.storage,\n            contract_storage_reads: self.contract_storage_reads.storage,\n            return_values: self.return_values.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            unencrypted_logs_hash,\n            unencrypted_log_preimages_length,\n            historical_header: self.inputs.historical_header,\n            prover_address: self.prover_address\n        };\n        pub_circuit_pub_inputs\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, _nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash {\n            value: nullifier,\n            note_hash: 0, // cannot nullify pending notes in public context\n            counter: self.side_effect_counter\n        };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field, sender: EthAddress) {\n        let this = (*self).this_address();\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            this,\n            sender,\n            self.chain_id(),\n            self.version(),\n            msg_key,\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        call_public_function_internal(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        _self: Self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        call_public_function_internal(contract_address, function_selector, 0, false, true)\n    }\n}\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/context/public_context.nr" }, "60": { "source": "use crate::{\n    context::inputs::PrivateContextInputs, key::nullifier_key::validate_nullifier_key_against_address,\n    messaging::process_l1_to_l2_message,\n    oracle::{\n    arguments, call_private_function::call_private_function_internal,\n    enqueue_public_function_call::enqueue_public_function_call_internal, context::get_portal_address,\n    header::get_header_at, nullifier_key::{get_nullifier_key_pair, NullifierKeyPair},\n    debug_log::debug_log\n}\n};\nuse dep::protocol_types::{\n    abis::{\n    call_context::CallContext, function_data::FunctionData, function_selector::FunctionSelector,\n    nullifier_key_validation_request::NullifierKeyValidationRequest,\n    private_call_stack_item::PrivateCallStackItem,\n    private_circuit_public_inputs::PrivateCircuitPublicInputs,\n    public_call_stack_item::PublicCallStackItem,\n    public_circuit_public_inputs::PublicCircuitPublicInputs,\n    side_effect::{SideEffect, SideEffectLinkedToNoteHash}\n},\n    address::{AztecAddress, EthAddress},\n    constants::{\n    MAX_NEW_NOTE_HASHES_PER_CALL, MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL,\n    MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL,\n    MAX_PUBLIC_DATA_READS_PER_CALL, MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL,\n    MAX_READ_REQUESTS_PER_CALL, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256,\n    RETURN_VALUES_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    grumpkin_private_key::GrumpkinPrivateKey, hash::hash_args, header::Header,\n    messaging::l2_to_l1_message::L2ToL1Message, utils::reader::Reader\n};\nuse dep::std::option::Option;\n\n// TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n// use dep::std::collections::vec::Vec;\n\n// When finished, one can call .finish() to convert back to the abi\nstruct PrivateContext {\n    // docs:start:private-context\n    inputs: PrivateContextInputs,\n    side_effect_counter: u32,\n\n    min_revertible_side_effect_counter: u32,\n\n    args_hash : Field,\n    return_values : BoundedVec<Field, RETURN_VALUES_LENGTH>,\n\n    read_requests: BoundedVec<SideEffect, MAX_READ_REQUESTS_PER_CALL>,\n    nullifier_key_validation_requests: BoundedVec<NullifierKeyValidationRequest, MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL>,\n\n    new_note_hashes: BoundedVec<SideEffect, MAX_NEW_NOTE_HASHES_PER_CALL>,\n    new_nullifiers: BoundedVec<SideEffectLinkedToNoteHash, MAX_NEW_NULLIFIERS_PER_CALL>,\n\n    private_call_stack_hashes : BoundedVec<Field, MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL>,\n    public_call_stack_hashes : BoundedVec<Field, MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL>,\n    new_l2_to_l1_msgs : BoundedVec<L2ToL1Message, MAX_NEW_L2_TO_L1_MSGS_PER_CALL>,\n    // docs:end:private-context\n\n    // Header of a block whose state is used during private execution (not the block the transaction is included in).\n    historical_header: Header,\n\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    // encrypted_logs_preimages: Vec<Field>,\n    // unencrypted_logs_preimages: Vec<Field>,\n\n    nullifier_key: Option<NullifierKeyPair>,\n}\n\nimpl PrivateContext {\n    pub fn new(inputs: PrivateContextInputs, args_hash: Field) -> PrivateContext {\n        let side_effect_counter = inputs.call_context.start_side_effect_counter;\n        let mut min_revertible_side_effect_counter = 0;\n        // Note. The side effect counter is 2 when this is the initial call\n        if (side_effect_counter == 2) {\n            min_revertible_side_effect_counter = side_effect_counter;\n        }\n        PrivateContext {\n            inputs,\n            side_effect_counter,\n            min_revertible_side_effect_counter,\n            args_hash,\n            return_values: BoundedVec::new(0),\n            read_requests: BoundedVec::new(SideEffect::empty()),\n            nullifier_key_validation_requests: BoundedVec::new(NullifierKeyValidationRequest::empty()),\n            new_note_hashes: BoundedVec::new(SideEffect::empty()),\n            new_nullifiers: BoundedVec::new(SideEffectLinkedToNoteHash::empty()),\n            historical_header: inputs.historical_header,\n            private_call_stack_hashes: BoundedVec::new(0),\n            public_call_stack_hashes: BoundedVec::new(0),\n            new_l2_to_l1_msgs: BoundedVec::new(L2ToL1Message::empty()),\n            // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n            // encrypted_logs_preimages: Vec::new(),\n            // unencrypted_logs_preimages: Vec::new(),\n            nullifier_key: Option::none()\n        }\n    }\n\n    pub fn msg_sender(self) -> AztecAddress {\n        self.inputs.call_context.msg_sender\n    }\n\n    pub fn this_address(self) -> AztecAddress {\n        self.inputs.call_context.storage_contract_address\n    }\n\n    pub fn this_portal_address(self) -> EthAddress {\n        self.inputs.call_context.portal_contract_address\n    }\n\n    pub fn chain_id(self) -> Field {\n        self.inputs.private_global_variables.chain_id\n    }\n\n    pub fn version(self) -> Field {\n        self.inputs.private_global_variables.version\n    }\n\n    pub fn selector(self) -> FunctionSelector {\n        self.inputs.call_context.function_selector\n    }\n\n    // Returns the header of a block whose state is used during private execution (not the block the transaction is\n    // included in).\n    pub fn get_header(self) -> Header {\n        self.historical_header\n    }\n\n    // Returns the header of an arbitrary block whose block number is less than or equal to the block number\n    // of historical header.\n    pub fn get_header_at(self, block_number: u32) -> Header {\n        get_header_at(block_number, self)\n    }\n\n    pub fn finish(self) -> PrivateCircuitPublicInputs {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n        let encrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let unencrypted_logs_hash = [0; NUM_FIELDS_PER_SHA256];\n        let encrypted_log_preimages_length = 0;\n        let unencrypted_log_preimages_length = 0;\n\n        let priv_circuit_pub_inputs = PrivateCircuitPublicInputs {\n            call_context: self.inputs.call_context,\n            args_hash: self.args_hash,\n            return_values: self.return_values.storage,\n            // TODO(fees): start this from 0 and test the following:\n            // - in the private circuit init that it gets set correctly\n            // - in the private circuit inner that it remains 0\n            // I've had to initialize the counter here so that it would work for contract deployments\n            // the above checks should be doable after we figure out fee payments for contract deployments\n            min_revertible_side_effect_counter: self.min_revertible_side_effect_counter,\n            read_requests: self.read_requests.storage,\n            nullifier_key_validation_requests: self.nullifier_key_validation_requests.storage,\n            new_note_hashes: self.new_note_hashes.storage,\n            new_nullifiers: self.new_nullifiers.storage,\n            private_call_stack_hashes: self.private_call_stack_hashes.storage,\n            public_call_stack_hashes: self.public_call_stack_hashes.storage,\n            new_l2_to_l1_msgs: self.new_l2_to_l1_msgs.storage,\n            end_side_effect_counter: self.side_effect_counter,\n            encrypted_logs_hash,\n            unencrypted_logs_hash,\n            encrypted_log_preimages_length,\n            unencrypted_log_preimages_length,\n            historical_header: self.historical_header,\n            contract_deployment_data: self.inputs.contract_deployment_data,\n            chain_id: self.inputs.private_global_variables.chain_id,\n            version: self.inputs.private_global_variables.version\n        };\n        priv_circuit_pub_inputs\n    }\n\n    pub fn capture_min_revertible_side_effect_counter(&mut self) {\n        self.min_revertible_side_effect_counter = self.side_effect_counter;\n    }\n\n    pub fn push_read_request(&mut self, read_request: Field) {\n        let side_effect = SideEffect { value: read_request, counter: self.side_effect_counter };\n        self.read_requests.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_note_hash(&mut self, note_hash: Field) {\n        let side_effect = SideEffect { value: note_hash, counter: self.side_effect_counter };\n        self.new_note_hashes.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn push_new_nullifier(&mut self, nullifier: Field, nullified_commitment: Field) {\n        let side_effect = SideEffectLinkedToNoteHash { value: nullifier, note_hash: nullified_commitment, counter: self.side_effect_counter };\n        self.new_nullifiers.push(side_effect);\n        self.side_effect_counter = self.side_effect_counter + 1;\n    }\n\n    pub fn request_nullifier_secret_key(&mut self, account: AztecAddress) -> GrumpkinPrivateKey {\n        let key_pair = if self.nullifier_key.is_none() {\n            let key_pair = get_nullifier_key_pair(account);\n            validate_nullifier_key_against_address(account, key_pair.public_key);\n            let request = NullifierKeyValidationRequest { public_key: key_pair.public_key, secret_key: key_pair.secret_key };\n            self.nullifier_key_validation_requests.push(request);\n            self.nullifier_key = Option::some(key_pair);\n            key_pair\n        } else {\n            let key_pair = self.nullifier_key.unwrap_unchecked();\n            // If MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL is larger than 1, need to update the way the key pair is cached.\n            assert(MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL == 1);\n            assert(\n                key_pair.account == account, \"Cannot query nullifier key for more than one account per call\"\n            );\n            key_pair\n        };\n        key_pair.secret_key\n    }\n\n    // docs:start:context_message_portal\n    pub fn message_portal(&mut self, recipient: EthAddress, content: Field) {\n        // docs:end:context_message_portal\n        let message = L2ToL1Message { recipient, content };\n        self.new_l2_to_l1_msgs.push(message);\n    }\n\n    // docs:start:context_consume_l1_to_l2_message\n    // docs:start:consume_l1_to_l2_message\n    pub fn consume_l1_to_l2_message(&mut self, msg_key: Field, content: Field, secret: Field, sender: EthAddress) {\n        // docs:end:context_consume_l1_to_l2_message\n        let nullifier = process_l1_to_l2_message(\n            self.historical_header.state.l1_to_l2_message_tree.root,\n            self.this_address(),\n            sender,\n            self.chain_id(),\n            self.version(),\n            msg_key,\n            content,\n            secret\n        );\n\n        // Push nullifier (and the \"commitment\" corresponding to this can be \"empty\")\n        self.push_new_nullifier(nullifier, 0)\n    }\n    // docs:end:consume_l1_to_l2_message\n\n    pub fn accumulate_encrypted_logs<N>(&mut self, log: [Field; N]) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn accumulate_unencrypted_logs<T>(&mut self, log: T) {\n        let _void1 = self.inputs;\n        let _void2 = log;\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/1165)\n    }\n\n    pub fn call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_private_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_private_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_private_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_private_function_no_args<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        self.call_private_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_private_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) -> [Field; RETURN_VALUES_LENGTH] {\n        let item = call_private_function_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        self.side_effect_counter = item.public_inputs.end_side_effect_counter + 1;\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.private_call_stack_hashes.push(item.hash());\n\n        item.public_inputs.return_values\n    }\n\n    pub fn call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, false)\n    }\n\n    pub fn static_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, true, false)\n    }\n\n    pub fn delegate_call_public_function<ARGS_COUNT>(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args: [Field; ARGS_COUNT]\n    ) {\n        let args_hash = hash_args(args);\n        assert(args_hash == arguments::pack_arguments(args));\n        self.call_public_function_with_packed_args(contract_address, function_selector, args_hash, false, true)\n    }\n\n    pub fn call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, false)\n    }\n\n    pub fn static_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, true, false)\n    }\n\n    pub fn delegate_call_public_function_no_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector\n    ) {\n        self.call_public_function_with_packed_args(contract_address, function_selector, 0, false, true)\n    }\n\n    pub fn call_public_function_with_packed_args(\n        &mut self,\n        contract_address: AztecAddress,\n        function_selector: FunctionSelector,\n        args_hash: Field,\n        is_static_call: bool,\n        is_delegate_call: bool\n    ) {\n        let fields = enqueue_public_function_call_internal(\n            contract_address,\n            function_selector,\n            args_hash,\n            self.side_effect_counter,\n            is_static_call,\n            is_delegate_call\n        );\n\n        let mut reader = Reader::new(fields);\n\n        // Note: Not using PublicCirclePublicInputs::deserialize here, because everything below args_hash is 0 and\n        // there is no more data in fields because there is only ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE fields!\n        let item = PublicCallStackItem {\n            contract_address: AztecAddress::from_field(reader.read()),\n            function_data: reader.read_struct(FunctionData::deserialize),\n            public_inputs: PublicCircuitPublicInputs {\n                call_context: reader.read_struct(CallContext::deserialize),\n                args_hash: reader.read(),\n                return_values: [0; RETURN_VALUES_LENGTH],\n                contract_storage_update_requests: [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n                contract_storage_reads: [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL],\n                public_call_stack_hashes: [0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n                new_note_hashes: [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL],\n                new_nullifiers: [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL],\n                new_l2_to_l1_msgs: [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n                unencrypted_logs_hash: [0; NUM_FIELDS_PER_SHA256],\n                unencrypted_log_preimages_length: 0,\n                historical_header: Header::empty(),\n                prover_address: AztecAddress::zero()\n            },\n            is_execution_request: true\n        };\n        reader.finish();\n\n        assert(contract_address.eq(item.contract_address));\n        assert(function_selector.eq(item.function_data.selector));\n\n        assert_eq(item.public_inputs.call_context.start_side_effect_counter, self.side_effect_counter);\n        // We increment the sideffect counter by one, to account for the call itself being a side effect.\n        self.side_effect_counter = self.side_effect_counter + 1;\n\n        assert(args_hash == item.public_inputs.args_hash);\n\n        // Assert that the call context of the enqueued call generated by the oracle matches our request.\n        assert(item.public_inputs.call_context.is_delegate_call == is_delegate_call);\n        assert(item.public_inputs.call_context.is_static_call == is_static_call);\n        assert(item.public_inputs.call_context.is_contract_deployment == false);\n\n        if (is_delegate_call) {\n            // For delegate calls, we also constrain the execution context address for the nested call to be equal to our address.\n            assert(\n                item.public_inputs.call_context.storage_contract_address.eq(self.inputs.call_context.storage_contract_address)\n            );\n            assert(item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.msg_sender));\n        } else {\n            // For non-delegate calls, we also constrain the execution context address for the nested call to be equal to the address we called.\n            assert(item.public_inputs.call_context.storage_contract_address.eq(contract_address));\n            assert(\n                item.public_inputs.call_context.msg_sender.eq(self.inputs.call_context.storage_contract_address)\n            );\n        }\n\n        self.public_call_stack_hashes.push(item.hash());\n    }\n}\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/context/private_context.nr" }, "67": { "source": "use dep::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n\n// contract_address + \n// args_hash +\n// crate::abi::FUNCTION_DATA_SIZE +\n// crate::abi::CALL_CONTEXT_SIZE\n// = 2 + 4 + 8\nglobal ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE: Field = 14;\n\n#[oracle(enqueuePublicFunctionCall)]\nfn enqueue_public_function_call_oracle(\n    _contract_address: AztecAddress,\n    _function_selector: FunctionSelector,\n    _args_hash: Field,\n    _side_effect_counter: u32,\n    _is_static_call: bool,\n    _is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {}\n\nunconstrained pub fn enqueue_public_function_call_internal(\n    contract_address: AztecAddress,\n    function_selector: FunctionSelector,\n    args_hash: Field,\n    side_effect_counter: u32,\n    is_static_call: bool,\n    is_delegate_call: bool\n) -> [Field; ENQUEUE_PUBLIC_FUNCTION_CALL_RETURN_SIZE] {\n    enqueue_public_function_call_oracle(\n        contract_address,\n        function_selector,\n        args_hash,\n        side_effect_counter,\n        is_static_call,\n        is_delegate_call\n    )\n}\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/enqueue_public_function_call.nr" }, "68": { "source": "#[oracle(packArguments)]\nfn pack_arguments_oracle<N>(_args: [Field; N]) -> Field {}\n\n// TODO: explain what this does.\nunconstrained pub fn pack_arguments<N>(args: [Field; N]) -> Field {\n    pack_arguments_oracle(args)\n}\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/arguments.nr" }, "71": { "source": "use dep::protocol_types::traits::{Deserialize, Serialize};\n\n#[oracle(storageRead)]\nfn storage_read_oracle<N>(_storage_slot: Field, _number_of_elements: Field) -> [Field; N] {}\n\nunconstrained fn storage_read_oracle_wrapper<N>(_storage_slot: Field) -> [Field; N] {\n    storage_read_oracle(_storage_slot, N)\n}\n\npub fn storage_read<N>(storage_slot: Field) -> [Field; N] {\n    storage_read_oracle_wrapper(storage_slot)\n}\n\n#[oracle(storageWrite)]\nfn storage_write_oracle<N>(_storage_slot: Field, _values: [Field; N]) -> [Field; N] {}\n\nunconstrained pub fn storage_write<N>(storage_slot: Field, fields: [Field; N]) {\n    let _hash = storage_write_oracle(storage_slot, fields);\n}\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/storage.nr" }, "78": { "source": "use dep::protocol_types::{address::AztecAddress, grumpkin_point::GrumpkinPoint, grumpkin_private_key::GrumpkinPrivateKey};\n\nstruct NullifierKeyPair {\n    account: AztecAddress,\n    public_key: GrumpkinPoint,\n    secret_key: GrumpkinPrivateKey,\n}\n\n#[oracle(getNullifierKeyPair)]\nfn get_nullifier_key_pair_oracle(_account: AztecAddress) -> [Field; 4] {}\n\nunconstrained fn get_nullifier_key_pair_internal(account: AztecAddress) -> NullifierKeyPair {\n    let result = get_nullifier_key_pair_oracle(account);\n    NullifierKeyPair {\n        account,\n        public_key: GrumpkinPoint { x: result[0], y: result[1] },\n        secret_key: GrumpkinPrivateKey { high: result[2], low: result[3] }\n    }\n}\n\npub fn get_nullifier_key_pair(account: AztecAddress) -> NullifierKeyPair {\n    get_nullifier_key_pair_internal(account)\n}\n\npub fn get_nullifier_secret_key(account: AztecAddress) -> GrumpkinPrivateKey {\n    get_nullifier_key_pair_internal(account).secret_key\n}\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/oracle/nullifier_key.nr" }, "85": { "source": "mod globals;\nmod inputs;\n\nmod private_context;\nmod public_context;\nmod avm;\n\nuse private_context::PrivateContext;\nuse public_context::PublicContext;\nuse avm::AVMContext;\n\nstruct Context {\n    private: Option<&mut PrivateContext>,\n    public: Option<&mut PublicContext>,\n}\n\nimpl Context {\n    pub fn private(context: &mut PrivateContext) -> Context {\n        Context { private: Option::some(context), public: Option::none() }\n    }\n\n    pub fn public(context: &mut PublicContext) -> Context {\n        Context { public: Option::some(context), private: Option::none() }\n    }\n\n    pub fn none() -> Context {\n        Context { public: Option::none(), private: Option::none() }\n    }\n}\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/context.nr" }, "100": { "source": "use crate::context::{PrivateContext, PublicContext, Context};\nuse dep::std::option::Option;\nuse dep::protocol_types::{hash::pedersen_hash, traits::{ToField}};\nuse crate::state_vars::storage::Storage;\n\n// docs:start:map\nstruct Map<K, V> {\n    context: Context,\n    storage_slot: Field,\n    state_var_constructor: fn(Context, Field) -> V,\n}\n// docs:end:map\n\nimpl<K, T> Storage<T> for Map<K, T> {}\n\nimpl<K, V> Map<K, V> {\n    // docs:start:new\n    pub fn new(\n        context: Context,\n        storage_slot: Field,\n        state_var_constructor: fn(Context, Field) -> V\n    ) -> Self {\n        assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n        Map { context, storage_slot, state_var_constructor }\n    }\n    // docs:end:new\n\n    // docs:start:at\n    pub fn at(self, key: K) -> V where K: ToField {\n        // TODO(#1204): use a generator index for the storage slot\n        let derived_storage_slot = pedersen_hash([self.storage_slot, key.to_field()], 0);\n\n        let state_var_constructor = self.state_var_constructor;\n        state_var_constructor(self.context, derived_storage_slot)\n    }\n    // docs:end:at\n}\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/state_vars/map.nr" }, "106": { "source": "use dep::protocol_types::{hash::hash_args, traits::Hash};\n\nstruct Hasher {\n    fields: [Field],\n}\n\nimpl Hash for Hasher {\n    fn hash(self) -> Field {\n        hash_args(self.fields)\n    }\n}\n\nimpl Hasher {\n    pub fn new() -> Self {\n        Self { fields: [] }\n    }\n\n    pub fn add(&mut self, field: Field) {\n        self.fields = self.fields.push_back(field);\n    }\n\n    pub fn add_multiple<N>(&mut self, fields: [Field; N]) {\n        for i in 0..N {\n            self.fields = self.fields.push_back(fields[i]);\n        }\n    }\n}\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/aztec/src/hasher.nr" }, "121": { "source": "use crate::{\n    abis::function_selector::FunctionSelector, address::{EthAddress, AztecAddress},\n    constants::{CALL_CONTEXT_LENGTH, GENERATOR_INDEX__CALL_CONTEXT}, hash::pedersen_hash,\n    traits::{Deserialize, Hash, Serialize}\n};\n\n// docs:start:call-context\nstruct CallContext {\n    msg_sender : AztecAddress,\n    storage_contract_address : AztecAddress,\n    portal_contract_address : EthAddress,\n\n    function_selector : FunctionSelector,\n\n    is_delegate_call : bool,\n    is_static_call : bool,\n    is_contract_deployment : bool,\n\n    start_side_effect_counter : u32,\n}\n// docs:end:call-context\n\nimpl CallContext {\n    fn assert_is_zero(self) {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        assert(self.msg_sender.to_field() == 0);\n        assert(self.storage_contract_address.to_field() == 0);\n        assert(self.portal_contract_address.to_field() == 0);\n        assert(self.function_selector.to_field() == 0);\n        assert(self.is_delegate_call == false);\n        assert(self.is_static_call == false);\n        assert(self.is_contract_deployment == false);\n        assert(self.start_side_effect_counter == 0);\n    }\n}\n\nimpl Eq for CallContext {\n    fn eq(self, call_context: CallContext) -> bool {\n        // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3595)\n        call_context.msg_sender.eq(self.msg_sender)\n            & call_context.storage_contract_address.eq(self.storage_contract_address)\n            & call_context.portal_contract_address.eq(self.portal_contract_address)\n            & call_context.function_selector.eq(self.function_selector)\n            & (call_context.is_delegate_call == self.is_delegate_call)\n            & (call_context.is_static_call == self.is_static_call)\n            & (call_context.is_contract_deployment == self.is_contract_deployment)\n            & (call_context.start_side_effect_counter == self.start_side_effect_counter)\n    }\n}\n\nimpl Hash for CallContext {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__CALL_CONTEXT)\n    }\n}\n\nimpl Serialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn serialize(self) -> [Field; CALL_CONTEXT_LENGTH] {\n        [\n            self.msg_sender.to_field(),\n            self.storage_contract_address.to_field(),\n            self.portal_contract_address.to_field(),\n            self.function_selector.to_field(),\n            self.is_delegate_call as Field,\n            self.is_static_call as Field,\n            self.is_contract_deployment as Field,\n            self.start_side_effect_counter as Field,\n        ]\n    }\n}\n\nimpl Deserialize<CALL_CONTEXT_LENGTH> for CallContext {\n    fn deserialize(serialized: [Field; CALL_CONTEXT_LENGTH]) -> CallContext {\n        CallContext {\n            msg_sender: AztecAddress::from_field(serialized[0]),\n            storage_contract_address: AztecAddress::from_field(serialized[1]),\n            portal_contract_address: EthAddress::from_field(serialized[2]),\n            function_selector: FunctionSelector::from_field(serialized[3]),\n            is_delegate_call: serialized[4] as bool,\n            is_static_call: serialized[5] as bool,\n            is_contract_deployment: serialized[6] as bool,\n            start_side_effect_counter: serialized[7] as u32,\n        }\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let serialized = context.serialize();\n    let deserialized = CallContext::deserialize(serialized);\n    assert(context.eq(deserialized));\n}\n\n#[test]\nfn hash_smoke() {\n    let context: CallContext = dep::std::unsafe::zeroed();\n    let _hashed = context.hash();\n}\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/call_context.nr" }, "122": { "source": "use crate::{\n    abis::{call_context::CallContext, side_effect::{SideEffect, SideEffectLinkedToNoteHash}},\n    address::AztecAddress,\n    constants::{\n    MAX_NEW_L2_TO_L1_MSGS_PER_CALL, MAX_NEW_NULLIFIERS_PER_CALL, MAX_NEW_NOTE_HASHES_PER_CALL,\n    MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL, MAX_PUBLIC_DATA_READS_PER_CALL,\n    MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL, NUM_FIELDS_PER_SHA256, RETURN_VALUES_LENGTH,\n    GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH\n},\n    contrakt::{storage_read::StorageRead, storage_update_request::StorageUpdateRequest},\n    hash::pedersen_hash, header::Header, messaging::l2_to_l1_message::L2ToL1Message,\n    traits::{Hash, Serialize, Deserialize}, utils::reader::Reader\n};\n\nstruct PublicCircuitPublicInputs{\n    call_context: CallContext,\n\n    args_hash: Field,\n    return_values: [Field; RETURN_VALUES_LENGTH],\n\n    contract_storage_update_requests: [StorageUpdateRequest; MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL],\n    contract_storage_reads: [StorageRead; MAX_PUBLIC_DATA_READS_PER_CALL],\n\n    // todo: add sideeffect ranges for the input to these hashes\n    public_call_stack_hashes: [Field; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL],\n    new_note_hashes: [SideEffect; MAX_NEW_NOTE_HASHES_PER_CALL],\n    new_nullifiers: [SideEffectLinkedToNoteHash; MAX_NEW_NULLIFIERS_PER_CALL],\n    new_l2_to_l1_msgs: [L2ToL1Message; MAX_NEW_L2_TO_L1_MSGS_PER_CALL],\n\n    unencrypted_logs_hash: [Field; NUM_FIELDS_PER_SHA256],\n\n    // Here so that the gas cost of this request can be measured by circuits, without actually needing to feed in the\n    // variable-length data.\n    unencrypted_log_preimages_length: Field,\n\n    // Header of a block whose state is used during public execution. Set by sequencer to be a header of a block\n    // previous to the one in which the tx is included.\n    historical_header: Header,\n\n    prover_address: AztecAddress,\n}\n\nimpl Eq for PublicCircuitPublicInputs {\n    fn eq(self, other: Self) -> bool {\n        self.serialize() == other.serialize()\n    }\n}\n\nimpl Serialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn serialize(self) -> [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH] {\n        let mut fields: BoundedVec<Field, PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> = BoundedVec::new(0); \n        fields.extend_from_array(self.call_context.serialize());   \n        fields.push(self.args_hash);\n        fields.extend_from_array(self.return_values);\n        for i in 0..MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_update_requests[i].serialize());\n        }\n        for i in 0..MAX_PUBLIC_DATA_READS_PER_CALL {\n            fields.extend_from_array(self.contract_storage_reads[i].serialize());\n        }\n        fields.extend_from_array(self.public_call_stack_hashes);\n\n        for i in 0..MAX_NEW_NOTE_HASHES_PER_CALL {\n            fields.extend_from_array(self.new_note_hashes[i].serialize());\n        }\n        for i in 0..MAX_NEW_NULLIFIERS_PER_CALL {\n            fields.extend_from_array(self.new_nullifiers[i].serialize());\n        }\n        for i in 0..MAX_NEW_L2_TO_L1_MSGS_PER_CALL {\n            fields.extend_from_array(self.new_l2_to_l1_msgs[i].serialize());\n        }\n        fields.extend_from_array(self.unencrypted_logs_hash);\n        fields.push(self.unencrypted_log_preimages_length);\n        fields.extend_from_array(self.historical_header.serialize());\n        fields.push(self.prover_address.to_field());\n        fields.storage\n    }\n}\n\nimpl Deserialize<PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH> for PublicCircuitPublicInputs {\n    fn deserialize(serialized: [Field; PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH]) -> Self {\n        // TODO(#4390): This should accept a reader ^ to avoid copying data.\n        let mut reader = Reader::new(serialized);\n        let inputs = PublicCircuitPublicInputs {\n            call_context: reader.read_struct(CallContext::deserialize),\n            args_hash: reader.read(),\n            return_values: reader.read_array([0; RETURN_VALUES_LENGTH]),\n            contract_storage_update_requests: reader.read_struct_array(StorageUpdateRequest::deserialize, [StorageUpdateRequest::empty(); MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL]),\n            contract_storage_reads: reader.read_struct_array(StorageRead::deserialize, [StorageRead::empty(); MAX_PUBLIC_DATA_READS_PER_CALL]),\n            public_call_stack_hashes: reader.read_array([0; MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL]),\n            new_note_hashes: reader.read_struct_array(SideEffect::deserialize, [SideEffect::empty(); MAX_NEW_NOTE_HASHES_PER_CALL]),\n            new_nullifiers: reader.read_struct_array(SideEffectLinkedToNoteHash::deserialize, [SideEffectLinkedToNoteHash::empty(); MAX_NEW_NULLIFIERS_PER_CALL]),\n            new_l2_to_l1_msgs: reader.read_struct_array(L2ToL1Message::deserialize, [L2ToL1Message::empty(); MAX_NEW_L2_TO_L1_MSGS_PER_CALL]),\n            unencrypted_logs_hash: reader.read_array([0; NUM_FIELDS_PER_SHA256]),\n            unencrypted_log_preimages_length: reader.read(),\n            historical_header: reader.read_struct(Header::deserialize),\n            prover_address: reader.read_struct(AztecAddress::deserialize),\n        };\n\n        reader.finish();\n        inputs\n    }\n}\n\nimpl Hash for PublicCircuitPublicInputs {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let pcpi: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let serialized = pcpi.serialize();\n    let deserialized = PublicCircuitPublicInputs::deserialize(serialized);\n    assert(pcpi.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n    let hash = inputs.hash();\n\n    // Value from public_circuit_public_inputs.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x0d43290c164ebc3d80d4d17f1939482d9d01ad503cebceb8c665d2bd96597a68);\n}\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/public_circuit_public_inputs.nr" }, "133": { "source": "use crate::abis::{function_data::FunctionData, public_circuit_public_inputs::PublicCircuitPublicInputs};\nuse crate::address::AztecAddress;\nuse crate::constants::GENERATOR_INDEX__CALL_STACK_ITEM;\nuse crate::traits::Hash;\n\nstruct PublicCallStackItem {\n    contract_address: AztecAddress,\n    public_inputs: PublicCircuitPublicInputs,\n    function_data: FunctionData,\n    // True if this call stack item represents a request to execute a function rather than a\n    // fulfilled execution. Used when enqueuing calls from private to public functions.\n    is_execution_request: bool,\n}\n\nimpl Hash for PublicCallStackItem {\n    fn hash(self) -> Field {\n        let item = if self.is_execution_request {\n            self.as_execution_request()\n        } else {\n            self\n        };\n\n        dep::std::hash::pedersen_hash_with_separator([\n            item.contract_address.to_field(),\n            item.function_data.hash(),\n            item.public_inputs.hash(),\n        ], GENERATOR_INDEX__CALL_STACK_ITEM)\n    }\n}\n\nimpl PublicCallStackItem {\n    fn as_execution_request(self) -> Self {\n        let public_inputs = self.public_inputs;\n        let mut request_public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        request_public_inputs.call_context = public_inputs.call_context;\n        request_public_inputs.args_hash = public_inputs.args_hash;\n\n        let call_stack_item = PublicCallStackItem {\n            contract_address: self.contract_address,\n            function_data: self.function_data,\n            is_execution_request: true,\n            public_inputs: request_public_inputs\n        };\n        call_stack_item\n    }\n}\n\nmod tests {\n    use crate::{\n        abis::{\n        function_data::FunctionData, function_selector::FunctionSelector,\n        public_circuit_public_inputs::PublicCircuitPublicInputs,\n        public_call_stack_item::PublicCallStackItem, side_effect::SideEffect\n    },\n        address::AztecAddress, constants::GENERATOR_INDEX__CALL_STACK_ITEM, traits::Hash\n    };\n\n    #[test]\n    fn compute_call_stack_item_request_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_internal: false, is_private: false, is_constructor: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: true, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item request hash\" test\n        assert_eq(call_stack_item.hash(), 0x2812dfeffdb7553fbbdd27c03fbdf61e3aa9bab3209db39f78838508ad892803);\n    }\n\n    #[test]\n    fn compute_call_stack_item_hash() {\n        let contract_address = AztecAddress::from_field(1);\n        let function_data = FunctionData { selector: FunctionSelector::from_u32(2), is_internal: false, is_private: false, is_constructor: false };\n\n        let mut public_inputs: PublicCircuitPublicInputs = dep::std::unsafe::zeroed();\n        public_inputs.new_note_hashes[0] = SideEffect{\n            value: 1,\n            counter: 0,\n        };\n\n        let call_stack_item = PublicCallStackItem { contract_address, public_inputs, is_execution_request: false, function_data };\n\n        // Value from public_call_stack_item.test.ts \"Computes a callstack item hash\" test\n        assert_eq(call_stack_item.hash(), 0x1f71c0d6bd03e409df694549b6aa83d706cfe55427152e6ec443ec64fa62d3a0);\n    }\n}\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/public_call_stack_item.nr" }, "142": { "source": "use crate::{\n    abis::function_selector::FunctionSelector,\n    constants::{GENERATOR_INDEX__FUNCTION_DATA, FUNCTION_DATA_LENGTH}, hash::pedersen_hash,\n    traits::{Serialize, Hash, Deserialize}\n};\n\nstruct FunctionData {\n    // First four bytes of the abi encoding \n    // of a function. \n    selector : FunctionSelector,\n    is_internal : bool,\n    is_private : bool,\n    is_constructor : bool,\n}\n\nimpl Eq for FunctionData {\n    fn eq(self, other: Self) -> bool {\n        self.selector.eq(other.selector) &\n        self.is_internal == other.is_internal &\n        self.is_private == other.is_private &\n        self.is_constructor == other.is_constructor\n    }\n}\n\nimpl Serialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    // A field is ~256 bits\n    // TODO(https://github.com/AztecProtocol/aztec-packages/issues/3057): Since, function data can fit into a Field,\n    // This method will simply return a bit packed Field instead of hashing\n    fn serialize(self) -> [Field; FUNCTION_DATA_LENGTH] {\n        [\n            self.selector.to_field(),\n            self.is_internal as Field,\n            self.is_private as Field,\n            self.is_constructor as Field,\n        ]\n    }\n}\n\nimpl Deserialize<FUNCTION_DATA_LENGTH> for FunctionData {\n    fn deserialize(serialized: [Field; FUNCTION_DATA_LENGTH]) -> Self {\n        Self {\n            selector: FunctionSelector::from_field(serialized[0]),\n            is_internal: serialized[1] as bool,\n            is_private: serialized[2] as bool,\n            is_constructor: serialized[3] as bool,\n        }\n    }\n}\n\nimpl Hash for FunctionData {\n    fn hash(self) -> Field {\n        pedersen_hash(self.serialize(), GENERATOR_INDEX__FUNCTION_DATA)\n    }\n}\n\n#[test]\nfn serialization_of_empty() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let serialized = data.serialize();\n    let deserialized = FunctionData::deserialize(serialized);\n    assert(data.eq(deserialized));\n}\n\n#[test]\nfn empty_hash() {\n    let data: FunctionData = dep::std::unsafe::zeroed();\n    let hash = data.hash();\n\n    // Value from function_data.test.ts \"computes empty item hash\" test\n    assert_eq(hash, 0x200569267c0f73ac89aaa414239398db9445dd4ad3a8cf37015cd55b8d4c5e8d);\n}\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/function_data.nr" }, "145": { "source": "use crate::utils::field::field_from_bytes;\nuse dep::std::cmp::Eq;\nuse crate::traits::{Serialize, Deserialize};\n\nglobal SELECTOR_SIZE = 4;\n\nstruct FunctionSelector {\n    // 1st 4-bytes of abi-encoding of function.\n    inner: u32,\n}\n\nimpl Eq for FunctionSelector {\n    fn eq(self, function_selector: FunctionSelector) -> bool {\n        function_selector.inner == self.inner\n    }\n}\n\nimpl Serialize<1> for FunctionSelector {\n    fn serialize(self: Self) -> [Field; 1] {\n        [self.inner as Field]\n    }\n}\n\nimpl Deserialize<1> for FunctionSelector {\n    fn deserialize(fields: [Field; 1]) -> Self {\n        Self {\n            inner: fields[0] as u32\n        }\n    }\n}\n\nimpl FunctionSelector {\n    fn to_field(self) -> Field {\n        self.inner as Field\n    }\n\n    pub fn from_u32(value: u32) -> Self {\n        Self { inner: value }\n    }\n\n    pub fn from_field(value: Field) -> Self {\n        Self { inner: value as u32 }\n    }\n\n    pub fn from_signature<N>(signature: str<N>) -> Self {\n        let bytes = signature.as_bytes();\n        let hash = dep::std::hash::keccak256(bytes, bytes.len() as u32);\n\n        let mut selector_be_bytes = [0; SELECTOR_SIZE];\n        for i in 0..SELECTOR_SIZE {\n            selector_be_bytes[i] = hash[i];\n        }\n\n        FunctionSelector::from_field(field_from_bytes(selector_be_bytes, true))\n    }\n\n    pub fn zero() -> Self {\n        Self { inner: 0 }\n    }\n}\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/abis/function_selector.nr" }, "174": { "source": "global ARGS_LENGTH: Field = 16;\nglobal RETURN_VALUES_LENGTH: Field = 4;\n\n/**\n * Convention for constant array lengths are mainly divided in 2 classes:\n *  - FUNCTION CALL\n *  - TRANSACTION\n *\n * Agreed convention is to use MAX_XXX_PER_CALL resp. MAX_XXX_PER_TX, where XXX denotes a type of element such as\n * commitment, or nullifier, e.g.,:\n *  - MAX_NEW_NULLIFIERS_PER_CALL\n *  - MAX_NEW_NOTE_HASHES_PER_TX\n *\n * In the kernel circuits, we accumulate elements such as note hashes and the nullifiers from all functions calls in a\n * transaction. Therefore, we always must have:\n * MAX_XXX_PER_TX ≥ MAX_XXX_PER_CALL\n *\n * For instance:\n * MAX_NEW_NOTE_HASHES_PER_TX ≥ MAX_NEW_NOTE_HASHES_PER_CALL\n * MAX_NEW_NULLIFIERS_PER_TX ≥ MAX_NEW_NULLIFIERS_PER_CALL\n *\n */\n\n// docs:start:constants\n// \"PER CALL\" CONSTANTS\nglobal MAX_NEW_NOTE_HASHES_PER_CALL: Field = 16;\nglobal MAX_NEW_NULLIFIERS_PER_CALL: Field = 16;\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_CALL: Field = 4;\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_CALL: Field = 2;\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_CALL: Field = 16;\nglobal MAX_PUBLIC_DATA_READS_PER_CALL: Field = 16;\nglobal MAX_READ_REQUESTS_PER_CALL: Field = 32;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_CALL: Field = 1;\n\n// \"PER TRANSACTION\" CONSTANTS\nglobal MAX_NEW_NOTE_HASHES_PER_TX: Field = 64;\nglobal MAX_NON_REVERTIBLE_NOTE_HASHES_PER_TX: Field = 8;\nglobal MAX_REVERTIBLE_NOTE_HASHES_PER_TX: Field = 56;\n\nglobal MAX_NEW_NULLIFIERS_PER_TX: Field = 64;\nglobal MAX_NON_REVERTIBLE_NULLIFIERS_PER_TX: Field = 8;\nglobal MAX_REVERTIBLE_NULLIFIERS_PER_TX: Field = 56;\n\nglobal MAX_PRIVATE_CALL_STACK_LENGTH_PER_TX: Field = 8;\n\nglobal MAX_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 8;\nglobal MAX_NON_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 3;\nglobal MAX_REVERTIBLE_PUBLIC_CALL_STACK_LENGTH_PER_TX: Field = 5;\n\nglobal MAX_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 32;\nglobal MAX_NON_REVERTIBLE_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\nglobal MAX_REVERTIBLE_PUBLIC_DATA_UPDATE_REQUESTS_PER_TX: Field = 16;\n\nglobal MAX_PUBLIC_DATA_READS_PER_TX: Field = 32;\nglobal MAX_NON_REVERTIBLE_PUBLIC_DATA_READS_PER_TX: Field = 16;\nglobal MAX_REVERTIBLE_PUBLIC_DATA_READS_PER_TX: Field = 16;\n\nglobal MAX_NEW_L2_TO_L1_MSGS_PER_TX: Field = 2;\nglobal MAX_NEW_CONTRACTS_PER_TX: Field = 1;\nglobal MAX_READ_REQUESTS_PER_TX: Field = 128;\nglobal MAX_NULLIFIER_KEY_VALIDATION_REQUESTS_PER_TX: Field = 4;\nglobal NUM_ENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\nglobal NUM_UNENCRYPTED_LOGS_HASHES_PER_TX: Field = 1;\n// docs:end:constants\n\n// ROLLUP CONTRACT CONSTANTS - constants used only in l1-contracts\nglobal NUMBER_OF_L1_L2_MESSAGES_PER_ROLLUP: Field = 16;\n\n// TREES RELATED CONSTANTS\nglobal VK_TREE_HEIGHT: Field = 3;\nglobal FUNCTION_TREE_HEIGHT: Field = 5;\nglobal CONTRACT_TREE_HEIGHT: Field = 16;\nglobal NOTE_HASH_TREE_HEIGHT: Field = 32;\nglobal PUBLIC_DATA_TREE_HEIGHT: Field = 40;\nglobal NULLIFIER_TREE_HEIGHT: Field = 20;\nglobal L1_TO_L2_MSG_TREE_HEIGHT: Field = 16;\nglobal ROLLUP_VK_TREE_HEIGHT: Field = 8;\nglobal ARTIFACT_FUNCTION_TREE_MAX_HEIGHT = 5;\n\n// SUB-TREES RELATED CONSTANTS\nglobal CONTRACT_SUBTREE_HEIGHT: Field = 0;\nglobal CONTRACT_SUBTREE_SIBLING_PATH_LENGTH: Field = 16;\nglobal NOTE_HASH_SUBTREE_HEIGHT: Field = 6;\nglobal NOTE_HASH_SUBTREE_SIBLING_PATH_LENGTH: Field = 26;\nglobal NULLIFIER_SUBTREE_HEIGHT: Field = 6;\nglobal PUBLIC_DATA_SUBTREE_HEIGHT: Field = 5;\nglobal ARCHIVE_HEIGHT: Field = 16;\nglobal NULLIFIER_SUBTREE_SIBLING_PATH_LENGTH: Field = 14;\nglobal PUBLIC_DATA_SUBTREE_SIBLING_PATH_LENGTH: Field = 35;\nglobal L1_TO_L2_MSG_SUBTREE_HEIGHT: Field = 4;\nglobal L1_TO_L2_MSG_SUBTREE_SIBLING_PATH_LENGTH: Field = 12;\n\n// MISC CONSTANTS\nglobal FUNCTION_SELECTOR_NUM_BYTES: Field = 4;\nglobal MAPPING_SLOT_PEDERSEN_SEPARATOR: Field = 4;\n// sha256 hash is stored in two fields to accommodate all 256-bits of the hash\nglobal NUM_FIELDS_PER_SHA256: Field = 2;\nglobal ARGS_HASH_CHUNK_LENGTH: u32 = 32;\nglobal ARGS_HASH_CHUNK_COUNT: u32 = 32;\n\n// CONTRACT CLASS CONSTANTS\n// This should be around 8192 (assuming 2**15 instructions packed at 8 bytes each),\n// but it's reduced to speed up build times, otherwise the ClassRegisterer takes over 5 mins to compile.\n// We are not using 1024 so we can squeeze in a few more args to methods that consume packed public bytecode,\n// such as the ClassRegisterer.register, and still land below the 32 * 32 max args limit for hashing.\nglobal MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS: Field = 1000;\n// Bytecode size for private functions is per function, not for the entire contract.\n// Note that private functions bytecode includes a mix of acir and brillig.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_PRIVATE_FUNCTION_IN_FIELDS: Field = 500;\n// Same for unconstrained functions: the size is per function.\nglobal MAX_PACKED_BYTECODE_SIZE_PER_UNCONSTRAINED_FUNCTION_IN_FIELDS: Field = 500;\n// Since we are not yet emitting selectors we'll use this magic value to identify events emitted by the ClassRegisterer.\n// This is just a stopgap until we implement proper selectors.\n// sha224sum 'struct ContractClassRegistered {contract_class_id: ContractClassId, version: Field, artifact_hash: Field, private_functions_root: Field, packed_public_bytecode: [Field; MAX_PACKED_PUBLIC_BYTECODE_SIZE_IN_FIELDS] }'\nglobal REGISTERER_CONTRACT_CLASS_REGISTERED_MAGIC_VALUE = 0x6999d1e02b08a447a463563453cb36919c9dd7150336fc7c4d2b52f8;\n// sha224sum 'struct ClassPrivateFunctionBroadcasted'\nglobal REGISTERER_PRIVATE_FUNCTION_BROADCASTED_MAGIC_VALUE = 0x1b70e95fde0b70adc30496b90a327af6a5e383e028e7a43211a07bcd;\n// sha224sum 'struct ClassUnconstrainedFunctionBroadcasted'\nglobal REGISTERER_UNCONSTRAINED_FUNCTION_BROADCASTED_MAGIC_VALUE = 0xe7af816635466f128568edb04c9fa024f6c87fb9010fdbffa68b3d99;\n\n// CONTRACT INSTANCE CONSTANTS\n// sha224sum 'struct ContractInstanceDeployed'\nglobal DEPLOYER_CONTRACT_INSTANCE_DEPLOYED_MAGIC_VALUE = 0x85864497636cf755ae7bde03f267ce01a520981c21c3682aaf82a631;\n\n// NOIR CONSTANTS - constants used only in yarn-packages/noir-contracts\n// Some are defined here because Noir doesn't yet support globals referencing other globals yet.\n// Move these constants to a noir file once the issue below is resolved:\n// https://github.com/noir-lang/noir/issues/1734\nglobal L1_TO_L2_MESSAGE_ORACLE_CALL_LENGTH: Field = 25;\nglobal MAX_NOTE_FIELDS_LENGTH: Field = 20;\n// GET_NOTE_ORACLE_RETURN_LENGT = MAX_NOTE_FIELDS_LENGTH + 1 + 2\n// The plus 1 is 1 extra field for nonce.\n// + 2 for EXTRA_DATA: [number_of_return_notes, contract_address]\nglobal GET_NOTE_ORACLE_RETURN_LENGTH: Field = 23;\nglobal MAX_NOTES_PER_PAGE: Field = 10;\n// VIEW_NOTE_ORACLE_RETURN_LENGTH = MAX_NOTES_PER_PAGE * (MAX_NOTE_FIELDS_LENGTH + 1) + 2;\nglobal VIEW_NOTE_ORACLE_RETURN_LENGTH: Field = 212;\n\n// LENGTH OF STRUCTS SERIALIZED TO FIELDS\nglobal AZTEC_ADDRESS_LENGTH = 1;\nglobal CALL_CONTEXT_LENGTH: Field = 8;\nglobal CONTENT_COMMITMENT_LENGTH: Field = 7;\nglobal CONTRACT_DEPLOYMENT_DATA_LENGTH: Field = 6;\nglobal CONTRACT_STORAGE_READ_LENGTH: Field = 2;\nglobal CONTRACT_STORAGE_UPDATE_REQUEST_LENGTH: Field = 2;\nglobal ETH_ADDRESS_LENGTH = 1;\nglobal FUNCTION_DATA_LENGTH: Field = 4;\nglobal FUNCTION_LEAF_PREIMAGE_LENGTH: Field = 5;\nglobal GLOBAL_VARIABLES_LENGTH: Field = 6;\nglobal HEADER_LENGTH: Field = 25; // 2 for last_archive, 7 for content commitment, 10 for state reference, 6 for global vars\nglobal L1_TO_L2_MESSAGE_LENGTH: Field = 8;\nglobal L2_TO_L1_MESSAGE_LENGTH: Field = 2;\nglobal NEW_CONTRACT_DATA_LENGTH: Field = 3;\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_LENGTH = 4;\nglobal NULLIFIER_KEY_VALIDATION_REQUEST_CONTEXT_LENGTH = 5;\nglobal PARTIAL_STATE_REFERENCE_LENGTH: Field = 8;\nglobal PRIVATE_CALL_STACK_ITEM_LENGTH: Field = 219;\n// Change this ONLY if you have changed the PrivateCircuitPublicInputs structure.\n// In other words, if the structure/size of the public inputs of a function call changes then we should change this\n// constant as well PRIVATE_CALL_STACK_ITEM_LENGTH\nglobal PRIVATE_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 214;\n// Change this ONLY if you have changed the PublicCircuitPublicInputs structure.\nglobal PUBLIC_CIRCUIT_PUBLIC_INPUTS_LENGTH: Field = 194;\nglobal STATE_REFERENCE_LENGTH: Field = 10; // 2 for snap + 8 for partial\nglobal TX_CONTEXT_DATA_LENGTH: Field = 11;\nglobal TX_REQUEST_LENGTH: Field = 17;\n\nglobal GET_NOTES_ORACLE_RETURN_LENGTH: Field = 674;\nglobal NOTE_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal NULLIFIERS_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal PUBLIC_DATA_WRITES_NUM_BYTES_PER_BASE_ROLLUP: Field = 2048;\nglobal CONTRACTS_NUM_BYTES_PER_BASE_ROLLUP: Field = 32;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal CONTRACT_DATA_NUM_BYTES_PER_BASE_ROLLUP_UNPADDED: Field = 52;\nglobal L2_TO_L1_MSGS_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\nglobal LOGS_HASHES_NUM_BYTES_PER_BASE_ROLLUP: Field = 64;\n\n/**\n * Enumerate the hash_indices which are used for pedersen hashing.\n * We start from 1 to avoid the default generators. The generator indices are listed\n * based on the number of elements each index hashes. The following conditions must be met:\n *\n * +-----------+-------------------------------+----------------------+\n * | Hash size | Number of elements hashed (n) | Condition to use     |\n * |-----------+-------------------------------+----------------------|\n * | LOW       | n ≤ 8                         | 0 < hash_index ≤ 32  |\n * | MID       | 8 < n ≤ 16                    | 32 < hash_index ≤ 40 |\n * | HIGH      | 16 < n ≤ 48                   | 40 < hash_index ≤ 48 |\n * +-----------+-------------------------------+----------------------+\n *\n * Note: When modifying, modify `GeneratorIndexPacker` in packer.hpp accordingly.\n */\n// Indices with size ≤ 8\nglobal GENERATOR_INDEX__NOTE_HASH = 1;\nglobal GENERATOR_INDEX__NOTE_HASH_NONCE = 2;\nglobal GENERATOR_INDEX__UNIQUE_NOTE_HASH = 3;\nglobal GENERATOR_INDEX__SILOED_NOTE_HASH = 4;\nglobal GENERATOR_INDEX__NULLIFIER = 5;\nglobal GENERATOR_INDEX__INITIALIZATION_NULLIFIER = 6;\nglobal GENERATOR_INDEX__OUTER_NULLIFIER = 7;\nglobal GENERATOR_INDEX__PUBLIC_DATA_READ = 8;\nglobal GENERATOR_INDEX__PUBLIC_DATA_UPDATE_REQUEST = 9;\nglobal GENERATOR_INDEX__FUNCTION_DATA = 10;\nglobal GENERATOR_INDEX__FUNCTION_LEAF = 11;\nglobal GENERATOR_INDEX__CONTRACT_DEPLOYMENT_DATA = 12;\nglobal GENERATOR_INDEX__CONSTRUCTOR = 13;\nglobal GENERATOR_INDEX__CONSTRUCTOR_ARGS = 14;\nglobal GENERATOR_INDEX__CONTRACT_ADDRESS = 15;\nglobal GENERATOR_INDEX__CONTRACT_LEAF = 16;\nglobal GENERATOR_INDEX__CALL_CONTEXT = 17;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM = 18;\nglobal GENERATOR_INDEX__CALL_STACK_ITEM_2 = 19;\nglobal GENERATOR_INDEX__L1_TO_L2_MESSAGE_SECRET = 20;\nglobal GENERATOR_INDEX__L2_TO_L1_MSG = 21;\nglobal GENERATOR_INDEX__TX_CONTEXT = 22;\nglobal GENERATOR_INDEX__PUBLIC_LEAF_INDEX = 23;\nglobal GENERATOR_INDEX__PUBLIC_DATA_LEAF = 24;\nglobal GENERATOR_INDEX__SIGNED_TX_REQUEST = 25;\nglobal GENERATOR_INDEX__GLOBAL_VARIABLES = 26;\nglobal GENERATOR_INDEX__PARTIAL_ADDRESS = 27;\nglobal GENERATOR_INDEX__BLOCK_HASH = 28;\nglobal GENERATOR_INDEX__SIDE_EFFECT = 29;\nglobal GENERATOR_INDEX__FEE_PAYLOAD = 30;\n// Indices with size ≤ 16\nglobal GENERATOR_INDEX__TX_REQUEST = 33;\nglobal GENERATOR_INDEX__SIGNATURE_PAYLOAD = 34;\n// Indices with size ≤ 44\nglobal GENERATOR_INDEX__VK = 41;\nglobal GENERATOR_INDEX__PRIVATE_CIRCUIT_PUBLIC_INPUTS = 42;\nglobal GENERATOR_INDEX__PUBLIC_CIRCUIT_PUBLIC_INPUTS = 43;\nglobal GENERATOR_INDEX__FUNCTION_ARGS = 44;\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/constants.nr" }, "177": { "source": "struct Reader<N> {\n    data: [Field; N],\n    offset: Field,\n}\n\nimpl<N> Reader<N> {\n    pub fn new(data: [Field; N]) -> Self {\n        Self { data, offset: 0 }\n    }\n\n    pub fn read(&mut self) -> Field {\n        let result = self.data[self.offset];\n        self.offset += 1;\n        result\n    }\n\n    pub fn read_array<K>(&mut self, mut result: [Field; K]) -> [Field; K] {\n        for i in 0..K {\n            result[i] = self.data[self.offset + i];\n        }\n        self.offset += K;\n        result\n    }\n\n    // TODO(#4394)\n    pub fn read_struct<T, K>(&mut self, deserialise: fn([Field; K]) -> T) -> T {\n        let result = deserialise(self.read_array([0; K]));\n        result\n    }\n\n    pub fn read_struct_array<T, K, C>(&mut self, deserialise: fn([Field; K]) -> T, mut result: [T; C]) -> [T; C] {\n        for i in 0..C {\n            result[i] = self.read_struct(deserialise);\n        }\n        result\n    }\n\n    pub fn finish(self) {\n        assert(self.offset == self.data.len(), \"Reader did not read all data\");\n    }\n}\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/utils/reader.nr" }, "185": { "source": "// general util packages/modules are usually bad practice\n// because there is no criteria for what we should not put in here.\n// Reducing the size of this package would be welcome.\n\nmod arrays;\nmod field;\nmod reader;\nmod uint256;\n\n// if predicate == true then return lhs, else return rhs\npub fn conditional_assign(predicate: bool, lhs: Field, rhs: Field) -> Field {\n    if predicate { lhs } else { rhs }\n}\n\npub fn arr_copy_slice<T, N, M>(src: [T; N], mut dst: [T; M], offset: Field) -> [T; M] {\n    for i in 0..dst.len() {\n        dst[i] = src[i + offset];\n    }\n    dst\n}\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/utils.nr" }, "191": { "source": "use crate::address::{AztecAddress, EthAddress};\nuse crate::mocked::VerificationKey;\nuse crate::abis::function_selector::FunctionSelector;\nuse crate::abis::function_leaf_preimage::FunctionLeafPreimage;\nuse crate::abis::contract_class_function_leaf_preimage::ContractClassFunctionLeafPreimage;\nuse crate::contract_class_id::ContractClassId;\nuse crate::abis::new_contract_data::NewContractData as ContractLeafPreimage;\nuse crate::abis::function_data::FunctionData;\nuse crate::abis::side_effect::{SideEffect};\nuse crate::utils::uint256::U256;\nuse crate::constants::{\n    ARGS_HASH_CHUNK_COUNT, ARGS_HASH_CHUNK_LENGTH, CONTRACT_TREE_HEIGHT, FUNCTION_TREE_HEIGHT,\n    NOTE_HASH_TREE_HEIGHT, NUM_FIELDS_PER_SHA256, GENERATOR_INDEX__SILOED_NOTE_HASH,\n    GENERATOR_INDEX__OUTER_NULLIFIER, GENERATOR_INDEX__VK, GENERATOR_INDEX__CONSTRUCTOR,\n    GENERATOR_INDEX__PARTIAL_ADDRESS, GENERATOR_INDEX__CONTRACT_ADDRESS,\n    GENERATOR_INDEX__NOTE_HASH_NONCE, GENERATOR_INDEX__UNIQUE_NOTE_HASH, GENERATOR_INDEX__FUNCTION_ARGS\n};\nuse crate::messaging::l2_to_l1_message::L2ToL1Message;\n\nuse dep::std::hash::{pedersen_hash_with_separator, sha256};\n\npub fn sha256_to_field<N>(bytes_to_hash: [u8; N]) -> Field {\n    let sha256_hashed = sha256(bytes_to_hash);\n\n    // Convert it to a field element\n    let mut v = 1;\n    let mut high = 0 as Field;\n    let mut low = 0 as Field;\n\n    for i in 0..16 {\n        high = high + (sha256_hashed[15 - i] as Field) * v;\n        low = low + (sha256_hashed[16 + 15 - i] as Field) * v;\n        v = v * 256;\n    }\n\n    // Abuse that a % p + b % p = (a + b) % p and that low < p\n    let hash_in_a_field = low + high * v;\n\n    hash_in_a_field\n}\n\npub fn hash_args<N>(args: [Field; N]) -> Field {\n    if args.len() == 0 {\n        0\n    } else {\n        let mut chunks_hashes = [0; ARGS_HASH_CHUNK_COUNT];\n        for i in 0..ARGS_HASH_CHUNK_COUNT {\n            let mut chunk_hash = 0;\n            let start_chunk_index = i * ARGS_HASH_CHUNK_LENGTH;\n            if start_chunk_index < (args.len() as u32) {\n                let mut chunk_args = [0; ARGS_HASH_CHUNK_LENGTH];\n                for j in 0..ARGS_HASH_CHUNK_LENGTH {\n                    let item_index = i * ARGS_HASH_CHUNK_LENGTH + j;\n                    if item_index < (args.len() as u32) {\n                        chunk_args[j] = args[item_index];\n                    }\n                }\n                chunk_hash = pedersen_hash(chunk_args, GENERATOR_INDEX__FUNCTION_ARGS);\n            }\n            chunks_hashes[i] = chunk_hash;\n        }\n        pedersen_hash(chunks_hashes, GENERATOR_INDEX__FUNCTION_ARGS)\n    }\n}\n\n// Checks that `value` is a member of a merkle tree with root `root` at position `index`\n// The witness being the `sibling_path`\npub fn assert_check_membership<N>(value: Field, index: Field, sibling_path: [Field; N], root: Field) {\n    let calculated_root = root_from_sibling_path(value, index, sibling_path);\n    assert(calculated_root == root, \"membership check failed\");\n}\n\n// Calculate the Merkle tree root from the sibling path and leaf.\n//\n// The leaf is hashed with its sibling, and then the result is hashed\n// with the next sibling etc in the path. The last hash is the root.\n//\n// TODO(David/Someone): The cpp code is using a uint256, whereas its\n// TODO a bit simpler in Noir to just have a bit array.\n// TODO: I'd generally like to avoid u256 for algorithms like \n// this because it means we never even need to consider cases where \n// the index is greater than p.\npub fn root_from_sibling_path<N>(leaf: Field, leaf_index: Field, sibling_path: [Field; N]) -> Field {\n    let mut node = leaf;\n    let indices = leaf_index.to_le_bits(N);\n\n    for i in 0..N {\n        let (hash_left, hash_right) = if indices[i] == 1 {\n            (sibling_path[i], node)\n        } else {\n            (node, sibling_path[i])\n        };\n        node = merkle_hash(hash_left, hash_right);\n    }\n    node\n}\n\n// Calculate the function tree root from the sibling path and leaf preimage.\n//\n// TODO: The cpp code passes in components of the FunctionLeafPreimage and then \n// builds it up. We should build it up and then pass the leaf preimage as a parameter.\n// We can then choose to have a general method that takes in anything hashable\n// and deduplicate the logic in `contract_tree_root_from_siblings`\npub fn function_tree_root_from_siblings(\n    selector: FunctionSelector,\n    is_internal: bool,\n    is_private: bool,\n    vk_hash: Field,\n    acir_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = FunctionLeafPreimage { selector, is_internal, is_private, vk_hash, acir_hash };\n\n    let function_leaf = function_leaf_preimage.hash();\n\n    let function_tree_root = root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path);\n\n    function_tree_root\n}\n\n// Calculate the contract tree root from the sibling path and leaf preimage.\npub fn contract_tree_root_from_siblings(\n    contract_class_id: ContractClassId,\n    storage_contract_address: AztecAddress,\n    portal_contract_address: EthAddress,\n    contract_leaf_index: Field,\n    contract_leaf_sibling_path: [Field; CONTRACT_TREE_HEIGHT]\n) -> Field {\n    //TODO(Kev): if we use shorthand syntax here, we get an error as expected,\n    // since variable name is `storage_contract_address` but the span is incorrect.\n    let contract_leaf_preimage = ContractLeafPreimage { contract_address: storage_contract_address, portal_contract_address, contract_class_id };\n\n    let contract_leaf = contract_leaf_preimage.hash();\n\n    let computed_contract_tree_root = root_from_sibling_path(contract_leaf, contract_leaf_index, contract_leaf_sibling_path);\n\n    computed_contract_tree_root\n}\n\npub fn private_functions_root_from_siblings(\n    selector: FunctionSelector,\n    vk_hash: Field,\n    function_leaf_index: Field,\n    function_leaf_sibling_path: [Field; FUNCTION_TREE_HEIGHT]\n) -> Field {\n    let function_leaf_preimage = ContractClassFunctionLeafPreimage { selector, vk_hash };\n    let function_leaf = function_leaf_preimage.hash();\n    root_from_sibling_path(function_leaf, function_leaf_index, function_leaf_sibling_path)\n}\n\npub fn read_request_root_from_siblings(\n    read_request: Field,\n    leaf_index: Field,\n    sibling_path: [Field; NOTE_HASH_TREE_HEIGHT]\n) -> Field {\n    root_from_sibling_path(read_request, leaf_index, sibling_path)\n}\n\npub fn silo_note_hash(address: AztecAddress, inner_commitment: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        inner_commitment\n    ],\n        GENERATOR_INDEX__SILOED_NOTE_HASH\n    )\n}\n\npub fn silo_nullifier(address: AztecAddress, nullifier: Field) -> Field {\n    pedersen_hash(\n        [\n        address.to_field(),\n        nullifier\n    ],\n        GENERATOR_INDEX__OUTER_NULLIFIER\n    )\n}\n\nfn merkle_hash(left: Field, right: Field) -> Field {\n    pedersen_hash([left, right], 0)\n}\n\npub fn stdlib_recursion_verification_key_compress_native_vk(_vk: VerificationKey) -> Field {\n    // Original cpp code\n    // stdlib::recursion::verification_key<CT::bn254>::compress_native(private_call.vk, GeneratorIndex::VK);\n    // The above cpp method is only ever called on verification key, so it has been special cased here\n    let _hash_index = GENERATOR_INDEX__VK;\n    0\n}\n\n// TODO CPP uses blake2s for this\npub fn compute_new_contract_address_hash(new_contract_address: AztecAddress) -> Field {\n    dep::std::hash::pedersen_hash([new_contract_address.to_field()])\n}\n\npub fn compute_l2_to_l1_hash(\n    contract_address: AztecAddress,\n    rollup_version_id: Field,\n    chain_id: Field,\n    message: L2ToL1Message\n) -> Field {\n    let mut bytes: BoundedVec<u8, 160> = BoundedVec::new(0);\n\n    let inputs = [\n        contract_address.to_field(), rollup_version_id, message.recipient.to_field(), chain_id, message.content\n    ];\n    for i in 0..inputs.len() {\n        // TODO are bytes be in fr.to_buffer() ?\n        let item_bytes = inputs[i].to_be_bytes(32);\n        for j in 0..32 {\n            bytes.push(item_bytes[j]);\n        }\n    }\n\n    sha256_to_field(bytes.storage)\n}\n\npub fn compute_constructor_hash(\n    function_data: FunctionData,\n    args_hash: Field,\n    constructor_vk_hash: Field\n) -> Field {\n    let function_data_hash = function_data.hash();\n\n    pedersen_hash(\n        [\n        function_data_hash,\n        args_hash,\n        constructor_vk_hash\n    ],\n        GENERATOR_INDEX__CONSTRUCTOR\n    )\n}\n\n// Computes sha256 hash of 2 input hashes stored in 4 fields.\n// \n// This method is bn254 specific. Two fields is needed in order to \n// encode the sha256 output. It can be abstracted away with any 4-2 hash function.\n//\n// TODO(Jan and David): This is used for the encrypted_log hashes.\n// Can we check to see if we can just use hash_to_field or pedersen_compress here?\n//\n// Returning a Field would be desirable because then this can be replaced with \n// poseidon without changing the rest of the code\n//\npub fn accumulate_sha256(input: [U128; 4]) -> [Field; NUM_FIELDS_PER_SHA256] {\n    // This is a note about the cpp code, since it takes an array of Fields\n    // instead of a U128.\n    // 4 Field elements when converted to bytes will usually \n    // occupy 4 * 32 = 128 bytes.\n    // However, this function is making the assumption that each Field \n    // only occupies 128 bits.\n    //\n    // TODO(David): This does not seem to be getting guaranteed anywhere in the code?\n    //\n    // Concatenate 4 u128 bit integers into a byte array.\n    let mut hash_input_flattened = [0; 64];\n    for offset in 0..4 {\n        let input_as_bytes = input[offset].to_be_bytes();\n        for byte_index in 0..16 {\n            hash_input_flattened[offset * 16 + byte_index] = input_as_bytes[byte_index];\n        }\n    }\n\n    let sha_digest = dep::std::hash::sha256(hash_input_flattened);\n\n    U256::from_bytes32(sha_digest).to_u128_limbs()\n}\n\npub fn compute_logs_hash(\n    previous_log_hash: [Field; 2],\n    current_log_hash: [Field; 2]\n) -> [Field; NUM_FIELDS_PER_SHA256] {\n    accumulate_sha256(\n        [\n        U128::from_integer(previous_log_hash[0]),\n        U128::from_integer(previous_log_hash[1]),\n        U128::from_integer(current_log_hash[0]),\n        U128::from_integer(current_log_hash[1])\n    ]\n    )\n}\n\npub fn compute_note_hash_nonce(first_nullifier: Field, commitment_index: Field) -> Field {\n    pedersen_hash(\n        [\n        first_nullifier,\n        commitment_index\n    ],\n        GENERATOR_INDEX__NOTE_HASH_NONCE\n    )\n}\n\npub fn compute_unique_siloed_note_hash(nonce: Field, siloed_note_hash: Field) -> Field {\n    pedersen_hash(\n        [\n        nonce,\n        siloed_note_hash\n    ],\n        GENERATOR_INDEX__UNIQUE_NOTE_HASH\n    )\n}\n\npub fn compute_unique_siloed_note_hashes<N>(\n    first_nullifier: Field,\n    siloed_note_hashes: [SideEffect; N]\n) -> [SideEffect; N] {\n    let mut unique_siloed_note_hashes = [SideEffect::empty(); N];\n    for i in 0..N {\n        let siloed_note_hash = siloed_note_hashes[i];\n        if siloed_note_hash.value != 0 {\n            let nonce = compute_note_hash_nonce(first_nullifier, i);\n            unique_siloed_note_hashes[i] = SideEffect {\n                value: compute_unique_siloed_note_hash(nonce, siloed_note_hash.value),\n                counter: siloed_note_hash.counter\n                };\n        }\n    }\n    unique_siloed_note_hashes\n}\n\npub fn pedersen_hash<N>(inputs: [Field; N], hash_index: u32) -> Field {\n    dep::std::hash::pedersen_hash_with_separator(inputs, hash_index)\n}\n\n#[test]\nfn smoke_sha256_to_field() {\n    let full_buffer = [\n        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19,\n        20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39,\n        40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59,\n        60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79,\n        80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99,\n        100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119,\n        120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139,\n        140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159\n    ];\n    let result = sha256_to_field(full_buffer);\n    assert(result == 0x142a6d57007171f6eaa33d55976d9dbe739c889c8e920f115f7808dea184c718);\n}\n\n#[test]\nfn compute_var_args_hash() {\n    let mut input = [0; 800];\n    for i in 0..800 {\n        input[i] = i as Field;\n    }\n    let hash = hash_args(input);\n    assert(hash == 0x371960dd84ed3445ab099ac4c1af5ba90e0c713b593e0ca52ee532087c7f097);\n}\n\n#[test]\nfn compute_l2_l1_hash() {\n    // All zeroes\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(0), 0, 0, L2ToL1Message::empty());\n    assert(hash_result == 0x2266ac2f9f0c19c015239ef5ea85862fc6fac00db73779b220a4d49c4856c2e1);\n\n    // Non-zero case\n    let message = L2ToL1Message { recipient: EthAddress::from_field(3), content: 5 };\n    let hash_result = compute_l2_to_l1_hash(AztecAddress::from_field(1), 2, 4, message);\n    assert(hash_result == 0x0f24729168d4450a5681beafa5e3a899ac28bd17bf5a4877dab37bcd834e1634);\n}\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-protocol-circuits/src/crates/types/src/hash.nr" }, "207": { "source": "use dep::aztec::{\n    protocol_types::{address::AztecAddress, traits::{Deserialize, Serialize}},\n    note::{note_header::NoteHeader, note_interface::NoteInterface, utils::compute_note_hash_for_consumption},\n    oracle::{rand::rand, nullifier_key::get_nullifier_secret_key, get_public_key::get_public_key},\n    log::emit_encrypted_log, hash::pedersen_hash, context::PrivateContext\n};\n\nglobal VALUE_NOTE_LEN: Field = 3; // 3 plus a header.\n\n// docs:start:value-note-def\nstruct ValueNote {\n    value: Field,\n    owner: AztecAddress,\n    randomness: Field,\n    header: NoteHeader,\n}\n// docs:end:value-note-def\n\nimpl NoteInterface<VALUE_NOTE_LEN> for ValueNote {\n    fn serialize_content(self) -> [Field; VALUE_NOTE_LEN] {\n        [self.value, self.owner.to_field(), self.randomness]\n    }\n\n    fn deserialize_content(serialized_note: [Field; VALUE_NOTE_LEN]) -> Self {\n        ValueNote {\n            value: serialized_note[0],\n            owner: AztecAddress::from_field(serialized_note[1]),\n            randomness: serialized_note[2],\n            header: NoteHeader::empty(),\n        }\n    }\n\n    fn compute_note_content_hash(self) -> Field {\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash(self.serialize_content(),0)\n    }\n\n    // docs:start:nullifier\n\n    fn compute_nullifier(self, context: &mut PrivateContext) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = context.request_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    // docs:end:nullifier\n\n    fn compute_nullifier_without_context(self) -> Field {\n        let note_hash_for_nullify = compute_note_hash_for_consumption(self);\n        let secret = get_nullifier_secret_key(self.owner);\n        // TODO(#1205) Should use a non-zero generator index.\n        pedersen_hash([\n            note_hash_for_nullify,\n            secret.low,\n            secret.high,\n        ],0)\n    }\n\n    fn set_header(&mut self, header: NoteHeader) {\n        self.header = header;\n    }\n\n    fn get_header(self) -> NoteHeader {\n        self.header\n    }\n\n    // Broadcasts the note as an encrypted log on L1.\n    fn broadcast(self, context: &mut PrivateContext, slot: Field) {\n        let encryption_pub_key = get_public_key(self.owner);\n        emit_encrypted_log(\n            context,\n            (*context).this_address(),\n            slot,\n            Self::get_note_type_id(),\n            encryption_pub_key,\n            self.serialize_content(),\n        );\n    }\n\n    fn get_note_type_id() -> Field {\n        // TODO(#4519): autogenerate\n        // python -c \"print(int(''.join(str(ord(c)) for c in 'ValueNote')))\"\n        869710811710178111116101\n    }\n}\n\nimpl ValueNote {\n    pub fn new(value: Field, owner: AztecAddress) -> Self {\n        let randomness = rand();\n        let header = NoteHeader::empty();\n        ValueNote { value, owner, randomness, header }\n    }\n}\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/value-note/src/value_note.nr" }, "267": { "source": "// docs:start:pop_capsule\n#[oracle(popCapsule)]\nfn pop_capsule_oracle<N>() -> [Field; N] {}\n\n// A capsule is a \"blob\" of data that is passed to the contract through an oracle.\nunconstrained pub fn pop_capsule<N>() -> [Field; N] {\n    pop_capsule_oracle()\n}\n// docs:end:pop_capsule\n\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-contracts/contracts/slow_tree_contract/src/capsule.nr" }, "268": { "source": "// docs:start:membership_proof\n// A single inclusion proof.\n// M = N + 2\nstruct MembershipProof<N, M> {\n    index: Field,\n    value: Field,\n    sibling_path: [Field; N],\n}\n// docs:end:membership_proof\n\nfn deserialize_membership_proof<N, M>(serialized: [Field; M]) -> MembershipProof<N, M> {\n    let mut sibling_path = [0; N];\n    for i in 0..N {\n        sibling_path[i] = serialized[2 + i];\n    }\n    MembershipProof { index: serialized[0], value: serialized[1], sibling_path }\n}\n\nimpl<N, M> MembershipProof<N, M> {\n    fn serialize(self: Self) -> [Field; M] {\n        let mut serialized = [0; M];\n        serialized[0] = self.index;\n        serialized[1] = self.value;\n        for i in 0..N {\n            serialized[2 + i] = self.sibling_path[i];\n        }\n        serialized\n    }\n\n    fn deserialize(serialized: [Field; M]) -> Self {\n        deserialize_membership_proof(serialized)\n    }\n}\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-contracts/contracts/slow_tree_contract/src/types.nr" }, "269": { "source": "mod capsule;\nmod types;\n\n// This contract allow us to \"read\" public storage in private through a delayed tree.\n// More documentation need to be outlined for this properly, but there is some in \n// https://github.com/AztecProtocol/aztec-packages/issues/1291\n// This is made as a separate contract for one thing mainly. Making it simpler to use.\ncontract SlowTree {\n    use dep::aztec::protocol_types::{abis::function_selector::FunctionSelector, address::AztecAddress};\n    use dep::std::option::Option;\n    use dep::value_note::{balance_utils, utils::{increment, decrement}, value_note::ValueNote};\n    use dep::aztec::{\n        context::{PrivateContext, PublicContext, Context},\n        note::{note_header::NoteHeader, utils as note_utils},\n        state_vars::{map::Map, public_state::PublicState, set::Set},\n        protocol_types::type_serialization::FIELD_SERIALIZED_LEN\n    };\n    use dep::slow_updates_tree::{SlowMap, Leaf, SlowUpdateProof, compute_merkle_root, deserialize_slow_update_proof};\n\n    // docs:start:import_pop_capsule\n    use crate::capsule::pop_capsule;\n    // docs:end:import_pop_capsule\n    use crate::types::{MembershipProof, deserialize_membership_proof};\n\n    // docs:start:constants_and_storage\n    global TREE_HEIGHT: Field = 254;\n    global MEMBERSHIP_SIZE: Field = 256; // TREE_HEIGHT + 2\n    global UPDATE_SIZE: Field = 512; // TREE_HEIGHT * 2 + 4\n\n    global EMPTY_ROOT: Field = 5785871043333994658400733180052743689641713274194136017445890613179954325976;\n\n    struct Storage {\n        trees: Map<Field, SlowMap<TREE_HEIGHT, UPDATE_SIZE>>,\n    }\n    // docs:end:constants_and_storage\n\n    #[aztec(private)]\n    fn constructor() {}\n    // docs:start:initialize\n    #[aztec(public)]\n    fn initialize() {\n        storage.trees.at(context.msg_sender().to_field()).initialize(EMPTY_ROOT);\n    }\n    // docs:end:initialize\n    // docs:start:read_at_pub\n    #[aztec(public)]\n    fn read_at_pub(key: Field) -> Field {\n        storage.trees.at(context.msg_sender().to_field()).read_at(key)\n    }\n    // docs:end:read_at_pub\n    #[aztec(public)]\n    fn read_leaf_at_pub(key: Field) -> Leaf {\n        storage.trees.at(context.msg_sender().to_field()).read_leaf_at(key)\n    }\n    // docs:start:read_at_private\n    #[aztec(private)]\n    fn read_at(index: Field) -> Field {\n        // docs:start:pop_capsule\n        let fields = pop_capsule();\n        // docs:end:pop_capsule\n        let p: MembershipProof<TREE_HEIGHT, MEMBERSHIP_SIZE> = deserialize_membership_proof(fields);\n        assert(index == p.index, \"Index does not match expected\");\n\n        let expected_root = compute_merkle_root(p.value, p.index, p.sibling_path);\n        let selector = FunctionSelector::from_signature(\"_assert_current_root(Field,Field)\");\n        context.call_public_function(\n            context.this_address(),\n            selector,\n            [context.msg_sender().to_field(), expected_root]\n        );\n\n        p.value\n    }\n    // docs:end:read_at_private\n    // docs:start:assert_current_root\n    #[aztec(public)]\n    internal fn _assert_current_root(caller: Field, expected: Field) {\n        let root = storage.trees.at(caller).current_root();\n        assert(root == expected, \"Root does not match expected\");\n    }\n    // docs:end:assert_current_root\n\n    // docs:start:update_at_pub\n    #[aztec(public)]\n    fn update_at_public(p: SlowUpdateProof<TREE_HEIGHT, UPDATE_SIZE>) {\n        storage.trees.at(context.msg_sender().to_field()).update_at(p);\n    }\n    // docs:end:update_at_pub\n    // docs:start:update_at_private\n    #[aztec(private)]\n    fn update_at_private(index: Field, new_value: Field) {\n        let fields = pop_capsule();\n        let p: SlowUpdateProof<TREE_HEIGHT, UPDATE_SIZE> = deserialize_slow_update_proof(fields);\n        assert(index == p.index, \"Index does not match expected\");\n        assert(new_value == p.new_value, \"New value does not match expected\");\n\n        // We compute the root before.\n        let before_root = compute_merkle_root(p.before.value, p.index, p.before.sibling_path);\n        let after_root = compute_merkle_root(p.after.value, p.index, p.after.sibling_path);\n        let new_after_root = compute_merkle_root(p.new_value, p.index, p.after.sibling_path);\n\n        let selector = FunctionSelector::from_signature(\"_update(Field,Field,Field,Field,Field,Field)\");\n        context.call_public_function(\n            context.this_address(),\n            selector,\n            [\n            context.msg_sender().to_field(),\n            p.index,\n            p.new_value,\n            before_root,\n            after_root,\n            new_after_root\n        ]\n        );\n    }\n    // docs:end:update_at_private\n    // docs:start:_update\n    #[aztec(public)]\n    internal fn _update(\n        caller: Field,\n        index: Field,\n        new_value: Field,\n        before: Field,\n        after: Field,\n        new_root: Field\n    ) {\n        let current_root = storage.trees.at(caller).current_root();\n        let after_root = storage.trees.at(caller).read_root().after;\n\n        assert(current_root == before, \"Before root does not match expected\");\n        assert(after_root == after, \"After root does not match expected\");\n\n        storage.trees.at(caller).update_unsafe_at(index, new_value, new_root);\n    }\n    // docs:end:_update\n    unconstrained fn un_read_leaf_at(address: AztecAddress, key: Field) -> pub Leaf {\n        storage.trees.at(address.to_field()).read_leaf_at(key)\n    }\n\n    unconstrained fn un_read_root(address: AztecAddress) -> pub Leaf {\n        storage.trees.at(address.to_field()).read_root()\n    }\n}\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/noir-contracts/contracts/slow_tree_contract/src/main.nr" }, "271": { "source": "// Subset of the MembershipProof that is needed for the slow update.\nstruct SlowUpdateInner<N> {\n  value: Field, // Value only really used for the private flow though :thinking:\n  sibling_path: [Field; N],\n}\n\n// The slow update proof. Containing two merkle paths\n// One for the before and one for the after trees.\n// M = 2 * N + 4\nstruct SlowUpdateProof<N, M> {\n  index: Field,\n  new_value: Field,\n  before: SlowUpdateInner<N>,\n  after: SlowUpdateInner<N>,\n}\n\npub fn deserialize_slow_update_proof<N, M>(serialized: [Field; M]) -> SlowUpdateProof<N, M> {\n    SlowUpdateProof::deserialize(serialized)\n}\n\nimpl<N, M> SlowUpdateProof<N, M> {\n    pub fn serialize(self: Self) -> [Field; M] {\n        let mut serialized = [0; M];\n        serialized[0] = self.index;\n        serialized[1] = self.new_value;\n        serialized[2] = self.before.value;\n        serialized[3 + N] = self.after.value;\n\n        for i in 0..N {\n            serialized[3 + i] = self.before.sibling_path[i];\n            serialized[4 + N + i] = self.after.sibling_path[i];\n        }\n        serialized\n    }\n\n    pub fn deserialize(serialized: [Field; M]) -> Self {\n        let mut before_sibling_path = [0; N];\n        let mut after_sibling_path = [0; N];\n\n        for i in 0..N {\n            before_sibling_path[i] = serialized[3 + i];\n            after_sibling_path[i] = serialized[4 + N + i];\n        }\n\n        Self {\n            index: serialized[0],\n            new_value: serialized[1],\n            before: SlowUpdateInner { value: serialized[2], sibling_path: before_sibling_path },\n            after: SlowUpdateInner { value: serialized[3 + N], sibling_path: after_sibling_path }\n        }\n    }\n}\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/slow-updates-tree/src/slow_update_proof.nr" }, "272": { "source": "use dep::aztec::protocol_types::traits::{Serialize, Deserialize};\n\n// A leaf in the tree.\nstruct Leaf {\n  next_change: Field,\n  before: Field,\n  after: Field,\n}\n\nimpl Serialize<3> for Leaf {\n  fn serialize(leaf: Leaf) -> [Field; 3] {\n      [leaf.next_change, leaf.before, leaf.after]\n  }\n}\n\nimpl Deserialize<3> for Leaf {\n  fn deserialize(serialized: [Field; 3]) -> Leaf {\n      Leaf { next_change: serialized[0], before: serialized[1], after: serialized[2] }\n  }\n}\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/slow-updates-tree/src/leaf.nr" }, "273": { "source": "use crate::{\n  leaf::Leaf,\n  slow_update_proof::SlowUpdateProof,\n};\nuse dep::aztec::{\n  context::Context,\n  oracle::storage::{storage_read, storage_write},\n  protocol_types::traits::{Serialize, Deserialize},\n};\nuse dep::std::hash::pedersen_hash;\nuse dep::std::merkle::compute_merkle_root;\n\n// The epoch length is just a random number for now.\nglobal EPOCH_LENGTH: u120 = 100;\n\nfn compute_next_change(time: Field) -> Field {\n    ((time as u120 / EPOCH_LENGTH + 1) * EPOCH_LENGTH) as Field\n}\n\n// The simple slow map which stores a sparse tree\nstruct SlowMap<N,M> {\n  context: Context,\n  storage_slot: Field\n}\n\nimpl<N,M> SlowMap<N,M> {\n  pub fn new(\n    context: Context,\n    storage_slot: Field\n  ) -> Self {\n    assert(storage_slot != 0, \"Storage slot 0 not allowed. Storage slots must start from 1.\");\n    Self {\n      context,\n      storage_slot,\n    }\n  }\n\n  pub fn read_root(self: Self) -> Leaf {\n    let fields = storage_read(self.storage_slot);\n    Leaf::deserialize(fields)\n  }\n\n  // Beware that the initial root could include much state that is not shown by the public storage!\n  pub fn initialize(self: Self, initial_root: Field) {\n    let mut root_object = self.read_root();\n    assert(root_object.next_change == 0, \"cannot initialize twice\");\n    root_object = Leaf {\n      next_change: 0xffffffffffffffffffffffffffffff,\n      before: initial_root,\n      after: initial_root,\n    };\n    let fields = root_object.serialize();\n    storage_write(self.storage_slot, fields);\n  }\n\n  // Reads the \"CURRENT\" value of the root\n  pub fn current_root(self: Self) -> Field {\n    let time = self.context.public.unwrap().timestamp() as u120;\n    let root_object = self.read_root();\n    if time <= root_object.next_change as u120 {\n      root_object.before\n    } else {\n      root_object.after\n    }\n  }\n\n  // docs:start:read_leaf_at\n  pub fn read_leaf_at(self: Self, key: Field) -> Leaf {\n    let derived_storage_slot = pedersen_hash([self.storage_slot, key]);\n    let fields = storage_read(derived_storage_slot);\n    Leaf::deserialize(fields)\n  }\n  // docs:end:read_leaf_at\n\n  // docs:start:read_at\n  // Reads the \"CURRENT\" value of the leaf\n  pub fn read_at(self: Self, key: Field) -> Field {\n    let time = self.context.public.unwrap().timestamp() as u120;\n    let leaf = self.read_leaf_at(key);\n    if time <= leaf.next_change as u120 {\n      leaf.before\n    } else {\n      leaf.after\n    }\n  }\n  // docs:end:read_at\n\n  // Will update values in the \"AFTER\" tree\n  // - updates the leaf and root to follow current values, moving from after to before if \n  //  needed.\n  // - checks that the provided merkle paths match state values\n  // - update the leaf and compute the net root\n  // Should only be used when updates from public are desired, since the hashing will be\n  // costly since done by sequencer.\n  pub fn update_at(self: Self, p: SlowUpdateProof<N, M>) {\n    // The calling function should ensure that the index is within the tree.\n    // This must be done separately to ensure we are not constraining too tight here.\n\n    let time = self.context.public.unwrap().timestamp() as u120;\n    let next_change = compute_next_change(time as Field);\n\n    let mut root = self.read_root();\n    let mut leaf = self.read_leaf_at(p.index);\n\n    // Move leaf if needed\n    if time > leaf.next_change as u120 {\n      leaf.before = leaf.after; \n    }\n    \n    // Move root if needed\n    if time > root.next_change as u120 {\n      root.before = root.after;\n    }\n\n    // Ensures that when before is active, it is not altered by this update\n    assert(\n      root.before == compute_merkle_root(leaf.before, p.index, p.before.sibling_path), \n      \"Before root don't match\"\n    );\n\n    // Ensures that the provided sibling path is valid for the CURRENT \"after\" tree.\n    // Without this check, someone could provide a sibling path for a different tree\n    // and update the entire \"after\" tree at once, causing it to be out of sync with leaf storage.\n    assert(\n      root.after == compute_merkle_root(leaf.after, p.index, p.after.sibling_path), \n      \"After root don't match\"\n    );\n\n    // Update the leaf \n    leaf.after = p.new_value;\n    leaf.next_change = next_change;\n\n    // Update the after root\n    root.after = compute_merkle_root(leaf.after, p.index, p.after.sibling_path);\n    root.next_change = next_change;\n\n    self.update_unsafe(p.index, leaf, root);\n  }\n\n  // A variation of `update_at` that skips the merkle-membership checks.\n  // To be used by a contract which has already checked the merkle-membership.\n  // This allows us to check the merkle-memberships in private and then update\n  // in public, limiting the cost of the update.\n  pub fn update_unsafe_at(self: Self, index: Field, leaf_value: Field, new_root: Field) {\n    // User must ensure that the checks from update_at is performed for safety\n    let time = self.context.public.unwrap().timestamp() as u120;\n    let next_change = compute_next_change(time as Field);\n\n    let mut root = self.read_root();\n    let mut leaf = self.read_leaf_at(index);\n\n    // Move leaf if needed\n    if time > leaf.next_change as u120 {\n      leaf.before = leaf.after; \n    }\n    \n    // Move root if needed\n    if time > root.next_change as u120 {\n      root.before = root.after;\n    }\n\n    // Update the leaf \n    leaf.after = leaf_value;\n    leaf.next_change = next_change;\n    \n    // Update the root\n    root.after = new_root;\n    root.next_change = next_change;\n\n    self.update_unsafe(index, leaf, root);\n  }\n\n  // Updates the value in the in storage with no checks.\n  fn update_unsafe(self: Self, index: Field, leaf: Leaf, root: Leaf) {\n    let derived_storage_slot = pedersen_hash([self.storage_slot, index]);\n    let fields = leaf.serialize();\n    storage_write(derived_storage_slot, fields);\n    \n    let fields = root.serialize();\n    storage_write(self.storage_slot, fields);\n  }\n}\n\n/*pub fn compute_merkle_root<N>(leaf: Field, index: Field, hash_path: [Field; N]) -> Field {\n    let n = hash_path.len();\n    let index_bits = index.to_le_bits(n as u32);\n    let mut current = leaf;\n    for i in 0..n {\n        let path_bit = index_bits[i] as bool;\n        let (hash_left, hash_right) = if path_bit {\n            (hash_path[i], current)\n        } else {\n            (current, hash_path[i])\n        };\n    current = pedersen_hash([hash_left, hash_right]);\n    };\n    current\n}\n*/\n", "path": "/Users/jack-sw/Codes/aztec-packages/noir-projects/aztec-nr/slow-updates-tree/src/slow_map.nr" } } }
